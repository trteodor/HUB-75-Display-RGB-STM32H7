
WYSWTLACZ_HUB75a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e79c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c28  0800ea3c  0800ea3c  0001ea3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014664  08014664  0003407c  2**0
                  CONTENTS
  4 .ARM          00000000  08014664  08014664  0003407c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014664  08014664  0003407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014664  08014664  00024664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014668  08014668  00024668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000407c  24000000  0801466c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f25c  2400407c  080186e8  0003407c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240132d8  080186e8  000432d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003407c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034b5f  00000000  00000000  000340aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ac0  00000000  00000000  00068c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  0006e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  000700b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fc1e  00000000  00000000  00071878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233ff  00000000  00000000  000b1496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017dcb1  00000000  00000000  000d4895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00252546  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f08  00000000  00000000  0025259c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400407c 	.word	0x2400407c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ea24 	.word	0x0800ea24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004080 	.word	0x24004080
 80002dc:	0800ea24 	.word	0x0800ea24

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f043 0201 	orr.w	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	f043 0202 	orr.w	r2, r3, #2
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	60da      	str	r2, [r3, #12]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <TIM5_CallBack>:
SCR_PROCES SCR_PROCESS;
uint8_t *SedingBufor_Adr=0;
uint8_t Bufor_Send_Picker=BUFOR1;

void TIM5_CallBack()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100);
 80003c4:	4b48      	ldr	r3, [pc, #288]	; (80004e8 <TIM5_CallBack+0x128>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2264      	movs	r2, #100	; 0x64
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34

	if(HUB75_DescStruct.Mode256ColorFlag == true)
 80003cc:	4a47      	ldr	r2, [pc, #284]	; (80004ec <TIM5_CallBack+0x12c>)
 80003ce:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 80003d2:	4413      	add	r3, r2
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d07e      	beq.n	80004d8 <TIM5_CallBack+0x118>
	{
					/* 8 ticks to send each line - it should work then is one tick*/
					static uint32_t Count8Ticks;
					Count8Ticks++;
 80003da:	4b45      	ldr	r3, [pc, #276]	; (80004f0 <TIM5_CallBack+0x130>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	4a43      	ldr	r2, [pc, #268]	; (80004f0 <TIM5_CallBack+0x130>)
 80003e2:	6013      	str	r3, [r2, #0]
					if(Count8Ticks == 8)
 80003e4:	4b42      	ldr	r3, [pc, #264]	; (80004f0 <TIM5_CallBack+0x130>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b08      	cmp	r3, #8
 80003ea:	d13c      	bne.n	8000466 <TIM5_CallBack+0xa6>
					{
						Count8Ticks = 0 ;
 80003ec:	4b40      	ldr	r3, [pc, #256]	; (80004f0 <TIM5_CallBack+0x130>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]

						if(HUB75_DescStruct.ActualBCDModulationTicks > 8 )
 80003f2:	4a3e      	ldr	r2, [pc, #248]	; (80004ec <TIM5_CallBack+0x12c>)
 80003f4:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 80003f8:	4413      	add	r3, r2
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b08      	cmp	r3, #8
 80003fe:	d90b      	bls.n	8000418 <TIM5_CallBack+0x58>
						{
							HUB75_DescStruct.ActualBCDModulationTicks = 0;
 8000400:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <TIM5_CallBack+0x12c>)
 8000402:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000406:	4413      	add	r3, r2
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
							HUB75_DescStruct.ActualPickedBuffor = 0;
 800040c:	4a37      	ldr	r2, [pc, #220]	; (80004ec <TIM5_CallBack+0x12c>)
 800040e:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 8000412:	4413      	add	r3, r2
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
						}

						if(HUB75_DescStruct.ActualBCDModulationTicks == 2)
 8000418:	4a34      	ldr	r2, [pc, #208]	; (80004ec <TIM5_CallBack+0x12c>)
 800041a:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 800041e:	4413      	add	r3, r2
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d105      	bne.n	8000432 <TIM5_CallBack+0x72>
						{
							HUB75_DescStruct.ActualPickedBuffor = 1;
 8000426:	4a31      	ldr	r2, [pc, #196]	; (80004ec <TIM5_CallBack+0x12c>)
 8000428:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 800042c:	4413      	add	r3, r2
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
						}
						if(HUB75_DescStruct.ActualBCDModulationTicks == 4)
 8000432:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <TIM5_CallBack+0x12c>)
 8000434:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b04      	cmp	r3, #4
 800043e:	d105      	bne.n	800044c <TIM5_CallBack+0x8c>
						{
							HUB75_DescStruct.ActualPickedBuffor = 2;
 8000440:	4a2a      	ldr	r2, [pc, #168]	; (80004ec <TIM5_CallBack+0x12c>)
 8000442:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 8000446:	4413      	add	r3, r2
 8000448:	2202      	movs	r2, #2
 800044a:	701a      	strb	r2, [r3, #0]
						}


						HUB75_DescStruct.ActualBCDModulationTicks++;
 800044c:	4a27      	ldr	r2, [pc, #156]	; (80004ec <TIM5_CallBack+0x12c>)
 800044e:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	b2d9      	uxtb	r1, r3
 800045a:	4a24      	ldr	r2, [pc, #144]	; (80004ec <TIM5_CallBack+0x12c>)
 800045c:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000460:	4413      	add	r3, r2
 8000462:	460a      	mov	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
					}




		if( HUB75_DescStruct.ActualPickedBuffor == 0)
 8000466:	4a21      	ldr	r2, [pc, #132]	; (80004ec <TIM5_CallBack+0x12c>)
 8000468:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 800046c:	4413      	add	r3, r2
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d103      	bne.n	800047c <TIM5_CallBack+0xbc>
		{
			Send_BUF_IN_SCR( HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1 );
 8000474:	481d      	ldr	r0, [pc, #116]	; (80004ec <TIM5_CallBack+0x12c>)
 8000476:	f000 f843 	bl	8000500 <Send_BUF_IN_SCR>
 800047a:	e014      	b.n	80004a6 <TIM5_CallBack+0xe6>
		}
		else if( HUB75_DescStruct.ActualPickedBuffor == 1)
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <TIM5_CallBack+0x12c>)
 800047e:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 8000482:	4413      	add	r3, r2
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d103      	bne.n	8000492 <TIM5_CallBack+0xd2>
		{
			Send_BUF_IN_SCR( HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2 );
 800048a:	481a      	ldr	r0, [pc, #104]	; (80004f4 <TIM5_CallBack+0x134>)
 800048c:	f000 f838 	bl	8000500 <Send_BUF_IN_SCR>
 8000490:	e009      	b.n	80004a6 <TIM5_CallBack+0xe6>
		}
		else if ( HUB75_DescStruct.ActualPickedBuffor == 2)
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <TIM5_CallBack+0x12c>)
 8000494:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 8000498:	4413      	add	r3, r2
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d102      	bne.n	80004a6 <TIM5_CallBack+0xe6>
		{
			Send_BUF_IN_SCR( HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3 );
 80004a0:	4815      	ldr	r0, [pc, #84]	; (80004f8 <TIM5_CallBack+0x138>)
 80004a2:	f000 f82d 	bl	8000500 <Send_BUF_IN_SCR>
		}



		/*UNUSED NOW*/
		HUB75_DescStruct.ActualPushedLine++;
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <TIM5_CallBack+0x12c>)
 80004a8:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 80004ac:	4413      	add	r3, r2
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	490e      	ldr	r1, [pc, #56]	; (80004ec <TIM5_CallBack+0x12c>)
 80004b4:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 80004b8:	440b      	add	r3, r1
 80004ba:	601a      	str	r2, [r3, #0]
		if(HUB75_DescStruct.ActualPushedLine > 8)
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <TIM5_CallBack+0x12c>)
 80004be:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 80004c2:	4413      	add	r3, r2
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b08      	cmp	r3, #8
 80004c8:	dd0b      	ble.n	80004e2 <TIM5_CallBack+0x122>
		{
			HUB75_DescStruct.ActualPushedLine= 0;
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <TIM5_CallBack+0x12c>)
 80004cc:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 80004d0:	4413      	add	r3, r2
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Send_BUF_IN_SCR( SedingBufor_Adr );
	}
}
 80004d6:	e004      	b.n	80004e2 <TIM5_CallBack+0x122>
		Send_BUF_IN_SCR( SedingBufor_Adr );
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <TIM5_CallBack+0x13c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f80f 	bl	8000500 <Send_BUF_IN_SCR>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	24013278 	.word	0x24013278
 80004ec:	2400a32c 	.word	0x2400a32c
 80004f0:	24007bb4 	.word	0x24007bb4
 80004f4:	2400ad22 	.word	0x2400ad22
 80004f8:	2400b718 	.word	0x2400b718
 80004fc:	24007bac 	.word	0x24007bac

08000500 <Send_BUF_IN_SCR>:
void Send_BUF_IN_SCR(uint8_t *SendBuffer)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

	 if(LINIA>7)
 8000508:	4b8c      	ldr	r3, [pc, #560]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b07      	cmp	r3, #7
 800050e:	dd03      	ble.n	8000518 <Send_BUF_IN_SCR+0x18>
	 {
		  LINIA=-1;
 8000510:	4b8a      	ldr	r3, [pc, #552]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000512:	f04f 32ff 	mov.w	r2, #4294967295
 8000516:	601a      	str	r2, [r3, #0]
	 }
	 LINIA++;
 8000518:	4b88      	ldr	r3, [pc, #544]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a87      	ldr	r2, [pc, #540]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000520:	6013      	str	r3, [r2, #0]

		switch(LINIA) {
 8000522:	4b86      	ldr	r3, [pc, #536]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b07      	cmp	r3, #7
 8000528:	f200 8104 	bhi.w	8000734 <Send_BUF_IN_SCR+0x234>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <Send_BUF_IN_SCR+0x34>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	080006f9 	.word	0x080006f9
 8000538:	080006bd 	.word	0x080006bd
 800053c:	08000681 	.word	0x08000681
 8000540:	08000645 	.word	0x08000645
 8000544:	08000609 	.word	0x08000609
 8000548:	080005cd 	.word	0x080005cd
 800054c:	08000591 	.word	0x08000591
 8000550:	08000555 	.word	0x08000555
					case 7: //7
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+(  LINIA *300  ));
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800055c:	fb02 f303 	mul.w	r3, r2, r3
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4619      	mov	r1, r3
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 800056a:	f008 febb 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4874      	ldr	r0, [pc, #464]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000574:	f007 ffba 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4871      	ldr	r0, [pc, #452]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 800057e:	f007 ffb5 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	486e      	ldr	r0, [pc, #440]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 800058a:	f007 ffaf 	bl	80084ec <HAL_GPIO_WritePin>

						break;
 800058e:	e0d1      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 6: //6
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300 ));
 8000590:	4b6a      	ldr	r3, [pc, #424]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4619      	mov	r1, r3
 80005a4:	4866      	ldr	r0, [pc, #408]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 80005a6:	f008 fe9d 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4865      	ldr	r0, [pc, #404]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80005b0:	f007 ff9c 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	4862      	ldr	r0, [pc, #392]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80005ba:	f007 ff97 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	485f      	ldr	r0, [pc, #380]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80005c6:	f007 ff91 	bl	80084ec <HAL_GPIO_WritePin>

						break;
 80005ca:	e0b3      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 5: //5
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80005cc:	4b5b      	ldr	r3, [pc, #364]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005d4:	fb02 f303 	mul.w	r3, r2, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4619      	mov	r1, r3
 80005e0:	4857      	ldr	r0, [pc, #348]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 80005e2:	f008 fe7f 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	4856      	ldr	r0, [pc, #344]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80005ec:	f007 ff7e 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	4853      	ldr	r0, [pc, #332]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80005f6:	f007 ff79 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	4850      	ldr	r0, [pc, #320]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000602:	f007 ff73 	bl	80084ec <HAL_GPIO_WritePin>

						break;
 8000606:	e095      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 4:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000608:	4b4c      	ldr	r3, [pc, #304]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000610:	fb02 f303 	mul.w	r3, r2, r3
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4619      	mov	r1, r3
 800061c:	4848      	ldr	r0, [pc, #288]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 800061e:	f008 fe61 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4847      	ldr	r0, [pc, #284]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000628:	f007 ff60 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4844      	ldr	r0, [pc, #272]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000632:	f007 ff5b 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4841      	ldr	r0, [pc, #260]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 800063e:	f007 ff55 	bl	80084ec <HAL_GPIO_WritePin>


						break;
 8000642:	e077      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 3:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4619      	mov	r1, r3
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 800065a:	f008 fe43 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4838      	ldr	r0, [pc, #224]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000664:	f007 ff42 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	4835      	ldr	r0, [pc, #212]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 800066e:	f007 ff3d 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	4832      	ldr	r0, [pc, #200]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 800067a:	f007 ff37 	bl	80084ec <HAL_GPIO_WritePin>


						break;
 800067e:	e059      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 2:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000680:	4b2e      	ldr	r3, [pc, #184]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4619      	mov	r1, r3
 8000694:	482a      	ldr	r0, [pc, #168]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 8000696:	f008 fe25 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4829      	ldr	r0, [pc, #164]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80006a0:	f007 ff24 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	4826      	ldr	r0, [pc, #152]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80006aa:	f007 ff1f 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	4823      	ldr	r0, [pc, #140]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80006b6:	f007 ff19 	bl	80084ec <HAL_GPIO_WritePin>


						break;
 80006ba:	e03b      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 1:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4619      	mov	r1, r3
 80006d0:	481b      	ldr	r0, [pc, #108]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 80006d2:	f008 fe07 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80006dc:	f007 ff06 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80006e6:	f007 ff01 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	4814      	ldr	r0, [pc, #80]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 80006f2:	f007 fefb 	bl	80084ec <HAL_GPIO_WritePin>
						break;
 80006f6:	e01d      	b.n	8000734 <Send_BUF_IN_SCR+0x234>
					case 0:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <Send_BUF_IN_SCR+0x23c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <Send_BUF_IN_SCR+0x240>)
 800070e:	f008 fde9 	bl	80092e4 <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000718:	f007 fee8 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 8000722:	f007 fee3 	bl	80084ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <Send_BUF_IN_SCR+0x244>)
 800072e:	f007 fedd 	bl	80084ec <HAL_GPIO_WritePin>
						break;
 8000732:	bf00      	nop
					}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	24007ba0 	.word	0x24007ba0
 8000740:	240131a4 	.word	0x240131a4
 8000744:	58020800 	.word	0x58020800

08000748 <PrepareFullBuffer>:
	HUB75_DescStruct.Mode256ColorFlag = true;
	PrepareFull256Color_Buffer(BMP);
}

void PrepareFullBuffer(uint8_t *BMP,uint8_t *OUT_B)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
for(int i=0; i<2500; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e007      	b.n	8000768 <PrepareFullBuffer+0x20>
{
	OUT_B[i]=0;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
for(int i=0; i<2500; i++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800076e:	4293      	cmp	r3, r2
 8000770:	ddf2      	ble.n	8000758 <PrepareFullBuffer+0x10>
}
PrepareRow(BMP,OUT_B+(0*300),7);
 8000772:	2207      	movs	r2, #7
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f83c 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(1*300),6);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000782:	2206      	movs	r2, #6
 8000784:	4619      	mov	r1, r3
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f834 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(2*300),5);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000792:	2205      	movs	r2, #5
 8000794:	4619      	mov	r1, r3
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f82c 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(3*300),4);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80007a2:	2204      	movs	r2, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f824 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(4*300),3);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80007b2:	2203      	movs	r2, #3
 80007b4:	4619      	mov	r1, r3
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f81c 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(5*300),2);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80007c2:	2202      	movs	r2, #2
 80007c4:	4619      	mov	r1, r3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f814 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(6*300),1);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f80c 	bl	80007f4 <PrepareRow>
PrepareRow(BMP,OUT_B+(7*300),0);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f603 0334 	addw	r3, r3, #2100	; 0x834
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f804 	bl	80007f4 <PrepareRow>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <PrepareRow>:
		}
	}
}

void PrepareRow(uint8_t *BMP, uint8_t *OUT_B, uint8_t ROW)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]

	PrepareRowPart ( BMP+32+ (0*64) +(ROW*64), ( OUT_B+(2*16)) );
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	019b      	lsls	r3, r3, #6
 8000806:	3320      	adds	r3, #32
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	441a      	add	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3320      	adds	r3, #32
 8000810:	4619      	mov	r1, r3
 8000812:	4610      	mov	r0, r2
 8000814:	f000 f8b3 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+32+ (8*64) +(ROW*64), ( OUT_B+(3*16)) );
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	019b      	lsls	r3, r3, #6
 800081c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	441a      	add	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	3330      	adds	r3, #48	; 0x30
 8000828:	4619      	mov	r1, r3
 800082a:	4610      	mov	r0, r2
 800082c:	f000 f8a7 	bl	800097e <PrepareRowPart>

	PrepareRowPart ( BMP+32+ (16*64) +(ROW*64), ( OUT_B+(10*16)) );
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	019b      	lsls	r3, r3, #6
 8000834:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	441a      	add	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	33a0      	adds	r3, #160	; 0xa0
 8000840:	4619      	mov	r1, r3
 8000842:	4610      	mov	r0, r2
 8000844:	f000 f89b 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+32+ (24*64) +(ROW*64), ( OUT_B+(11*16)) ); // srodek mlodszy
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	441a      	add	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	33b0      	adds	r3, #176	; 0xb0
 8000858:	4619      	mov	r1, r3
 800085a:	4610      	mov	r0, r2
 800085c:	f000 f88f 	bl	800097e <PrepareRowPart>

	PrepareRowPart ( BMP+16+ (0*64) +(ROW*64), ( OUT_B+(4*16)) );
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	019b      	lsls	r3, r3, #6
 8000864:	3310      	adds	r3, #16
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	441a      	add	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3340      	adds	r3, #64	; 0x40
 800086e:	4619      	mov	r1, r3
 8000870:	4610      	mov	r0, r2
 8000872:	f000 f884 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+16+ (8*64) +(ROW*64), ( OUT_B+(5*16)) );
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	441a      	add	r2, r3
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3350      	adds	r3, #80	; 0x50
 8000886:	4619      	mov	r1, r3
 8000888:	4610      	mov	r0, r2
 800088a:	f000 f878 	bl	800097e <PrepareRowPart>

	PrepareRowPart ( BMP+16+ (16*64) +(ROW*64), ( OUT_B+(12*16)) );
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	441a      	add	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	33c0      	adds	r3, #192	; 0xc0
 800089e:	4619      	mov	r1, r3
 80008a0:	4610      	mov	r0, r2
 80008a2:	f000 f86c 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+16+ (24*64) +(ROW*64), ( OUT_B+(13*16)) ); // srodek starszy
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	019b      	lsls	r3, r3, #6
 80008aa:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	441a      	add	r2, r3
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	33d0      	adds	r3, #208	; 0xd0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4610      	mov	r0, r2
 80008ba:	f000 f860 	bl	800097e <PrepareRowPart>


	PrepareRowPart ( BMP+48+ (0*64) +(ROW*64), ( OUT_B+(0*16)) );
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	3330      	adds	r3, #48	; 0x30
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f857 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+48+ (8*64) +(ROW*64), ( OUT_B+(1*16)) );
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	019b      	lsls	r3, r3, #6
 80008d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	441a      	add	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3310      	adds	r3, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4610      	mov	r0, r2
 80008e4:	f000 f84b 	bl	800097e <PrepareRowPart>

	PrepareRowPart ( BMP+48+ (16*64) +(ROW*64), ( OUT_B+(8*16)) );
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	019b      	lsls	r3, r3, #6
 80008ec:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	441a      	add	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3380      	adds	r3, #128	; 0x80
 80008f8:	4619      	mov	r1, r3
 80008fa:	4610      	mov	r0, r2
 80008fc:	f000 f83f 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+48+ (24*64) +(ROW*64), ( OUT_B+(9*16)) ); // najmlodszy
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	019b      	lsls	r3, r3, #6
 8000904:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	441a      	add	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3390      	adds	r3, #144	; 0x90
 8000910:	4619      	mov	r1, r3
 8000912:	4610      	mov	r0, r2
 8000914:	f000 f833 	bl	800097e <PrepareRowPart>


	PrepareRowPart ( BMP+ (0*64) +(ROW*64), ( OUT_B+(6*16)) );
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	441a      	add	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	3360      	adds	r3, #96	; 0x60
 8000926:	4619      	mov	r1, r3
 8000928:	4610      	mov	r0, r2
 800092a:	f000 f828 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+ (8*64)  +(ROW*64), ( OUT_B+(7*16)) );
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	441a      	add	r2, r3
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3370      	adds	r3, #112	; 0x70
 800093e:	4619      	mov	r1, r3
 8000940:	4610      	mov	r0, r2
 8000942:	f000 f81c 	bl	800097e <PrepareRowPart>

	PrepareRowPart ( BMP+ (16*64) +(ROW*64), ( OUT_B+(14*16)) );
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	441a      	add	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	33e0      	adds	r3, #224	; 0xe0
 8000956:	4619      	mov	r1, r3
 8000958:	4610      	mov	r0, r2
 800095a:	f000 f810 	bl	800097e <PrepareRowPart>
	PrepareRowPart ( BMP+ (24*64) +(ROW*64), ( OUT_B+(15*16)) );  //najstarszy
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	441a      	add	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	33f0      	adds	r3, #240	; 0xf0
 800096e:	4619      	mov	r1, r3
 8000970:	4610      	mov	r0, r2
 8000972:	f000 f804 	bl	800097e <PrepareRowPart>
																						//kurde gdyby algorytm na to znalezc :/
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <PrepareRowPart>:
	PrepareAndGetWithBritnessRowPart255Color ( BMP+ (24*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(15*16)) , BitColorBrightnessMask  );  //najstarszy
																						//kurde gdyby algorytm na to znalezc :/
}

void PrepareRowPart(uint8_t *BMP,uint8_t *OUT_B)
{
 800097e:	b480      	push	{r7}
 8000980:	b089      	sub	sp, #36	; 0x24
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
int HIGHER_BIT=0,LOWER_BIT=0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]

uint8_t NR_PIXLA=0;
 8000990:	2300      	movs	r3, #0
 8000992:	77fb      	strb	r3, [r7, #31]
int adr_ink=16;
 8000994:	2310      	movs	r3, #16
 8000996:	61bb      	str	r3, [r7, #24]

for(int i=0; i<4; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e267      	b.n	8000e6e <PrepareRowPart+0x4f0>
{
	for(int NR_BIT=0; NR_BIT<8; NR_BIT++) //ten Numer bit sie plusuje i w tym forze wiec 2x
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	e25d      	b.n	8000e60 <PrepareRowPart+0x4e2>
	{
		LOWER_BIT=0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
		HIGHER_BIT=0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
		HIGHER_BIT=(BMP[NR_PIXLA] & 0xF0)>>4;
 80009ac:	7ffb      	ldrb	r3, [r7, #31]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	60fb      	str	r3, [r7, #12]
		LOWER_BIT= (BMP[NR_PIXLA]  & 0x0F);
 80009ba:	7ffb      	ldrb	r3, [r7, #31]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	60bb      	str	r3, [r7, #8]
		NR_PIXLA++;
 80009c8:	7ffb      	ldrb	r3, [r7, #31]
 80009ca:	3301      	adds	r3, #1
 80009cc:	77fb      	strb	r3, [r7, #31]
		adr_ink--;
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
		//Higer
		if(HIGHER_BIT==0) goto Lower;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8119 	beq.w	8000c0e <PrepareRowPart+0x290>

		if( HIGHER_BIT==  White || HIGHER_BIT== White2)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d002      	beq.n	80009e8 <PrepareRowPart+0x6a>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b07      	cmp	r3, #7
 80009e6:	d121      	bne.n	8000a2c <PrepareRowPart+0xae>
		{
			OUT_B[adr_ink ]|=1 << (0);
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	440b      	add	r3, r1
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f042 0202 	orr.w	r2, r2, #2
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	440b      	add	r3, r1
 8000a22:	f042 0204 	orr.w	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000a2a:	e0f3      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Black || HIGHER_BIT== Black2 )
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <PrepareRowPart+0xba>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d118      	bne.n	8000a6a <PrepareRowPart+0xec>
		{
			OUT_B[adr_ink ]|=0 << (0);
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	440b      	add	r3, r1
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	441a      	add	r2, r3
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	441a      	add	r2, r3
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	6839      	ldr	r1, [r7, #0]
 8000a62:	440b      	add	r3, r1
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000a68:	e0d4      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Green || HIGHER_BIT== Green2 || HIGHER_BIT== Green3)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b0a      	cmp	r3, #10
 8000a6e:	d005      	beq.n	8000a7c <PrepareRowPart+0xfe>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d002      	beq.n	8000a7c <PrepareRowPart+0xfe>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	d11b      	bne.n	8000ab4 <PrepareRowPart+0x136>
		{
			OUT_B[adr_ink ]|=0 << (0);
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	441a      	add	r2, r3
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	440b      	add	r3, r1
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	440b      	add	r3, r1
 8000a9a:	f042 0202 	orr.w	r2, r2, #2
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	440b      	add	r3, r1
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000ab2:	e0af      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Red)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b09      	cmp	r3, #9
 8000ab8:	d11b      	bne.n	8000af2 <PrepareRowPart+0x174>
		{
			OUT_B[adr_ink ]|=1 << (0);
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	6839      	ldr	r1, [r7, #0]
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f042 0201 	orr.w	r2, r2, #1
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	440b      	add	r3, r1
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	6839      	ldr	r1, [r7, #0]
 8000aea:	440b      	add	r3, r1
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000af0:	e090      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Blue  || HIGHER_BIT==Blue3)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d002      	beq.n	8000afe <PrepareRowPart+0x180>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d11b      	bne.n	8000b36 <PrepareRowPart+0x1b8>
		{
			OUT_B[adr_ink ]|=0 << (0);
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	441a      	add	r2, r3
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	440b      	add	r3, r1
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	441a      	add	r2, r3
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	440b      	add	r3, r1
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	6839      	ldr	r1, [r7, #0]
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f042 0204 	orr.w	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000b34:	e06e      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if( HIGHER_BIT == Purple || HIGHER_BIT==Purple2 || HIGHER_BIT==Purple3 )
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d005      	beq.n	8000b48 <PrepareRowPart+0x1ca>
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	d002      	beq.n	8000b48 <PrepareRowPart+0x1ca>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b0d      	cmp	r3, #13
 8000b46:	d11e      	bne.n	8000b86 <PrepareRowPart+0x208>
		{
			OUT_B[adr_ink ]|=1 << (0);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	440b      	add	r3, r1
 8000b56:	f042 0201 	orr.w	r2, r2, #1
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	441a      	add	r2, r3
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	6839      	ldr	r1, [r7, #0]
 8000b68:	440b      	add	r3, r1
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	6839      	ldr	r1, [r7, #0]
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f042 0204 	orr.w	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000b84:	e046      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Yellow /*|| HIGHER_BIT== Yellow2*/ )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b0b      	cmp	r3, #11
 8000b8a:	d11e      	bne.n	8000bca <PrepareRowPart+0x24c>
		{
			OUT_B[adr_ink ]|=1 << (0);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	440b      	add	r3, r1
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781a      	ldrb	r2, [r3, #0]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	440b      	add	r3, r1
 8000bb0:	f042 0202 	orr.w	r2, r2, #2
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	440b      	add	r3, r1
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000bc8:	e024      	b.n	8000c14 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== (Azure ) )
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b0e      	cmp	r3, #14
 8000bce:	d120      	bne.n	8000c12 <PrepareRowPart+0x294>
		{
			OUT_B[adr_ink ]|=0 << (0);
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	441a      	add	r2, r3
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	6839      	ldr	r1, [r7, #0]
 8000bda:	440b      	add	r3, r1
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	440b      	add	r3, r1
 8000bee:	f042 0202 	orr.w	r2, r2, #2
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	440b      	add	r3, r1
 8000c04:	f042 0204 	orr.w	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000c0c:	e002      	b.n	8000c14 <PrepareRowPart+0x296>
		if(HIGHER_BIT==0) goto Lower;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <PrepareRowPart+0x296>
		}

		//Lower
		Lower:
 8000c12:	bf00      	nop

		NR_BIT++;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	3301      	adds	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
		if(LOWER_BIT==0) goto END_LOOP;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 8119 	beq.w	8000e54 <PrepareRowPart+0x4d6>

		if( LOWER_BIT==  White || LOWER_BIT==  White2  )
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d002      	beq.n	8000c2e <PrepareRowPart+0x2b0>
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d121      	bne.n	8000c72 <PrepareRowPart+0x2f4>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	6839      	ldr	r1, [r7, #0]
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f042 0210 	orr.w	r2, r2, #16
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	6839      	ldr	r1, [r7, #0]
 8000c50:	440b      	add	r3, r1
 8000c52:	f042 0220 	orr.w	r2, r2, #32
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	440b      	add	r3, r1
 8000c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000c70:	e0f3      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Black || LOWER_BIT==Black2)
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <PrepareRowPart+0x300>
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d118      	bne.n	8000cb0 <PrepareRowPart+0x332>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	441a      	add	r2, r3
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	6839      	ldr	r1, [r7, #0]
 8000c88:	440b      	add	r3, r1
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	441a      	add	r2, r3
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	440b      	add	r3, r1
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	441a      	add	r2, r3
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6839      	ldr	r1, [r7, #0]
 8000ca8:	440b      	add	r3, r1
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000cae:	e0d4      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Green || LOWER_BIT==Green2 || LOWER_BIT==Green3)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d005      	beq.n	8000cc2 <PrepareRowPart+0x344>
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d002      	beq.n	8000cc2 <PrepareRowPart+0x344>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d11b      	bne.n	8000cfa <PrepareRowPart+0x37c>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	441a      	add	r2, r3
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	440b      	add	r3, r1
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	440b      	add	r3, r1
 8000ce0:	f042 0220 	orr.w	r2, r2, #32
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	441a      	add	r2, r3
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	6839      	ldr	r1, [r7, #0]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000cf8:	e0af      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Red)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	d11b      	bne.n	8000d38 <PrepareRowPart+0x3ba>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	6839      	ldr	r1, [r7, #0]
 8000d0c:	440b      	add	r3, r1
 8000d0e:	f042 0210 	orr.w	r2, r2, #16
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	441a      	add	r2, r3
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6839      	ldr	r1, [r7, #0]
 8000d20:	440b      	add	r3, r1
 8000d22:	7812      	ldrb	r2, [r2, #0]
 8000d24:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	441a      	add	r2, r3
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	440b      	add	r3, r1
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000d36:	e090      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Blue ||  LOWER_BIT==Blue3)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	2b0c      	cmp	r3, #12
 8000d3c:	d002      	beq.n	8000d44 <PrepareRowPart+0x3c6>
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d11b      	bne.n	8000d7c <PrepareRowPart+0x3fe>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	441a      	add	r2, r3
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	440b      	add	r3, r1
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	441a      	add	r2, r3
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	440b      	add	r3, r1
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	440b      	add	r3, r1
 8000d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000d7a:	e06e      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Purple || LOWER_BIT==Purple2 || LOWER_BIT==Purple3)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <PrepareRowPart+0x410>
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d002      	beq.n	8000d8e <PrepareRowPart+0x410>
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2b0d      	cmp	r3, #13
 8000d8c:	d11e      	bne.n	8000dcc <PrepareRowPart+0x44e>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	6839      	ldr	r1, [r7, #0]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f042 0210 	orr.w	r2, r2, #16
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	441a      	add	r2, r3
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	440b      	add	r3, r1
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000dca:	e046      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Yellow /*|| LOWER_BIT==Yellow2*/)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b0b      	cmp	r3, #11
 8000dd0:	d11e      	bne.n	8000e10 <PrepareRowPart+0x492>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	6839      	ldr	r1, [r7, #0]
 8000dde:	440b      	add	r3, r1
 8000de0:	f042 0210 	orr.w	r2, r2, #16
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	440b      	add	r3, r1
 8000df6:	f042 0220 	orr.w	r2, r2, #32
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	441a      	add	r2, r3
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000e0e:	e024      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Azure)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b0e      	cmp	r3, #14
 8000e14:	d120      	bne.n	8000e58 <PrepareRowPart+0x4da>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	441a      	add	r2, r3
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6839      	ldr	r1, [r7, #0]
 8000e20:	440b      	add	r3, r1
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	440b      	add	r3, r1
 8000e34:	f042 0220 	orr.w	r2, r2, #32
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	440b      	add	r3, r1
 8000e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000e52:	e002      	b.n	8000e5a <PrepareRowPart+0x4dc>
		if(LOWER_BIT==0) goto END_LOOP;
 8000e54:	bf00      	nop
 8000e56:	e000      	b.n	8000e5a <PrepareRowPart+0x4dc>
		}

	END_LOOP:;
 8000e58:	bf00      	nop
	for(int NR_BIT=0; NR_BIT<8; NR_BIT++) //ten Numer bit sie plusuje i w tym forze wiec 2x
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	f77f ad9e 	ble.w	80009a4 <PrepareRowPart+0x26>
for(int i=0; i<4; i++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	f77f ad94 	ble.w	800099e <PrepareRowPart+0x20>

	}
}

}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3724      	adds	r7, #36	; 0x24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_QSPI_TxCpltCallback>:

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<4; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e003      	b.n	8000e9a <HAL_QSPI_TxCpltCallback+0x16>
	{
		asm("NOP");
 8000e92:	bf00      	nop
	for(int i=0; i<4; i++)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	ddf8      	ble.n	8000e92 <HAL_QSPI_TxCpltCallback+0xe>
	}
 HAL_GPIO_TogglePin(LATCH_GPIO_Port, LATCH_Pin);
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_QSPI_TxCpltCallback+0x54>)
 8000ea6:	f007 fb3a 	bl	800851e <HAL_GPIO_TogglePin>
for(int i=0; i<4; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	e003      	b.n	8000eb8 <HAL_QSPI_TxCpltCallback+0x34>
{
	asm("NOP");
 8000eb0:	bf00      	nop
for(int i=0; i<4; i++)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	ddf8      	ble.n	8000eb0 <HAL_QSPI_TxCpltCallback+0x2c>
}
 HAL_GPIO_TogglePin(LATCH_GPIO_Port, LATCH_Pin);
 8000ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_QSPI_TxCpltCallback+0x54>)
 8000ec4:	f007 fb2b 	bl	800851e <HAL_GPIO_TogglePin>

 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100-scr_brightness);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_QSPI_TxCpltCallback+0x58>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	220a      	movs	r2, #10
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58020c00 	.word	0x58020c00
 8000edc:	24013278 	.word	0x24013278

08000ee0 <HUB_75_INIT>:

void HUB_75_INIT()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_CC1(TIM5);
 8000ee4:	481d      	ldr	r0, [pc, #116]	; (8000f5c <HUB_75_INIT+0x7c>)
 8000ee6:	f7ff fa5b 	bl	80003a0 <LL_TIM_EnableIT_CC1>
	LL_TIM_EnableCounter(TIM5);
 8000eea:	481c      	ldr	r0, [pc, #112]	; (8000f5c <HUB_75_INIT+0x7c>)
 8000eec:	f7ff fa48 	bl	8000380 <LL_TIM_EnableCounter>

	  LL_TIM_EnableIT_CC1(TIM2);
 8000ef0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ef4:	f7ff fa54 	bl	80003a0 <LL_TIM_EnableIT_CC1>
	  LL_TIM_EnableCounter(TIM2);
 8000ef8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000efc:	f7ff fa40 	bl	8000380 <LL_TIM_EnableCounter>

	HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <HUB_75_INIT+0x80>)
 8000f06:	f007 faf1 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	4814      	ldr	r0, [pc, #80]	; (8000f60 <HUB_75_INIT+0x80>)
 8000f10:	f007 faec 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <HUB_75_INIT+0x80>)
 8000f1c:	f007 fae6 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port,LATCH_Pin,GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <HUB_75_INIT+0x84>)
 8000f28:	f007 fae0 	bl	80084ec <HAL_GPIO_WritePin>


	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <HUB_75_INIT+0x88>)
 8000f30:	f00a ff58 	bl	800bde4 <HAL_TIM_PWM_Start>


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,97);
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HUB_75_INIT+0x88>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2261      	movs	r2, #97	; 0x61
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34

	sCommand.DataMode    = QSPI_DATA_4_LINES;
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HUB_75_INIT+0x8c>)
 8000f3e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
	  sCommand.NbData      = 256; //Here define long of data 1 ROW
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HUB_75_INIT+0x8c>)
 8000f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28

	  HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <HUB_75_INIT+0x8c>)
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <HUB_75_INIT+0x90>)
 8000f54:	f008 f968 	bl	8009228 <HAL_QSPI_Command>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40000c00 	.word	0x40000c00
 8000f60:	58020800 	.word	0x58020800
 8000f64:	58020c00 	.word	0x58020c00
 8000f68:	24013278 	.word	0x24013278
 8000f6c:	2400a2f4 	.word	0x2400a2f4
 8000f70:	240131a4 	.word	0x240131a4

08000f74 <Select_Send_Buf>:
void Select_Send_Buf(uint8_t *BITMAP)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	   if(Bufor_Send_Picker==BUFOR1)
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <Select_Send_Buf+0x4c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10a      	bne.n	8000f9a <Select_Send_Buf+0x26>
	   {
		   PrepareFullBuffer(BITMAP,OUT_B1);
 8000f84:	490f      	ldr	r1, [pc, #60]	; (8000fc4 <Select_Send_Buf+0x50>)
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fbde 	bl	8000748 <PrepareFullBuffer>
		  			   SedingBufor_Adr=OUT_B1;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <Select_Send_Buf+0x54>)
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <Select_Send_Buf+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
		  			   Bufor_Send_Picker=BUFOR2;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <Select_Send_Buf+0x4c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
		   return;
 8000f98:	e00e      	b.n	8000fb8 <Select_Send_Buf+0x44>
	   }
	   if(Bufor_Send_Picker==BUFOR2)
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <Select_Send_Buf+0x4c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d10a      	bne.n	8000fb8 <Select_Send_Buf+0x44>
	   {
		   PrepareFullBuffer(BITMAP,OUT_B2);
 8000fa2:	490a      	ldr	r1, [pc, #40]	; (8000fcc <Select_Send_Buf+0x58>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fbcf 	bl	8000748 <PrepareFullBuffer>
		   SedingBufor_Adr=OUT_B2;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <Select_Send_Buf+0x54>)
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <Select_Send_Buf+0x58>)
 8000fae:	601a      	str	r2, [r3, #0]
		   Bufor_Send_Picker=BUFOR1;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <Select_Send_Buf+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
		   return;
 8000fb6:	bf00      	nop
	   }
}
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	24007bb0 	.word	0x24007bb0
 8000fc4:	240067a8 	.word	0x240067a8
 8000fc8:	24007bac 	.word	0x24007bac
 8000fcc:	240071a0 	.word	0x240071a0

08000fd0 <Verical_Scroll_Flow_withHOLD>:
uint8_t* Verical_Scroll_Flow_withHOLD(uint8_t *BIT_MAP, uint8_t Row_Count, uint32_t Czas_P, uint32_t Time_hold_Start,uint32_t Time_hold_Stop, uint8_t HALF)//przesuwanie w pionie z zatrzymywaniem
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	72fb      	strb	r3, [r7, #11]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <Verical_Scroll_Flow_withHOLD+0x120>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]


	if(f_start_view==1)
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d12d      	bne.n	800104a <Verical_Scroll_Flow_withHOLD+0x7a>
	{
		zT_View =HAL_GetTick();
 8000fee:	f006 ffa5 	bl	8007f3c <HAL_GetTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <Verical_Scroll_Flow_withHOLD+0x128>)
 8000ff6:	6013      	str	r3, [r2, #0]
		f_start_view=2;
 8000ff8:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]

		   for(int i=0; i<32; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e01c      	b.n	800103e <Verical_Scroll_Flow_withHOLD+0x6e>
		  	{
		  		  for(int j=0; j<64; j++)
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	e013      	b.n	8001032 <Verical_Scroll_Flow_withHOLD+0x62>
		  		  {
		  			Conv_BP[j+(i*64)]=BIT_MAP[ (k*64) +j+ (i*64) ];
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <Verical_Scroll_Flow_withHOLD+0x12c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	019b      	lsls	r3, r3, #6
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	0192      	lsls	r2, r2, #6
 8001014:	441a      	add	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4413      	add	r3, r2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	441a      	add	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	0199      	lsls	r1, r3, #6
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	440b      	add	r3, r1
 8001026:	7811      	ldrb	r1, [r2, #0]
 8001028:	4a35      	ldr	r2, [pc, #212]	; (8001100 <Verical_Scroll_Flow_withHOLD+0x130>)
 800102a:	54d1      	strb	r1, [r2, r3]
		  		  for(int j=0; j<64; j++)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b3f      	cmp	r3, #63	; 0x3f
 8001036:	dde8      	ble.n	800100a <Verical_Scroll_Flow_withHOLD+0x3a>
		   for(int i=0; i<32; i++)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b1f      	cmp	r3, #31
 8001042:	dddf      	ble.n	8001004 <Verical_Scroll_Flow_withHOLD+0x34>
		  		  }
		  	}
		   Select_Send_Buf(Conv_BP);
 8001044:	482e      	ldr	r0, [pc, #184]	; (8001100 <Verical_Scroll_Flow_withHOLD+0x130>)
 8001046:	f7ff ff95 	bl	8000f74 <Select_Send_Buf>
	}
	if(zT_View+Time_hold_Start <HAL_GetTick() && f_start_view==2)
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <Verical_Scroll_Flow_withHOLD+0x128>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	18d4      	adds	r4, r2, r3
 8001052:	f006 ff73 	bl	8007f3c <HAL_GetTick>
 8001056:	4603      	mov	r3, r0
 8001058:	429c      	cmp	r4, r3
 800105a:	d20b      	bcs.n	8001074 <Verical_Scroll_Flow_withHOLD+0xa4>
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d107      	bne.n	8001074 <Verical_Scroll_Flow_withHOLD+0xa4>
			{
		zT_View =HAL_GetTick();
 8001064:	f006 ff6a 	bl	8007f3c <HAL_GetTick>
 8001068:	4603      	mov	r3, r0
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <Verical_Scroll_Flow_withHOLD+0x128>)
 800106c:	6013      	str	r3, [r2, #0]
		f_start_view=3;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 8001070:	2203      	movs	r2, #3
 8001072:	601a      	str	r2, [r3, #0]
			}

	if(f_start_view==3)
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d118      	bne.n	80010ae <Verical_Scroll_Flow_withHOLD+0xde>
	{

		Vertical_Scroll_Flow(BIT_MAP,Row_Count,Czas_P, HALF);
 800107c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001080:	7af9      	ldrb	r1, [r7, #11]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f83d 	bl	8001104 <Vertical_Scroll_Flow>
		 if( SCR_PROCESS==SCR_VIEWING_PROCESS_DONE) { SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY; f_start_view=4; }
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <Verical_Scroll_Flow_withHOLD+0x120>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d106      	bne.n	80010a0 <Verical_Scroll_Flow_withHOLD+0xd0>
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <Verical_Scroll_Flow_withHOLD+0x120>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 800109a:	2204      	movs	r2, #4
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e006      	b.n	80010ae <Verical_Scroll_Flow_withHOLD+0xde>

		 else{
			 zT_View =HAL_GetTick();
 80010a0:	f006 ff4c 	bl	8007f3c <HAL_GetTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <Verical_Scroll_Flow_withHOLD+0x128>)
 80010a8:	6013      	str	r3, [r2, #0]

			 return Conv_BP;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <Verical_Scroll_Flow_withHOLD+0x130>)
 80010ac:	e01b      	b.n	80010e6 <Verical_Scroll_Flow_withHOLD+0x116>
		 }
	}

if(zT_View+Time_hold_Stop <HAL_GetTick() && f_start_view==4 )
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <Verical_Scroll_Flow_withHOLD+0x128>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b4:	18d4      	adds	r4, r2, r3
 80010b6:	f006 ff41 	bl	8007f3c <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	429c      	cmp	r4, r3
 80010be:	d211      	bcs.n	80010e4 <Verical_Scroll_Flow_withHOLD+0x114>
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d10d      	bne.n	80010e4 <Verical_Scroll_Flow_withHOLD+0x114>
			{
		zT_View =HAL_GetTick();
 80010c8:	f006 ff38 	bl	8007f3c <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <Verical_Scroll_Flow_withHOLD+0x128>)
 80010d0:	6013      	str	r3, [r2, #0]
		f_start_view=1;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <Verical_Scroll_Flow_withHOLD+0x124>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
		Select_Send_Buf(Conv_BP);
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <Verical_Scroll_Flow_withHOLD+0x130>)
 80010da:	f7ff ff4b 	bl	8000f74 <Select_Send_Buf>
		SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <Verical_Scroll_Flow_withHOLD+0x120>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	701a      	strb	r2, [r3, #0]
			}
return Conv_BP;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <Verical_Scroll_Flow_withHOLD+0x130>)
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd90      	pop	{r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400a2ec 	.word	0x2400a2ec
 80010f4:	24000000 	.word	0x24000000
 80010f8:	24007ba8 	.word	0x24007ba8
 80010fc:	24007b98 	.word	0x24007b98
 8001100:	24004098 	.word	0x24004098

08001104 <Vertical_Scroll_Flow>:
uint8_t* Vertical_Scroll_Flow(uint8_t *BIT_MAP, uint8_t Row_Count, uint32_t Czas_P, uint8_t HALF) //plynne przesuwanie w pionie
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	461a      	mov	r2, r3
 8001110:	460b      	mov	r3, r1
 8001112:	72fb      	strb	r3, [r7, #11]
 8001114:	4613      	mov	r3, r2
 8001116:	72bb      	strb	r3, [r7, #10]
	//this function execution maks 350us
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 8001118:	4b49      	ldr	r3, [pc, #292]	; (8001240 <Vertical_Scroll_Flow+0x13c>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]

 if(zT_SCROLL+Czas_P < HAL_GetTick())
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <Vertical_Scroll_Flow+0x140>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	18d4      	adds	r4, r2, r3
 8001126:	f006 ff09 	bl	8007f3c <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	429c      	cmp	r4, r3
 800112e:	f080 8082 	bcs.w	8001236 <Vertical_Scroll_Flow+0x132>
 {

	   for(int i=0; i<32; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e01c      	b.n	8001172 <Vertical_Scroll_Flow+0x6e>
	  	{
	  		  for(int j=0; j<64; j++)
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	e013      	b.n	8001166 <Vertical_Scroll_Flow+0x62>
	  		  {
	  			 Conv_BP[j+(i*64)]=BIT_MAP[ (k*64) +j+ (i*64) ];
 800113e:	4b42      	ldr	r3, [pc, #264]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	019b      	lsls	r3, r3, #6
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	0192      	lsls	r2, r2, #6
 8001148:	441a      	add	r2, r3
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4413      	add	r3, r2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	441a      	add	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	0199      	lsls	r1, r3, #6
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	440b      	add	r3, r1
 800115a:	7811      	ldrb	r1, [r2, #0]
 800115c:	4a3b      	ldr	r2, [pc, #236]	; (800124c <Vertical_Scroll_Flow+0x148>)
 800115e:	54d1      	strb	r1, [r2, r3]
	  		  for(int j=0; j<64; j++)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	3301      	adds	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b3f      	cmp	r3, #63	; 0x3f
 800116a:	dde8      	ble.n	800113e <Vertical_Scroll_Flow+0x3a>
	   for(int i=0; i<32; i++)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	3301      	adds	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	2b1f      	cmp	r3, #31
 8001176:	dddf      	ble.n	8001138 <Vertical_Scroll_Flow+0x34>
	  		  }
	  	}
	   k++;
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 8001180:	6013      	str	r3, [r2, #0]

	   if(k> (Row_Count/2) )
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	085b      	lsrs	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d22f      	bcs.n	80011f2 <Vertical_Scroll_Flow+0xee>
	   {
		   for(int f=0; f<l; f++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e022      	b.n	80011de <Vertical_Scroll_Flow+0xda>
		  	{
		  		  for(int d=0; d<64; d++)
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	e019      	b.n	80011d2 <Vertical_Scroll_Flow+0xce>
		  		  {
		  			 Conv_BP[ (( (Row_Count/2) -l) *64 ) + d+(f*64)]=BIT_MAP[ d+(f*64) ];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	019a      	lsls	r2, r3, #6
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4413      	add	r3, r2
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	441a      	add	r2, r3
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	085b      	lsrs	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <Vertical_Scroll_Flow+0x14c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1acb      	subs	r3, r1, r3
 80011ba:	019b      	lsls	r3, r3, #6
 80011bc:	6979      	ldr	r1, [r7, #20]
 80011be:	0189      	lsls	r1, r1, #6
 80011c0:	4419      	add	r1, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	440b      	add	r3, r1
 80011c6:	7811      	ldrb	r1, [r2, #0]
 80011c8:	4a20      	ldr	r2, [pc, #128]	; (800124c <Vertical_Scroll_Flow+0x148>)
 80011ca:	54d1      	strb	r1, [r2, r3]
		  		  for(int d=0; d<64; d++)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	3301      	adds	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b3f      	cmp	r3, #63	; 0x3f
 80011d6:	dde2      	ble.n	800119e <Vertical_Scroll_Flow+0x9a>
		   for(int f=0; f<l; f++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <Vertical_Scroll_Flow+0x14c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3d7      	bcc.n	8001198 <Vertical_Scroll_Flow+0x94>
		  		  }
		  	}

		   l++;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <Vertical_Scroll_Flow+0x14c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <Vertical_Scroll_Flow+0x14c>)
 80011f0:	6013      	str	r3, [r2, #0]
	   }


	   if( k== (Row_Count+1) || (HALF &&   k==( Row_Count/2) + 1 ) )
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00a      	beq.n	8001214 <Vertical_Scroll_Flow+0x110>
 80011fe:	7abb      	ldrb	r3, [r7, #10]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d010      	beq.n	8001226 <Vertical_Scroll_Flow+0x122>
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	4293      	cmp	r3, r2
 8001212:	d108      	bne.n	8001226 <Vertical_Scroll_Flow+0x122>
	   {
		   k=0; l=0;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <Vertical_Scroll_Flow+0x144>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Vertical_Scroll_Flow+0x14c>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
		   SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <Vertical_Scroll_Flow+0x13c>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
	   }

	   Select_Send_Buf(Conv_BP);
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <Vertical_Scroll_Flow+0x148>)
 8001228:	f7ff fea4 	bl	8000f74 <Select_Send_Buf>

	   zT_SCROLL=HAL_GetTick();
 800122c:	f006 fe86 	bl	8007f3c <HAL_GetTick>
 8001230:	4603      	mov	r3, r0
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <Vertical_Scroll_Flow+0x140>)
 8001234:	6013      	str	r3, [r2, #0]
}
 return Conv_BP;
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <Vertical_Scroll_Flow+0x148>)
}
 8001238:	4618      	mov	r0, r3
 800123a:	3724      	adds	r7, #36	; 0x24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	2400a2ec 	.word	0x2400a2ec
 8001244:	24007ba4 	.word	0x24007ba4
 8001248:	24007b98 	.word	0x24007b98
 800124c:	24004098 	.word	0x24004098
 8001250:	24007b9c 	.word	0x24007b9c

08001254 <Viewing_BitMapBy_Time>:
uint8_t* Viewing_BitMapBy_Time(uint8_t *BIT_MAP, uint32_t Time)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <Viewing_BitMapBy_Time+0x60>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
if(start_view_by_time==1)
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <Viewing_BitMapBy_Time+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d10a      	bne.n	8001282 <Viewing_BitMapBy_Time+0x2e>
{
	zT_View =HAL_GetTick();
 800126c:	f006 fe66 	bl	8007f3c <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <Viewing_BitMapBy_Time+0x68>)
 8001274:	6013      	str	r3, [r2, #0]
	start_view_by_time=0;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <Viewing_BitMapBy_Time+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
	Select_Send_Buf(BIT_MAP);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe79 	bl	8000f74 <Select_Send_Buf>
}

if(zT_View+Time <HAL_GetTick() )
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <Viewing_BitMapBy_Time+0x68>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	18d4      	adds	r4, r2, r3
 800128a:	f006 fe57 	bl	8007f3c <HAL_GetTick>
 800128e:	4603      	mov	r3, r0
 8001290:	429c      	cmp	r4, r3
 8001292:	d20a      	bcs.n	80012aa <Viewing_BitMapBy_Time+0x56>
		{
	zT_View =HAL_GetTick();
 8001294:	f006 fe52 	bl	8007f3c <HAL_GetTick>
 8001298:	4603      	mov	r3, r0
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <Viewing_BitMapBy_Time+0x68>)
 800129c:	6013      	str	r3, [r2, #0]
	start_view_by_time=1;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Viewing_BitMapBy_Time+0x64>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
	SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <Viewing_BitMapBy_Time+0x60>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	701a      	strb	r2, [r3, #0]
		}

return BIT_MAP;
 80012aa:	687b      	ldr	r3, [r7, #4]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	2400a2ec 	.word	0x2400a2ec
 80012b8:	2400a2f0 	.word	0x2400a2f0
 80012bc:	24007ba8 	.word	0x24007ba8

080012c0 <Horizontal_SCROLL>:
uint8_t* Horizontal_SCROLL(uint8_t *BIT_MAP, uint16_t Hor_Pixel_Count,uint32_t Time_hold, uint32_t Czas_P)
{																   //^^ czas postoju na poczatku  //Co ile przesuniecie o jeden pixel
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	460b      	mov	r3, r1
 80012ce:	817b      	strh	r3, [r7, #10]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <Horizontal_SCROLL+0x120>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
if(f_start_view==1)
 80012d6:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <Horizontal_SCROLL+0x124>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d12f      	bne.n	800133e <Horizontal_SCROLL+0x7e>
{
	zT_View =HAL_GetTick();
 80012de:	f006 fe2d 	bl	8007f3c <HAL_GetTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <Horizontal_SCROLL+0x128>)
 80012e6:	6013      	str	r3, [r2, #0]
	   for(int i=0; i<32; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e01e      	b.n	800132c <Horizontal_SCROLL+0x6c>
	  	{
	  		  for(int j=0; j<64; j++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	e015      	b.n	8001320 <Horizontal_SCROLL+0x60>
	  		  {
	  			 Conv_BP[j+(i*64)]= BIT_MAP[ j+(i*(Hor_Pixel_Count/2)) ];
 80012f4:	897b      	ldrh	r3, [r7, #10]
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4413      	add	r3, r2
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	441a      	add	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	0199      	lsls	r1, r3, #6
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	440b      	add	r3, r1
 8001314:	7811      	ldrb	r1, [r2, #0]
 8001316:	4a35      	ldr	r2, [pc, #212]	; (80013ec <Horizontal_SCROLL+0x12c>)
 8001318:	54d1      	strb	r1, [r2, r3]
	  		  for(int j=0; j<64; j++)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	3301      	adds	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	2b3f      	cmp	r3, #63	; 0x3f
 8001324:	dde6      	ble.n	80012f4 <Horizontal_SCROLL+0x34>
	   for(int i=0; i<32; i++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b1f      	cmp	r3, #31
 8001330:	dddd      	ble.n	80012ee <Horizontal_SCROLL+0x2e>
	  		  }
	  	}
	   Select_Send_Buf(Conv_BP);
 8001332:	482e      	ldr	r0, [pc, #184]	; (80013ec <Horizontal_SCROLL+0x12c>)
 8001334:	f7ff fe1e 	bl	8000f74 <Select_Send_Buf>
	f_start_view=2;
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <Horizontal_SCROLL+0x124>)
 800133a:	2202      	movs	r2, #2
 800133c:	601a      	str	r2, [r3, #0]
}
if(zT_View+Time_hold <HAL_GetTick() && f_start_view==2)
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <Horizontal_SCROLL+0x128>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	18d4      	adds	r4, r2, r3
 8001346:	f006 fdf9 	bl	8007f3c <HAL_GetTick>
 800134a:	4603      	mov	r3, r0
 800134c:	429c      	cmp	r4, r3
 800134e:	d20b      	bcs.n	8001368 <Horizontal_SCROLL+0xa8>
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <Horizontal_SCROLL+0x124>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d107      	bne.n	8001368 <Horizontal_SCROLL+0xa8>
		{
	zT_View =HAL_GetTick();
 8001358:	f006 fdf0 	bl	8007f3c <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <Horizontal_SCROLL+0x128>)
 8001360:	6013      	str	r3, [r2, #0]
	f_start_view=3;
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Horizontal_SCROLL+0x124>)
 8001364:	2203      	movs	r2, #3
 8001366:	601a      	str	r2, [r3, #0]
		}
if(f_start_view==3)
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <Horizontal_SCROLL+0x124>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d117      	bne.n	80013a0 <Horizontal_SCROLL+0xe0>
	{
	 HOR_SCROLL_PROCES(BIT_MAP, Czas_P,Hor_Pixel_Count);
 8001370:	897b      	ldrh	r3, [r7, #10]
 8001372:	461a      	mov	r2, r3
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f83a 	bl	80013f0 <HOR_SCROLL_PROCES>
	 if( SCR_PROCESS==SCR_VIEWING_PROCESS_DONE) { SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY; f_start_view=4; }
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <Horizontal_SCROLL+0x120>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d106      	bne.n	8001392 <Horizontal_SCROLL+0xd2>
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <Horizontal_SCROLL+0x120>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <Horizontal_SCROLL+0x124>)
 800138c:	2204      	movs	r2, #4
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e006      	b.n	80013a0 <Horizontal_SCROLL+0xe0>
	 else{
		 zT_View =HAL_GetTick();
 8001392:	f006 fdd3 	bl	8007f3c <HAL_GetTick>
 8001396:	4603      	mov	r3, r0
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <Horizontal_SCROLL+0x128>)
 800139a:	6013      	str	r3, [r2, #0]
		 return Conv_BP;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <Horizontal_SCROLL+0x12c>)
 800139e:	e01b      	b.n	80013d8 <Horizontal_SCROLL+0x118>
	 }
	}
if(zT_View+Time_hold <HAL_GetTick() && f_start_view==4 )
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <Horizontal_SCROLL+0x128>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	18d4      	adds	r4, r2, r3
 80013a8:	f006 fdc8 	bl	8007f3c <HAL_GetTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d211      	bcs.n	80013d6 <Horizontal_SCROLL+0x116>
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <Horizontal_SCROLL+0x124>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d10d      	bne.n	80013d6 <Horizontal_SCROLL+0x116>
		{
	zT_View =HAL_GetTick();
 80013ba:	f006 fdbf 	bl	8007f3c <HAL_GetTick>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <Horizontal_SCROLL+0x128>)
 80013c2:	6013      	str	r3, [r2, #0]
	f_start_view=1;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <Horizontal_SCROLL+0x124>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
	 Select_Send_Buf(Conv_BP);
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <Horizontal_SCROLL+0x12c>)
 80013cc:	f7ff fdd2 	bl	8000f74 <Select_Send_Buf>
	SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <Horizontal_SCROLL+0x120>)
 80013d2:	2202      	movs	r2, #2
 80013d4:	701a      	strb	r2, [r3, #0]
		}
 return Conv_BP;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <Horizontal_SCROLL+0x12c>)
}
 80013d8:	4618      	mov	r0, r3
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	2400a2ec 	.word	0x2400a2ec
 80013e4:	24000000 	.word	0x24000000
 80013e8:	24007ba8 	.word	0x24007ba8
 80013ec:	24004098 	.word	0x24004098

080013f0 <HOR_SCROLL_PROCES>:

uint8_t Wpr_Od_Wyzszej_cz_Bajtu=1;

uint8_t* HOR_SCROLL_PROCES(uint8_t *BIT_MAP, uint32_t Time_Pr, uint16_t Hor_Pixel_Count)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 80013fe:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HOR_SCROLL_PROCES+0x174>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]

	 if(zT_SCROLL+Time_Pr < HAL_GetTick())
 8001404:	4b58      	ldr	r3, [pc, #352]	; (8001568 <HOR_SCROLL_PROCES+0x178>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	18d4      	adds	r4, r2, r3
 800140c:	f006 fd96 	bl	8007f3c <HAL_GetTick>
 8001410:	4603      	mov	r3, r0
 8001412:	429c      	cmp	r4, r3
 8001414:	f080 80a0 	bcs.w	8001558 <HOR_SCROLL_PROCES+0x168>
	 {
		   for(int i=0; i<32; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e06d      	b.n	80014fa <HOR_SCROLL_PROCES+0x10a>
		  	{

		  		  for(int j=0; j<65; j++)
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	e064      	b.n	80014ee <HOR_SCROLL_PROCES+0xfe>
		  		  {
		  			  if(Wpr_Od_Wyzszej_cz_Bajtu)
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <HOR_SCROLL_PROCES+0x17c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d048      	beq.n	80014be <HOR_SCROLL_PROCES+0xce>
		  			  {
		  				Conv_BP[j+(i*64)] =0;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	019a      	lsls	r2, r3, #6
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4413      	add	r3, r2
 8001434:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 8001436:	2100      	movs	r1, #0
 8001438:	54d1      	strb	r1, [r2, r3]
		  				Conv_BP[j+(i*64) ]        |= (BIT_MAP[ k+ j+(i* (Hor_Pixel_Count/2))    ] & 0x0F) << 4 ;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	019a      	lsls	r2, r3, #6
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	b25a      	sxtb	r2, r3
 8001448:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	440b      	add	r3, r1
 8001450:	88f9      	ldrh	r1, [r7, #6]
 8001452:	0849      	lsrs	r1, r1, #1
 8001454:	b289      	uxth	r1, r1
 8001456:	4608      	mov	r0, r1
 8001458:	6979      	ldr	r1, [r7, #20]
 800145a:	fb01 f100 	mul.w	r1, r1, r0
 800145e:	440b      	add	r3, r1
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	440b      	add	r3, r1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b259      	sxtb	r1, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	019a      	lsls	r2, r3, #6
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4413      	add	r3, r2
 8001476:	b2c9      	uxtb	r1, r1
 8001478:	4a3d      	ldr	r2, [pc, #244]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 800147a:	54d1      	strb	r1, [r2, r3]
		  				Conv_BP[j+(i*64) ]        |= (BIT_MAP[ k+ j+(i* (Hor_Pixel_Count/2)) +1 ] & 0xF0) >> 4 ;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	019a      	lsls	r2, r3, #6
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4413      	add	r3, r2
 8001484:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 8001486:	5cd1      	ldrb	r1, [r2, r3]
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4413      	add	r3, r2
 8001490:	88fa      	ldrh	r2, [r7, #6]
 8001492:	0852      	lsrs	r2, r2, #1
 8001494:	b292      	uxth	r2, r2
 8001496:	4610      	mov	r0, r2
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	fb02 f200 	mul.w	r2, r2, r0
 800149e:	4413      	add	r3, r2
 80014a0:	3301      	adds	r3, #1
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	0198      	lsls	r0, r3, #6
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4403      	add	r3, r0
 80014b4:	430a      	orrs	r2, r1
 80014b6:	b2d1      	uxtb	r1, r2
 80014b8:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 80014ba:	54d1      	strb	r1, [r2, r3]
 80014bc:	e014      	b.n	80014e8 <HOR_SCROLL_PROCES+0xf8>
		  			  }
		  			  else
		  			  {
		  				Conv_BP[j+(i*64)]= BIT_MAP[ k+ j+(i* (Hor_Pixel_Count/2)) ];
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4413      	add	r3, r2
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	0852      	lsrs	r2, r2, #1
 80014ca:	b292      	uxth	r2, r2
 80014cc:	4611      	mov	r1, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	fb02 f201 	mul.w	r2, r2, r1
 80014d4:	4413      	add	r3, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	441a      	add	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	0199      	lsls	r1, r3, #6
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	440b      	add	r3, r1
 80014e2:	7811      	ldrb	r1, [r2, #0]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 80014e6:	54d1      	strb	r1, [r2, r3]
		  		  for(int j=0; j<65; j++)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3301      	adds	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	dd97      	ble.n	8001424 <HOR_SCROLL_PROCES+0x34>
		   for(int i=0; i<32; i++)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b1f      	cmp	r3, #31
 80014fe:	dd8e      	ble.n	800141e <HOR_SCROLL_PROCES+0x2e>
		  			  }
		  		  }
		  	}
			 if(Wpr_Od_Wyzszej_cz_Bajtu)
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HOR_SCROLL_PROCES+0x17c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HOR_SCROLL_PROCES+0x12a>
			 {
				Wpr_Od_Wyzszej_cz_Bajtu=0;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HOR_SCROLL_PROCES+0x17c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
				  k++;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e002      	b.n	8001520 <HOR_SCROLL_PROCES+0x130>
			 }
			 else
			 {
				 Wpr_Od_Wyzszej_cz_Bajtu=1;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <HOR_SCROLL_PROCES+0x17c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
			 }

		   if( k== ( (Hor_Pixel_Count-128) /2 )+1   )
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	3b80      	subs	r3, #128	; 0x80
 8001524:	2b00      	cmp	r3, #0
 8001526:	da00      	bge.n	800152a <HOR_SCROLL_PROCES+0x13a>
 8001528:	3301      	adds	r3, #1
 800152a:	105b      	asrs	r3, r3, #1
 800152c:	3301      	adds	r3, #1
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	4293      	cmp	r3, r2
 8001534:	d108      	bne.n	8001548 <HOR_SCROLL_PROCES+0x158>
		   {
			   k=0; l=0;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HOR_SCROLL_PROCES+0x184>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HOR_SCROLL_PROCES+0x188>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			   SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HOR_SCROLL_PROCES+0x174>)
 8001544:	2202      	movs	r2, #2
 8001546:	701a      	strb	r2, [r3, #0]
		   }
		   zT_SCROLL=HAL_GetTick();
 8001548:	f006 fcf8 	bl	8007f3c <HAL_GetTick>
 800154c:	4603      	mov	r3, r0
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HOR_SCROLL_PROCES+0x178>)
 8001550:	6013      	str	r3, [r2, #0]
		   Select_Send_Buf(Conv_BP);
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
 8001554:	f7ff fd0e 	bl	8000f74 <Select_Send_Buf>



	}

	 return Conv_BP;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HOR_SCROLL_PROCES+0x180>)
}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	2400a2ec 	.word	0x2400a2ec
 8001568:	24007ba4 	.word	0x24007ba4
 800156c:	24000004 	.word	0x24000004
 8001570:	24004098 	.word	0x24004098
 8001574:	24007b98 	.word	0x24007b98
 8001578:	24007b9c 	.word	0x24007b9c

0800157c <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	2b20      	cmp	r3, #32
 800158e:	d101      	bne.n	8001594 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	2b40      	cmp	r3, #64	; 0x40
 80015b4:	d101      	bne.n	80015ba <LL_USART_IsActiveFlag_TC+0x18>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_USART_IsActiveFlag_TC+0x1a>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d8:	2b80      	cmp	r3, #128	; 0x80
 80015da:	d101      	bne.n	80015e0 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2208      	movs	r2, #8
 80015fa:	621a      	str	r2, [r3, #32]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	621a      	str	r2, [r3, #32]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f043 0220 	orr.w	r2, r3, #32
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	d101      	bne.n	80016da <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	d101      	bne.n	8001700 <LL_USART_IsEnabledIT_TC+0x18>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_USART_IsEnabledIT_TC+0x1a>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	2b80      	cmp	r3, #128	; 0x80
 8001720:	d101      	bne.n	8001726 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	b2db      	uxtb	r3, r3
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <INIT_UART3>:

uint8_t Rx_USART3[RX_BUFFER_SIZE];
uint8_t Tx_USART3[TX_BUFFER_SIZE];

void INIT_UART3()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	  Thuart3.Instance=USART3;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <INIT_UART3+0x54>)
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <INIT_UART3+0x58>)
 8001774:	601a      	str	r2, [r3, #0]
	  Thuart3.pTxBuffPtr=Tx_USART3;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <INIT_UART3+0x54>)
 8001778:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <INIT_UART3+0x5c>)
 800177a:	605a      	str	r2, [r3, #4]
	  Thuart3.TxXferSize=sizeof(Tx_USART3);
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <INIT_UART3+0x54>)
 800177e:	22dc      	movs	r2, #220	; 0xdc
 8001780:	811a      	strh	r2, [r3, #8]
	  Thuart3.TxXferCount=0;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <INIT_UART3+0x54>)
 8001784:	2200      	movs	r2, #0
 8001786:	815a      	strh	r2, [r3, #10]
	  Thuart3.TxXSendCount=0;
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <INIT_UART3+0x54>)
 800178a:	2200      	movs	r2, #0
 800178c:	819a      	strh	r2, [r3, #12]
	  Thuart3.pRxBuffPtr=Rx_USART3;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <INIT_UART3+0x54>)
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <INIT_UART3+0x60>)
 8001792:	611a      	str	r2, [r3, #16]
	  Thuart3.RxXferSize=sizeof(Rx_USART3);
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <INIT_UART3+0x54>)
 8001796:	22c8      	movs	r2, #200	; 0xc8
 8001798:	829a      	strh	r2, [r3, #20]
	  Thuart3.RxXPrevferCount=0;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <INIT_UART3+0x54>)
 800179c:	2200      	movs	r2, #0
 800179e:	831a      	strh	r2, [r3, #24]
	  Thuart3.RecTimeout=ReceiveTimeout;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <INIT_UART3+0x54>)
 80017a2:	221e      	movs	r2, #30
 80017a4:	621a      	str	r2, [r3, #32]
	  Thuart3.zT=0;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <INIT_UART3+0x54>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
	  Thuart3.RecSomething=false;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <INIT_UART3+0x54>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	  InitEcho(&Thuart3);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <INIT_UART3+0x54>)
 80017b6:	f000 f80b 	bl	80017d0 <InitEcho>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2400def8 	.word	0x2400def8
 80017c4:	40004800 	.word	0x40004800
 80017c8:	2400df20 	.word	0x2400df20
 80017cc:	2400dffc 	.word	0x2400dffc

080017d0 <InitEcho>:

void InitEcho(UART_Handle_Td *USARTx)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  LL_USART_ClearFlag_ORE(USARTx->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff06 	bl	80015ee <LL_USART_ClearFlag_ORE>
  LL_USART_EnableIT_RXNE(USARTx->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff1b 	bl	8001622 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USARTx->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff46 	bl	8001682 <LL_USART_EnableIT_ERROR>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HandleEcho>:

void HandleEcho(UART_Handle_Td *USARTx)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if(USARTx->RxXferCount!=0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	8adb      	ldrh	r3, [r3, #22]
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HandleEcho+0x1a>
	{
		USARTx->RecSomething=true;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if(USARTx->RxXferCount!=USARTx->RxXPrevferCount)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8adb      	ldrh	r3, [r3, #22]
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	8b1b      	ldrh	r3, [r3, #24]
 8001824:	b29b      	uxth	r3, r3
 8001826:	429a      	cmp	r2, r3
 8001828:	d009      	beq.n	800183e <HandleEcho+0x3e>
	{
		USARTx->RxXPrevferCount= USARTx->RxXferCount ;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8adb      	ldrh	r3, [r3, #22]
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	831a      	strh	r2, [r3, #24]
		USARTx->zT=HAL_GetTick();
 8001834:	f006 fb82 	bl	8007f3c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	61da      	str	r2, [r3, #28]
	}
	if( (USARTx->zT + USARTx->RecTimeout  < HAL_GetTick() )  && USARTx->RecSomething )
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	18d4      	adds	r4, r2, r3
 8001848:	f006 fb78 	bl	8007f3c <HAL_GetTick>
 800184c:	4603      	mov	r3, r0
 800184e:	429c      	cmp	r4, r3
 8001850:	d268      	bcs.n	8001924 <HandleEcho+0x124>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d063      	beq.n	8001924 <HandleEcho+0x124>
	{
		USARTx->RecSomething=false;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		USARTx->zT=HAL_GetTick();
 8001864:	f006 fb6a 	bl	8007f3c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	61da      	str	r2, [r3, #28]


		int status=Conv_String_From_UART_BMP( USARTx->pRxBuffPtr ,  USARTx->RxXferCount) ;   // musi byc wywolana znim z zeruje ten RxXferCount!
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	8adb      	ldrh	r3, [r3, #22]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4619      	mov	r1, r3
 800187a:	4610      	mov	r0, r2
 800187c:	f004 fdc0 	bl	8006400 <Conv_String_From_UART_BMP>
 8001880:	60f8      	str	r0, [r7, #12]

		 USARTx->RxXferCount=0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	82da      	strh	r2, [r3, #22]

		for(int i=0; i<USARTx->TxXferSize; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e008      	b.n	80018a0 <HandleEcho+0xa0>
					 {
						 USARTx->pTxBuffPtr[i]=0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4413      	add	r3, r2
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<USARTx->TxXferSize; i++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	891b      	ldrh	r3, [r3, #8]
 80018a4:	461a      	mov	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4293      	cmp	r3, r2
 80018aa:	dbf0      	blt.n	800188e <HandleEcho+0x8e>
					 }




		if(status==20)  //status==0 non error
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b14      	cmp	r3, #20
 80018b0:	d10a      	bne.n	80018c8 <HandleEcho+0xc8>
		{
			USARTx->TxXferCount=sprintf(  (char*)  USARTx->pTxBuffPtr ,"Przyjołem, 2 linie powinny być wyśw. poprawnie\r");
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	491d      	ldr	r1, [pc, #116]	; (800192c <HandleEcho+0x12c>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00c fc85 	bl	800e1c8 <siprintf>
 80018be:	4603      	mov	r3, r0
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	815a      	strh	r2, [r3, #10]
 80018c6:	e018      	b.n	80018fa <HandleEcho+0xfa>
		}
		else if(status==40)  //status==0 non error
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b28      	cmp	r3, #40	; 0x28
 80018cc:	d10a      	bne.n	80018e4 <HandleEcho+0xe4>
		{
			USARTx->TxXferCount=sprintf(  (char*)  USARTx->pTxBuffPtr ,"Przyjołem, 4 linie powinny być wyśw. poprawnie\r");
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4917      	ldr	r1, [pc, #92]	; (8001930 <HandleEcho+0x130>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00c fc77 	bl	800e1c8 <siprintf>
 80018da:	4603      	mov	r3, r0
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	815a      	strh	r2, [r3, #10]
 80018e2:	e00a      	b.n	80018fa <HandleEcho+0xfa>
		}
		else
		{
			USARTx->TxXferCount=sprintf(  (char*)  USARTx->pTxBuffPtr ,"Linia %i jest za długa lub wystąpił inny błąd \r", status);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4912      	ldr	r1, [pc, #72]	; (8001934 <HandleEcho+0x134>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00c fc6b 	bl	800e1c8 <siprintf>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	815a      	strh	r2, [r3, #10]
		}



		 for(int i=0; i< (USARTx->RxXferSize) ; i++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e008      	b.n	8001912 <HandleEcho+0x112>
		 {
			 USARTx->pRxBuffPtr[i]=0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i< (USARTx->RxXferSize) ; i++)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	3301      	adds	r3, #1
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8a9b      	ldrh	r3, [r3, #20]
 8001916:	461a      	mov	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4293      	cmp	r3, r2
 800191c:	dbf0      	blt.n	8001900 <HandleEcho+0x100>
		 }
			 Print_Data(USARTx);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f822 	bl	8001968 <Print_Data>
	}
}
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	0800ea3c 	.word	0x0800ea3c
 8001930:	0800ea70 	.word	0x0800ea70
 8001934:	0800eaa4 	.word	0x0800eaa4

08001938 <USART_CharReception_Callback>:

void USART_CharReception_Callback(UART_Handle_Td *USARTx)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	USARTx->pRxBuffPtr[USARTx->RxXferCount++] = LL_USART_ReceiveData8(USARTx->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	8adb      	ldrh	r3, [r3, #22]
 800194c:	b29b      	uxth	r3, r3
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	b28c      	uxth	r4, r1
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	82cc      	strh	r4, [r1, #22]
 8001956:	18d4      	adds	r4, r2, r3
 8001958:	f7ff feec 	bl	8001734 <LL_USART_ReceiveData8>
 800195c:	4603      	mov	r3, r0
 800195e:	7023      	strb	r3, [r4, #0]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <Print_Data>:

void Print_Data(UART_Handle_Td *USARTx)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    LL_USART_TransmitData8(USARTx->Instance, USARTx->pTxBuffPtr[ USARTx->TxXSendCount++ ]);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	899b      	ldrh	r3, [r3, #12]
 800197c:	b29b      	uxth	r3, r3
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	b28c      	uxth	r4, r1
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	818c      	strh	r4, [r1, #12]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff fedf 	bl	800174e <LL_USART_TransmitData8>

        LL_USART_EnableIT_TXE(USARTx->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe64 	bl	8001662 <LL_USART_EnableIT_TXE_TXFNF>
    	LL_USART_EnableIT_TC(USARTx->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fe4f 	bl	8001642 <LL_USART_EnableIT_TC>
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <USART_TXEmpty_Callback>:
void USART_TXEmpty_Callback(UART_Handle_Td *USARTx)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if( USARTx->TxXSendCount == ( USARTx->TxXferCount - 1))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	899b      	ldrh	r3, [r3, #12]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	895b      	ldrh	r3, [r3, #10]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d109      	bne.n	80019dc <USART_TXEmpty_Callback+0x30>
  {

    LL_USART_DisableIT_TXE(USARTx->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe68 	bl	80016a2 <LL_USART_DisableIT_TXE_TXFNF>

    LL_USART_EnableIT_TC(USARTx->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fe33 	bl	8001642 <LL_USART_EnableIT_TC>
  }
  LL_USART_TransmitData8(USARTx->Instance, USARTx->pTxBuffPtr[ USARTx->TxXSendCount++ ]);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	899b      	ldrh	r3, [r3, #12]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	b28c      	uxth	r4, r1
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	818c      	strh	r4, [r1, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff fea9 	bl	800174e <LL_USART_TransmitData8>
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}

08001a04 <USART_CharTransmitComplete_Callback>:

void USART_CharTransmitComplete_Callback(UART_Handle_Td *USARTx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(USARTx->TxXSendCount == USARTx->TxXferCount)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	899b      	ldrh	r3, [r3, #12]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	895b      	ldrh	r3, [r3, #10]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d102      	bne.n	8001a22 <USART_CharTransmitComplete_Callback+0x1e>
  {
	  USARTx->TxXSendCount=0;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	819a      	strh	r2, [r3, #12]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <TUART_CallBack_IRQ>:

void TUART_CallBack_IRQ(UART_Handle_Td *USARTx)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	 if(LL_USART_IsActiveFlag_RXNE(USARTx->Instance) && LL_USART_IsEnabledIT_RXNE(USARTx->Instance))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fd9e 	bl	800157c <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <TUART_CallBack_IRQ+0x2e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe39 	bl	80016c2 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <TUART_CallBack_IRQ+0x2e>
		  {
		    USART_CharReception_Callback(USARTx);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff6e 	bl	8001938 <USART_CharReception_Callback>
		  }

		  if(LL_USART_IsEnabledIT_TXE(USARTx->Instance) && LL_USART_IsActiveFlag_TXE(USARTx->Instance))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fe54 	bl	800170e <LL_USART_IsEnabledIT_TXE_TXFNF>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00a      	beq.n	8001a82 <TUART_CallBack_IRQ+0x54>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fda9 	bl	80015c8 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <TUART_CallBack_IRQ+0x54>
		  {
		    USART_TXEmpty_Callback(USARTx);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff95 	bl	80019ac <USART_TXEmpty_Callback>
		  }
		  if(LL_USART_IsEnabledIT_TC(USARTx->Instance) && LL_USART_IsActiveFlag_TC(USARTx->Instance))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe2e 	bl	80016e8 <LL_USART_IsEnabledIT_TC>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00f      	beq.n	8001ab2 <TUART_CallBack_IRQ+0x84>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fd83 	bl	80015a2 <LL_USART_IsActiveFlag_TC>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <TUART_CallBack_IRQ+0x84>
		  {
		    LL_USART_ClearFlag_TC(USARTx->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fdae 	bl	8001608 <LL_USART_ClearFlag_TC>
		    USART_CharTransmitComplete_Callback(USARTx);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ffa9 	bl	8001a04 <USART_CharTransmitComplete_Callback>
		  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <Create_String_buffer>:
		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		};

int Create_String_buffer (uint8_t *Word, uint8_t Size, uint8_t Rzad, uint8_t *Cr_String_Buf, uint8_t Color) //Umieszcza w buforze poziomo kolejne napisy
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	72fb      	strb	r3, [r7, #11]
 8001aca:	4613      	mov	r3, r2
 8001acc:	72bb      	strb	r3, [r7, #10]
	uint16_t char_val=0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	83fb      	strh	r3, [r7, #30]
	miejsce_znaku=0;
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <Create_String_buffer+0xcc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

	for(int N_l=0; N_l<Size; N_l++ )
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	e04a      	b.n	8001b74 <Create_String_buffer+0xb8>
	{
		//UCF-8 Decode (2 bytes)
		char_val=0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	83fb      	strh	r3, [r7, #30]
		if( *(Word+N_l) < 127) //1 byte
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b7e      	cmp	r3, #126	; 0x7e
 8001aec:	d804      	bhi.n	8001af8 <Create_String_buffer+0x3c>
		{
			char_val= *(Word+N_l);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	83fb      	strh	r3, [r7, #30]
		}

		if(*(Word+N_l) > 127) //2 byte
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da1f      	bge.n	8001b46 <Create_String_buffer+0x8a>
		{
			uint16_t MaskH=0b00111111 & *(Word+N_l) ;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b14:	82fb      	strh	r3, [r7, #22]
			uint16_t MaskL=0b01111111 & (*(Word+N_l +1)) ;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b26:	82bb      	strh	r3, [r7, #20]

			char_val|= (MaskH <<6);
 8001b28:	8afb      	ldrh	r3, [r7, #22]
 8001b2a:	019b      	lsls	r3, r3, #6
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	83fb      	strh	r3, [r7, #30]
			char_val|= (MaskL);
 8001b38:	8bfa      	ldrh	r2, [r7, #30]
 8001b3a:	8abb      	ldrh	r3, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	83fb      	strh	r3, [r7, #30]

			N_l++;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	3301      	adds	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
		}


		Insert_Font_in_BUF(char_val,Rzad,Cr_String_Buf,Color);
 8001b46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b4a:	7ab9      	ldrb	r1, [r7, #10]
 8001b4c:	8bf8      	ldrh	r0, [r7, #30]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	f000 f81e 	bl	8001b90 <Insert_Font_in_BUF>

		//miejsce_znaku=miejsce_znaku+ (xadvance/2) + (xadvance%2);
		miejsce_znaku=miejsce_znaku+ (xadvance);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <Create_String_buffer+0xcc>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <Create_String_buffer+0xd0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <Create_String_buffer+0xcc>)
 8001b60:	6013      	str	r3, [r2, #0]


		if(miejsce_znaku>128)
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <Create_String_buffer+0xcc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b80      	cmp	r3, #128	; 0x80
 8001b68:	dd01      	ble.n	8001b6e <Create_String_buffer+0xb2>
		{
			return 1; //error
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e007      	b.n	8001b7e <Create_String_buffer+0xc2>
	for(int N_l=0; N_l<Size; N_l++ )
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	3301      	adds	r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbb0      	blt.n	8001ade <Create_String_buffer+0x22>
		}
	}
return 0; //non eror
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	24007bb8 	.word	0x24007bb8
 8001b8c:	24013120 	.word	0x24013120

08001b90 <Insert_Font_in_BUF>:
uint8_t* Insert_Font_in_BUF(uint16_t char_num,uint8_t Row_num ,uint8_t *Cr_String_Buf, uint8_t Color)  //Umieszcza Litere w Buforze
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	603a      	str	r2, [r7, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	717b      	strb	r3, [r7, #5]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	713b      	strb	r3, [r7, #4]
/*
 *Kazdy bajt bitmapy napisow zawiera pixel natomaist w mojej libce z hub75
 * mam ze w bajcie sa 2 pixle.. (16 kolorwa ) uzyta do napisow jest monochromatyczna czyli w bajcie jest 8 pixli
 */
	uint8_t BIT=0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]

	if(char_num==32) //-- Znak Spacji
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d104      	bne.n	8001bba <Insert_Font_in_BUF+0x2a>
	{
		xadvance=7;
 8001bb0:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <Insert_Font_in_BUF+0x190>)
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	601a      	str	r2, [r3, #0]
		return 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e0ad      	b.n	8001d16 <Insert_Font_in_BUF+0x186>
	}

	get_font(char_num);   //Grafika  pojedynczegoznaku jest zapisywana w globalnym buforze Font
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f8d5 	bl	8001d6c <get_font>

			change_font_color(Color);
 8001bc2:	793b      	ldrb	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f9e1 	bl	8001f8c <change_font_color>

	  if( (miejsce_znaku)%2==1)
 8001bca:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <Insert_Font_in_BUF+0x194>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	bfb8      	it	lt
 8001bd6:	425b      	neglt	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d103      	bne.n	8001be4 <Insert_Font_in_BUF+0x54>
	  {
		  Zacznij_Wpr_Od=1;  //Wyzszej czesci bajtu
 8001bdc:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e002      	b.n	8001bea <Insert_Font_in_BUF+0x5a>
	  }
	  else
	  {
		  Zacznij_Wpr_Od=0;  //Nizszej czesci bajtu
 8001be4:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
	  }
	  int Z_P_Wpr_Cz_Bajtu=Zacznij_Wpr_Od;
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60bb      	str	r3, [r7, #8]


	  for(int V=0; V<(height+yoffset); V++)    //V - Vertical
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e085      	b.n	8001d02 <Insert_Font_in_BUF+0x172>
	  {
		  p_mark=0;
 8001bf6:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
		  Zacznij_Wpr_Od=Z_P_Wpr_Cz_Bajtu;
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	6013      	str	r3, [r2, #0]

		  for(int H=0; H< (width) ; H++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	e074      	b.n	8001cf2 <Insert_Font_in_BUF+0x162>
		  	{
		  		BIT= 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
	  			BIT = Font[ (V*(width) +  H ) ] & 0xFF;
 8001c0c:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <Insert_Font_in_BUF+0x1a0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	fb02 f203 	mul.w	r2, r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <Insert_Font_in_BUF+0x1a4>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	73fb      	strb	r3, [r7, #15]
	  					if(Zacznij_Wpr_Od==0)
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12d      	bne.n	8001c84 <Insert_Font_in_BUF+0xf4>
	  						{
	  							if( BIT!=0)  { Cr_String_Buf[ (miejsce_znaku/2) +(Row_num* (128/2) *16 ) + ( (V) * (128/2) )   +p_mark ] |= (BIT<<4) ; }
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d026      	beq.n	8001c7c <Insert_Font_in_BUF+0xec>
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <Insert_Font_in_BUF+0x194>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da00      	bge.n	8001c38 <Insert_Font_in_BUF+0xa8>
 8001c36:	3301      	adds	r3, #1
 8001c38:	105b      	asrs	r3, r3, #1
 8001c3a:	797a      	ldrb	r2, [r7, #5]
 8001c3c:	0292      	lsls	r2, r2, #10
 8001c3e:	1899      	adds	r1, r3, r2
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	0192      	lsls	r2, r2, #6
 8001c44:	4411      	add	r1, r2
 8001c46:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	440a      	add	r2, r1
 8001c52:	7812      	ldrb	r2, [r2, #0]
 8001c54:	b251      	sxtb	r1, r2
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b252      	sxtb	r2, r2
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	b251      	sxtb	r1, r2
 8001c60:	797a      	ldrb	r2, [r7, #5]
 8001c62:	0292      	lsls	r2, r2, #10
 8001c64:	441a      	add	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	441a      	add	r2, r3
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	b2ca      	uxtb	r2, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
	  							Zacznij_Wpr_Od=1;
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
							goto END_IT;
 8001c82:	e033      	b.n	8001cec <Insert_Font_in_BUF+0x15c>
	  						}
	  					if(Zacznij_Wpr_Od==1)
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d12e      	bne.n	8001cea <Insert_Font_in_BUF+0x15a>
	  					{
	  						if( BIT !=0 )  { Cr_String_Buf[ (miejsce_znaku/2) +(Row_num*(128/2)*16 ) + ( (V) * (128/2) )   +p_mark ] |=  BIT; }
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d022      	beq.n	8001cd8 <Insert_Font_in_BUF+0x148>
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <Insert_Font_in_BUF+0x194>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da00      	bge.n	8001c9c <Insert_Font_in_BUF+0x10c>
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	797a      	ldrb	r2, [r7, #5]
 8001ca0:	0292      	lsls	r2, r2, #10
 8001ca2:	1899      	adds	r1, r3, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	0192      	lsls	r2, r2, #6
 8001ca8:	4411      	add	r1, r2
 8001caa:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	440a      	add	r2, r1
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	440a      	add	r2, r1
 8001cb6:	7811      	ldrb	r1, [r2, #0]
 8001cb8:	797a      	ldrb	r2, [r7, #5]
 8001cba:	0292      	lsls	r2, r2, #10
 8001cbc:	441a      	add	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	441a      	add	r2, r3
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]

	  				  		p_mark++;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <Insert_Font_in_BUF+0x19c>)
 8001ce0:	6013      	str	r3, [r2, #0]
	  				  		Zacznij_Wpr_Od=0;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <Insert_Font_in_BUF+0x198>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e000      	b.n	8001cec <Insert_Font_in_BUF+0x15c>
	  					}
	  				END_IT:;
 8001cea:	bf00      	nop
		  for(int H=0; H< (width) ; H++)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <Insert_Font_in_BUF+0x1a0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	db85      	blt.n	8001c08 <Insert_Font_in_BUF+0x78>
	  for(int V=0; V<(height+yoffset); V++)    //V - Vertical
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <Insert_Font_in_BUF+0x1a8>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <Insert_Font_in_BUF+0x1ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	f6ff af71 	blt.w	8001bf6 <Insert_Font_in_BUF+0x66>
		  	}
		}
	  return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	24013120 	.word	0x24013120
 8001d24:	24007bb8 	.word	0x24007bb8
 8001d28:	24007bc0 	.word	0x24007bc0
 8001d2c:	24007bbc 	.word	0x24007bbc
 8001d30:	24013124 	.word	0x24013124
 8001d34:	24012ef8 	.word	0x24012ef8
 8001d38:	24012ef4 	.word	0x24012ef4
 8001d3c:	2400e0cc 	.word	0x2400e0cc

08001d40 <get_bit>:
uint8_t get_bit(uint8_t value,uint8_t nr_bit)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71bb      	strb	r3, [r7, #6]
	return (value >> nr_bit) & 1;
 8001d50:	79fa      	ldrb	r2, [r7, #7]
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	fa42 f303 	asr.w	r3, r2, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <get_font>:
uint8_t get_font(uint16_t char_num)   //z bit mapy monochromatycznej
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
	//Wyjmuje pojedynczy znak z bitmapy i
	//rozbijam go tak zeby kazdy pixel mial przypisany swoj bajt --- latwiej manewrowac danymi dalej

	for(int i=0; i<256; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e007      	b.n	8001d8c <get_font+0x20>
	{
		Font[i]=0;
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <get_font+0x110>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	4413      	add	r3, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<256; i++)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	ddf4      	ble.n	8001d7c <get_font+0x10>
	}

	Odczytaj_znak_S16_uc8(char_num);
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f91d 	bl	8001fd4 <Odczytaj_znak_S16_uc8>

	int x_base=0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
	int r_x=0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
	int next_x=0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]

	int bit_val_xybit=0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]

				x_base=x/8;
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <get_font+0x114>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da00      	bge.n	8001db4 <get_font+0x48>
 8001db2:	3307      	adds	r3, #7
 8001db4:	10db      	asrs	r3, r3, #3
 8001db6:	613b      	str	r3, [r7, #16]
				r_x=x%8;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <get_font+0x114>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	425a      	negs	r2, r3
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	f002 0207 	and.w	r2, r2, #7
 8001dc6:	bf58      	it	pl
 8001dc8:	4253      	negpl	r3, r2
 8001dca:	623b      	str	r3, [r7, #32]

					for(int i=0; i<height; i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	e048      	b.n	8001e64 <get_font+0xf8>
					{
						next_x=0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
						r_x=x%8;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <get_font+0x114>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	425a      	negs	r2, r3
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	f002 0207 	and.w	r2, r2, #7
 8001de4:	bf58      	it	pl
 8001de6:	4253      	negpl	r3, r2
 8001de8:	623b      	str	r3, [r7, #32]
						r_x=7-r_x;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f1c3 0307 	rsb	r3, r3, #7
 8001df0:	623b      	str	r3, [r7, #32]

						for(int j=0; j<width; j++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e02d      	b.n	8001e54 <get_font+0xe8>
						{
															//linia 			rzad
							bit_val_xybit=get_bit(Fonts_16[x_base+next_x+   (y*64) + (i*64)  ],r_x);
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	441a      	add	r2, r3
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <get_font+0x118>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	019b      	lsls	r3, r3, #6
 8001e04:	441a      	add	r2, r3
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <get_font+0x11c>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff92 	bl	8001d40 <get_bit>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]

							Font[ j+ (i*width) ]=bit_val_xybit;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <get_font+0x120>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	fb02 f203 	mul.w	r2, r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	b2d1      	uxtb	r1, r2
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <get_font+0x110>)
 8001e34:	54d1      	strb	r1, [r2, r3]

							r_x--;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
							if(r_x==-1)
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e42:	d104      	bne.n	8001e4e <get_font+0xe2>
							{
								r_x=7;
 8001e44:	2307      	movs	r3, #7
 8001e46:	623b      	str	r3, [r7, #32]
								next_x++;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
						for(int j=0; j<width; j++)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <get_font+0x120>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbcc      	blt.n	8001df8 <get_font+0x8c>
					for(int i=0; i<height; i++)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <get_font+0x124>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dbb1      	blt.n	8001dd2 <get_font+0x66>
						}


					}

	siding_font();
 8001e6e:	f000 f811 	bl	8001e94 <siding_font>
	return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	24012ef8 	.word	0x24012ef8
 8001e80:	2400e0c8 	.word	0x2400e0c8
 8001e84:	24012ef0 	.word	0x24012ef0
 8001e88:	24000008 	.word	0x24000008
 8001e8c:	24013124 	.word	0x24013124
 8001e90:	24012ef4 	.word	0x24012ef4

08001e94 <siding_font>:
uint8_t siding_font()   // przesuwanie odpowiednio litery
{
 8001e94:	b480      	push	{r7}
 8001e96:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001e9a:	af00      	add	r7, sp, #0
	uint8_t Siding_Font[550];  //musi byc wiekszy aby dane sie nie nadpisaly przy przesuwaniu, co moze wykrzaczyc nawet i calego procka
	for(int i=0; i<256; i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001ea2:	e00a      	b.n	8001eba <siding_font+0x26>
	{
		Siding_Font[i]=0;
 8001ea4:	463a      	mov	r2, r7
 8001ea6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001eaa:	4413      	add	r3, r2
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<256; i++)
 8001eb0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001eba:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	ddf0      	ble.n	8001ea4 <siding_font+0x10>
	}

	for(int i=0; i<(18) ; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001ec8:	e033      	b.n	8001f32 <siding_font+0x9e>
	{
		for(int j=0; j<(width); j++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001ed0:	e024      	b.n	8001f1c <siding_font+0x88>
		{

			Siding_Font[ j+ xoffset +     ( (yoffset)*width) + (i*width)  ] =   Font[ j+ (i*width)];
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <siding_font+0xe8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8001eda:	fb02 f203 	mul.w	r2, r2, r3
 8001ede:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ee2:	441a      	add	r2, r3
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <siding_font+0xec>)
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001eec:	4419      	add	r1, r3
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <siding_font+0xf0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4822      	ldr	r0, [pc, #136]	; (8001f7c <siding_font+0xe8>)
 8001ef4:	6800      	ldr	r0, [r0, #0]
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	4419      	add	r1, r3
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <siding_font+0xe8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8001f04:	fb00 f303 	mul.w	r3, r0, r3
 8001f08:	440b      	add	r3, r1
 8001f0a:	491f      	ldr	r1, [pc, #124]	; (8001f88 <siding_font+0xf4>)
 8001f0c:	5c89      	ldrb	r1, [r1, r2]
 8001f0e:	463a      	mov	r2, r7
 8001f10:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<(width); j++)
 8001f12:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f16:	3301      	adds	r3, #1
 8001f18:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <siding_font+0xe8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbd4      	blt.n	8001ed2 <siding_font+0x3e>
	for(int i=0; i<(18) ; i++)
 8001f28:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001f32:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	ddc7      	ble.n	8001eca <siding_font+0x36>
		}
	}
	for(int i=0; i<255; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001f40:	e00f      	b.n	8001f62 <siding_font+0xce>
	{
		Font[i]=Siding_Font[i];
 8001f42:	463a      	mov	r2, r7
 8001f44:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f48:	4413      	add	r3, r2
 8001f4a:	7819      	ldrb	r1, [r3, #0]
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <siding_font+0xf4>)
 8001f4e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f52:	4413      	add	r3, r2
 8001f54:	460a      	mov	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<255; i++)
 8001f58:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001f62:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f66:	2bfe      	cmp	r3, #254	; 0xfe
 8001f68:	ddeb      	ble.n	8001f42 <siding_font+0xae>
	}
	return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	24013124 	.word	0x24013124
 8001f80:	2400e0c4 	.word	0x2400e0c4
 8001f84:	2400e0cc 	.word	0x2400e0cc
 8001f88:	24012ef8 	.word	0x24012ef8

08001f8c <change_font_color>:
void change_font_color(uint8_t Color)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<300; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e00d      	b.n	8001fb8 <change_font_color+0x2c>
	{

		if(Font[i]!=0)
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <change_font_color+0x44>)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <change_font_color+0x26>
		{
			Font[i]=Color;
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <change_font_color+0x44>)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<300; i++)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fbe:	dbed      	blt.n	8001f9c <change_font_color+0x10>
		}
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	24012ef8 	.word	0x24012ef8

08001fd4 <Odczytaj_znak_S16_uc8>:
void Odczytaj_znak_S16_uc8 (uint16_t  char_num)   //tabela wygenerowana za pomoca runnable-hiero.jar
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]

	switch(char_num)
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f240 127f 	movw	r2, #383	; 0x17f
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f204 81e1 	bhi.w	80063ac <Odczytaj_znak_S16_uc8+0x43d8>
 8001fea:	a101      	add	r1, pc, #4	; (adr r1, 8001ff0 <Odczytaj_znak_S16_uc8+0x1c>)
 8001fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ff0:	080025f1 	.word	0x080025f1
 8001ff4:	080063ad 	.word	0x080063ad
 8001ff8:	080063ad 	.word	0x080063ad
 8001ffc:	080063ad 	.word	0x080063ad
 8002000:	080063ad 	.word	0x080063ad
 8002004:	080063ad 	.word	0x080063ad
 8002008:	080063ad 	.word	0x080063ad
 800200c:	080063ad 	.word	0x080063ad
 8002010:	080063ad 	.word	0x080063ad
 8002014:	080063ad 	.word	0x080063ad
 8002018:	080063ad 	.word	0x080063ad
 800201c:	080063ad 	.word	0x080063ad
 8002020:	080063ad 	.word	0x080063ad
 8002024:	08002621 	.word	0x08002621
 8002028:	080063ad 	.word	0x080063ad
 800202c:	080063ad 	.word	0x080063ad
 8002030:	080063ad 	.word	0x080063ad
 8002034:	080063ad 	.word	0x080063ad
 8002038:	080063ad 	.word	0x080063ad
 800203c:	080063ad 	.word	0x080063ad
 8002040:	080063ad 	.word	0x080063ad
 8002044:	080063ad 	.word	0x080063ad
 8002048:	080063ad 	.word	0x080063ad
 800204c:	080063ad 	.word	0x080063ad
 8002050:	080063ad 	.word	0x080063ad
 8002054:	080063ad 	.word	0x080063ad
 8002058:	080063ad 	.word	0x080063ad
 800205c:	080063ad 	.word	0x080063ad
 8002060:	080063ad 	.word	0x080063ad
 8002064:	080063ad 	.word	0x080063ad
 8002068:	080063ad 	.word	0x080063ad
 800206c:	080063ad 	.word	0x080063ad
 8002070:	080063ad 	.word	0x080063ad
 8002074:	08002651 	.word	0x08002651
 8002078:	08002681 	.word	0x08002681
 800207c:	080026af 	.word	0x080026af
 8002080:	080026df 	.word	0x080026df
 8002084:	0800270f 	.word	0x0800270f
 8002088:	0800273f 	.word	0x0800273f
 800208c:	0800276f 	.word	0x0800276f
 8002090:	0800279d 	.word	0x0800279d
 8002094:	080027cd 	.word	0x080027cd
 8002098:	080027ff 	.word	0x080027ff
 800209c:	0800282f 	.word	0x0800282f
 80020a0:	0800287d 	.word	0x0800287d
 80020a4:	080028ad 	.word	0x080028ad
 80020a8:	080028db 	.word	0x080028db
 80020ac:	08002909 	.word	0x08002909
 80020b0:	0800293b 	.word	0x0800293b
 80020b4:	0800296b 	.word	0x0800296b
 80020b8:	08002999 	.word	0x08002999
 80020bc:	080029c7 	.word	0x080029c7
 80020c0:	080029f7 	.word	0x080029f7
 80020c4:	08002a25 	.word	0x08002a25
 80020c8:	08002a53 	.word	0x08002a53
 80020cc:	08002a81 	.word	0x08002a81
 80020d0:	08002aaf 	.word	0x08002aaf
 80020d4:	08002af9 	.word	0x08002af9
 80020d8:	08002b27 	.word	0x08002b27
 80020dc:	08002b57 	.word	0x08002b57
 80020e0:	08002b85 	.word	0x08002b85
 80020e4:	08002bb5 	.word	0x08002bb5
 80020e8:	08002be3 	.word	0x08002be3
 80020ec:	08002c13 	.word	0x08002c13
 80020f0:	08002c41 	.word	0x08002c41
 80020f4:	08002c71 	.word	0x08002c71
 80020f8:	08002ca1 	.word	0x08002ca1
 80020fc:	08002ccf 	.word	0x08002ccf
 8002100:	08002cfd 	.word	0x08002cfd
 8002104:	08002d2b 	.word	0x08002d2b
 8002108:	08002d75 	.word	0x08002d75
 800210c:	08002da3 	.word	0x08002da3
 8002110:	08002dd1 	.word	0x08002dd1
 8002114:	08002dff 	.word	0x08002dff
 8002118:	08002e2d 	.word	0x08002e2d
 800211c:	08002e5b 	.word	0x08002e5b
 8002120:	08002e89 	.word	0x08002e89
 8002124:	08002eb7 	.word	0x08002eb7
 8002128:	08002ee5 	.word	0x08002ee5
 800212c:	08002f13 	.word	0x08002f13
 8002130:	08002f41 	.word	0x08002f41
 8002134:	08002f71 	.word	0x08002f71
 8002138:	08002fa1 	.word	0x08002fa1
 800213c:	08002fed 	.word	0x08002fed
 8002140:	0800301d 	.word	0x0800301d
 8002144:	0800304d 	.word	0x0800304d
 8002148:	0800307d 	.word	0x0800307d
 800214c:	080030af 	.word	0x080030af
 8002150:	080030e1 	.word	0x080030e1
 8002154:	08003113 	.word	0x08003113
 8002158:	08003145 	.word	0x08003145
 800215c:	08003175 	.word	0x08003175
 8002160:	080031a5 	.word	0x080031a5
 8002164:	080031d7 	.word	0x080031d7
 8002168:	08003207 	.word	0x08003207
 800216c:	08003235 	.word	0x08003235
 8002170:	08003281 	.word	0x08003281
 8002174:	080032b1 	.word	0x080032b1
 8002178:	080032e1 	.word	0x080032e1
 800217c:	08003311 	.word	0x08003311
 8002180:	08003341 	.word	0x08003341
 8002184:	08003371 	.word	0x08003371
 8002188:	080033a1 	.word	0x080033a1
 800218c:	080033d1 	.word	0x080033d1
 8002190:	08003401 	.word	0x08003401
 8002194:	08003431 	.word	0x08003431
 8002198:	08003461 	.word	0x08003461
 800219c:	08003493 	.word	0x08003493
 80021a0:	080034c3 	.word	0x080034c3
 80021a4:	0800350d 	.word	0x0800350d
 80021a8:	0800353d 	.word	0x0800353d
 80021ac:	0800356b 	.word	0x0800356b
 80021b0:	08003599 	.word	0x08003599
 80021b4:	080035c9 	.word	0x080035c9
 80021b8:	080035f9 	.word	0x080035f9
 80021bc:	08003627 	.word	0x08003627
 80021c0:	08003655 	.word	0x08003655
 80021c4:	08003685 	.word	0x08003685
 80021c8:	080036b3 	.word	0x080036b3
 80021cc:	080036e3 	.word	0x080036e3
 80021d0:	08003713 	.word	0x08003713
 80021d4:	08003743 	.word	0x08003743
 80021d8:	08003791 	.word	0x08003791
 80021dc:	080037bf 	.word	0x080037bf
 80021e0:	080037ef 	.word	0x080037ef
 80021e4:	0800381f 	.word	0x0800381f
 80021e8:	0800384f 	.word	0x0800384f
 80021ec:	080063ad 	.word	0x080063ad
 80021f0:	080063ad 	.word	0x080063ad
 80021f4:	080063ad 	.word	0x080063ad
 80021f8:	080063ad 	.word	0x080063ad
 80021fc:	080063ad 	.word	0x080063ad
 8002200:	080063ad 	.word	0x080063ad
 8002204:	080063ad 	.word	0x080063ad
 8002208:	080063ad 	.word	0x080063ad
 800220c:	080063ad 	.word	0x080063ad
 8002210:	080063ad 	.word	0x080063ad
 8002214:	080063ad 	.word	0x080063ad
 8002218:	080063ad 	.word	0x080063ad
 800221c:	080063ad 	.word	0x080063ad
 8002220:	080063ad 	.word	0x080063ad
 8002224:	080063ad 	.word	0x080063ad
 8002228:	080063ad 	.word	0x080063ad
 800222c:	080063ad 	.word	0x080063ad
 8002230:	080063ad 	.word	0x080063ad
 8002234:	080063ad 	.word	0x080063ad
 8002238:	080063ad 	.word	0x080063ad
 800223c:	080063ad 	.word	0x080063ad
 8002240:	080063ad 	.word	0x080063ad
 8002244:	080063ad 	.word	0x080063ad
 8002248:	080063ad 	.word	0x080063ad
 800224c:	080063ad 	.word	0x080063ad
 8002250:	080063ad 	.word	0x080063ad
 8002254:	080063ad 	.word	0x080063ad
 8002258:	080063ad 	.word	0x080063ad
 800225c:	080063ad 	.word	0x080063ad
 8002260:	080063ad 	.word	0x080063ad
 8002264:	080063ad 	.word	0x080063ad
 8002268:	080063ad 	.word	0x080063ad
 800226c:	080063ad 	.word	0x080063ad
 8002270:	0800387d 	.word	0x0800387d
 8002274:	080038ad 	.word	0x080038ad
 8002278:	080038dd 	.word	0x080038dd
 800227c:	0800390b 	.word	0x0800390b
 8002280:	0800393b 	.word	0x0800393b
 8002284:	0800396b 	.word	0x0800396b
 8002288:	0800399b 	.word	0x0800399b
 800228c:	080039c9 	.word	0x080039c9
 8002290:	08003a15 	.word	0x08003a15
 8002294:	08003a43 	.word	0x08003a43
 8002298:	08003a73 	.word	0x08003a73
 800229c:	08003aa1 	.word	0x08003aa1
 80022a0:	08003ad1 	.word	0x08003ad1
 80022a4:	080063ad 	.word	0x080063ad
 80022a8:	08003aff 	.word	0x08003aff
 80022ac:	08003b31 	.word	0x08003b31
 80022b0:	08003b63 	.word	0x08003b63
 80022b4:	08003b91 	.word	0x08003b91
 80022b8:	08003bbf 	.word	0x08003bbf
 80022bc:	08003bef 	.word	0x08003bef
 80022c0:	08003c1f 	.word	0x08003c1f
 80022c4:	08003c4d 	.word	0x08003c4d
 80022c8:	08003c99 	.word	0x08003c99
 80022cc:	08003cc9 	.word	0x08003cc9
 80022d0:	08003cf7 	.word	0x08003cf7
 80022d4:	08003d25 	.word	0x08003d25
 80022d8:	08003d55 	.word	0x08003d55
 80022dc:	08003d83 	.word	0x08003d83
 80022e0:	08003db3 	.word	0x08003db3
 80022e4:	08003de3 	.word	0x08003de3
 80022e8:	08003e13 	.word	0x08003e13
 80022ec:	08003e45 	.word	0x08003e45
 80022f0:	08003e73 	.word	0x08003e73
 80022f4:	08003ea5 	.word	0x08003ea5
 80022f8:	08003ed7 	.word	0x08003ed7
 80022fc:	08003f25 	.word	0x08003f25
 8002300:	08003f57 	.word	0x08003f57
 8002304:	08003f89 	.word	0x08003f89
 8002308:	08003fbb 	.word	0x08003fbb
 800230c:	08003feb 	.word	0x08003feb
 8002310:	08004019 	.word	0x08004019
 8002314:	08004049 	.word	0x08004049
 8002318:	08004079 	.word	0x08004079
 800231c:	080040a9 	.word	0x080040a9
 8002320:	080040d9 	.word	0x080040d9
 8002324:	0800410b 	.word	0x0800410b
 8002328:	0800413b 	.word	0x0800413b
 800232c:	0800416d 	.word	0x0800416d
 8002330:	080041bd 	.word	0x080041bd
 8002334:	080041ed 	.word	0x080041ed
 8002338:	0800421d 	.word	0x0800421d
 800233c:	0800424d 	.word	0x0800424d
 8002340:	0800427d 	.word	0x0800427d
 8002344:	080042ad 	.word	0x080042ad
 8002348:	080042dd 	.word	0x080042dd
 800234c:	0800430f 	.word	0x0800430f
 8002350:	0800433f 	.word	0x0800433f
 8002354:	0800436d 	.word	0x0800436d
 8002358:	0800439f 	.word	0x0800439f
 800235c:	080043d1 	.word	0x080043d1
 8002360:	08004403 	.word	0x08004403
 8002364:	08004451 	.word	0x08004451
 8002368:	08004485 	.word	0x08004485
 800236c:	080044b3 	.word	0x080044b3
 8002370:	080044e1 	.word	0x080044e1
 8002374:	0800450f 	.word	0x0800450f
 8002378:	0800453d 	.word	0x0800453d
 800237c:	0800456b 	.word	0x0800456b
 8002380:	08004599 	.word	0x08004599
 8002384:	080045c7 	.word	0x080045c7
 8002388:	080045f5 	.word	0x080045f5
 800238c:	08004623 	.word	0x08004623
 8002390:	08004651 	.word	0x08004651
 8002394:	0800467f 	.word	0x0800467f
 8002398:	080046c9 	.word	0x080046c9
 800239c:	080046f7 	.word	0x080046f7
 80023a0:	08004725 	.word	0x08004725
 80023a4:	08004755 	.word	0x08004755
 80023a8:	08004783 	.word	0x08004783
 80023ac:	080047b3 	.word	0x080047b3
 80023b0:	080047e3 	.word	0x080047e3
 80023b4:	08004811 	.word	0x08004811
 80023b8:	0800483f 	.word	0x0800483f
 80023bc:	0800486d 	.word	0x0800486d
 80023c0:	0800489d 	.word	0x0800489d
 80023c4:	080048cd 	.word	0x080048cd
 80023c8:	080048fd 	.word	0x080048fd
 80023cc:	08004949 	.word	0x08004949
 80023d0:	08004977 	.word	0x08004977
 80023d4:	080049a5 	.word	0x080049a5
 80023d8:	080049d5 	.word	0x080049d5
 80023dc:	08004a05 	.word	0x08004a05
 80023e0:	08004a35 	.word	0x08004a35
 80023e4:	08004a65 	.word	0x08004a65
 80023e8:	08004a97 	.word	0x08004a97
 80023ec:	08004ac7 	.word	0x08004ac7
 80023f0:	08004af9 	.word	0x08004af9
 80023f4:	08004b2d 	.word	0x08004b2d
 80023f8:	08004b5d 	.word	0x08004b5d
 80023fc:	08004b91 	.word	0x08004b91
 8002400:	08004bdd 	.word	0x08004bdd
 8002404:	08004c0f 	.word	0x08004c0f
 8002408:	08004c3f 	.word	0x08004c3f
 800240c:	08004c71 	.word	0x08004c71
 8002410:	08004ca1 	.word	0x08004ca1
 8002414:	08004cd1 	.word	0x08004cd1
 8002418:	08004d01 	.word	0x08004d01
 800241c:	08004d31 	.word	0x08004d31
 8002420:	08004d61 	.word	0x08004d61
 8002424:	08004d93 	.word	0x08004d93
 8002428:	08004dc3 	.word	0x08004dc3
 800242c:	08004df5 	.word	0x08004df5
 8002430:	08004e25 	.word	0x08004e25
 8002434:	08004e71 	.word	0x08004e71
 8002438:	08004ea1 	.word	0x08004ea1
 800243c:	08004ed3 	.word	0x08004ed3
 8002440:	08004f03 	.word	0x08004f03
 8002444:	08004f33 	.word	0x08004f33
 8002448:	08004f63 	.word	0x08004f63
 800244c:	08004f95 	.word	0x08004f95
 8002450:	08004fc5 	.word	0x08004fc5
 8002454:	08004ff5 	.word	0x08004ff5
 8002458:	08005025 	.word	0x08005025
 800245c:	08005057 	.word	0x08005057
 8002460:	08005087 	.word	0x08005087
 8002464:	080050b7 	.word	0x080050b7
 8002468:	08005105 	.word	0x08005105
 800246c:	08005135 	.word	0x08005135
 8002470:	08005165 	.word	0x08005165
 8002474:	08005195 	.word	0x08005195
 8002478:	080051c5 	.word	0x080051c5
 800247c:	080051f3 	.word	0x080051f3
 8002480:	08005221 	.word	0x08005221
 8002484:	08005251 	.word	0x08005251
 8002488:	08005281 	.word	0x08005281
 800248c:	080052b1 	.word	0x080052b1
 8002490:	080052e1 	.word	0x080052e1
 8002494:	08005313 	.word	0x08005313
 8002498:	08005343 	.word	0x08005343
 800249c:	08005391 	.word	0x08005391
 80024a0:	080053c1 	.word	0x080053c1
 80024a4:	080053f3 	.word	0x080053f3
 80024a8:	08005423 	.word	0x08005423
 80024ac:	08005451 	.word	0x08005451
 80024b0:	0800547f 	.word	0x0800547f
 80024b4:	080054af 	.word	0x080054af
 80024b8:	080054dd 	.word	0x080054dd
 80024bc:	0800550b 	.word	0x0800550b
 80024c0:	08005539 	.word	0x08005539
 80024c4:	08005569 	.word	0x08005569
 80024c8:	08005599 	.word	0x08005599
 80024cc:	080055c7 	.word	0x080055c7
 80024d0:	08005611 	.word	0x08005611
 80024d4:	0800563f 	.word	0x0800563f
 80024d8:	0800566f 	.word	0x0800566f
 80024dc:	0800569f 	.word	0x0800569f
 80024e0:	080056cd 	.word	0x080056cd
 80024e4:	080056fb 	.word	0x080056fb
 80024e8:	08005729 	.word	0x08005729
 80024ec:	08005757 	.word	0x08005757
 80024f0:	08005785 	.word	0x08005785
 80024f4:	080057b3 	.word	0x080057b3
 80024f8:	080057e1 	.word	0x080057e1
 80024fc:	08005811 	.word	0x08005811
 8002500:	08005841 	.word	0x08005841
 8002504:	0800588d 	.word	0x0800588d
 8002508:	080058bb 	.word	0x080058bb
 800250c:	080058e9 	.word	0x080058e9
 8002510:	08005919 	.word	0x08005919
 8002514:	08005947 	.word	0x08005947
 8002518:	08005977 	.word	0x08005977
 800251c:	080059a5 	.word	0x080059a5
 8002520:	080059d3 	.word	0x080059d3
 8002524:	08005a03 	.word	0x08005a03
 8002528:	08005a31 	.word	0x08005a31
 800252c:	08005a63 	.word	0x08005a63
 8002530:	08005a91 	.word	0x08005a91
 8002534:	08005ac1 	.word	0x08005ac1
 8002538:	08005b0d 	.word	0x08005b0d
 800253c:	08005b3b 	.word	0x08005b3b
 8002540:	08005b69 	.word	0x08005b69
 8002544:	08005b99 	.word	0x08005b99
 8002548:	08005bc7 	.word	0x08005bc7
 800254c:	08005bf3 	.word	0x08005bf3
 8002550:	08005c21 	.word	0x08005c21
 8002554:	08005c4f 	.word	0x08005c4f
 8002558:	08005c7b 	.word	0x08005c7b
 800255c:	08005ca9 	.word	0x08005ca9
 8002560:	08005cd5 	.word	0x08005cd5
 8002564:	08005d05 	.word	0x08005d05
 8002568:	08005d31 	.word	0x08005d31
 800256c:	08005d79 	.word	0x08005d79
 8002570:	08005da5 	.word	0x08005da5
 8002574:	08005dd3 	.word	0x08005dd3
 8002578:	08005dff 	.word	0x08005dff
 800257c:	08005e2b 	.word	0x08005e2b
 8002580:	08005e57 	.word	0x08005e57
 8002584:	08005e85 	.word	0x08005e85
 8002588:	08005eb1 	.word	0x08005eb1
 800258c:	08005edd 	.word	0x08005edd
 8002590:	08005f09 	.word	0x08005f09
 8002594:	08005f39 	.word	0x08005f39
 8002598:	08005f67 	.word	0x08005f67
 800259c:	08005f95 	.word	0x08005f95
 80025a0:	08005fe1 	.word	0x08005fe1
 80025a4:	08006011 	.word	0x08006011
 80025a8:	0800603f 	.word	0x0800603f
 80025ac:	0800606f 	.word	0x0800606f
 80025b0:	0800609d 	.word	0x0800609d
 80025b4:	080060cb 	.word	0x080060cb
 80025b8:	080060f9 	.word	0x080060f9
 80025bc:	08006125 	.word	0x08006125
 80025c0:	08006153 	.word	0x08006153
 80025c4:	08006183 	.word	0x08006183
 80025c8:	080061b3 	.word	0x080061b3
 80025cc:	080061e5 	.word	0x080061e5
 80025d0:	08006215 	.word	0x08006215
 80025d4:	08006265 	.word	0x08006265
 80025d8:	08006295 	.word	0x08006295
 80025dc:	080062c3 	.word	0x080062c3
 80025e0:	080062f3 	.word	0x080062f3
 80025e4:	08006321 	.word	0x08006321
 80025e8:	08006351 	.word	0x08006351
 80025ec:	0800637f 	.word	0x0800637f
		{
	case  0   :    x=402 ;  y=187  ;  width=11  ;  height=12   ;  xoffset=1    ;  yoffset=4    ;  xadvance=12   ;
 80025f0:	4b9b      	ldr	r3, [pc, #620]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 80025f2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	4b9a      	ldr	r3, [pc, #616]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 80025fa:	22bb      	movs	r2, #187	; 0xbb
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	4b9a      	ldr	r3, [pc, #616]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 8002600:	220b      	movs	r2, #11
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	4b99      	ldr	r3, [pc, #612]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	4b99      	ldr	r3, [pc, #612]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	4b98      	ldr	r3, [pc, #608]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002612:	2204      	movs	r2, #4
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	4b98      	ldr	r3, [pc, #608]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002618:	220c      	movs	r2, #12
 800261a:	601a      	str	r2, [r3, #0]
	 break;
 800261c:	f003 bedc 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  13  :    x=402 ;  y=187  ;  width=11  ;  height=12   ;  xoffset=1    ;  yoffset=4    ;  xadvance=12   ;
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002622:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	4b8e      	ldr	r3, [pc, #568]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 800262a:	22bb      	movs	r2, #187	; 0xbb
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b8e      	ldr	r3, [pc, #568]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 8002630:	220b      	movs	r2, #11
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	4b8d      	ldr	r3, [pc, #564]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	4b8c      	ldr	r3, [pc, #560]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002642:	2204      	movs	r2, #4
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b8c      	ldr	r3, [pc, #560]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002648:	220c      	movs	r2, #12
 800264a:	601a      	str	r2, [r3, #0]
	 break;
 800264c:	f003 bec4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  33  :    x=451 ;  y=72   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8002650:	4b83      	ldr	r3, [pc, #524]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002652:	f240 12c3 	movw	r2, #451	; 0x1c3
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4b82      	ldr	r3, [pc, #520]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 800265a:	2248      	movs	r2, #72	; 0x48
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b82      	ldr	r3, [pc, #520]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 8002660:	2204      	movs	r2, #4
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	4b81      	ldr	r3, [pc, #516]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002666:	220e      	movs	r2, #14
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	4b80      	ldr	r3, [pc, #512]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	4b80      	ldr	r3, [pc, #512]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002678:	2205      	movs	r2, #5
 800267a:	601a      	str	r2, [r3, #0]
	 break;
 800267c:	f003 beac 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  34  :    x=136 ;  y=223  ;  width=8   ;  height=6    ;  xoffset=0    ;  yoffset=1    ;  xadvance=8    ;
 8002680:	4b77      	ldr	r3, [pc, #476]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002682:	2288      	movs	r2, #136	; 0x88
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	4b77      	ldr	r3, [pc, #476]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 8002688:	22df      	movs	r2, #223	; 0xdf
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	4b76      	ldr	r3, [pc, #472]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 800268e:	2208      	movs	r2, #8
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002694:	2206      	movs	r2, #6
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	4b75      	ldr	r3, [pc, #468]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b74      	ldr	r3, [pc, #464]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 80026a6:	2208      	movs	r2, #8
 80026a8:	601a      	str	r2, [r3, #0]
	 break;
 80026aa:	f003 be95 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  35  :    x=455 ;  y=72   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 80026b0:	f240 12c7 	movw	r2, #455	; 0x1c7
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4b6b      	ldr	r3, [pc, #428]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 80026b8:	2248      	movs	r2, #72	; 0x48
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 80026be:	220b      	movs	r2, #11
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	4b6a      	ldr	r3, [pc, #424]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 80026c4:	220e      	movs	r2, #14
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4b69      	ldr	r3, [pc, #420]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	4b69      	ldr	r3, [pc, #420]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 80026d6:	220b      	movs	r2, #11
 80026d8:	601a      	str	r2, [r3, #0]
	 break;
 80026da:	f003 be7d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  36  :    x=438 ;  y=0    ;  width=9   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 80026e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 80026ee:	2209      	movs	r2, #9
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4b5e      	ldr	r3, [pc, #376]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 80026f4:	2211      	movs	r2, #17
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002706:	2209      	movs	r2, #9
 8002708:	601a      	str	r2, [r3, #0]
	 break;
 800270a:	f003 be65 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  37  :    x=466 ;  y=72   ;  width=15  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=15   ;
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002710:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	4b53      	ldr	r3, [pc, #332]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 8002718:	2248      	movs	r2, #72	; 0x48
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	4b52      	ldr	r3, [pc, #328]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 800271e:	220f      	movs	r2, #15
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002724:	220e      	movs	r2, #14
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b51      	ldr	r3, [pc, #324]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4b51      	ldr	r3, [pc, #324]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002736:	220f      	movs	r2, #15
 8002738:	601a      	str	r2, [r3, #0]
	 break;
 800273a:	f003 be4d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  38  :    x=481 ;  y=72   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 800273e:	4b48      	ldr	r3, [pc, #288]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002740:	f240 12e1 	movw	r2, #481	; 0x1e1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 8002748:	2248      	movs	r2, #72	; 0x48
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	4b46      	ldr	r3, [pc, #280]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 800274e:	220d      	movs	r2, #13
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4b46      	ldr	r3, [pc, #280]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002754:	220e      	movs	r2, #14
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	4b45      	ldr	r3, [pc, #276]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	4b44      	ldr	r3, [pc, #272]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
	 break;
 800276a:	f003 be35 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  39  :    x=144 ;  y=223  ;  width=4   ;  height=6    ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 800276e:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002770:	2290      	movs	r2, #144	; 0x90
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 8002776:	22df      	movs	r2, #223	; 0xdf
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 800277c:	2204      	movs	r2, #4
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b3a      	ldr	r3, [pc, #232]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002782:	2206      	movs	r2, #6
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	4b39      	ldr	r3, [pc, #228]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002794:	2204      	movs	r2, #4
 8002796:	601a      	str	r2, [r3, #0]
	 break;
 8002798:	f003 be1e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  40  :    x=447 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 800279e:	f240 12bf 	movw	r2, #447	; 0x1bf
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 80027ac:	2206      	movs	r2, #6
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 80027b2:	2211      	movs	r2, #17
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 80027c4:	2206      	movs	r2, #6
 80027c6:	601a      	str	r2, [r3, #0]
	 break;
 80027c8:	f003 be06 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  41  :    x=453 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 80027ce:	f240 12c5 	movw	r2, #453	; 0x1c5
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 80027dc:	2206      	movs	r2, #6
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 80027e2:	2211      	movs	r2, #17
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 80027f6:	2205      	movs	r2, #5
 80027f8:	601a      	str	r2, [r3, #0]
	 break;
 80027fa:	f003 bded 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  42  :    x=9   ;  y=223  ;  width=7   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=6    ;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002800:	2209      	movs	r2, #9
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 8002806:	22df      	movs	r2, #223	; 0xdf
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002812:	2208      	movs	r2, #8
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002826:	2206      	movs	r2, #6
 8002828:	601a      	str	r2, [r3, #0]
	 break;
 800282a:	f003 bdd5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  43  :    x=453 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <Odczytaj_znak_S16_uc8+0x88c>)
 8002830:	f240 12c5 	movw	r2, #453	; 0x1c5
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <Odczytaj_znak_S16_uc8+0x890>)
 8002838:	22bb      	movs	r2, #187	; 0xbb
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <Odczytaj_znak_S16_uc8+0x894>)
 800283e:	220a      	movs	r2, #10
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <Odczytaj_znak_S16_uc8+0x898>)
 8002844:	220b      	movs	r2, #11
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <Odczytaj_znak_S16_uc8+0x89c>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002850:	2203      	movs	r2, #3
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <Odczytaj_znak_S16_uc8+0x8a4>)
 8002856:	220a      	movs	r2, #10
 8002858:	601a      	str	r2, [r3, #0]
	 break;
 800285a:	f003 bdbd 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 800285e:	bf00      	nop
 8002860:	2400e0c8 	.word	0x2400e0c8
 8002864:	24012ef0 	.word	0x24012ef0
 8002868:	24013124 	.word	0x24013124
 800286c:	24012ef4 	.word	0x24012ef4
 8002870:	2400e0c4 	.word	0x2400e0c4
 8002874:	2400e0cc 	.word	0x2400e0cc
 8002878:	24013120 	.word	0x24013120
	case  44  :    x=507 ;  y=201  ;  width=4   ;  height=7    ;  xoffset=0    ;  yoffset=12   ;  xadvance=4    ;
 800287c:	4b97      	ldr	r3, [pc, #604]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 800287e:	f240 12fb 	movw	r2, #507	; 0x1fb
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b96      	ldr	r3, [pc, #600]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002886:	22c9      	movs	r2, #201	; 0xc9
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	4b96      	ldr	r3, [pc, #600]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 800288c:	2204      	movs	r2, #4
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	4b95      	ldr	r3, [pc, #596]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002892:	2207      	movs	r2, #7
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4b95      	ldr	r3, [pc, #596]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4b94      	ldr	r3, [pc, #592]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	4b94      	ldr	r3, [pc, #592]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 80028a4:	2204      	movs	r2, #4
 80028a6:	601a      	str	r2, [r3, #0]
	 break;
 80028a8:	f003 bd96 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  45  :    x=216 ;  y=223  ;  width=6   ;  height=4    ;  xoffset=0    ;  yoffset=9    ;  xadvance=6    ;
 80028ac:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 80028ae:	22d8      	movs	r2, #216	; 0xd8
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 80028b4:	22df      	movs	r2, #223	; 0xdf
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 80028ba:	2206      	movs	r2, #6
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	4b8a      	ldr	r3, [pc, #552]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 80028c0:	2204      	movs	r2, #4
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	4b89      	ldr	r3, [pc, #548]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 80028cc:	2209      	movs	r2, #9
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 80028d2:	2206      	movs	r2, #6
 80028d4:	601a      	str	r2, [r3, #0]
	 break;
 80028d6:	f003 bd7f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  46  :    x=222 ;  y=223  ;  width=4   ;  height=4    ;  xoffset=0    ;  yoffset=12   ;  xadvance=4    ;
 80028da:	4b80      	ldr	r3, [pc, #512]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 80028dc:	22de      	movs	r2, #222	; 0xde
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 80028e2:	22df      	movs	r2, #223	; 0xdf
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	4b7f      	ldr	r3, [pc, #508]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 80028e8:	2204      	movs	r2, #4
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 80028ee:	2204      	movs	r2, #4
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b7d      	ldr	r3, [pc, #500]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b7d      	ldr	r3, [pc, #500]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002900:	2204      	movs	r2, #4
 8002902:	601a      	str	r2, [r3, #0]
	 break;
 8002904:	f003 bd68 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  47  :    x=494 ;  y=72   ;  width=6   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 8002908:	4b74      	ldr	r3, [pc, #464]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 800290a:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002912:	2248      	movs	r2, #72	; 0x48
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	4b73      	ldr	r3, [pc, #460]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002918:	2206      	movs	r2, #6
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b72      	ldr	r3, [pc, #456]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 800291e:	220e      	movs	r2, #14
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	4b72      	ldr	r3, [pc, #456]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002932:	2204      	movs	r2, #4
 8002934:	601a      	str	r2, [r3, #0]
	 break;
 8002936:	f003 bd4f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  48  :    x=500 ;  y=72   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800293a:	4b68      	ldr	r3, [pc, #416]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 800293c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002944:	2248      	movs	r2, #72	; 0x48
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 800294a:	2209      	movs	r2, #9
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002950:	220e      	movs	r2, #14
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4b65      	ldr	r3, [pc, #404]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002962:	2209      	movs	r2, #9
 8002964:	601a      	str	r2, [r3, #0]
	 break;
 8002966:	f003 bd37 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  49  :    x=0   ;  y=89   ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002972:	2259      	movs	r2, #89	; 0x59
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	4b5b      	ldr	r3, [pc, #364]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	4b5a      	ldr	r3, [pc, #360]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 800297e:	220e      	movs	r2, #14
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4b5a      	ldr	r3, [pc, #360]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002990:	2209      	movs	r2, #9
 8002992:	601a      	str	r2, [r3, #0]
	 break;
 8002994:	f003 bd20 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  50  :    x=7   ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 800299a:	2207      	movs	r2, #7
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 80029a0:	2259      	movs	r2, #89	; 0x59
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 80029a6:	2209      	movs	r2, #9
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 80029ac:	220e      	movs	r2, #14
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 80029be:	2209      	movs	r2, #9
 80029c0:	601a      	str	r2, [r3, #0]
	 break;
 80029c2:	f003 bd09 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  51  :    x=16  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 80029c6:	4b45      	ldr	r3, [pc, #276]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 80029c8:	2210      	movs	r2, #16
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	4b44      	ldr	r3, [pc, #272]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 80029ce:	2259      	movs	r2, #89	; 0x59
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 80029d4:	220a      	movs	r2, #10
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 80029da:	220e      	movs	r2, #14
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 80029ee:	2209      	movs	r2, #9
 80029f0:	601a      	str	r2, [r3, #0]
	 break;
 80029f2:	f003 bcf1 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  52  :    x=26  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 80029f8:	221a      	movs	r2, #26
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 80029fe:	2259      	movs	r2, #89	; 0x59
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002a04:	220a      	movs	r2, #10
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002a0a:	220e      	movs	r2, #14
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002a1c:	220a      	movs	r2, #10
 8002a1e:	601a      	str	r2, [r3, #0]
	 break;
 8002a20:	f003 bcda 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  53  :    x=36  ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002a2c:	2259      	movs	r2, #89	; 0x59
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002a32:	2209      	movs	r2, #9
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002a38:	220e      	movs	r2, #14
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002a4a:	2209      	movs	r2, #9
 8002a4c:	601a      	str	r2, [r3, #0]
	 break;
 8002a4e:	f003 bcc3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  54  :    x=45  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 8002a54:	222d      	movs	r2, #45	; 0x2d
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002a5a:	2259      	movs	r2, #89	; 0x59
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002a60:	220a      	movs	r2, #10
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002a66:	220e      	movs	r2, #14
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002a78:	220a      	movs	r2, #10
 8002a7a:	601a      	str	r2, [r3, #0]
	 break;
 8002a7c:	f003 bcac 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  55  :    x=55  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 8002a82:	2237      	movs	r2, #55	; 0x37
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002a88:	2259      	movs	r2, #89	; 0x59
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002a8e:	220a      	movs	r2, #10
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002a94:	220e      	movs	r2, #14
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002aa6:	220a      	movs	r2, #10
 8002aa8:	601a      	str	r2, [r3, #0]
	 break;
 8002aaa:	f003 bc95 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  56  :    x=65  ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <Odczytaj_znak_S16_uc8+0xb08>)
 8002ab0:	2241      	movs	r2, #65	; 0x41
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002ab6:	2259      	movs	r2, #89	; 0x59
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <Odczytaj_znak_S16_uc8+0xb10>)
 8002abc:	2209      	movs	r2, #9
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <Odczytaj_znak_S16_uc8+0xb14>)
 8002ac2:	220e      	movs	r2, #14
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <Odczytaj_znak_S16_uc8+0xb18>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <Odczytaj_znak_S16_uc8+0xb20>)
 8002ad4:	2209      	movs	r2, #9
 8002ad6:	601a      	str	r2, [r3, #0]
	 break;
 8002ad8:	f003 bc7e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8002adc:	2400e0c8 	.word	0x2400e0c8
 8002ae0:	24012ef0 	.word	0x24012ef0
 8002ae4:	24013124 	.word	0x24013124
 8002ae8:	24012ef4 	.word	0x24012ef4
 8002aec:	2400e0c4 	.word	0x2400e0c4
 8002af0:	2400e0cc 	.word	0x2400e0cc
 8002af4:	24013120 	.word	0x24013120
	case  57  :    x=74  ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8002af8:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002afa:	224a      	movs	r2, #74	; 0x4a
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	4b97      	ldr	r3, [pc, #604]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002b00:	2259      	movs	r2, #89	; 0x59
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b96      	ldr	r3, [pc, #600]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b06:	2209      	movs	r2, #9
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	4b96      	ldr	r3, [pc, #600]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b0c:	220e      	movs	r2, #14
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4b95      	ldr	r3, [pc, #596]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	4b95      	ldr	r3, [pc, #596]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	4b94      	ldr	r3, [pc, #592]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002b1e:	2209      	movs	r2, #9
 8002b20:	601a      	str	r2, [r3, #0]
	 break;
 8002b22:	f003 bc59 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  58  :    x=463 ;  y=187  ;  width=4   ;  height=11   ;  xoffset=1    ;  yoffset=5    ;  xadvance=6    ;
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002b28:	f240 12cf 	movw	r2, #463	; 0x1cf
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002b30:	22bb      	movs	r2, #187	; 0xbb
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	4b8a      	ldr	r3, [pc, #552]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b36:	2204      	movs	r2, #4
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	4b8a      	ldr	r3, [pc, #552]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b3c:	220b      	movs	r2, #11
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	4b89      	ldr	r3, [pc, #548]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	4b89      	ldr	r3, [pc, #548]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002b48:	2205      	movs	r2, #5
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002b4e:	2206      	movs	r2, #6
 8002b50:	601a      	str	r2, [r3, #0]
	 break;
 8002b52:	f003 bc41 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  59  :    x=83  ;  y=89   ;  width=4   ;  height=14   ;  xoffset=1    ;  yoffset=5    ;  xadvance=6    ;
 8002b56:	4b80      	ldr	r3, [pc, #512]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002b58:	2253      	movs	r2, #83	; 0x53
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002b5e:	2259      	movs	r2, #89	; 0x59
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b64:	2204      	movs	r2, #4
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4b7e      	ldr	r3, [pc, #504]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b6a:	220e      	movs	r2, #14
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	4b7e      	ldr	r3, [pc, #504]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4b7d      	ldr	r3, [pc, #500]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002b76:	2205      	movs	r2, #5
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002b7c:	2206      	movs	r2, #6
 8002b7e:	601a      	str	r2, [r3, #0]
	 break;
 8002b80:	f003 bc2a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  60  :    x=413 ;  y=187  ;  width=10  ;  height=12   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8002b84:	4b74      	ldr	r3, [pc, #464]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002b86:	f240 129d 	movw	r2, #413	; 0x19d
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002b8e:	22bb      	movs	r2, #187	; 0xbb
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b94:	220a      	movs	r2, #10
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b72      	ldr	r3, [pc, #456]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002bac:	220a      	movs	r2, #10
 8002bae:	601a      	str	r2, [r3, #0]
	 break;
 8002bb0:	f003 bc12 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  61  :    x=58  ;  y=223  ;  width=10  ;  height=7    ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8002bb4:	4b68      	ldr	r3, [pc, #416]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002bb6:	223a      	movs	r2, #58	; 0x3a
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002bbc:	22df      	movs	r2, #223	; 0xdf
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002bd4:	2205      	movs	r2, #5
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002bda:	220a      	movs	r2, #10
 8002bdc:	601a      	str	r2, [r3, #0]
	 break;
 8002bde:	f003 bbfb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  62  :    x=423 ;  y=187  ;  width=10  ;  height=12   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002be4:	f240 12a7 	movw	r2, #423	; 0x1a7
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002bec:	22bb      	movs	r2, #187	; 0xbb
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002bf8:	220c      	movs	r2, #12
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002c04:	2203      	movs	r2, #3
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	4b59      	ldr	r3, [pc, #356]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002c0a:	220a      	movs	r2, #10
 8002c0c:	601a      	str	r2, [r3, #0]
	 break;
 8002c0e:	f003 bbe3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  63  :    x=87  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002c14:	2257      	movs	r2, #87	; 0x57
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002c1a:	2259      	movs	r2, #89	; 0x59
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002c20:	220a      	movs	r2, #10
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	4b4f      	ldr	r3, [pc, #316]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002c26:	220e      	movs	r2, #14
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002c38:	220a      	movs	r2, #10
 8002c3a:	601a      	str	r2, [r3, #0]
	 break;
 8002c3c:	f003 bbcc 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  64  :    x=459 ;  y=0    ;  width=16  ;  height=17   ;  xoffset=0    ;  yoffset=0    ;  xadvance=15   ;
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002c42:	f240 12cb 	movw	r2, #459	; 0x1cb
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	4b44      	ldr	r3, [pc, #272]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002c50:	2210      	movs	r2, #16
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002c56:	2211      	movs	r2, #17
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002c68:	220f      	movs	r2, #15
 8002c6a:	601a      	str	r2, [r3, #0]
	 break;
 8002c6c:	f003 bbb4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  65  :    x=97  ;  y=89   ;  width=14  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002c72:	2261      	movs	r2, #97	; 0x61
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002c78:	2259      	movs	r2, #89	; 0x59
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002c7e:	220e      	movs	r2, #14
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002c84:	220e      	movs	r2, #14
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002c98:	220c      	movs	r2, #12
 8002c9a:	601a      	str	r2, [r3, #0]
	 break;
 8002c9c:	f003 bb9c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  66  :    x=111 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002ca2:	226f      	movs	r2, #111	; 0x6f
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002ca8:	2259      	movs	r2, #89	; 0x59
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002cae:	220b      	movs	r2, #11
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002cb4:	220e      	movs	r2, #14
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002cc6:	220b      	movs	r2, #11
 8002cc8:	601a      	str	r2, [r3, #0]
	 break;
 8002cca:	f003 bb85 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  67  :    x=122 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002cd0:	227a      	movs	r2, #122	; 0x7a
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002cd6:	2259      	movs	r2, #89	; 0x59
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002cdc:	220c      	movs	r2, #12
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002ce2:	220e      	movs	r2, #14
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002cf4:	220c      	movs	r2, #12
 8002cf6:	601a      	str	r2, [r3, #0]
	 break;
 8002cf8:	f003 bb6e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  68  :    x=134 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002cfe:	2286      	movs	r2, #134	; 0x86
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002d04:	2259      	movs	r2, #89	; 0x59
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002d0a:	220b      	movs	r2, #11
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002d10:	220e      	movs	r2, #14
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002d22:	220b      	movs	r2, #11
 8002d24:	601a      	str	r2, [r3, #0]
	 break;
 8002d26:	f003 bb57 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  69  :    x=145 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <Odczytaj_znak_S16_uc8+0xd84>)
 8002d2c:	2291      	movs	r2, #145	; 0x91
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <Odczytaj_znak_S16_uc8+0xd88>)
 8002d32:	2259      	movs	r2, #89	; 0x59
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002d38:	220b      	movs	r2, #11
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <Odczytaj_znak_S16_uc8+0xd90>)
 8002d3e:	220e      	movs	r2, #14
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <Odczytaj_znak_S16_uc8+0xd94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <Odczytaj_znak_S16_uc8+0xd98>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002d50:	220b      	movs	r2, #11
 8002d52:	601a      	str	r2, [r3, #0]
	 break;
 8002d54:	f003 bb40 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8002d58:	2400e0c8 	.word	0x2400e0c8
 8002d5c:	24012ef0 	.word	0x24012ef0
 8002d60:	24013124 	.word	0x24013124
 8002d64:	24012ef4 	.word	0x24012ef4
 8002d68:	2400e0c4 	.word	0x2400e0c4
 8002d6c:	2400e0cc 	.word	0x2400e0cc
 8002d70:	24013120 	.word	0x24013120
	case  70  :    x=156 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002d74:	4b96      	ldr	r3, [pc, #600]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002d76:	229c      	movs	r2, #156	; 0x9c
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b96      	ldr	r3, [pc, #600]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002d7c:	2259      	movs	r2, #89	; 0x59
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	4b95      	ldr	r3, [pc, #596]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002d82:	220a      	movs	r2, #10
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4b95      	ldr	r3, [pc, #596]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002d88:	220e      	movs	r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	4b94      	ldr	r3, [pc, #592]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	4b93      	ldr	r3, [pc, #588]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	601a      	str	r2, [r3, #0]
	 break;
 8002d9e:	f003 bb1b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  71  :    x=166 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002da2:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002da4:	22a6      	movs	r2, #166	; 0xa6
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4b8a      	ldr	r3, [pc, #552]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002daa:	2259      	movs	r2, #89	; 0x59
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002db0:	220d      	movs	r2, #13
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002db6:	220e      	movs	r2, #14
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002dc8:	220d      	movs	r2, #13
 8002dca:	601a      	str	r2, [r3, #0]
	 break;
 8002dcc:	f003 bb04 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  72  :    x=179 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002dd2:	22b3      	movs	r2, #179	; 0xb3
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002dd8:	2259      	movs	r2, #89	; 0x59
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002dde:	220b      	movs	r2, #11
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002de4:	220e      	movs	r2, #14
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	4b7d      	ldr	r3, [pc, #500]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002df6:	220b      	movs	r2, #11
 8002df8:	601a      	str	r2, [r3, #0]
	 break;
 8002dfa:	f003 baed 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  73  :    x=190 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8002dfe:	4b74      	ldr	r3, [pc, #464]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e00:	22be      	movs	r2, #190	; 0xbe
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e06:	2259      	movs	r2, #89	; 0x59
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002e12:	220e      	movs	r2, #14
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b71      	ldr	r3, [pc, #452]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002e24:	2204      	movs	r2, #4
 8002e26:	601a      	str	r2, [r3, #0]
	 break;
 8002e28:	f003 bad6 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  74  :    x=194 ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e2e:	22c2      	movs	r2, #194	; 0xc2
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e34:	2259      	movs	r2, #89	; 0x59
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4b67      	ldr	r3, [pc, #412]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002e3a:	2209      	movs	r2, #9
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002e40:	220e      	movs	r2, #14
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002e52:	220a      	movs	r2, #10
 8002e54:	601a      	str	r2, [r3, #0]
	 break;
 8002e56:	f003 babf 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  75  :    x=203 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e5c:	22cb      	movs	r2, #203	; 0xcb
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e62:	2259      	movs	r2, #89	; 0x59
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	4b5c      	ldr	r3, [pc, #368]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002e68:	220c      	movs	r2, #12
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002e6e:	220e      	movs	r2, #14
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002e80:	220b      	movs	r2, #11
 8002e82:	601a      	str	r2, [r3, #0]
	 break;
 8002e84:	f003 baa8 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  76  :    x=215 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002e88:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e8a:	22d7      	movs	r2, #215	; 0xd7
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e90:	2259      	movs	r2, #89	; 0x59
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002e96:	220a      	movs	r2, #10
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002e9c:	220e      	movs	r2, #14
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002eae:	220a      	movs	r2, #10
 8002eb0:	601a      	str	r2, [r3, #0]
	 break;
 8002eb2:	f003 ba91 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  77  :    x=225 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002eb6:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002eb8:	22e1      	movs	r2, #225	; 0xe1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	4b45      	ldr	r3, [pc, #276]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002ebe:	2259      	movs	r2, #89	; 0x59
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002ec4:	220d      	movs	r2, #13
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002eca:	220e      	movs	r2, #14
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002edc:	220d      	movs	r2, #13
 8002ede:	601a      	str	r2, [r3, #0]
	 break;
 8002ee0:	f003 ba7a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  78  :    x=238 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002ee6:	22ee      	movs	r2, #238	; 0xee
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002eec:	2259      	movs	r2, #89	; 0x59
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002ef8:	220e      	movs	r2, #14
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
	 break;
 8002f0e:	f003 ba63 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  79  :    x=249 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002f14:	22f9      	movs	r2, #249	; 0xf9
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002f1a:	2259      	movs	r2, #89	; 0x59
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002f20:	220d      	movs	r2, #13
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002f26:	220e      	movs	r2, #14
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002f38:	220d      	movs	r2, #13
 8002f3a:	601a      	str	r2, [r3, #0]
	 break;
 8002f3c:	f003 ba4c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  80  :    x=262 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002f42:	f44f 7283 	mov.w	r2, #262	; 0x106
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002f4a:	2259      	movs	r2, #89	; 0x59
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002f50:	220b      	movs	r2, #11
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002f56:	220e      	movs	r2, #14
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002f68:	220b      	movs	r2, #11
 8002f6a:	601a      	str	r2, [r3, #0]
	 break;
 8002f6c:	f003 ba34 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  81  :    x=363 ;  y=72   ;  width=13  ;  height=15   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002f72:	f240 126b 	movw	r2, #363	; 0x16b
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002f7a:	2248      	movs	r2, #72	; 0x48
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002f80:	220d      	movs	r2, #13
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002f86:	220f      	movs	r2, #15
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002f98:	220d      	movs	r2, #13
 8002f9a:	601a      	str	r2, [r3, #0]
	 break;
 8002f9c:	f003 ba1c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  82  :    x=273 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <Odczytaj_znak_S16_uc8+0xffc>)
 8002fa2:	f240 1211 	movw	r2, #273	; 0x111
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <Odczytaj_znak_S16_uc8+0x1000>)
 8002faa:	2259      	movs	r2, #89	; 0x59
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <Odczytaj_znak_S16_uc8+0x1004>)
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <Odczytaj_znak_S16_uc8+0x1008>)
 8002fb6:	220e      	movs	r2, #14
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <Odczytaj_znak_S16_uc8+0x100c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <Odczytaj_znak_S16_uc8+0x1010>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <Odczytaj_znak_S16_uc8+0x1014>)
 8002fc8:	220b      	movs	r2, #11
 8002fca:	601a      	str	r2, [r3, #0]
	 break;
 8002fcc:	f003 ba04 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8002fd0:	2400e0c8 	.word	0x2400e0c8
 8002fd4:	24012ef0 	.word	0x24012ef0
 8002fd8:	24013124 	.word	0x24013124
 8002fdc:	24012ef4 	.word	0x24012ef4
 8002fe0:	2400e0c4 	.word	0x2400e0c4
 8002fe4:	2400e0cc 	.word	0x2400e0cc
 8002fe8:	24013120 	.word	0x24013120
	case  83  :    x=285 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002fec:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 8002fee:	f240 121d 	movw	r2, #285	; 0x11d
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	4b9c      	ldr	r3, [pc, #624]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 8002ff6:	2259      	movs	r2, #89	; 0x59
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	4b9c      	ldr	r3, [pc, #624]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 8002ffc:	220b      	movs	r2, #11
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b9b      	ldr	r3, [pc, #620]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 8003002:	220e      	movs	r2, #14
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4b9b      	ldr	r3, [pc, #620]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	4b9a      	ldr	r3, [pc, #616]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	4b9a      	ldr	r3, [pc, #616]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 8003014:	220b      	movs	r2, #11
 8003016:	601a      	str	r2, [r3, #0]
	 break;
 8003018:	f003 b9de 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  84  :    x=296 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 800301c:	4b91      	ldr	r3, [pc, #580]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 800301e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 8003026:	2259      	movs	r2, #89	; 0x59
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	4b90      	ldr	r3, [pc, #576]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 800302c:	220b      	movs	r2, #11
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 8003032:	220e      	movs	r2, #14
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4b8f      	ldr	r3, [pc, #572]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	4b8e      	ldr	r3, [pc, #568]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	4b8e      	ldr	r3, [pc, #568]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 8003044:	220b      	movs	r2, #11
 8003046:	601a      	str	r2, [r3, #0]
	 break;
 8003048:	f003 b9c6 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  85  :    x=307 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 800304c:	4b85      	ldr	r3, [pc, #532]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 800304e:	f240 1233 	movw	r2, #307	; 0x133
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b84      	ldr	r3, [pc, #528]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 8003056:	2259      	movs	r2, #89	; 0x59
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4b84      	ldr	r3, [pc, #528]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 800305c:	220b      	movs	r2, #11
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	4b83      	ldr	r3, [pc, #524]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 8003062:	220e      	movs	r2, #14
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4b83      	ldr	r3, [pc, #524]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	4b82      	ldr	r3, [pc, #520]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 8003074:	220b      	movs	r2, #11
 8003076:	601a      	str	r2, [r3, #0]
	 break;
 8003078:	f003 b9ae 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  86  :    x=318 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 800307c:	4b79      	ldr	r3, [pc, #484]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 800307e:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 8003086:	2259      	movs	r2, #89	; 0x59
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	4b78      	ldr	r3, [pc, #480]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 800308c:	220d      	movs	r2, #13
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	4b77      	ldr	r3, [pc, #476]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 8003092:	220e      	movs	r2, #14
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4b77      	ldr	r3, [pc, #476]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	4b76      	ldr	r3, [pc, #472]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 80030a6:	220b      	movs	r2, #11
 80030a8:	601a      	str	r2, [r3, #0]
	 break;
 80030aa:	f003 b995 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  87  :    x=331 ;  y=89   ;  width=17  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=15   ;
 80030ae:	4b6d      	ldr	r3, [pc, #436]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 80030b0:	f240 124b 	movw	r2, #331	; 0x14b
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 80030b8:	2259      	movs	r2, #89	; 0x59
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	4b6b      	ldr	r3, [pc, #428]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 80030be:	2211      	movs	r2, #17
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 80030c4:	220e      	movs	r2, #14
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 80030ca:	f04f 32ff 	mov.w	r2, #4294967295
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b69      	ldr	r3, [pc, #420]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4b69      	ldr	r3, [pc, #420]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 80030d8:	220f      	movs	r2, #15
 80030da:	601a      	str	r2, [r3, #0]
	 break;
 80030dc:	f003 b97c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  88  :    x=348 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 80030e0:	4b60      	ldr	r3, [pc, #384]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 80030e2:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 80030ea:	2259      	movs	r2, #89	; 0x59
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	4b5f      	ldr	r3, [pc, #380]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 80030f0:	220d      	movs	r2, #13
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	4b5e      	ldr	r3, [pc, #376]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 80030f6:	220e      	movs	r2, #14
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	4b5d      	ldr	r3, [pc, #372]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	4b5c      	ldr	r3, [pc, #368]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 800310a:	220b      	movs	r2, #11
 800310c:	601a      	str	r2, [r3, #0]
	 break;
 800310e:	f003 b963 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  89  :    x=361 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=10   ;
 8003112:	4b54      	ldr	r3, [pc, #336]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 8003114:	f240 1269 	movw	r2, #361	; 0x169
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	4b53      	ldr	r3, [pc, #332]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 800311c:	2259      	movs	r2, #89	; 0x59
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	4b52      	ldr	r3, [pc, #328]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4b52      	ldr	r3, [pc, #328]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 8003128:	220e      	movs	r2, #14
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	4b51      	ldr	r3, [pc, #324]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 800312e:	f04f 32ff 	mov.w	r2, #4294967295
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 800313c:	220a      	movs	r2, #10
 800313e:	601a      	str	r2, [r3, #0]
	 break;
 8003140:	f003 b94a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  90  :    x=373 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8003144:	4b47      	ldr	r3, [pc, #284]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 8003146:	f240 1275 	movw	r2, #373	; 0x175
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	4b46      	ldr	r3, [pc, #280]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 800314e:	2259      	movs	r2, #89	; 0x59
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 8003154:	220b      	movs	r2, #11
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	4b45      	ldr	r3, [pc, #276]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 800315a:	220e      	movs	r2, #14
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	4b45      	ldr	r3, [pc, #276]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	4b44      	ldr	r3, [pc, #272]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	4b44      	ldr	r3, [pc, #272]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 800316c:	220b      	movs	r2, #11
 800316e:	601a      	str	r2, [r3, #0]
	 break;
 8003170:	f003 b932 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  91  :    x=475 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 8003176:	f240 12db 	movw	r2, #475	; 0x1db
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 8003184:	2206      	movs	r2, #6
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	4b39      	ldr	r3, [pc, #228]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 800318a:	2211      	movs	r2, #17
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	4b38      	ldr	r3, [pc, #224]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 800319c:	2206      	movs	r2, #6
 800319e:	601a      	str	r2, [r3, #0]
	 break;
 80031a0:	f003 b91a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  92  :    x=384 ;  y=89   ;  width=6   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 80031a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 80031ae:	2259      	movs	r2, #89	; 0x59
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 80031b4:	2206      	movs	r2, #6
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 80031ba:	220e      	movs	r2, #14
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 80031ce:	2204      	movs	r2, #4
 80031d0:	601a      	str	r2, [r3, #0]
	 break;
 80031d2:	f003 b901 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  93  :    x=481 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 80031d8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 80031e6:	2206      	movs	r2, #6
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 80031ec:	2211      	movs	r2, #17
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 80031fe:	2206      	movs	r2, #6
 8003200:	601a      	str	r2, [r3, #0]
	 break;
 8003202:	f003 b8e9 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  94  :    x=0   ;  y=223  ;  width=9   ;  height=9    ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 800320e:	22df      	movs	r2, #223	; 0xdf
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 8003214:	2209      	movs	r2, #9
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 800321a:	2209      	movs	r2, #9
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 800322c:	2209      	movs	r2, #9
 800322e:	601a      	str	r2, [r3, #0]
	 break;
 8003230:	f003 b8d2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  95  :    x=226 ;  y=223  ;  width=11  ;  height=4    ;  xoffset=-1   ;  yoffset=15   ;  xadvance=9    ;
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <Odczytaj_znak_S16_uc8+0x1290>)
 8003236:	22e2      	movs	r2, #226	; 0xe2
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <Odczytaj_znak_S16_uc8+0x1294>)
 800323c:	22df      	movs	r2, #223	; 0xdf
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <Odczytaj_znak_S16_uc8+0x1298>)
 8003242:	220b      	movs	r2, #11
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <Odczytaj_znak_S16_uc8+0x129c>)
 8003248:	2204      	movs	r2, #4
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <Odczytaj_znak_S16_uc8+0x12a0>)
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <Odczytaj_znak_S16_uc8+0x12a4>)
 8003256:	220f      	movs	r2, #15
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <Odczytaj_znak_S16_uc8+0x12a8>)
 800325c:	2209      	movs	r2, #9
 800325e:	601a      	str	r2, [r3, #0]
	 break;
 8003260:	f003 b8ba 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8003264:	2400e0c8 	.word	0x2400e0c8
 8003268:	24012ef0 	.word	0x24012ef0
 800326c:	24013124 	.word	0x24013124
 8003270:	24012ef4 	.word	0x24012ef4
 8003274:	2400e0c4 	.word	0x2400e0c4
 8003278:	2400e0cc 	.word	0x2400e0cc
 800327c:	24013120 	.word	0x24013120
	case  96  :    x=237 ;  y=223  ;  width=6   ;  height=4    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003280:	4b9b      	ldr	r3, [pc, #620]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003282:	22ed      	movs	r2, #237	; 0xed
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	4b9b      	ldr	r3, [pc, #620]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 8003288:	22df      	movs	r2, #223	; 0xdf
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	4b9a      	ldr	r3, [pc, #616]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 800328e:	2206      	movs	r2, #6
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	4b9a      	ldr	r3, [pc, #616]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003294:	2204      	movs	r2, #4
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	4b99      	ldr	r3, [pc, #612]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	4b98      	ldr	r3, [pc, #608]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b98      	ldr	r3, [pc, #608]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 80032a8:	2205      	movs	r2, #5
 80032aa:	601a      	str	r2, [r3, #0]
	 break;
 80032ac:	f003 b894 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  97  :    x=467 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 80032b0:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 80032b2:	f240 12d3 	movw	r2, #467	; 0x1d3
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	4b8e      	ldr	r3, [pc, #568]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 80032ba:	22bb      	movs	r2, #187	; 0xbb
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 80032c0:	220a      	movs	r2, #10
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	4b8d      	ldr	r3, [pc, #564]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 80032c6:	220b      	movs	r2, #11
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	4b8d      	ldr	r3, [pc, #564]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 80032d2:	2205      	movs	r2, #5
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 80032d8:	2209      	movs	r2, #9
 80032da:	601a      	str	r2, [r3, #0]
	 break;
 80032dc:	f003 b87c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  98  :    x=390 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80032e0:	4b83      	ldr	r3, [pc, #524]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 80032e2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 80032ea:	2259      	movs	r2, #89	; 0x59
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 80032f0:	220a      	movs	r2, #10
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	4b81      	ldr	r3, [pc, #516]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 80032f6:	220e      	movs	r2, #14
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4b80      	ldr	r3, [pc, #512]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	4b80      	ldr	r3, [pc, #512]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 8003308:	220a      	movs	r2, #10
 800330a:	601a      	str	r2, [r3, #0]
	 break;
 800330c:	f003 b864 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  99  :    x=477 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003310:	4b77      	ldr	r3, [pc, #476]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003312:	f240 12dd 	movw	r2, #477	; 0x1dd
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800331a:	22bb      	movs	r2, #187	; 0xbb
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	4b76      	ldr	r3, [pc, #472]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 8003320:	220a      	movs	r2, #10
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	4b75      	ldr	r3, [pc, #468]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003326:	220b      	movs	r2, #11
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	4b74      	ldr	r3, [pc, #464]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003332:	2205      	movs	r2, #5
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	4b74      	ldr	r3, [pc, #464]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 8003338:	2209      	movs	r2, #9
 800333a:	601a      	str	r2, [r3, #0]
	 break;
 800333c:	f003 b84c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  100 :    x=400 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8003340:	4b6b      	ldr	r3, [pc, #428]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003342:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800334a:	2259      	movs	r2, #89	; 0x59
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 8003350:	220a      	movs	r2, #10
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	4b69      	ldr	r3, [pc, #420]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003356:	220e      	movs	r2, #14
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	4b69      	ldr	r3, [pc, #420]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b68      	ldr	r3, [pc, #416]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 8003368:	220a      	movs	r2, #10
 800336a:	601a      	str	r2, [r3, #0]
	 break;
 800336c:	f003 b834 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  101 :    x=487 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8003370:	4b5f      	ldr	r3, [pc, #380]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003372:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800337a:	22bb      	movs	r2, #187	; 0xbb
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b5e      	ldr	r3, [pc, #376]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 8003380:	220a      	movs	r2, #10
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	4b5d      	ldr	r3, [pc, #372]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003386:	220b      	movs	r2, #11
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b5c      	ldr	r3, [pc, #368]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003392:	2205      	movs	r2, #5
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 8003398:	220a      	movs	r2, #10
 800339a:	601a      	str	r2, [r3, #0]
	 break;
 800339c:	f003 b81c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  102 :    x=410 ;  y=89   ;  width=8   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 80033a2:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 80033aa:	2259      	movs	r2, #89	; 0x59
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 80033b0:	2208      	movs	r2, #8
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	4b51      	ldr	r3, [pc, #324]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 80033b6:	220e      	movs	r2, #14
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	4b50      	ldr	r3, [pc, #320]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	4b50      	ldr	r3, [pc, #320]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 80033c8:	2207      	movs	r2, #7
 80033ca:	601a      	str	r2, [r3, #0]
	 break;
 80033cc:	f003 b804 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  103 :    x=418 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 80033d0:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 80033d2:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 80033da:	2259      	movs	r2, #89	; 0x59
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 80033e0:	220a      	movs	r2, #10
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	4b45      	ldr	r3, [pc, #276]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 80033e6:	220e      	movs	r2, #14
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	4b45      	ldr	r3, [pc, #276]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 80033f2:	2205      	movs	r2, #5
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4b44      	ldr	r3, [pc, #272]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 80033f8:	220a      	movs	r2, #10
 80033fa:	601a      	str	r2, [r3, #0]
	 break;
 80033fc:	f002 bfec 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  104 :    x=428 ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003402:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800340a:	2259      	movs	r2, #89	; 0x59
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 8003410:	2209      	movs	r2, #9
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	4b39      	ldr	r3, [pc, #228]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003416:	220e      	movs	r2, #14
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	4b39      	ldr	r3, [pc, #228]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	4b38      	ldr	r3, [pc, #224]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	4b38      	ldr	r3, [pc, #224]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 8003428:	2209      	movs	r2, #9
 800342a:	601a      	str	r2, [r3, #0]
	 break;
 800342c:	f002 bfd4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  105 :    x=437 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8003430:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003432:	f240 12b5 	movw	r2, #437	; 0x1b5
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800343a:	2259      	movs	r2, #89	; 0x59
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 8003440:	2204      	movs	r2, #4
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003446:	220e      	movs	r2, #14
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 8003458:	2204      	movs	r2, #4
 800345a:	601a      	str	r2, [r3, #0]
	 break;
 800345c:	f002 bfbc 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  106 :    x=487 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=4    ;
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003462:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 8003470:	2206      	movs	r2, #6
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 8003476:	2211      	movs	r2, #17
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 800348a:	2204      	movs	r2, #4
 800348c:	601a      	str	r2, [r3, #0]
	 break;
 800348e:	f002 bfa3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  107 :    x=441 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 8003494:	f240 12b9 	movw	r2, #441	; 0x1b9
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 800349c:	2259      	movs	r2, #89	; 0x59
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 80034a2:	220a      	movs	r2, #10
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 80034a8:	220e      	movs	r2, #14
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 80034ba:	2209      	movs	r2, #9
 80034bc:	601a      	str	r2, [r3, #0]
	 break;
 80034be:	f002 bf8b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  108 :    x=190 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <Odczytaj_znak_S16_uc8+0x151c>)
 80034c4:	22be      	movs	r2, #190	; 0xbe
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <Odczytaj_znak_S16_uc8+0x1520>)
 80034ca:	2259      	movs	r2, #89	; 0x59
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <Odczytaj_znak_S16_uc8+0x1524>)
 80034d0:	2204      	movs	r2, #4
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <Odczytaj_znak_S16_uc8+0x1528>)
 80034d6:	220e      	movs	r2, #14
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <Odczytaj_znak_S16_uc8+0x152c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <Odczytaj_znak_S16_uc8+0x1530>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <Odczytaj_znak_S16_uc8+0x1534>)
 80034e8:	2204      	movs	r2, #4
 80034ea:	601a      	str	r2, [r3, #0]
	 break;
 80034ec:	f002 bf74 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 80034f0:	2400e0c8 	.word	0x2400e0c8
 80034f4:	24012ef0 	.word	0x24012ef0
 80034f8:	24013124 	.word	0x24013124
 80034fc:	24012ef4 	.word	0x24012ef4
 8003500:	2400e0c4 	.word	0x2400e0c4
 8003504:	2400e0cc 	.word	0x2400e0cc
 8003508:	24013120 	.word	0x24013120
	case  109 :    x=497 ;  y=187  ;  width=14  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=14   ;
 800350c:	4b99      	ldr	r3, [pc, #612]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 800350e:	f240 12f1 	movw	r2, #497	; 0x1f1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	4b98      	ldr	r3, [pc, #608]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 8003516:	22bb      	movs	r2, #187	; 0xbb
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	4b98      	ldr	r3, [pc, #608]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 800351c:	220e      	movs	r2, #14
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4b97      	ldr	r3, [pc, #604]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003522:	220b      	movs	r2, #11
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4b97      	ldr	r3, [pc, #604]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b96      	ldr	r3, [pc, #600]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 800352e:	2205      	movs	r2, #5
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	4b96      	ldr	r3, [pc, #600]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 8003534:	220e      	movs	r2, #14
 8003536:	601a      	str	r2, [r3, #0]
	 break;
 8003538:	f002 bf4e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  110 :    x=0   ;  y=201  ;  width=9   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 800353c:	4b8d      	ldr	r3, [pc, #564]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	4b8d      	ldr	r3, [pc, #564]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 8003544:	22c9      	movs	r2, #201	; 0xc9
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4b8c      	ldr	r3, [pc, #560]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 800354a:	2209      	movs	r2, #9
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	4b8c      	ldr	r3, [pc, #560]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003550:	220b      	movs	r2, #11
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	4b8b      	ldr	r3, [pc, #556]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	4b8b      	ldr	r3, [pc, #556]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 800355c:	2205      	movs	r2, #5
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	4b8a      	ldr	r3, [pc, #552]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 8003562:	2209      	movs	r2, #9
 8003564:	601a      	str	r2, [r3, #0]
	 break;
 8003566:	f002 bf37 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  111 :    x=9   ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 800356a:	4b82      	ldr	r3, [pc, #520]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 800356c:	2209      	movs	r2, #9
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	4b81      	ldr	r3, [pc, #516]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 8003572:	22c9      	movs	r2, #201	; 0xc9
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003578:	220a      	movs	r2, #10
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	4b80      	ldr	r3, [pc, #512]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 800357e:	220b      	movs	r2, #11
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	4b80      	ldr	r3, [pc, #512]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 800358a:	2205      	movs	r2, #5
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	4b7f      	ldr	r3, [pc, #508]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 8003590:	220a      	movs	r2, #10
 8003592:	601a      	str	r2, [r3, #0]
	 break;
 8003594:	f002 bf20 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  112 :    x=451 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 800359a:	f240 12c3 	movw	r2, #451	; 0x1c3
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 80035a2:	2259      	movs	r2, #89	; 0x59
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	4b75      	ldr	r3, [pc, #468]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 80035a8:	220a      	movs	r2, #10
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	4b74      	ldr	r3, [pc, #464]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 80035ae:	220e      	movs	r2, #14
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4b74      	ldr	r3, [pc, #464]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	4b73      	ldr	r3, [pc, #460]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 80035ba:	2205      	movs	r2, #5
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	4b73      	ldr	r3, [pc, #460]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 80035c0:	220a      	movs	r2, #10
 80035c2:	601a      	str	r2, [r3, #0]
	 break;
 80035c4:	f002 bf08 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  113 :    x=461 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 80035c8:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 80035ca:	f240 12cd 	movw	r2, #461	; 0x1cd
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b69      	ldr	r3, [pc, #420]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 80035d2:	2259      	movs	r2, #89	; 0x59
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	4b69      	ldr	r3, [pc, #420]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 80035d8:	220a      	movs	r2, #10
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 80035de:	220e      	movs	r2, #14
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	4b68      	ldr	r3, [pc, #416]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	4b67      	ldr	r3, [pc, #412]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 80035ea:	2205      	movs	r2, #5
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 80035f0:	220a      	movs	r2, #10
 80035f2:	601a      	str	r2, [r3, #0]
	 break;
 80035f4:	f002 bef0 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  114 :    x=19  ;  y=201  ;  width=7   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=6    ;
 80035f8:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 80035fa:	2213      	movs	r2, #19
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 8003600:	22c9      	movs	r2, #201	; 0xc9
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4b5d      	ldr	r3, [pc, #372]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003606:	2207      	movs	r2, #7
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 800360c:	220b      	movs	r2, #11
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b5c      	ldr	r3, [pc, #368]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 8003618:	2205      	movs	r2, #5
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	4b5b      	ldr	r3, [pc, #364]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 800361e:	2206      	movs	r2, #6
 8003620:	601a      	str	r2, [r3, #0]
	 break;
 8003622:	f002 bed9 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  115 :    x=26  ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003626:	4b53      	ldr	r3, [pc, #332]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003628:	221a      	movs	r2, #26
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	4b52      	ldr	r3, [pc, #328]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 800362e:	22c9      	movs	r2, #201	; 0xc9
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	4b52      	ldr	r3, [pc, #328]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003634:	220a      	movs	r2, #10
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 800363a:	220b      	movs	r2, #11
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 8003646:	2205      	movs	r2, #5
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	4b50      	ldr	r3, [pc, #320]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 800364c:	2209      	movs	r2, #9
 800364e:	601a      	str	r2, [r3, #0]
	 break;
 8003650:	f002 bec2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  116 :    x=471 ;  y=89   ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003654:	4b47      	ldr	r3, [pc, #284]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003656:	f240 12d7 	movw	r2, #471	; 0x1d7
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	4b46      	ldr	r3, [pc, #280]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 800365e:	2259      	movs	r2, #89	; 0x59
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4b46      	ldr	r3, [pc, #280]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 800366a:	220e      	movs	r2, #14
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	4b45      	ldr	r3, [pc, #276]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	4b44      	ldr	r3, [pc, #272]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	4b44      	ldr	r3, [pc, #272]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
	 break;
 8003680:	f002 beaa 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  117 :    x=36  ;  y=201  ;  width=9   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 800368c:	22c9      	movs	r2, #201	; 0xc9
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003692:	2209      	movs	r2, #9
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003698:	220b      	movs	r2, #11
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 80036a4:	2205      	movs	r2, #5
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b38      	ldr	r3, [pc, #224]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 80036aa:	2209      	movs	r2, #9
 80036ac:	601a      	str	r2, [r3, #0]
	 break;
 80036ae:	f002 be93 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  118 :    x=45  ;  y=201  ;  width=11  ;  height=11   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=9    ;
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 80036b4:	222d      	movs	r2, #45	; 0x2d
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 80036ba:	22c9      	movs	r2, #201	; 0xc9
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 80036c0:	220b      	movs	r2, #11
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 80036c6:	220b      	movs	r2, #11
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 80036d4:	2205      	movs	r2, #5
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	4b2c      	ldr	r3, [pc, #176]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 80036da:	2209      	movs	r2, #9
 80036dc:	601a      	str	r2, [r3, #0]
	 break;
 80036de:	f002 be7b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  119 :    x=56  ;  y=201  ;  width=14  ;  height=11   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=12   ;
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 80036e4:	2238      	movs	r2, #56	; 0x38
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 80036ea:	22c9      	movs	r2, #201	; 0xc9
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 80036f0:	220e      	movs	r2, #14
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b22      	ldr	r3, [pc, #136]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 80036f6:	220b      	movs	r2, #11
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	4b21      	ldr	r3, [pc, #132]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 8003704:	2205      	movs	r2, #5
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	4b20      	ldr	r3, [pc, #128]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 800370a:	220c      	movs	r2, #12
 800370c:	601a      	str	r2, [r3, #0]
	 break;
 800370e:	f002 be63 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  120 :    x=70  ;  y=201  ;  width=11  ;  height=11   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=9    ;
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003714:	2246      	movs	r2, #70	; 0x46
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 800371a:	22c9      	movs	r2, #201	; 0xc9
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	4b17      	ldr	r3, [pc, #92]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003720:	220b      	movs	r2, #11
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003726:	220b      	movs	r2, #11
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 8003734:	2205      	movs	r2, #5
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 800373a:	2209      	movs	r2, #9
 800373c:	601a      	str	r2, [r3, #0]
	 break;
 800373e:	f002 be4b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  121 :    x=478 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=9    ;
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003744:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <Odczytaj_znak_S16_uc8+0x17a4>)
 800374c:	2259      	movs	r2, #89	; 0x59
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <Odczytaj_znak_S16_uc8+0x17a8>)
 8003752:	220b      	movs	r2, #11
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003758:	220e      	movs	r2, #14
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <Odczytaj_znak_S16_uc8+0x17b0>)
 800375e:	f04f 32ff 	mov.w	r2, #4294967295
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <Odczytaj_znak_S16_uc8+0x17b4>)
 8003766:	2205      	movs	r2, #5
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <Odczytaj_znak_S16_uc8+0x17b8>)
 800376c:	2209      	movs	r2, #9
 800376e:	601a      	str	r2, [r3, #0]
	 break;
 8003770:	f002 be32 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8003774:	2400e0c8 	.word	0x2400e0c8
 8003778:	24012ef0 	.word	0x24012ef0
 800377c:	24013124 	.word	0x24013124
 8003780:	24012ef4 	.word	0x24012ef4
 8003784:	2400e0c4 	.word	0x2400e0c4
 8003788:	2400e0cc 	.word	0x2400e0cc
 800378c:	24013120 	.word	0x24013120
	case  122 :    x=81  ;  y=201  ;  width=9   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003790:	4b99      	ldr	r3, [pc, #612]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 8003792:	2251      	movs	r2, #81	; 0x51
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	4b99      	ldr	r3, [pc, #612]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003798:	22c9      	movs	r2, #201	; 0xc9
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	4b98      	ldr	r3, [pc, #608]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800379e:	2209      	movs	r2, #9
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	4b98      	ldr	r3, [pc, #608]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 80037a4:	220b      	movs	r2, #11
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	4b97      	ldr	r3, [pc, #604]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	4b97      	ldr	r3, [pc, #604]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 80037b0:	2205      	movs	r2, #5
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	4b96      	ldr	r3, [pc, #600]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80037b6:	2209      	movs	r2, #9
 80037b8:	601a      	str	r2, [r3, #0]
	 break;
 80037ba:	f002 be0d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  123 :    x=493 ;  y=0    ;  width=7   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 80037be:	4b8e      	ldr	r3, [pc, #568]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 80037c0:	f240 12ed 	movw	r2, #493	; 0x1ed
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	4b8c      	ldr	r3, [pc, #560]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80037ce:	2207      	movs	r2, #7
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	4b8c      	ldr	r3, [pc, #560]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 80037d4:	2211      	movs	r2, #17
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	4b8b      	ldr	r3, [pc, #556]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80037e6:	2206      	movs	r2, #6
 80037e8:	601a      	str	r2, [r3, #0]
	 break;
 80037ea:	f002 bdf5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  124 :    x=500 ;  y=0    ;  width=4   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 80037ee:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 80037f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b81      	ldr	r3, [pc, #516]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b80      	ldr	r3, [pc, #512]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80037fe:	2204      	movs	r2, #4
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4b80      	ldr	r3, [pc, #512]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003804:	2211      	movs	r2, #17
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b7f      	ldr	r3, [pc, #508]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	4b7f      	ldr	r3, [pc, #508]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	4b7e      	ldr	r3, [pc, #504]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003816:	2205      	movs	r2, #5
 8003818:	601a      	str	r2, [r3, #0]
	 break;
 800381a:	f002 bddd 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  125 :    x=504 ;  y=0    ;  width=7   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 8003820:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	4b75      	ldr	r3, [pc, #468]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800382e:	2207      	movs	r2, #7
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	4b74      	ldr	r3, [pc, #464]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003834:	2211      	movs	r2, #17
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4b73      	ldr	r3, [pc, #460]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003846:	2206      	movs	r2, #6
 8003848:	601a      	str	r2, [r3, #0]
	 break;
 800384a:	f002 bdc5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  126 :    x=180 ;  y=223  ;  width=10  ;  height=5    ;  xoffset=0    ;  yoffset=7    ;  xadvance=10   ;
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 8003850:	22b4      	movs	r2, #180	; 0xb4
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	4b69      	ldr	r3, [pc, #420]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003856:	22df      	movs	r2, #223	; 0xdf
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800385c:	220a      	movs	r2, #10
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	4b68      	ldr	r3, [pc, #416]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003862:	2205      	movs	r2, #5
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 800386e:	2207      	movs	r2, #7
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003874:	220a      	movs	r2, #10
 8003876:	601a      	str	r2, [r3, #0]
	 break;
 8003878:	f002 bdae 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  160 :    x=0   ;  y=0    ;  width=0   ;  height=0    ;  xoffset=-1   ;  yoffset=14   ;  xadvance=4    ;
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	4b5d      	ldr	r3, [pc, #372]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	4b5c      	ldr	r3, [pc, #368]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 8003896:	f04f 32ff 	mov.w	r2, #4294967295
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	4b5b      	ldr	r3, [pc, #364]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 800389e:	220e      	movs	r2, #14
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	4b5b      	ldr	r3, [pc, #364]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80038a4:	2204      	movs	r2, #4
 80038a6:	601a      	str	r2, [r3, #0]
	 break;
 80038a8:	f002 bd96 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  161 :    x=437 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=1    ;  yoffset=5    ;  xadvance=6    ;
 80038ac:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 80038ae:	f240 12b5 	movw	r2, #437	; 0x1b5
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	4b51      	ldr	r3, [pc, #324]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 80038b6:	2259      	movs	r2, #89	; 0x59
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80038bc:	2204      	movs	r2, #4
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 80038c2:	220e      	movs	r2, #14
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 80038ce:	2205      	movs	r2, #5
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80038d4:	2206      	movs	r2, #6
 80038d6:	601a      	str	r2, [r3, #0]
	 break;
 80038d8:	f002 bd7e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  162 :    x=0   ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 80038e4:	2215      	movs	r2, #21
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	4b45      	ldr	r3, [pc, #276]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80038ea:	220a      	movs	r2, #10
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 80038f0:	2211      	movs	r2, #17
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003902:	2209      	movs	r2, #9
 8003904:	601a      	str	r2, [r3, #0]
	 break;
 8003906:	f002 bd67 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  163 :    x=489 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 800390c:	f240 12e9 	movw	r2, #489	; 0x1e9
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003914:	2259      	movs	r2, #89	; 0x59
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800391a:	220b      	movs	r2, #11
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003920:	220e      	movs	r2, #14
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003932:	220a      	movs	r2, #10
 8003934:	601a      	str	r2, [r3, #0]
	 break;
 8003936:	f002 bd4f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  164 :    x=90  ;  y=201  ;  width=11  ;  height=11   ;  xoffset=-1   ;  yoffset=4    ;  xadvance=9    ;
 800393a:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 800393c:	225a      	movs	r2, #90	; 0x5a
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003942:	22c9      	movs	r2, #201	; 0xc9
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 8003948:	220b      	movs	r2, #11
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b2d      	ldr	r3, [pc, #180]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 800394e:	220b      	movs	r2, #11
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 800395c:	2204      	movs	r2, #4
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003962:	2209      	movs	r2, #9
 8003964:	601a      	str	r2, [r3, #0]
	 break;
 8003966:	f002 bd37 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  165 :    x=500 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 800396c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 8003974:	2259      	movs	r2, #89	; 0x59
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800397a:	220a      	movs	r2, #10
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003980:	220e      	movs	r2, #14
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003992:	220a      	movs	r2, #10
 8003994:	601a      	str	r2, [r3, #0]
	 break;
 8003996:	f002 bd1f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  166 :    x=10  ;  y=21   ;  width=4   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 800399c:	220a      	movs	r2, #10
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 80039a2:	2215      	movs	r2, #21
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 80039ae:	2211      	movs	r2, #17
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80039c0:	2205      	movs	r2, #5
 80039c2:	601a      	str	r2, [r3, #0]
	 break;
 80039c4:	f002 bd08 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  167 :    x=14  ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <Odczytaj_znak_S16_uc8+0x1a24>)
 80039ca:	220e      	movs	r2, #14
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <Odczytaj_znak_S16_uc8+0x1a28>)
 80039d0:	2215      	movs	r2, #21
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80039d6:	220a      	movs	r2, #10
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <Odczytaj_znak_S16_uc8+0x1a30>)
 80039dc:	2211      	movs	r2, #17
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <Odczytaj_znak_S16_uc8+0x1a34>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <Odczytaj_znak_S16_uc8+0x1a38>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80039ee:	220a      	movs	r2, #10
 80039f0:	601a      	str	r2, [r3, #0]
	 break;
 80039f2:	f002 bcf1 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 80039f6:	bf00      	nop
 80039f8:	2400e0c8 	.word	0x2400e0c8
 80039fc:	24012ef0 	.word	0x24012ef0
 8003a00:	24013124 	.word	0x24013124
 8003a04:	24012ef4 	.word	0x24012ef4
 8003a08:	2400e0c4 	.word	0x2400e0c4
 8003a0c:	2400e0cc 	.word	0x2400e0cc
 8003a10:	24013120 	.word	0x24013120
	case  168 :    x=243 ;  y=223  ;  width=7   ;  height=4    ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003a14:	4b99      	ldr	r3, [pc, #612]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003a16:	22f3      	movs	r2, #243	; 0xf3
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	4b99      	ldr	r3, [pc, #612]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003a1c:	22df      	movs	r2, #223	; 0xdf
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	4b98      	ldr	r3, [pc, #608]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003a22:	2207      	movs	r2, #7
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	4b98      	ldr	r3, [pc, #608]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003a28:	2204      	movs	r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	4b97      	ldr	r3, [pc, #604]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4b97      	ldr	r3, [pc, #604]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	4b96      	ldr	r3, [pc, #600]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a3a:	2207      	movs	r2, #7
 8003a3c:	601a      	str	r2, [r3, #0]
	 break;
 8003a3e:	f002 bccb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  169 :    x=0   ;  y=103  ;  width=14  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8003a42:	4b8e      	ldr	r3, [pc, #568]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	4b8d      	ldr	r3, [pc, #564]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003a4a:	2267      	movs	r2, #103	; 0x67
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	4b8d      	ldr	r3, [pc, #564]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003a50:	220e      	movs	r2, #14
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	4b8c      	ldr	r3, [pc, #560]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003a56:	220e      	movs	r2, #14
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	4b8c      	ldr	r3, [pc, #560]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
	 break;
 8003a6e:	f002 bcb3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  170 :    x=16  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8003a72:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003a74:	2210      	movs	r2, #16
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	4b81      	ldr	r3, [pc, #516]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003a7a:	22df      	movs	r2, #223	; 0xdf
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	4b81      	ldr	r3, [pc, #516]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003a80:	2207      	movs	r2, #7
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	4b80      	ldr	r3, [pc, #512]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003a86:	2208      	movs	r2, #8
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	4b80      	ldr	r3, [pc, #512]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	4b7f      	ldr	r3, [pc, #508]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a98:	2206      	movs	r2, #6
 8003a9a:	601a      	str	r2, [r3, #0]
	 break;
 8003a9c:	f002 bc9c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  171 :    x=468 ;  y=212  ;  width=9   ;  height=10   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003aa0:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003aa2:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	4b75      	ldr	r3, [pc, #468]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003aaa:	22d4      	movs	r2, #212	; 0xd4
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	4b75      	ldr	r3, [pc, #468]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003ab0:	2209      	movs	r2, #9
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	4b74      	ldr	r3, [pc, #464]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003ab6:	220a      	movs	r2, #10
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	4b74      	ldr	r3, [pc, #464]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	4b73      	ldr	r3, [pc, #460]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003ac8:	2209      	movs	r2, #9
 8003aca:	601a      	str	r2, [r3, #0]
	 break;
 8003acc:	f002 bc84 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  172 :    x=68  ;  y=223  ;  width=10  ;  height=7    ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003ad2:	2244      	movs	r2, #68	; 0x44
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003ad8:	22df      	movs	r2, #223	; 0xdf
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003ade:	220a      	movs	r2, #10
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	4b69      	ldr	r3, [pc, #420]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003af0:	2205      	movs	r2, #5
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003af6:	220a      	movs	r2, #10
 8003af8:	601a      	str	r2, [r3, #0]
	 break;
 8003afa:	f002 bc6d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  174 :    x=376 ;  y=72   ;  width=14  ;  height=15   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8003afe:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003b00:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003b08:	2248      	movs	r2, #72	; 0x48
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003b0e:	220e      	movs	r2, #14
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003b14:	220f      	movs	r2, #15
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	4b5c      	ldr	r3, [pc, #368]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	601a      	str	r2, [r3, #0]
	 break;
 8003b2c:	f002 bc54 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  175 :    x=226 ;  y=223  ;  width=11  ;  height=4    ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=9    ;
 8003b30:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003b32:	22e2      	movs	r2, #226	; 0xe2
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	4b52      	ldr	r3, [pc, #328]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003b38:	22df      	movs	r2, #223	; 0xdf
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003b3e:	220b      	movs	r2, #11
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003b44:	2204      	movs	r2, #4
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003b5a:	2209      	movs	r2, #9
 8003b5c:	601a      	str	r2, [r3, #0]
	 break;
 8003b5e:	f002 bc3b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  176 :    x=23  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003b62:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003b64:	2217      	movs	r2, #23
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4b45      	ldr	r3, [pc, #276]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003b6a:	22df      	movs	r2, #223	; 0xdf
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003b70:	2207      	movs	r2, #7
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003b76:	2208      	movs	r2, #8
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
	 break;
 8003b8c:	f002 bc24 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  177 :    x=134 ;  y=187  ;  width=10  ;  height=13   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8003b90:	4b3a      	ldr	r3, [pc, #232]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003b92:	2286      	movs	r2, #134	; 0x86
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003b98:	22bb      	movs	r2, #187	; 0xbb
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003b9e:	220a      	movs	r2, #10
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003ba4:	220d      	movs	r2, #13
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003bb6:	220a      	movs	r2, #10
 8003bb8:	601a      	str	r2, [r3, #0]
	 break;
 8003bba:	f002 bc0d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  178 :    x=30  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003bc0:	221e      	movs	r2, #30
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003bc6:	22df      	movs	r2, #223	; 0xdf
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003bcc:	2207      	movs	r2, #7
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003be6:	2205      	movs	r2, #5
 8003be8:	601a      	str	r2, [r3, #0]
	 break;
 8003bea:	f002 bbf5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  179 :    x=37  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003bf0:	2225      	movs	r2, #37	; 0x25
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003bf6:	22df      	movs	r2, #223	; 0xdf
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003c02:	2208      	movs	r2, #8
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003c16:	2205      	movs	r2, #5
 8003c18:	601a      	str	r2, [r3, #0]
	 break;
 8003c1a:	f002 bbdd 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  180 :    x=250 ;  y=223  ;  width=6   ;  height=4    ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003c20:	22fa      	movs	r2, #250	; 0xfa
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003c26:	22df      	movs	r2, #223	; 0xdf
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003c32:	2204      	movs	r2, #4
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003c44:	2205      	movs	r2, #5
 8003c46:	601a      	str	r2, [r3, #0]
	 break;
 8003c48:	f002 bbc6 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  181 :    x=14  ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003c4e:	220e      	movs	r2, #14
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003c54:	2267      	movs	r2, #103	; 0x67
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003c5a:	2209      	movs	r2, #9
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003c60:	220e      	movs	r2, #14
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003c72:	2209      	movs	r2, #9
 8003c74:	601a      	str	r2, [r3, #0]
	 break;
 8003c76:	f002 bbaf 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8003c7a:	bf00      	nop
 8003c7c:	2400e0c8 	.word	0x2400e0c8
 8003c80:	24012ef0 	.word	0x24012ef0
 8003c84:	24013124 	.word	0x24013124
 8003c88:	24012ef4 	.word	0x24012ef4
 8003c8c:	2400e0c4 	.word	0x2400e0c4
 8003c90:	2400e0cc 	.word	0x2400e0cc
 8003c94:	24013120 	.word	0x24013120
	case  182 :    x=24  ;  y=21   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=10   ;
 8003c98:	4b9b      	ldr	r3, [pc, #620]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003c9a:	2218      	movs	r2, #24
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	4b9b      	ldr	r3, [pc, #620]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003ca0:	2215      	movs	r2, #21
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	4b9a      	ldr	r3, [pc, #616]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003ca6:	220b      	movs	r2, #11
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4b9a      	ldr	r3, [pc, #616]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003cac:	2211      	movs	r2, #17
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	4b99      	ldr	r3, [pc, #612]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	4b98      	ldr	r3, [pc, #608]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	4b98      	ldr	r3, [pc, #608]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	601a      	str	r2, [r3, #0]
	 break;
 8003cc4:	f002 bb88 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  183 :    x=222 ;  y=223  ;  width=4   ;  height=4    ;  xoffset=1    ;  yoffset=7    ;  xadvance=6    ;
 8003cc8:	4b8f      	ldr	r3, [pc, #572]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003cca:	22de      	movs	r2, #222	; 0xde
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	4b8f      	ldr	r3, [pc, #572]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003cd0:	22df      	movs	r2, #223	; 0xdf
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	4b8e      	ldr	r3, [pc, #568]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	4b8e      	ldr	r3, [pc, #568]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003cdc:	2204      	movs	r2, #4
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	4b8d      	ldr	r3, [pc, #564]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003cee:	2206      	movs	r2, #6
 8003cf0:	601a      	str	r2, [r3, #0]
	 break;
 8003cf2:	f002 bb71 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  184 :    x=190 ;  y=223  ;  width=7   ;  height=5    ;  xoffset=0    ;  yoffset=14   ;  xadvance=6    ;
 8003cf6:	4b84      	ldr	r3, [pc, #528]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003cf8:	22be      	movs	r2, #190	; 0xbe
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	4b83      	ldr	r3, [pc, #524]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003cfe:	22df      	movs	r2, #223	; 0xdf
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	4b83      	ldr	r3, [pc, #524]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	4b82      	ldr	r3, [pc, #520]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d0a:	2205      	movs	r2, #5
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003d16:	220e      	movs	r2, #14
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003d1c:	2206      	movs	r2, #6
 8003d1e:	601a      	str	r2, [r3, #0]
	 break;
 8003d20:	f002 bb5a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  185 :    x=44  ;  y=223  ;  width=6   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003d26:	222c      	movs	r2, #44	; 0x2c
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4b78      	ldr	r3, [pc, #480]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d2c:	22df      	movs	r2, #223	; 0xdf
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d32:	2206      	movs	r2, #6
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	4b77      	ldr	r3, [pc, #476]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d38:	2208      	movs	r2, #8
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	4b75      	ldr	r3, [pc, #468]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	4b75      	ldr	r3, [pc, #468]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003d4c:	2205      	movs	r2, #5
 8003d4e:	601a      	str	r2, [r3, #0]
	 break;
 8003d50:	f002 bb42 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  186 :    x=50  ;  y=223  ;  width=8   ;  height=8    ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003d54:	4b6c      	ldr	r3, [pc, #432]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003d56:	2232      	movs	r2, #50	; 0x32
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d5c:	22df      	movs	r2, #223	; 0xdf
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	4b6b      	ldr	r3, [pc, #428]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d62:	2208      	movs	r2, #8
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	4b6b      	ldr	r3, [pc, #428]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d68:	2208      	movs	r2, #8
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	4b69      	ldr	r3, [pc, #420]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	601a      	str	r2, [r3, #0]
	 break;
 8003d7e:	f002 bb2b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  187 :    x=477 ;  y=212  ;  width=9   ;  height=10   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003d82:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003d84:	f240 12dd 	movw	r2, #477	; 0x1dd
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d8c:	22d4      	movs	r2, #212	; 0xd4
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d92:	2209      	movs	r2, #9
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4b5f      	ldr	r3, [pc, #380]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d98:	220a      	movs	r2, #10
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003da4:	2205      	movs	r2, #5
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003daa:	2209      	movs	r2, #9
 8003dac:	601a      	str	r2, [r3, #0]
	 break;
 8003dae:	f002 bb13 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  188 :    x=390 ;  y=72   ;  width=15  ;  height=15   ;  xoffset=0    ;  yoffset=1    ;  xadvance=15   ;
 8003db2:	4b55      	ldr	r3, [pc, #340]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003db4:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	4b54      	ldr	r3, [pc, #336]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003dbc:	2248      	movs	r2, #72	; 0x48
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003dc8:	220f      	movs	r2, #15
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	4b52      	ldr	r3, [pc, #328]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003dda:	220f      	movs	r2, #15
 8003ddc:	601a      	str	r2, [r3, #0]
	 break;
 8003dde:	f002 bafb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  189 :    x=405 ;  y=72   ;  width=14  ;  height=15   ;  xoffset=0    ;  yoffset=1    ;  xadvance=14   ;
 8003de2:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003de4:	f240 1295 	movw	r2, #405	; 0x195
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	4b48      	ldr	r3, [pc, #288]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003dec:	2248      	movs	r2, #72	; 0x48
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003df2:	220e      	movs	r2, #14
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003df8:	220f      	movs	r2, #15
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	4b45      	ldr	r3, [pc, #276]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003e0a:	220e      	movs	r2, #14
 8003e0c:	601a      	str	r2, [r3, #0]
	 break;
 8003e0e:	f002 bae3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  190 :    x=419 ;  y=72   ;  width=15  ;  height=15   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=14   ;
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003e14:	f240 12a3 	movw	r2, #419	; 0x1a3
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003e1c:	2248      	movs	r2, #72	; 0x48
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003e22:	220f      	movs	r2, #15
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003e28:	220f      	movs	r2, #15
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003e3c:	220e      	movs	r2, #14
 8003e3e:	601a      	str	r2, [r3, #0]
	 break;
 8003e40:	f002 baca 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  191 :    x=23  ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003e46:	2217      	movs	r2, #23
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003e4c:	2267      	movs	r2, #103	; 0x67
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003e52:	220a      	movs	r2, #10
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003e58:	220e      	movs	r2, #14
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003e64:	2205      	movs	r2, #5
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003e6a:	220a      	movs	r2, #10
 8003e6c:	601a      	str	r2, [r3, #0]
	 break;
 8003e6e:	f002 bab3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  192 :    x=35  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003e74:	2223      	movs	r2, #35	; 0x23
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003e7a:	2215      	movs	r2, #21
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003e80:	220e      	movs	r2, #14
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003e86:	2211      	movs	r2, #17
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003e9c:	220c      	movs	r2, #12
 8003e9e:	601a      	str	r2, [r3, #0]
	 break;
 8003ea0:	f002 ba9a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  193 :    x=49  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003ea6:	2231      	movs	r2, #49	; 0x31
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003eac:	2215      	movs	r2, #21
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003eb2:	220e      	movs	r2, #14
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003eb8:	2211      	movs	r2, #17
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003ece:	220c      	movs	r2, #12
 8003ed0:	601a      	str	r2, [r3, #0]
	 break;
 8003ed2:	f002 ba81 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  194 :    x=63  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <Odczytaj_znak_S16_uc8+0x1f34>)
 8003ed8:	223f      	movs	r2, #63	; 0x3f
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <Odczytaj_znak_S16_uc8+0x1f38>)
 8003ede:	2215      	movs	r2, #21
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003ee4:	220e      	movs	r2, #14
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003eea:	2211      	movs	r2, #17
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <Odczytaj_znak_S16_uc8+0x1f44>)
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <Odczytaj_znak_S16_uc8+0x1f48>)
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003f00:	220c      	movs	r2, #12
 8003f02:	601a      	str	r2, [r3, #0]
	 break;
 8003f04:	f002 ba68 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8003f08:	2400e0c8 	.word	0x2400e0c8
 8003f0c:	24012ef0 	.word	0x24012ef0
 8003f10:	24013124 	.word	0x24013124
 8003f14:	24012ef4 	.word	0x24012ef4
 8003f18:	2400e0c4 	.word	0x2400e0c4
 8003f1c:	2400e0cc 	.word	0x2400e0cc
 8003f20:	24013120 	.word	0x24013120
	case  195 :    x=77  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003f24:	4b9e      	ldr	r3, [pc, #632]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003f26:	224d      	movs	r2, #77	; 0x4d
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	4b9e      	ldr	r3, [pc, #632]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f2c:	2215      	movs	r2, #21
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b9d      	ldr	r3, [pc, #628]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f32:	220e      	movs	r2, #14
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4b9d      	ldr	r3, [pc, #628]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 8003f38:	2211      	movs	r2, #17
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	4b9c      	ldr	r3, [pc, #624]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	4b9b      	ldr	r3, [pc, #620]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003f46:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	4b9a      	ldr	r3, [pc, #616]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8003f4e:	220c      	movs	r2, #12
 8003f50:	601a      	str	r2, [r3, #0]
	 break;
 8003f52:	f002 ba41 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  196 :    x=91  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003f56:	4b92      	ldr	r3, [pc, #584]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003f58:	225b      	movs	r2, #91	; 0x5b
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	4b91      	ldr	r3, [pc, #580]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f5e:	2215      	movs	r2, #21
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f64:	220e      	movs	r2, #14
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4b90      	ldr	r3, [pc, #576]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 8003f6a:	2211      	movs	r2, #17
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4b90      	ldr	r3, [pc, #576]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	4b8f      	ldr	r3, [pc, #572]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	4b8e      	ldr	r3, [pc, #568]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8003f80:	220c      	movs	r2, #12
 8003f82:	601a      	str	r2, [r3, #0]
	 break;
 8003f84:	f002 ba28 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  197 :    x=105 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=11   ;
 8003f88:	4b85      	ldr	r3, [pc, #532]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003f8a:	2269      	movs	r2, #105	; 0x69
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f90:	2215      	movs	r2, #21
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f96:	220d      	movs	r2, #13
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	4b84      	ldr	r3, [pc, #528]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 8003f9c:	2211      	movs	r2, #17
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	4b83      	ldr	r3, [pc, #524]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8003fb2:	220b      	movs	r2, #11
 8003fb4:	601a      	str	r2, [r3, #0]
	 break;
 8003fb6:	f002 ba0f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  198 :    x=33  ;  y=103  ;  width=18  ;  height=14   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=16   ;
 8003fba:	4b79      	ldr	r3, [pc, #484]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003fbc:	2221      	movs	r2, #33	; 0x21
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	4b78      	ldr	r3, [pc, #480]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003fc2:	2267      	movs	r2, #103	; 0x67
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	4b78      	ldr	r3, [pc, #480]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8003fc8:	2212      	movs	r2, #18
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	4b77      	ldr	r3, [pc, #476]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 8003fce:	220e      	movs	r2, #14
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	4b77      	ldr	r3, [pc, #476]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003fd4:	f06f 0201 	mvn.w	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	4b75      	ldr	r3, [pc, #468]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	601a      	str	r2, [r3, #0]
	 break;
 8003fe6:	f002 b9f7 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  199 :    x=118 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8003fea:	4b6d      	ldr	r3, [pc, #436]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003fec:	2276      	movs	r2, #118	; 0x76
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003ff2:	2215      	movs	r2, #21
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 8003ffe:	2211      	movs	r2, #17
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	4b6b      	ldr	r3, [pc, #428]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	4b6a      	ldr	r3, [pc, #424]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004010:	220c      	movs	r2, #12
 8004012:	601a      	str	r2, [r3, #0]
	 break;
 8004014:	f002 b9e0 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  200 :    x=130 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004018:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 800401a:	2282      	movs	r2, #130	; 0x82
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004020:	2215      	movs	r2, #21
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8004026:	220b      	movs	r2, #11
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4b60      	ldr	r3, [pc, #384]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 800402c:	2211      	movs	r2, #17
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	4b5f      	ldr	r3, [pc, #380]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8004038:	f04f 32ff 	mov.w	r2, #4294967295
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	4b5e      	ldr	r3, [pc, #376]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004040:	220b      	movs	r2, #11
 8004042:	601a      	str	r2, [r3, #0]
	 break;
 8004044:	f002 b9c8 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  201 :    x=141 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004048:	4b55      	ldr	r3, [pc, #340]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 800404a:	228d      	movs	r2, #141	; 0x8d
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	4b55      	ldr	r3, [pc, #340]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004050:	2215      	movs	r2, #21
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8004056:	220b      	movs	r2, #11
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4b54      	ldr	r3, [pc, #336]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 800405c:	2211      	movs	r2, #17
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004070:	220b      	movs	r2, #11
 8004072:	601a      	str	r2, [r3, #0]
	 break;
 8004074:	f002 b9b0 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  202 :    x=152 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004078:	4b49      	ldr	r3, [pc, #292]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 800407a:	2298      	movs	r2, #152	; 0x98
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	4b49      	ldr	r3, [pc, #292]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004080:	2215      	movs	r2, #21
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8004086:	220b      	movs	r2, #11
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	4b48      	ldr	r3, [pc, #288]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 800408c:	2211      	movs	r2, #17
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 8004098:	f04f 32ff 	mov.w	r2, #4294967295
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	4b46      	ldr	r3, [pc, #280]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 80040a0:	220b      	movs	r2, #11
 80040a2:	601a      	str	r2, [r3, #0]
	 break;
 80040a4:	f002 b998 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  203 :    x=163 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 80040a8:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 80040aa:	22a3      	movs	r2, #163	; 0xa3
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	4b3d      	ldr	r3, [pc, #244]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 80040b0:	2215      	movs	r2, #21
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 80040b6:	220b      	movs	r2, #11
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 80040bc:	2211      	movs	r2, #17
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 80040c8:	f04f 32ff 	mov.w	r2, #4294967295
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 80040d0:	220b      	movs	r2, #11
 80040d2:	601a      	str	r2, [r3, #0]
	 break;
 80040d4:	f002 b980 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  204 :    x=174 ;  y=21   ;  width=5   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=4    ;
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 80040da:	22ae      	movs	r2, #174	; 0xae
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 80040e0:	2215      	movs	r2, #21
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 80040e6:	2205      	movs	r2, #5
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	4b30      	ldr	r3, [pc, #192]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 80040ec:	2211      	movs	r2, #17
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 80040f2:	f04f 32ff 	mov.w	r2, #4294967295
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004102:	2204      	movs	r2, #4
 8004104:	601a      	str	r2, [r3, #0]
	 break;
 8004106:	f002 b967 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  205 :    x=179 ;  y=21   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=4    ;
 800410a:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 800410c:	22b3      	movs	r2, #179	; 0xb3
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004112:	2215      	movs	r2, #21
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8004118:	2205      	movs	r2, #5
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	4b23      	ldr	r3, [pc, #140]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 800411e:	2211      	movs	r2, #17
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004132:	2204      	movs	r2, #4
 8004134:	601a      	str	r2, [r3, #0]
	 break;
 8004136:	f002 b94f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  206 :    x=184 ;  y=21   ;  width=7   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=4    ;
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 800413c:	22b8      	movs	r2, #184	; 0xb8
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004142:	2215      	movs	r2, #21
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 8004148:	2207      	movs	r2, #7
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	4b17      	ldr	r3, [pc, #92]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 800414e:	2211      	movs	r2, #17
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 800415c:	f04f 32ff 	mov.w	r2, #4294967295
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004164:	2204      	movs	r2, #4
 8004166:	601a      	str	r2, [r3, #0]
	 break;
 8004168:	f002 b936 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  207 :    x=191 ;  y=21   ;  width=7   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=5    ;
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <Odczytaj_znak_S16_uc8+0x21cc>)
 800416e:	22bf      	movs	r2, #191	; 0xbf
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004174:	2215      	movs	r2, #21
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <Odczytaj_znak_S16_uc8+0x21d4>)
 800417a:	2207      	movs	r2, #7
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <Odczytaj_znak_S16_uc8+0x21d8>)
 8004180:	2211      	movs	r2, #17
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <Odczytaj_znak_S16_uc8+0x21e0>)
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <Odczytaj_znak_S16_uc8+0x21e4>)
 8004196:	2205      	movs	r2, #5
 8004198:	601a      	str	r2, [r3, #0]
	 break;
 800419a:	f002 b91d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 800419e:	bf00      	nop
 80041a0:	2400e0c8 	.word	0x2400e0c8
 80041a4:	24012ef0 	.word	0x24012ef0
 80041a8:	24013124 	.word	0x24013124
 80041ac:	24012ef4 	.word	0x24012ef4
 80041b0:	2400e0c4 	.word	0x2400e0c4
 80041b4:	2400e0cc 	.word	0x2400e0cc
 80041b8:	24013120 	.word	0x24013120
	case  208 :    x=51  ;  y=103  ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 80041bc:	4b9d      	ldr	r3, [pc, #628]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 80041be:	2233      	movs	r2, #51	; 0x33
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	4b9d      	ldr	r3, [pc, #628]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 80041c4:	2267      	movs	r2, #103	; 0x67
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	4b9c      	ldr	r3, [pc, #624]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 80041ca:	220d      	movs	r2, #13
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	4b9c      	ldr	r3, [pc, #624]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 80041d0:	220e      	movs	r2, #14
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	4b9b      	ldr	r3, [pc, #620]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	4b9a      	ldr	r3, [pc, #616]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	4b9a      	ldr	r3, [pc, #616]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 80041e4:	220c      	movs	r2, #12
 80041e6:	601a      	str	r2, [r3, #0]
	 break;
 80041e8:	f002 b8f6 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  209 :    x=198 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 80041ec:	4b91      	ldr	r3, [pc, #580]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 80041ee:	22c6      	movs	r2, #198	; 0xc6
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	4b91      	ldr	r3, [pc, #580]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 80041f4:	2215      	movs	r2, #21
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	4b90      	ldr	r3, [pc, #576]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 80041fa:	220b      	movs	r2, #11
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	4b90      	ldr	r3, [pc, #576]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004200:	2211      	movs	r2, #17
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4b8f      	ldr	r3, [pc, #572]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	4b8f      	ldr	r3, [pc, #572]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 800420c:	f04f 32ff 	mov.w	r2, #4294967295
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	4b8e      	ldr	r3, [pc, #568]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004214:	220c      	movs	r2, #12
 8004216:	601a      	str	r2, [r3, #0]
	 break;
 8004218:	f002 b8de 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  210 :    x=209 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 800421c:	4b85      	ldr	r3, [pc, #532]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 800421e:	22d1      	movs	r2, #209	; 0xd1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	4b85      	ldr	r3, [pc, #532]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 8004224:	2215      	movs	r2, #21
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b84      	ldr	r3, [pc, #528]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 800422a:	220d      	movs	r2, #13
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	4b84      	ldr	r3, [pc, #528]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004230:	2211      	movs	r2, #17
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	4b83      	ldr	r3, [pc, #524]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	4b83      	ldr	r3, [pc, #524]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 800423c:	f04f 32ff 	mov.w	r2, #4294967295
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	4b82      	ldr	r3, [pc, #520]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004244:	220d      	movs	r2, #13
 8004246:	601a      	str	r2, [r3, #0]
	 break;
 8004248:	f002 b8c6 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  211 :    x=222 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 800424c:	4b79      	ldr	r3, [pc, #484]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 800424e:	22de      	movs	r2, #222	; 0xde
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	4b79      	ldr	r3, [pc, #484]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 8004254:	2215      	movs	r2, #21
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	4b78      	ldr	r3, [pc, #480]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 800425a:	220d      	movs	r2, #13
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	4b78      	ldr	r3, [pc, #480]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004260:	2211      	movs	r2, #17
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	4b77      	ldr	r3, [pc, #476]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4b77      	ldr	r3, [pc, #476]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 800426c:	f04f 32ff 	mov.w	r2, #4294967295
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004274:	220d      	movs	r2, #13
 8004276:	601a      	str	r2, [r3, #0]
	 break;
 8004278:	f002 b8ae 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  212 :    x=235 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 800427c:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 800427e:	22eb      	movs	r2, #235	; 0xeb
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	4b6d      	ldr	r3, [pc, #436]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 8004284:	2215      	movs	r2, #21
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	4b6c      	ldr	r3, [pc, #432]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 800428a:	220d      	movs	r2, #13
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004290:	2211      	movs	r2, #17
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	4b6b      	ldr	r3, [pc, #428]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	4b6b      	ldr	r3, [pc, #428]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	4b6a      	ldr	r3, [pc, #424]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 80042a4:	220d      	movs	r2, #13
 80042a6:	601a      	str	r2, [r3, #0]
	 break;
 80042a8:	f002 b896 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  213 :    x=248 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 80042ac:	4b61      	ldr	r3, [pc, #388]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 80042ae:	22f8      	movs	r2, #248	; 0xf8
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	4b61      	ldr	r3, [pc, #388]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 80042b4:	2215      	movs	r2, #21
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	4b60      	ldr	r3, [pc, #384]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 80042ba:	220d      	movs	r2, #13
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	4b60      	ldr	r3, [pc, #384]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 80042c0:	2211      	movs	r2, #17
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	4b5e      	ldr	r3, [pc, #376]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 80042d4:	220d      	movs	r2, #13
 80042d6:	601a      	str	r2, [r3, #0]
	 break;
 80042d8:	f002 b87e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  214 :    x=261 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 80042dc:	4b55      	ldr	r3, [pc, #340]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 80042de:	f240 1205 	movw	r2, #261	; 0x105
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	4b54      	ldr	r3, [pc, #336]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 80042e6:	2215      	movs	r2, #21
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 80042ec:	220d      	movs	r2, #13
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 80042f2:	2211      	movs	r2, #17
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	4b53      	ldr	r3, [pc, #332]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	4b52      	ldr	r3, [pc, #328]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	4b51      	ldr	r3, [pc, #324]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004306:	220d      	movs	r2, #13
 8004308:	601a      	str	r2, [r3, #0]
	 break;
 800430a:	f002 b865 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  215 :    x=486 ;  y=212  ;  width=9   ;  height=10   ;  xoffset=0    ;  yoffset=4    ;  xadvance=9    ;
 800430e:	4b49      	ldr	r3, [pc, #292]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 8004310:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	4b48      	ldr	r3, [pc, #288]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 8004318:	22d4      	movs	r2, #212	; 0xd4
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 800431e:	2209      	movs	r2, #9
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004324:	220a      	movs	r2, #10
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4b46      	ldr	r3, [pc, #280]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	4b46      	ldr	r3, [pc, #280]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 8004330:	2204      	movs	r2, #4
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	4b45      	ldr	r3, [pc, #276]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004336:	2209      	movs	r2, #9
 8004338:	601a      	str	r2, [r3, #0]
	 break;
 800433a:	f002 b84d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  216 :    x=64  ;  y=103  ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 800433e:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 8004340:	2240      	movs	r2, #64	; 0x40
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	4b3c      	ldr	r3, [pc, #240]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 8004346:	2267      	movs	r2, #103	; 0x67
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	4b3c      	ldr	r3, [pc, #240]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 800434c:	220d      	movs	r2, #13
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004352:	220e      	movs	r2, #14
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	4b3a      	ldr	r3, [pc, #232]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	4b3a      	ldr	r3, [pc, #232]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004364:	220d      	movs	r2, #13
 8004366:	601a      	str	r2, [r3, #0]
	 break;
 8004368:	f002 b836 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  217 :    x=274 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 800436e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	4b30      	ldr	r3, [pc, #192]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 8004376:	2215      	movs	r2, #21
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	4b30      	ldr	r3, [pc, #192]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 800437c:	220b      	movs	r2, #11
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004382:	2211      	movs	r2, #17
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	4b2e      	ldr	r3, [pc, #184]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 800438e:	f04f 32ff 	mov.w	r2, #4294967295
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 8004396:	220b      	movs	r2, #11
 8004398:	601a      	str	r2, [r3, #0]
	 break;
 800439a:	f002 b81d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  218 :    x=285 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 800439e:	4b25      	ldr	r3, [pc, #148]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 80043a0:	f240 121d 	movw	r2, #285	; 0x11d
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 80043a8:	2215      	movs	r2, #21
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 80043ae:	220b      	movs	r2, #11
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	4b23      	ldr	r3, [pc, #140]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 80043b4:	2211      	movs	r2, #17
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 80043c8:	220b      	movs	r2, #11
 80043ca:	601a      	str	r2, [r3, #0]
	 break;
 80043cc:	f002 b804 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  219 :    x=296 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 80043d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	4b17      	ldr	r3, [pc, #92]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 80043da:	2215      	movs	r2, #21
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 80043e0:	220b      	movs	r2, #11
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 80043e6:	2211      	movs	r2, #17
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 80043fa:	220b      	movs	r2, #11
 80043fc:	601a      	str	r2, [r3, #0]
	 break;
 80043fe:	f001 bfeb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  220 :    x=307 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <Odczytaj_znak_S16_uc8+0x2460>)
 8004404:	f240 1233 	movw	r2, #307	; 0x133
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <Odczytaj_znak_S16_uc8+0x2464>)
 800440c:	2215      	movs	r2, #21
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <Odczytaj_znak_S16_uc8+0x2468>)
 8004412:	220b      	movs	r2, #11
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <Odczytaj_znak_S16_uc8+0x246c>)
 8004418:	2211      	movs	r2, #17
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <Odczytaj_znak_S16_uc8+0x2470>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <Odczytaj_znak_S16_uc8+0x2474>)
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <Odczytaj_znak_S16_uc8+0x2478>)
 800442c:	220b      	movs	r2, #11
 800442e:	601a      	str	r2, [r3, #0]
	 break;
 8004430:	f001 bfd2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8004434:	2400e0c8 	.word	0x2400e0c8
 8004438:	24012ef0 	.word	0x24012ef0
 800443c:	24013124 	.word	0x24013124
 8004440:	24012ef4 	.word	0x24012ef4
 8004444:	2400e0c4 	.word	0x2400e0c4
 8004448:	2400e0cc 	.word	0x2400e0cc
 800444c:	24013120 	.word	0x24013120
	case  221 :    x=318 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=10   ;
 8004450:	4b96      	ldr	r3, [pc, #600]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 8004452:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	4b95      	ldr	r3, [pc, #596]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 800445a:	2215      	movs	r2, #21
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	4b95      	ldr	r3, [pc, #596]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004460:	220c      	movs	r2, #12
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	4b94      	ldr	r3, [pc, #592]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004466:	2211      	movs	r2, #17
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	4b94      	ldr	r3, [pc, #592]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	4b93      	ldr	r3, [pc, #588]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004474:	f04f 32ff 	mov.w	r2, #4294967295
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	4b92      	ldr	r3, [pc, #584]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 800447c:	220a      	movs	r2, #10
 800447e:	601a      	str	r2, [r3, #0]
	 break;
 8004480:	f001 bfaa 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  222 :    x=77  ;  y=103  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8004484:	4b89      	ldr	r3, [pc, #548]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 8004486:	224d      	movs	r2, #77	; 0x4d
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	4b89      	ldr	r3, [pc, #548]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 800448c:	2267      	movs	r2, #103	; 0x67
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004492:	220b      	movs	r2, #11
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004498:	220e      	movs	r2, #14
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	4b87      	ldr	r3, [pc, #540]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	4b87      	ldr	r3, [pc, #540]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	4b86      	ldr	r3, [pc, #536]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 80044aa:	220b      	movs	r2, #11
 80044ac:	601a      	str	r2, [r3, #0]
	 break;
 80044ae:	f001 bf93 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  223 :    x=88  ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80044b2:	4b7e      	ldr	r3, [pc, #504]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 80044b4:	2258      	movs	r2, #88	; 0x58
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	4b7d      	ldr	r3, [pc, #500]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 80044ba:	2267      	movs	r2, #103	; 0x67
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 80044c0:	220a      	movs	r2, #10
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 80044c6:	220e      	movs	r2, #14
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	4b7b      	ldr	r3, [pc, #492]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 80044d8:	220a      	movs	r2, #10
 80044da:	601a      	str	r2, [r3, #0]
	 break;
 80044dc:	f001 bf7c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  224 :    x=98  ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80044e0:	4b72      	ldr	r3, [pc, #456]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 80044e2:	2262      	movs	r2, #98	; 0x62
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	4b72      	ldr	r3, [pc, #456]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 80044e8:	2267      	movs	r2, #103	; 0x67
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 80044ee:	220a      	movs	r2, #10
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	4b71      	ldr	r3, [pc, #452]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 80044f4:	220e      	movs	r2, #14
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	4b70      	ldr	r3, [pc, #448]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	4b70      	ldr	r3, [pc, #448]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004506:	2209      	movs	r2, #9
 8004508:	601a      	str	r2, [r3, #0]
	 break;
 800450a:	f001 bf65 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  225 :    x=108 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800450e:	4b67      	ldr	r3, [pc, #412]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 8004510:	226c      	movs	r2, #108	; 0x6c
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	4b66      	ldr	r3, [pc, #408]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004516:	2267      	movs	r2, #103	; 0x67
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 800451c:	220a      	movs	r2, #10
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004522:	220e      	movs	r2, #14
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	4b64      	ldr	r3, [pc, #400]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004534:	2209      	movs	r2, #9
 8004536:	601a      	str	r2, [r3, #0]
	 break;
 8004538:	f001 bf4e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  226 :    x=118 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800453c:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 800453e:	2276      	movs	r2, #118	; 0x76
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004544:	2267      	movs	r2, #103	; 0x67
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 800454a:	220a      	movs	r2, #10
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	4b5a      	ldr	r3, [pc, #360]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004550:	220e      	movs	r2, #14
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	4b58      	ldr	r3, [pc, #352]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004562:	2209      	movs	r2, #9
 8004564:	601a      	str	r2, [r3, #0]
	 break;
 8004566:	f001 bf37 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  227 :    x=128 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800456a:	4b50      	ldr	r3, [pc, #320]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004572:	2267      	movs	r2, #103	; 0x67
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004578:	220a      	movs	r2, #10
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	4b4e      	ldr	r3, [pc, #312]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 800457e:	220e      	movs	r2, #14
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	4b4e      	ldr	r3, [pc, #312]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004590:	2209      	movs	r2, #9
 8004592:	601a      	str	r2, [r3, #0]
	 break;
 8004594:	f001 bf20 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  228 :    x=138 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004598:	4b44      	ldr	r3, [pc, #272]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 800459a:	228a      	movs	r2, #138	; 0x8a
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 80045a0:	2267      	movs	r2, #103	; 0x67
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 80045a6:	220a      	movs	r2, #10
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 80045ac:	220e      	movs	r2, #14
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	4b42      	ldr	r3, [pc, #264]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 80045be:	2209      	movs	r2, #9
 80045c0:	601a      	str	r2, [r3, #0]
	 break;
 80045c2:	f001 bf09 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  229 :    x=148 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 80045c8:	2294      	movs	r2, #148	; 0x94
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 80045ce:	2267      	movs	r2, #103	; 0x67
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 80045d4:	220a      	movs	r2, #10
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 80045da:	220e      	movs	r2, #14
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 80045ec:	2209      	movs	r2, #9
 80045ee:	601a      	str	r2, [r3, #0]
	 break;
 80045f0:	f001 bef2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  230 :    x=101 ;  y=201  ;  width=15  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=15   ;
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 80045f6:	2265      	movs	r2, #101	; 0x65
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	4b2d      	ldr	r3, [pc, #180]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 80045fc:	22c9      	movs	r2, #201	; 0xc9
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004602:	220f      	movs	r2, #15
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004608:	220b      	movs	r2, #11
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004614:	2205      	movs	r2, #5
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 800461a:	220f      	movs	r2, #15
 800461c:	601a      	str	r2, [r3, #0]
	 break;
 800461e:	f001 bedb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  231 :    x=158 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 8004624:	229e      	movs	r2, #158	; 0x9e
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 800462a:	2267      	movs	r2, #103	; 0x67
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004630:	220a      	movs	r2, #10
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004636:	220e      	movs	r2, #14
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004642:	2205      	movs	r2, #5
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004648:	2209      	movs	r2, #9
 800464a:	601a      	str	r2, [r3, #0]
	 break;
 800464c:	f001 bec4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  232 :    x=168 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 8004652:	22a8      	movs	r2, #168	; 0xa8
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004658:	2267      	movs	r2, #103	; 0x67
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 800465e:	220a      	movs	r2, #10
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004664:	220e      	movs	r2, #14
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004676:	220a      	movs	r2, #10
 8004678:	601a      	str	r2, [r3, #0]
	 break;
 800467a:	f001 bead 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  233 :    x=178 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <Odczytaj_znak_S16_uc8+0x26d8>)
 8004680:	22b2      	movs	r2, #178	; 0xb2
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004686:	2267      	movs	r2, #103	; 0x67
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <Odczytaj_znak_S16_uc8+0x26e0>)
 800468c:	220a      	movs	r2, #10
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <Odczytaj_znak_S16_uc8+0x26e4>)
 8004692:	220e      	movs	r2, #14
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <Odczytaj_znak_S16_uc8+0x26e8>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <Odczytaj_znak_S16_uc8+0x26ec>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <Odczytaj_znak_S16_uc8+0x26f0>)
 80046a4:	220a      	movs	r2, #10
 80046a6:	601a      	str	r2, [r3, #0]
	 break;
 80046a8:	f001 be96 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 80046ac:	2400e0c8 	.word	0x2400e0c8
 80046b0:	24012ef0 	.word	0x24012ef0
 80046b4:	24013124 	.word	0x24013124
 80046b8:	24012ef4 	.word	0x24012ef4
 80046bc:	2400e0c4 	.word	0x2400e0c4
 80046c0:	2400e0cc 	.word	0x2400e0cc
 80046c4:	24013120 	.word	0x24013120
	case  234 :    x=188 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80046c8:	4b98      	ldr	r3, [pc, #608]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 80046ca:	22bc      	movs	r2, #188	; 0xbc
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	4b98      	ldr	r3, [pc, #608]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 80046d0:	2267      	movs	r2, #103	; 0x67
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	4b97      	ldr	r3, [pc, #604]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 80046d6:	220a      	movs	r2, #10
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	4b97      	ldr	r3, [pc, #604]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 80046dc:	220e      	movs	r2, #14
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	4b96      	ldr	r3, [pc, #600]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	4b96      	ldr	r3, [pc, #600]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	4b95      	ldr	r3, [pc, #596]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 80046ee:	220a      	movs	r2, #10
 80046f0:	601a      	str	r2, [r3, #0]
	 break;
 80046f2:	f001 be71 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  235 :    x=198 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80046f6:	4b8d      	ldr	r3, [pc, #564]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 80046f8:	22c6      	movs	r2, #198	; 0xc6
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	4b8c      	ldr	r3, [pc, #560]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 80046fe:	2267      	movs	r2, #103	; 0x67
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	4b8c      	ldr	r3, [pc, #560]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 8004704:	220a      	movs	r2, #10
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	4b8b      	ldr	r3, [pc, #556]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 800470a:	220e      	movs	r2, #14
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	4b8b      	ldr	r3, [pc, #556]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	4b8a      	ldr	r3, [pc, #552]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	4b8a      	ldr	r3, [pc, #552]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 800471c:	220a      	movs	r2, #10
 800471e:	601a      	str	r2, [r3, #0]
	 break;
 8004720:	f001 be5a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  236 :    x=208 ;  y=103  ;  width=5   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 8004724:	4b81      	ldr	r3, [pc, #516]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 8004726:	22d0      	movs	r2, #208	; 0xd0
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	4b81      	ldr	r3, [pc, #516]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 800472c:	2267      	movs	r2, #103	; 0x67
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	4b80      	ldr	r3, [pc, #512]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 8004732:	2205      	movs	r2, #5
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	4b80      	ldr	r3, [pc, #512]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004738:	220e      	movs	r2, #14
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	4b7f      	ldr	r3, [pc, #508]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	4b7e      	ldr	r3, [pc, #504]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	4b7e      	ldr	r3, [pc, #504]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 800474c:	2204      	movs	r2, #4
 800474e:	601a      	str	r2, [r3, #0]
	 break;
 8004750:	f001 be42 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  237 :    x=213 ;  y=103  ;  width=5   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8004754:	4b75      	ldr	r3, [pc, #468]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 8004756:	22d5      	movs	r2, #213	; 0xd5
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	4b75      	ldr	r3, [pc, #468]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 800475c:	2267      	movs	r2, #103	; 0x67
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	4b74      	ldr	r3, [pc, #464]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 8004762:	2205      	movs	r2, #5
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	4b74      	ldr	r3, [pc, #464]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004768:	220e      	movs	r2, #14
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	4b73      	ldr	r3, [pc, #460]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	4b72      	ldr	r3, [pc, #456]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 800477a:	2204      	movs	r2, #4
 800477c:	601a      	str	r2, [r3, #0]
	 break;
 800477e:	f001 be2b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  238 :    x=218 ;  y=103  ;  width=8   ;  height=14   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=4    ;
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 8004784:	22da      	movs	r2, #218	; 0xda
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	4b69      	ldr	r3, [pc, #420]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 800478a:	2267      	movs	r2, #103	; 0x67
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	4b69      	ldr	r3, [pc, #420]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 8004790:	2208      	movs	r2, #8
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	4b68      	ldr	r3, [pc, #416]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004796:	220e      	movs	r2, #14
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	4b68      	ldr	r3, [pc, #416]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 800479c:	f06f 0201 	mvn.w	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	4b67      	ldr	r3, [pc, #412]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	4b66      	ldr	r3, [pc, #408]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 80047aa:	2204      	movs	r2, #4
 80047ac:	601a      	str	r2, [r3, #0]
	 break;
 80047ae:	f001 be13 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  239 :    x=226 ;  y=103  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 80047b2:	4b5e      	ldr	r3, [pc, #376]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 80047b4:	22e2      	movs	r2, #226	; 0xe2
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 80047ba:	2267      	movs	r2, #103	; 0x67
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 80047c6:	220e      	movs	r2, #14
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 80047da:	2205      	movs	r2, #5
 80047dc:	601a      	str	r2, [r3, #0]
	 break;
 80047de:	f001 bdfb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  240 :    x=233 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80047e2:	4b52      	ldr	r3, [pc, #328]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 80047e4:	22e9      	movs	r2, #233	; 0xe9
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	4b51      	ldr	r3, [pc, #324]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 80047ea:	2267      	movs	r2, #103	; 0x67
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	4b51      	ldr	r3, [pc, #324]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 80047f0:	220a      	movs	r2, #10
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 80047f6:	220e      	movs	r2, #14
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	4b50      	ldr	r3, [pc, #320]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	4b4f      	ldr	r3, [pc, #316]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 8004808:	220a      	movs	r2, #10
 800480a:	601a      	str	r2, [r3, #0]
	 break;
 800480c:	f001 bde4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  241 :    x=243 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004810:	4b46      	ldr	r3, [pc, #280]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 8004812:	22f3      	movs	r2, #243	; 0xf3
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	4b46      	ldr	r3, [pc, #280]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 8004818:	2267      	movs	r2, #103	; 0x67
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	4b45      	ldr	r3, [pc, #276]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 800481e:	2209      	movs	r2, #9
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	4b45      	ldr	r3, [pc, #276]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004824:	220e      	movs	r2, #14
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	4b44      	ldr	r3, [pc, #272]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	4b44      	ldr	r3, [pc, #272]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 8004836:	2209      	movs	r2, #9
 8004838:	601a      	str	r2, [r3, #0]
	 break;
 800483a:	f001 bdcd 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  242 :    x=252 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800483e:	4b3b      	ldr	r3, [pc, #236]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 8004840:	22fc      	movs	r2, #252	; 0xfc
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	4b3a      	ldr	r3, [pc, #232]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 8004846:	2267      	movs	r2, #103	; 0x67
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 800484c:	220a      	movs	r2, #10
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004852:	220e      	movs	r2, #14
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	4b38      	ldr	r3, [pc, #224]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 8004864:	220a      	movs	r2, #10
 8004866:	601a      	str	r2, [r3, #0]
	 break;
 8004868:	f001 bdb6 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  243 :    x=262 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800486c:	4b2f      	ldr	r3, [pc, #188]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 800486e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	4b2e      	ldr	r3, [pc, #184]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 8004876:	2267      	movs	r2, #103	; 0x67
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 800487c:	220a      	movs	r2, #10
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004882:	220e      	movs	r2, #14
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 8004894:	220a      	movs	r2, #10
 8004896:	601a      	str	r2, [r3, #0]
	 break;
 8004898:	f001 bd9e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  244 :    x=272 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800489c:	4b23      	ldr	r3, [pc, #140]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 800489e:	f44f 7288 	mov.w	r2, #272	; 0x110
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 80048a6:	2267      	movs	r2, #103	; 0x67
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	4b22      	ldr	r3, [pc, #136]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 80048ac:	220a      	movs	r2, #10
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 80048b2:	220e      	movs	r2, #14
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	601a      	str	r2, [r3, #0]
	 break;
 80048c8:	f001 bd86 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  245 :    x=282 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 80048ce:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 80048d6:	2267      	movs	r2, #103	; 0x67
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 80048dc:	220a      	movs	r2, #10
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 80048e2:	220e      	movs	r2, #14
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 80048f4:	220a      	movs	r2, #10
 80048f6:	601a      	str	r2, [r3, #0]
	 break;
 80048f8:	f001 bd6e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  246 :    x=292 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <Odczytaj_znak_S16_uc8+0x2958>)
 80048fe:	f44f 7292 	mov.w	r2, #292	; 0x124
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <Odczytaj_znak_S16_uc8+0x295c>)
 8004906:	2267      	movs	r2, #103	; 0x67
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <Odczytaj_znak_S16_uc8+0x2960>)
 800490c:	220a      	movs	r2, #10
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <Odczytaj_znak_S16_uc8+0x2964>)
 8004912:	220e      	movs	r2, #14
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <Odczytaj_znak_S16_uc8+0x2968>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <Odczytaj_znak_S16_uc8+0x296c>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <Odczytaj_znak_S16_uc8+0x2970>)
 8004924:	220a      	movs	r2, #10
 8004926:	601a      	str	r2, [r3, #0]
	 break;
 8004928:	f001 bd56 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 800492c:	2400e0c8 	.word	0x2400e0c8
 8004930:	24012ef0 	.word	0x24012ef0
 8004934:	24013124 	.word	0x24013124
 8004938:	24012ef4 	.word	0x24012ef4
 800493c:	2400e0c4 	.word	0x2400e0c4
 8004940:	2400e0cc 	.word	0x2400e0cc
 8004944:	24013120 	.word	0x24013120
	case  247 :    x=116 ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8004948:	4b9d      	ldr	r3, [pc, #628]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 800494a:	2274      	movs	r2, #116	; 0x74
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	4b9d      	ldr	r3, [pc, #628]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004950:	22c9      	movs	r2, #201	; 0xc9
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	4b9c      	ldr	r3, [pc, #624]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004956:	220a      	movs	r2, #10
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4b9c      	ldr	r3, [pc, #624]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 800495c:	220b      	movs	r2, #11
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	4b9b      	ldr	r3, [pc, #620]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	4b9b      	ldr	r3, [pc, #620]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004968:	2203      	movs	r2, #3
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	4b9a      	ldr	r3, [pc, #616]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 800496e:	220a      	movs	r2, #10
 8004970:	601a      	str	r2, [r3, #0]
	 break;
 8004972:	f001 bd31 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  248 :    x=126 ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8004976:	4b92      	ldr	r3, [pc, #584]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004978:	227e      	movs	r2, #126	; 0x7e
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	4b91      	ldr	r3, [pc, #580]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 800497e:	22c9      	movs	r2, #201	; 0xc9
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4b91      	ldr	r3, [pc, #580]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004984:	220a      	movs	r2, #10
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	4b90      	ldr	r3, [pc, #576]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 800498a:	220b      	movs	r2, #11
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4b90      	ldr	r3, [pc, #576]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004996:	2205      	movs	r2, #5
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	4b8f      	ldr	r3, [pc, #572]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 800499c:	220a      	movs	r2, #10
 800499e:	601a      	str	r2, [r3, #0]
	 break;
 80049a0:	f001 bd1a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  249 :    x=302 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80049a4:	4b86      	ldr	r3, [pc, #536]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 80049a6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	4b85      	ldr	r3, [pc, #532]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 80049ae:	2267      	movs	r2, #103	; 0x67
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	4b85      	ldr	r3, [pc, #532]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 80049b4:	2209      	movs	r2, #9
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	4b84      	ldr	r3, [pc, #528]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 80049ba:	220e      	movs	r2, #14
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	4b84      	ldr	r3, [pc, #528]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	4b83      	ldr	r3, [pc, #524]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	4b83      	ldr	r3, [pc, #524]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 80049cc:	2209      	movs	r2, #9
 80049ce:	601a      	str	r2, [r3, #0]
	 break;
 80049d0:	f001 bd02 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  250 :    x=311 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80049d4:	4b7a      	ldr	r3, [pc, #488]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 80049d6:	f240 1237 	movw	r2, #311	; 0x137
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	4b79      	ldr	r3, [pc, #484]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 80049de:	2267      	movs	r2, #103	; 0x67
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 80049e4:	2209      	movs	r2, #9
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	4b78      	ldr	r3, [pc, #480]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 80049ea:	220e      	movs	r2, #14
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	4b78      	ldr	r3, [pc, #480]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	4b77      	ldr	r3, [pc, #476]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	4b77      	ldr	r3, [pc, #476]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 80049fc:	2209      	movs	r2, #9
 80049fe:	601a      	str	r2, [r3, #0]
	 break;
 8004a00:	f001 bcea 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  251 :    x=320 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004a04:	4b6e      	ldr	r3, [pc, #440]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004a0e:	2267      	movs	r2, #103	; 0x67
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004a14:	2209      	movs	r2, #9
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004a1a:	220e      	movs	r2, #14
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	4b6c      	ldr	r3, [pc, #432]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	4b6b      	ldr	r3, [pc, #428]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	4b6b      	ldr	r3, [pc, #428]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a2c:	2209      	movs	r2, #9
 8004a2e:	601a      	str	r2, [r3, #0]
	 break;
 8004a30:	f001 bcd2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  252 :    x=329 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004a34:	4b62      	ldr	r3, [pc, #392]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a36:	f240 1249 	movw	r2, #329	; 0x149
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004a3e:	2267      	movs	r2, #103	; 0x67
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004a44:	2209      	movs	r2, #9
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	4b60      	ldr	r3, [pc, #384]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004a4a:	220e      	movs	r2, #14
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	4b60      	ldr	r3, [pc, #384]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	4b5f      	ldr	r3, [pc, #380]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	4b5f      	ldr	r3, [pc, #380]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a5c:	2209      	movs	r2, #9
 8004a5e:	601a      	str	r2, [r3, #0]
	 break;
 8004a60:	f001 bcba 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  253 :    x=330 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 8004a64:	4b56      	ldr	r3, [pc, #344]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a66:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004a6e:	2215      	movs	r2, #21
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004a74:	220b      	movs	r2, #11
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004a7a:	2211      	movs	r2, #17
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	4b54      	ldr	r3, [pc, #336]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	4b52      	ldr	r3, [pc, #328]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a8e:	2209      	movs	r2, #9
 8004a90:	601a      	str	r2, [r3, #0]
	 break;
 8004a92:	f001 bca1 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  254 :    x=341 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004a96:	4b4a      	ldr	r3, [pc, #296]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a98:	f240 1255 	movw	r2, #341	; 0x155
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004aa0:	2215      	movs	r2, #21
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004aa6:	220a      	movs	r2, #10
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004aac:	2211      	movs	r2, #17
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	4b46      	ldr	r3, [pc, #280]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004abe:	220a      	movs	r2, #10
 8004ac0:	601a      	str	r2, [r3, #0]
	 break;
 8004ac2:	f001 bc89 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  255 :    x=351 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004ac8:	f240 125f 	movw	r2, #351	; 0x15f
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004ad0:	2215      	movs	r2, #21
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004ad6:	220b      	movs	r2, #11
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	4b3c      	ldr	r3, [pc, #240]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004adc:	2211      	movs	r2, #17
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004af0:	2209      	movs	r2, #9
 8004af2:	601a      	str	r2, [r3, #0]
	 break;
 8004af4:	f001 bc70 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  256 :    x=362 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=11   ;
 8004af8:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004afa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004b02:	2215      	movs	r2, #21
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004b08:	220d      	movs	r2, #13
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004b0e:	2211      	movs	r2, #17
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	4b2f      	ldr	r3, [pc, #188]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004b24:	220b      	movs	r2, #11
 8004b26:	601a      	str	r2, [r3, #0]
	 break;
 8004b28:	f001 bc56 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  257 :    x=338 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004b2e:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004b36:	2267      	movs	r2, #103	; 0x67
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004b3c:	220a      	movs	r2, #10
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004b42:	220e      	movs	r2, #14
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004b54:	2209      	movs	r2, #9
 8004b56:	601a      	str	r2, [r3, #0]
	 break;
 8004b58:	f001 bc3e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  258 :    x=375 ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004b5e:	f240 1277 	movw	r2, #375	; 0x177
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004b66:	2215      	movs	r2, #21
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004b6c:	220e      	movs	r2, #14
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004b72:	2211      	movs	r2, #17
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004b80:	f04f 32ff 	mov.w	r2, #4294967295
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004b88:	220c      	movs	r2, #12
 8004b8a:	601a      	str	r2, [r3, #0]
	 break;
 8004b8c:	f001 bc24 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  259 :    x=348 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004b92:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004b9a:	2267      	movs	r2, #103	; 0x67
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004ba0:	220a      	movs	r2, #10
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004ba6:	220e      	movs	r2, #14
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <Odczytaj_znak_S16_uc8+0x2c04>)
 8004bb8:	2209      	movs	r2, #9
 8004bba:	601a      	str	r2, [r3, #0]
	 break;
 8004bbc:	f001 bc0c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8004bc0:	2400e0c8 	.word	0x2400e0c8
 8004bc4:	24012ef0 	.word	0x24012ef0
 8004bc8:	24013124 	.word	0x24013124
 8004bcc:	24012ef4 	.word	0x24012ef4
 8004bd0:	2400e0c4 	.word	0x2400e0c4
 8004bd4:	2400e0cc 	.word	0x2400e0cc
 8004bd8:	24013120 	.word	0x24013120
	case  260 :    x=389 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 8004bdc:	4b9d      	ldr	r3, [pc, #628]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004bde:	f240 1285 	movw	r2, #389	; 0x185
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	4b9c      	ldr	r3, [pc, #624]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004be6:	2215      	movs	r2, #21
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4b9c      	ldr	r3, [pc, #624]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004bec:	220d      	movs	r2, #13
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b9b      	ldr	r3, [pc, #620]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004bf2:	2211      	movs	r2, #17
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	4b9b      	ldr	r3, [pc, #620]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	4b9a      	ldr	r3, [pc, #616]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c06:	220b      	movs	r2, #11
 8004c08:	601a      	str	r2, [r3, #0]
	 break;
 8004c0a:	f001 bbe5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  261 :    x=358 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8004c0e:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004c10:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004c18:	2267      	movs	r2, #103	; 0x67
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	4b8f      	ldr	r3, [pc, #572]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004c1e:	2209      	movs	r2, #9
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	4b8f      	ldr	r3, [pc, #572]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004c24:	220e      	movs	r2, #14
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	4b8e      	ldr	r3, [pc, #568]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	4b8e      	ldr	r3, [pc, #568]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c30:	2205      	movs	r2, #5
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	4b8d      	ldr	r3, [pc, #564]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c36:	2209      	movs	r2, #9
 8004c38:	601a      	str	r2, [r3, #0]
	 break;
 8004c3a:	f001 bbcd 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  262 :    x=402 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 8004c3e:	4b85      	ldr	r3, [pc, #532]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004c40:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	4b84      	ldr	r3, [pc, #528]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004c48:	2215      	movs	r2, #21
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	4b83      	ldr	r3, [pc, #524]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004c4e:	220c      	movs	r2, #12
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	4b83      	ldr	r3, [pc, #524]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004c54:	2211      	movs	r2, #17
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	4b82      	ldr	r3, [pc, #520]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	4b82      	ldr	r3, [pc, #520]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c68:	220c      	movs	r2, #12
 8004c6a:	601a      	str	r2, [r3, #0]
	 break;
 8004c6c:	f001 bbb4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  263 :    x=367 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004c70:	4b78      	ldr	r3, [pc, #480]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004c72:	f240 126f 	movw	r2, #367	; 0x16f
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	4b77      	ldr	r3, [pc, #476]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004c7a:	2267      	movs	r2, #103	; 0x67
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004c80:	220a      	movs	r2, #10
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004c86:	220e      	movs	r2, #14
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	4b75      	ldr	r3, [pc, #468]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	4b75      	ldr	r3, [pc, #468]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c98:	2209      	movs	r2, #9
 8004c9a:	601a      	str	r2, [r3, #0]
	 break;
 8004c9c:	f001 bb9c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  264 :    x=150 ;  y=0    ;  width=12  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=12   ;
 8004ca0:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004ca2:	2296      	movs	r2, #150	; 0x96
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	4b6b      	ldr	r3, [pc, #428]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004cae:	220c      	movs	r2, #12
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004cb4:	2212      	movs	r2, #18
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	4b6a      	ldr	r3, [pc, #424]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004cc0:	f06f 0201 	mvn.w	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	4b69      	ldr	r3, [pc, #420]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004cc8:	220c      	movs	r2, #12
 8004cca:	601a      	str	r2, [r3, #0]
	 break;
 8004ccc:	f001 bb84 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  265 :    x=377 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004cd0:	4b60      	ldr	r3, [pc, #384]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004cd2:	f240 1279 	movw	r2, #377	; 0x179
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	4b5f      	ldr	r3, [pc, #380]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004cda:	2267      	movs	r2, #103	; 0x67
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004ce6:	220e      	movs	r2, #14
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	4b5e      	ldr	r3, [pc, #376]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	4b5d      	ldr	r3, [pc, #372]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004cf8:	2209      	movs	r2, #9
 8004cfa:	601a      	str	r2, [r3, #0]
	 break;
 8004cfc:	f001 bb6c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  266 :    x=162 ;  y=0    ;  width=12  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=12   ;
 8004d00:	4b54      	ldr	r3, [pc, #336]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004d02:	22a2      	movs	r2, #162	; 0xa2
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	4b54      	ldr	r3, [pc, #336]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	4b53      	ldr	r3, [pc, #332]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004d0e:	220c      	movs	r2, #12
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004d14:	2212      	movs	r2, #18
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	4b52      	ldr	r3, [pc, #328]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	4b52      	ldr	r3, [pc, #328]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004d20:	f06f 0201 	mvn.w	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	4b51      	ldr	r3, [pc, #324]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004d28:	220c      	movs	r2, #12
 8004d2a:	601a      	str	r2, [r3, #0]
	 break;
 8004d2c:	f001 bb54 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  267 :    x=387 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004d30:	4b48      	ldr	r3, [pc, #288]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004d32:	f240 1283 	movw	r2, #387	; 0x183
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004d3a:	2267      	movs	r2, #103	; 0x67
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004d40:	220a      	movs	r2, #10
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004d46:	220e      	movs	r2, #14
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	4b45      	ldr	r3, [pc, #276]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004d58:	2209      	movs	r2, #9
 8004d5a:	601a      	str	r2, [r3, #0]
	 break;
 8004d5c:	f001 bb3c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  268 :    x=414 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 8004d60:	4b3c      	ldr	r3, [pc, #240]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004d62:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004d6a:	2215      	movs	r2, #21
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004d70:	220c      	movs	r2, #12
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004d76:	2211      	movs	r2, #17
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	601a      	str	r2, [r3, #0]
	 break;
 8004d8e:	f001 bb23 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  269 :    x=397 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004d94:	f240 128d 	movw	r2, #397	; 0x18d
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004d9c:	2267      	movs	r2, #103	; 0x67
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004da2:	220a      	movs	r2, #10
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004da8:	220e      	movs	r2, #14
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004dba:	2209      	movs	r2, #9
 8004dbc:	601a      	str	r2, [r3, #0]
	 break;
 8004dbe:	f001 bb0b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  270 :    x=426 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004dc4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004dcc:	2215      	movs	r2, #21
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004dd2:	220b      	movs	r2, #11
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004dd8:	2211      	movs	r2, #17
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004de4:	f04f 32ff 	mov.w	r2, #4294967295
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004dec:	220b      	movs	r2, #11
 8004dee:	601a      	str	r2, [r3, #0]
	 break;
 8004df0:	f001 baf2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  271 :    x=407 ;  y=103  ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004df6:	f240 1297 	movw	r2, #407	; 0x197
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	4b16      	ldr	r3, [pc, #88]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004dfe:	2267      	movs	r2, #103	; 0x67
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004e04:	220d      	movs	r2, #13
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004e0a:	220e      	movs	r2, #14
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004e1c:	220c      	movs	r2, #12
 8004e1e:	601a      	str	r2, [r3, #0]
	 break;
 8004e20:	f001 bada 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  272 :    x=51  ;  y=103  ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004e26:	2233      	movs	r2, #51	; 0x33
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <Odczytaj_znak_S16_uc8+0x2e84>)
 8004e2c:	2267      	movs	r2, #103	; 0x67
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <Odczytaj_znak_S16_uc8+0x2e88>)
 8004e32:	220d      	movs	r2, #13
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004e38:	220e      	movs	r2, #14
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <Odczytaj_znak_S16_uc8+0x2e94>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <Odczytaj_znak_S16_uc8+0x2e98>)
 8004e4c:	220c      	movs	r2, #12
 8004e4e:	601a      	str	r2, [r3, #0]
	 break;
 8004e50:	f001 bac2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8004e54:	2400e0c8 	.word	0x2400e0c8
 8004e58:	24012ef0 	.word	0x24012ef0
 8004e5c:	24013124 	.word	0x24013124
 8004e60:	24012ef4 	.word	0x24012ef4
 8004e64:	2400e0c4 	.word	0x2400e0c4
 8004e68:	2400e0cc 	.word	0x2400e0cc
 8004e6c:	24013120 	.word	0x24013120
	case  273 :    x=420 ;  y=103  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8004e70:	4b9d      	ldr	r3, [pc, #628]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004e72:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	4b9c      	ldr	r3, [pc, #624]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004e7a:	2267      	movs	r2, #103	; 0x67
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004e80:	220b      	movs	r2, #11
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	4b9b      	ldr	r3, [pc, #620]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004e86:	220e      	movs	r2, #14
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	4b9b      	ldr	r3, [pc, #620]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	4b9a      	ldr	r3, [pc, #616]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	4b9a      	ldr	r3, [pc, #616]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004e98:	220b      	movs	r2, #11
 8004e9a:	601a      	str	r2, [r3, #0]
	 break;
 8004e9c:	f001 ba9c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  274 :    x=437 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004ea0:	4b91      	ldr	r3, [pc, #580]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004ea2:	f240 12b5 	movw	r2, #437	; 0x1b5
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	4b90      	ldr	r3, [pc, #576]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004eaa:	2215      	movs	r2, #21
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	4b90      	ldr	r3, [pc, #576]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004eb0:	220b      	movs	r2, #11
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	4b8f      	ldr	r3, [pc, #572]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004eb6:	2211      	movs	r2, #17
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	4b8f      	ldr	r3, [pc, #572]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	4b8e      	ldr	r3, [pc, #568]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004eca:	220b      	movs	r2, #11
 8004ecc:	601a      	str	r2, [r3, #0]
	 break;
 8004ece:	f001 ba83 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  275 :    x=431 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004ed4:	f240 12af 	movw	r2, #431	; 0x1af
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	4b84      	ldr	r3, [pc, #528]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004edc:	2267      	movs	r2, #103	; 0x67
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004ee2:	220a      	movs	r2, #10
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4b83      	ldr	r3, [pc, #524]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004ee8:	220e      	movs	r2, #14
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4b82      	ldr	r3, [pc, #520]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	4b81      	ldr	r3, [pc, #516]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004efa:	220a      	movs	r2, #10
 8004efc:	601a      	str	r2, [r3, #0]
	 break;
 8004efe:	f001 ba6b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  276 :    x=174 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8004f02:	4b79      	ldr	r3, [pc, #484]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004f04:	22ae      	movs	r2, #174	; 0xae
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	4b78      	ldr	r3, [pc, #480]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	4b78      	ldr	r3, [pc, #480]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004f10:	220b      	movs	r2, #11
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	4b77      	ldr	r3, [pc, #476]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004f16:	2212      	movs	r2, #18
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	4b77      	ldr	r3, [pc, #476]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	4b76      	ldr	r3, [pc, #472]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004f22:	f06f 0201 	mvn.w	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	4b75      	ldr	r3, [pc, #468]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f2a:	220b      	movs	r2, #11
 8004f2c:	601a      	str	r2, [r3, #0]
	 break;
 8004f2e:	f001 ba53 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  277 :    x=441 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004f32:	4b6d      	ldr	r3, [pc, #436]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004f34:	f240 12b9 	movw	r2, #441	; 0x1b9
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	4b6c      	ldr	r3, [pc, #432]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004f3c:	2267      	movs	r2, #103	; 0x67
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	4b6b      	ldr	r3, [pc, #428]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004f42:	220a      	movs	r2, #10
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	4b6b      	ldr	r3, [pc, #428]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004f48:	220e      	movs	r2, #14
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	4b6a      	ldr	r3, [pc, #424]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4b6a      	ldr	r3, [pc, #424]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	4b69      	ldr	r3, [pc, #420]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	601a      	str	r2, [r3, #0]
	 break;
 8004f5e:	f001 ba3b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  278 :    x=448 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004f62:	4b61      	ldr	r3, [pc, #388]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004f64:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	4b60      	ldr	r3, [pc, #384]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004f6c:	2215      	movs	r2, #21
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004f72:	220b      	movs	r2, #11
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	4b5f      	ldr	r3, [pc, #380]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004f78:	2211      	movs	r2, #17
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	4b5e      	ldr	r3, [pc, #376]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	4b5e      	ldr	r3, [pc, #376]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f8c:	220b      	movs	r2, #11
 8004f8e:	601a      	str	r2, [r3, #0]
	 break;
 8004f90:	f001 ba22 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  279 :    x=451 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004f94:	4b54      	ldr	r3, [pc, #336]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004f96:	f240 12c3 	movw	r2, #451	; 0x1c3
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004f9e:	2267      	movs	r2, #103	; 0x67
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004fa4:	220a      	movs	r2, #10
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	4b52      	ldr	r3, [pc, #328]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004faa:	220e      	movs	r2, #14
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	4b51      	ldr	r3, [pc, #324]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	4b51      	ldr	r3, [pc, #324]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004fbc:	220a      	movs	r2, #10
 8004fbe:	601a      	str	r2, [r3, #0]
	 break;
 8004fc0:	f001 ba0a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  280 :    x=459 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004fc4:	4b48      	ldr	r3, [pc, #288]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004fc6:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	4b47      	ldr	r3, [pc, #284]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004fce:	2215      	movs	r2, #21
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8004fd4:	220a      	movs	r2, #10
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 8004fda:	2211      	movs	r2, #17
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4b46      	ldr	r3, [pc, #280]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	4b45      	ldr	r3, [pc, #276]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 8004fec:	220a      	movs	r2, #10
 8004fee:	601a      	str	r2, [r3, #0]
	 break;
 8004ff0:	f001 b9f2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  281 :    x=461 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8004ff4:	4b3c      	ldr	r3, [pc, #240]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8004ff6:	f240 12cd 	movw	r2, #461	; 0x1cd
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8004ffe:	2267      	movs	r2, #103	; 0x67
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8005004:	220a      	movs	r2, #10
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 800500a:	220e      	movs	r2, #14
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8005016:	2205      	movs	r2, #5
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	4b39      	ldr	r3, [pc, #228]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 800501c:	220a      	movs	r2, #10
 800501e:	601a      	str	r2, [r3, #0]
	 break;
 8005020:	f001 b9da 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  282 :    x=469 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8005026:	f240 12d5 	movw	r2, #469	; 0x1d5
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	4b2f      	ldr	r3, [pc, #188]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 800502e:	2215      	movs	r2, #21
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	4b2f      	ldr	r3, [pc, #188]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8005034:	220b      	movs	r2, #11
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 800503a:	2211      	movs	r2, #17
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8005046:	f04f 32ff 	mov.w	r2, #4294967295
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 800504e:	220b      	movs	r2, #11
 8005050:	601a      	str	r2, [r3, #0]
	 break;
 8005052:	f001 b9c1 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  283 :    x=471 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8005058:	f240 12d7 	movw	r2, #471	; 0x1d7
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	4b23      	ldr	r3, [pc, #140]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 8005060:	2267      	movs	r2, #103	; 0x67
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8005066:	220a      	movs	r2, #10
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 800506c:	220e      	movs	r2, #14
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 800507e:	220a      	movs	r2, #10
 8005080:	601a      	str	r2, [r3, #0]
	 break;
 8005082:	f001 b9a9 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  284 :    x=185 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 8005088:	22b9      	movs	r2, #185	; 0xb9
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 8005094:	220d      	movs	r2, #13
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 800509a:	2212      	movs	r2, #18
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	4b15      	ldr	r3, [pc, #84]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 80050a6:	f06f 0201 	mvn.w	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 80050ae:	220d      	movs	r2, #13
 80050b0:	601a      	str	r2, [r3, #0]
	 break;
 80050b2:	f001 b991 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  285 :    x=480 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <Odczytaj_znak_S16_uc8+0x3114>)
 80050b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <Odczytaj_znak_S16_uc8+0x3118>)
 80050c0:	2215      	movs	r2, #21
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <Odczytaj_znak_S16_uc8+0x311c>)
 80050c6:	220a      	movs	r2, #10
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <Odczytaj_znak_S16_uc8+0x3120>)
 80050cc:	2211      	movs	r2, #17
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <Odczytaj_znak_S16_uc8+0x3124>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <Odczytaj_znak_S16_uc8+0x3128>)
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	4b08      	ldr	r3, [pc, #32]	; (8005100 <Odczytaj_znak_S16_uc8+0x312c>)
 80050de:	220a      	movs	r2, #10
 80050e0:	601a      	str	r2, [r3, #0]
	 break;
 80050e2:	f001 b979 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 80050e6:	bf00      	nop
 80050e8:	2400e0c8 	.word	0x2400e0c8
 80050ec:	24012ef0 	.word	0x24012ef0
 80050f0:	24013124 	.word	0x24013124
 80050f4:	24012ef4 	.word	0x24012ef4
 80050f8:	2400e0c4 	.word	0x2400e0c4
 80050fc:	2400e0cc 	.word	0x2400e0cc
 8005100:	24013120 	.word	0x24013120
	case  286 :    x=198 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8005104:	4b9b      	ldr	r3, [pc, #620]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005106:	22c6      	movs	r2, #198	; 0xc6
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	4b9b      	ldr	r3, [pc, #620]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	4b9a      	ldr	r3, [pc, #616]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005112:	220d      	movs	r2, #13
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	4b9a      	ldr	r3, [pc, #616]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005118:	2212      	movs	r2, #18
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	4b99      	ldr	r3, [pc, #612]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	4b99      	ldr	r3, [pc, #612]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005124:	f06f 0201 	mvn.w	r2, #1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	4b98      	ldr	r3, [pc, #608]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 800512c:	220d      	movs	r2, #13
 800512e:	601a      	str	r2, [r3, #0]
	 break;
 8005130:	f001 b952 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  287 :    x=490 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005134:	4b8f      	ldr	r3, [pc, #572]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005136:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	4b8e      	ldr	r3, [pc, #568]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800513e:	2215      	movs	r2, #21
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	4b8e      	ldr	r3, [pc, #568]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005144:	220a      	movs	r2, #10
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	4b8d      	ldr	r3, [pc, #564]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 800514a:	2211      	movs	r2, #17
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	4b8d      	ldr	r3, [pc, #564]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	4b8c      	ldr	r3, [pc, #560]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	4b8c      	ldr	r3, [pc, #560]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 800515c:	220a      	movs	r2, #10
 800515e:	601a      	str	r2, [r3, #0]
	 break;
 8005160:	f001 b93a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  288 :    x=211 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8005164:	4b83      	ldr	r3, [pc, #524]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005166:	22d3      	movs	r2, #211	; 0xd3
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	4b83      	ldr	r3, [pc, #524]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	4b82      	ldr	r3, [pc, #520]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005172:	220d      	movs	r2, #13
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	4b82      	ldr	r3, [pc, #520]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005178:	2212      	movs	r2, #18
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	4b81      	ldr	r3, [pc, #516]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	4b81      	ldr	r3, [pc, #516]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005184:	f06f 0201 	mvn.w	r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	4b80      	ldr	r3, [pc, #512]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 800518c:	220d      	movs	r2, #13
 800518e:	601a      	str	r2, [r3, #0]
	 break;
 8005190:	f001 b922 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  289 :    x=500 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005194:	4b77      	ldr	r3, [pc, #476]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005196:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	4b76      	ldr	r3, [pc, #472]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800519e:	2215      	movs	r2, #21
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	4b76      	ldr	r3, [pc, #472]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 80051a4:	220a      	movs	r2, #10
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	4b75      	ldr	r3, [pc, #468]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 80051aa:	2211      	movs	r2, #17
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	4b75      	ldr	r3, [pc, #468]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	4b74      	ldr	r3, [pc, #464]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	4b74      	ldr	r3, [pc, #464]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 80051bc:	220a      	movs	r2, #10
 80051be:	601a      	str	r2, [r3, #0]
	 break;
 80051c0:	f001 b90a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  290 :    x=224 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 80051c4:	4b6b      	ldr	r3, [pc, #428]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 80051c6:	22e0      	movs	r2, #224	; 0xe0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	4b6b      	ldr	r3, [pc, #428]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 80051d2:	220d      	movs	r2, #13
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 80051d8:	2212      	movs	r2, #18
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	4b69      	ldr	r3, [pc, #420]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	4b69      	ldr	r3, [pc, #420]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	4b68      	ldr	r3, [pc, #416]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 80051ea:	220d      	movs	r2, #13
 80051ec:	601a      	str	r2, [r3, #0]
	 break;
 80051ee:	f001 b8f3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  291 :    x=31  ;  y=0    ;  width=10  ;  height=19   ;  xoffset=0    ;  yoffset=0    ;  xadvance=10   ;
 80051f2:	4b60      	ldr	r3, [pc, #384]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 80051f4:	221f      	movs	r2, #31
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	4b5f      	ldr	r3, [pc, #380]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005200:	220a      	movs	r2, #10
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	4b5e      	ldr	r3, [pc, #376]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005206:	2213      	movs	r2, #19
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	4b5e      	ldr	r3, [pc, #376]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	4b5d      	ldr	r3, [pc, #372]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	4b5d      	ldr	r3, [pc, #372]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 8005218:	220a      	movs	r2, #10
 800521a:	601a      	str	r2, [r3, #0]
	 break;
 800521c:	f001 b8dc 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  292 :    x=0   ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005220:	4b54      	ldr	r3, [pc, #336]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	4b54      	ldr	r3, [pc, #336]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 8005228:	2226      	movs	r2, #38	; 0x26
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	4b53      	ldr	r3, [pc, #332]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 800522e:	220b      	movs	r2, #11
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	4b53      	ldr	r3, [pc, #332]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005234:	2211      	movs	r2, #17
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	4b52      	ldr	r3, [pc, #328]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	4b52      	ldr	r3, [pc, #328]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4b51      	ldr	r3, [pc, #324]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 8005248:	220b      	movs	r2, #11
 800524a:	601a      	str	r2, [r3, #0]
	 break;
 800524c:	f001 b8c4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  293 :    x=11  ;  y=38   ;  width=9   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=9    ;
 8005250:	4b48      	ldr	r3, [pc, #288]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005252:	220b      	movs	r2, #11
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	4b48      	ldr	r3, [pc, #288]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 8005258:	2226      	movs	r2, #38	; 0x26
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	4b47      	ldr	r3, [pc, #284]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 800525e:	2209      	movs	r2, #9
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	4b47      	ldr	r3, [pc, #284]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005264:	2211      	movs	r2, #17
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	4b46      	ldr	r3, [pc, #280]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	4b46      	ldr	r3, [pc, #280]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005270:	f04f 32ff 	mov.w	r2, #4294967295
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	4b45      	ldr	r3, [pc, #276]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 8005278:	2209      	movs	r2, #9
 800527a:	601a      	str	r2, [r3, #0]
	 break;
 800527c:	f001 b8ac 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  294 :    x=481 ;  y=103  ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8005280:	4b3c      	ldr	r3, [pc, #240]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005282:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800528a:	2267      	movs	r2, #103	; 0x67
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	4b3b      	ldr	r3, [pc, #236]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005290:	220d      	movs	r2, #13
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005296:	220e      	movs	r2, #14
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	4b3a      	ldr	r3, [pc, #232]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	4b39      	ldr	r3, [pc, #228]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 80052a8:	220d      	movs	r2, #13
 80052aa:	601a      	str	r2, [r3, #0]
	 break;
 80052ac:	f001 b894 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  295 :    x=494 ;  y=103  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 80052b0:	4b30      	ldr	r3, [pc, #192]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 80052b2:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 80052ba:	2267      	movs	r2, #103	; 0x67
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 80052c0:	220b      	movs	r2, #11
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 80052c6:	220e      	movs	r2, #14
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	4b2d      	ldr	r3, [pc, #180]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 80052d8:	220b      	movs	r2, #11
 80052da:	601a      	str	r2, [r3, #0]
	 break;
 80052dc:	f001 b87c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  296 :    x=237 ;  y=0    ;  width=7   ;  height=18   ;  xoffset=-1   ;  yoffset=-2   ;  xadvance=5    ;
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 80052e2:	22ed      	movs	r2, #237	; 0xed
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 80052ee:	2207      	movs	r2, #7
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 80052f4:	2212      	movs	r2, #18
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	4b22      	ldr	r3, [pc, #136]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	4b21      	ldr	r3, [pc, #132]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005302:	f06f 0201 	mvn.w	r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	4b20      	ldr	r3, [pc, #128]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 800530a:	2205      	movs	r2, #5
 800530c:	601a      	str	r2, [r3, #0]
	 break;
 800530e:	f001 b863 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  297 :    x=0   ;  y=117  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 8005312:	4b18      	ldr	r3, [pc, #96]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	4b17      	ldr	r3, [pc, #92]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800531a:	2275      	movs	r2, #117	; 0x75
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	4b17      	ldr	r3, [pc, #92]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	4b16      	ldr	r3, [pc, #88]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005326:	220e      	movs	r2, #14
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800532c:	f04f 32ff 	mov.w	r2, #4294967295
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 800533a:	2204      	movs	r2, #4
 800533c:	601a      	str	r2, [r3, #0]
	 break;
 800533e:	f001 b84b 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  298 :    x=20  ;  y=38   ;  width=7   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=5    ;
 8005342:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005344:	2214      	movs	r2, #20
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <Odczytaj_znak_S16_uc8+0x33a4>)
 800534a:	2226      	movs	r2, #38	; 0x26
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <Odczytaj_znak_S16_uc8+0x33a8>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005356:	2211      	movs	r2, #17
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <Odczytaj_znak_S16_uc8+0x33b0>)
 800535c:	f04f 32ff 	mov.w	r2, #4294967295
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <Odczytaj_znak_S16_uc8+0x33b4>)
 8005364:	f04f 32ff 	mov.w	r2, #4294967295
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <Odczytaj_znak_S16_uc8+0x33b8>)
 800536c:	2205      	movs	r2, #5
 800536e:	601a      	str	r2, [r3, #0]
	 break;
 8005370:	f001 b832 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8005374:	2400e0c8 	.word	0x2400e0c8
 8005378:	24012ef0 	.word	0x24012ef0
 800537c:	24013124 	.word	0x24013124
 8005380:	24012ef4 	.word	0x24012ef4
 8005384:	2400e0c4 	.word	0x2400e0c4
 8005388:	2400e0cc 	.word	0x2400e0cc
 800538c:	24013120 	.word	0x24013120
	case  299 :    x=7   ;  y=117  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8005390:	4b98      	ldr	r3, [pc, #608]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 8005392:	2207      	movs	r2, #7
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	4b98      	ldr	r3, [pc, #608]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 8005398:	2275      	movs	r2, #117	; 0x75
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	4b97      	ldr	r3, [pc, #604]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 800539e:	2207      	movs	r2, #7
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	4b97      	ldr	r3, [pc, #604]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 80053a4:	220e      	movs	r2, #14
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	4b96      	ldr	r3, [pc, #600]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	4b95      	ldr	r3, [pc, #596]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4b95      	ldr	r3, [pc, #596]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 80053b8:	2205      	movs	r2, #5
 80053ba:	601a      	str	r2, [r3, #0]
	 break;
 80053bc:	f001 b80c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  300 :    x=244 ;  y=0    ;  width=6   ;  height=18   ;  xoffset=-1   ;  yoffset=-2   ;  xadvance=4    ;
 80053c0:	4b8c      	ldr	r3, [pc, #560]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 80053c2:	22f4      	movs	r2, #244	; 0xf4
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	4b8c      	ldr	r3, [pc, #560]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	4b8b      	ldr	r3, [pc, #556]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 80053ce:	2206      	movs	r2, #6
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	4b8b      	ldr	r3, [pc, #556]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 80053d4:	2212      	movs	r2, #18
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	4b8a      	ldr	r3, [pc, #552]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	4b89      	ldr	r3, [pc, #548]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 80053e2:	f06f 0201 	mvn.w	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 80053ea:	2204      	movs	r2, #4
 80053ec:	601a      	str	r2, [r3, #0]
	 break;
 80053ee:	f000 bff3 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  301 :    x=14  ;  y=117  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 80053f2:	4b80      	ldr	r3, [pc, #512]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 80053f4:	220e      	movs	r2, #14
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	4b7f      	ldr	r3, [pc, #508]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 80053fa:	2275      	movs	r2, #117	; 0x75
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	4b7f      	ldr	r3, [pc, #508]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	4b7e      	ldr	r3, [pc, #504]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 8005406:	220e      	movs	r2, #14
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	4b7e      	ldr	r3, [pc, #504]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 800540c:	f04f 32ff 	mov.w	r2, #4294967295
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	4b7d      	ldr	r3, [pc, #500]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 8005414:	2201      	movs	r2, #1
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	4b7c      	ldr	r3, [pc, #496]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 800541a:	2204      	movs	r2, #4
 800541c:	601a      	str	r2, [r3, #0]
	 break;
 800541e:	f000 bfdb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  302 :    x=27  ;  y=38   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8005422:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 8005424:	221b      	movs	r2, #27
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	4b73      	ldr	r3, [pc, #460]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 800542a:	2226      	movs	r2, #38	; 0x26
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	4b73      	ldr	r3, [pc, #460]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 8005430:	2205      	movs	r2, #5
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	4b72      	ldr	r3, [pc, #456]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 8005436:	2211      	movs	r2, #17
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4b72      	ldr	r3, [pc, #456]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	4b71      	ldr	r3, [pc, #452]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	4b71      	ldr	r3, [pc, #452]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 8005448:	2205      	movs	r2, #5
 800544a:	601a      	str	r2, [r3, #0]
	 break;
 800544c:	f000 bfc4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  303 :    x=32  ;  y=38   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8005450:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 8005452:	2220      	movs	r2, #32
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	4b68      	ldr	r3, [pc, #416]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 8005458:	2226      	movs	r2, #38	; 0x26
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	4b67      	ldr	r3, [pc, #412]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 800545e:	2205      	movs	r2, #5
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	4b67      	ldr	r3, [pc, #412]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 8005464:	2211      	movs	r2, #17
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	4b66      	ldr	r3, [pc, #408]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	4b66      	ldr	r3, [pc, #408]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 8005476:	2205      	movs	r2, #5
 8005478:	601a      	str	r2, [r3, #0]
	 break;
 800547a:	f000 bfad 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  304 :    x=37  ;  y=38   ;  width=4   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=4    ;
 800547e:	4b5d      	ldr	r3, [pc, #372]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 8005480:	2225      	movs	r2, #37	; 0x25
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 8005486:	2226      	movs	r2, #38	; 0x26
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	4b5c      	ldr	r3, [pc, #368]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 800548c:	2204      	movs	r2, #4
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	4b5b      	ldr	r3, [pc, #364]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 8005492:	2211      	movs	r2, #17
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	4b5b      	ldr	r3, [pc, #364]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	4b5a      	ldr	r3, [pc, #360]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 80054a6:	2204      	movs	r2, #4
 80054a8:	601a      	str	r2, [r3, #0]
	 break;
 80054aa:	f000 bf95 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  305 :    x=136 ;  y=201  ;  width=4   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=4    ;
 80054ae:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 80054b0:	2288      	movs	r2, #136	; 0x88
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	4b50      	ldr	r3, [pc, #320]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 80054b6:	22c9      	movs	r2, #201	; 0xc9
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	4b50      	ldr	r3, [pc, #320]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 80054bc:	2204      	movs	r2, #4
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	4b4f      	ldr	r3, [pc, #316]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 80054c2:	220b      	movs	r2, #11
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	4b4f      	ldr	r3, [pc, #316]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 80054ce:	2205      	movs	r2, #5
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	4b4e      	ldr	r3, [pc, #312]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 80054d4:	2204      	movs	r2, #4
 80054d6:	601a      	str	r2, [r3, #0]
	 break;
 80054d8:	f000 bf7e 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  306 :    x=21  ;  y=117  ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 80054dc:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 80054de:	2215      	movs	r2, #21
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	4b45      	ldr	r3, [pc, #276]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 80054e4:	2275      	movs	r2, #117	; 0x75
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	4b44      	ldr	r3, [pc, #272]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 80054ea:	220c      	movs	r2, #12
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	4b44      	ldr	r3, [pc, #272]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 80054f0:	220e      	movs	r2, #14
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	4b43      	ldr	r3, [pc, #268]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	4b43      	ldr	r3, [pc, #268]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	4b42      	ldr	r3, [pc, #264]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 8005502:	220c      	movs	r2, #12
 8005504:	601a      	str	r2, [r3, #0]
	 break;
 8005506:	f000 bf67 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  307 :    x=41  ;  y=38   ;  width=8   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800550a:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 800550c:	2229      	movs	r2, #41	; 0x29
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 8005512:	2226      	movs	r2, #38	; 0x26
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 8005518:	2208      	movs	r2, #8
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	4b38      	ldr	r3, [pc, #224]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 800551e:	2211      	movs	r2, #17
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	4b38      	ldr	r3, [pc, #224]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4b37      	ldr	r3, [pc, #220]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 8005530:	2209      	movs	r2, #9
 8005532:	601a      	str	r2, [r3, #0]
	 break;
 8005534:	f000 bf50 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  308 :    x=250 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=10   ;
 8005538:	4b2e      	ldr	r3, [pc, #184]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 800553a:	22fa      	movs	r2, #250	; 0xfa
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 8005546:	220b      	movs	r2, #11
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 800554c:	2212      	movs	r2, #18
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 8005558:	f06f 0201 	mvn.w	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	4b2b      	ldr	r3, [pc, #172]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 8005560:	220a      	movs	r2, #10
 8005562:	601a      	str	r2, [r3, #0]
	 break;
 8005564:	f000 bf38 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  309 :    x=49  ;  y=38   ;  width=8   ;  height=17   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=4    ;
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 800556a:	2231      	movs	r2, #49	; 0x31
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 8005570:	2226      	movs	r2, #38	; 0x26
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	4b21      	ldr	r3, [pc, #132]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 8005576:	2208      	movs	r2, #8
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	4b21      	ldr	r3, [pc, #132]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 800557c:	2211      	movs	r2, #17
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	4b20      	ldr	r3, [pc, #128]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 8005582:	f06f 0201 	mvn.w	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	4b1f      	ldr	r3, [pc, #124]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	4b1f      	ldr	r3, [pc, #124]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 8005590:	2204      	movs	r2, #4
 8005592:	601a      	str	r2, [r3, #0]
	 break;
 8005594:	f000 bf20 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  310 :    x=41  ;  y=0    ;  width=13  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8005598:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 800559a:	2229      	movs	r2, #41	; 0x29
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 80055a6:	220d      	movs	r2, #13
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 80055ac:	2213      	movs	r2, #19
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	4b14      	ldr	r3, [pc, #80]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 80055be:	220c      	movs	r2, #12
 80055c0:	601a      	str	r2, [r3, #0]
	 break;
 80055c2:	f000 bf09 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  311 :    x=54  ;  y=0    ;  width=10  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <Odczytaj_znak_S16_uc8+0x3620>)
 80055c8:	2236      	movs	r2, #54	; 0x36
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <Odczytaj_znak_S16_uc8+0x3624>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <Odczytaj_znak_S16_uc8+0x3628>)
 80055d4:	220a      	movs	r2, #10
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <Odczytaj_znak_S16_uc8+0x362c>)
 80055da:	2213      	movs	r2, #19
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <Odczytaj_znak_S16_uc8+0x3630>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <Odczytaj_znak_S16_uc8+0x3634>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <Odczytaj_znak_S16_uc8+0x3638>)
 80055ec:	2209      	movs	r2, #9
 80055ee:	601a      	str	r2, [r3, #0]
	 break;
 80055f0:	f000 bef2 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 80055f4:	2400e0c8 	.word	0x2400e0c8
 80055f8:	24012ef0 	.word	0x24012ef0
 80055fc:	24013124 	.word	0x24013124
 8005600:	24012ef4 	.word	0x24012ef4
 8005604:	2400e0c4 	.word	0x2400e0c4
 8005608:	2400e0cc 	.word	0x2400e0cc
 800560c:	24013120 	.word	0x24013120
	case  312 :    x=140 ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8005610:	4b97      	ldr	r3, [pc, #604]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005612:	228c      	movs	r2, #140	; 0x8c
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	4b97      	ldr	r3, [pc, #604]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005618:	22c9      	movs	r2, #201	; 0xc9
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	4b96      	ldr	r3, [pc, #600]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 800561e:	220a      	movs	r2, #10
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	4b96      	ldr	r3, [pc, #600]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 8005624:	220b      	movs	r2, #11
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	4b95      	ldr	r3, [pc, #596]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	4b95      	ldr	r3, [pc, #596]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005630:	2205      	movs	r2, #5
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	4b94      	ldr	r3, [pc, #592]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005636:	2209      	movs	r2, #9
 8005638:	601a      	str	r2, [r3, #0]
	 break;
 800563a:	f000 becd 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  313 :    x=57  ;  y=38   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=10   ;
 800563e:	4b8c      	ldr	r3, [pc, #560]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005640:	2239      	movs	r2, #57	; 0x39
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	4b8b      	ldr	r3, [pc, #556]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005646:	2226      	movs	r2, #38	; 0x26
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	4b8b      	ldr	r3, [pc, #556]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 800564c:	220a      	movs	r2, #10
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	4b8a      	ldr	r3, [pc, #552]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 8005652:	2211      	movs	r2, #17
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	4b8a      	ldr	r3, [pc, #552]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	4b89      	ldr	r3, [pc, #548]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 800565e:	f04f 32ff 	mov.w	r2, #4294967295
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005666:	220a      	movs	r2, #10
 8005668:	601a      	str	r2, [r3, #0]
	 break;
 800566a:	f000 beb5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  314 :    x=67  ;  y=38   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=4    ;
 800566e:	4b80      	ldr	r3, [pc, #512]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005670:	2243      	movs	r2, #67	; 0x43
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	4b7f      	ldr	r3, [pc, #508]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005676:	2226      	movs	r2, #38	; 0x26
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 800567c:	2205      	movs	r2, #5
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	4b7e      	ldr	r3, [pc, #504]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 8005682:	2211      	movs	r2, #17
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	4b7e      	ldr	r3, [pc, #504]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	4b7d      	ldr	r3, [pc, #500]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	4b7c      	ldr	r3, [pc, #496]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005696:	2204      	movs	r2, #4
 8005698:	601a      	str	r2, [r3, #0]
	 break;
 800569a:	f000 be9d 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  315 :    x=64  ;  y=0    ;  width=10  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800569e:	4b74      	ldr	r3, [pc, #464]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 80056a0:	2240      	movs	r2, #64	; 0x40
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	4b73      	ldr	r3, [pc, #460]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	4b73      	ldr	r3, [pc, #460]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 80056ac:	220a      	movs	r2, #10
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	4b72      	ldr	r3, [pc, #456]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 80056b2:	2213      	movs	r2, #19
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	4b72      	ldr	r3, [pc, #456]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	4b71      	ldr	r3, [pc, #452]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	4b71      	ldr	r3, [pc, #452]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 80056c4:	220a      	movs	r2, #10
 80056c6:	601a      	str	r2, [r3, #0]
	 break;
 80056c8:	f000 be86 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  316 :    x=74  ;  y=0    ;  width=4   ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 80056cc:	4b68      	ldr	r3, [pc, #416]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 80056ce:	224a      	movs	r2, #74	; 0x4a
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	4b68      	ldr	r3, [pc, #416]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	4b67      	ldr	r3, [pc, #412]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 80056da:	2204      	movs	r2, #4
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	4b67      	ldr	r3, [pc, #412]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 80056e0:	2213      	movs	r2, #19
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	4b66      	ldr	r3, [pc, #408]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	4b66      	ldr	r3, [pc, #408]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	4b65      	ldr	r3, [pc, #404]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 80056f2:	2204      	movs	r2, #4
 80056f4:	601a      	str	r2, [r3, #0]
	 break;
 80056f6:	f000 be6f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  317 :    x=33  ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80056fa:	4b5d      	ldr	r3, [pc, #372]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 80056fc:	2221      	movs	r2, #33	; 0x21
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005702:	2275      	movs	r2, #117	; 0x75
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	4b5c      	ldr	r3, [pc, #368]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 8005708:	220a      	movs	r2, #10
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	4b5b      	ldr	r3, [pc, #364]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 800570e:	220e      	movs	r2, #14
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	4b5b      	ldr	r3, [pc, #364]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	4b5a      	ldr	r3, [pc, #360]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005720:	220a      	movs	r2, #10
 8005722:	601a      	str	r2, [r3, #0]
	 break;
 8005724:	f000 be58 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  318 :    x=43  ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005728:	4b51      	ldr	r3, [pc, #324]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 800572a:	222b      	movs	r2, #43	; 0x2b
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	4b51      	ldr	r3, [pc, #324]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005730:	2275      	movs	r2, #117	; 0x75
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	4b50      	ldr	r3, [pc, #320]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 8005736:	2207      	movs	r2, #7
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	4b50      	ldr	r3, [pc, #320]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 800573c:	220e      	movs	r2, #14
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	4b4f      	ldr	r3, [pc, #316]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	4b4f      	ldr	r3, [pc, #316]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	4b4e      	ldr	r3, [pc, #312]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 800574e:	2207      	movs	r2, #7
 8005750:	601a      	str	r2, [r3, #0]
	 break;
 8005752:	f000 be41 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  319 :    x=50  ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005756:	4b46      	ldr	r3, [pc, #280]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005758:	2232      	movs	r2, #50	; 0x32
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	4b45      	ldr	r3, [pc, #276]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 800575e:	2275      	movs	r2, #117	; 0x75
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	4b45      	ldr	r3, [pc, #276]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 8005764:	220a      	movs	r2, #10
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	4b44      	ldr	r3, [pc, #272]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 800576a:	220e      	movs	r2, #14
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	4b44      	ldr	r3, [pc, #272]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	4b43      	ldr	r3, [pc, #268]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 800577c:	220a      	movs	r2, #10
 800577e:	601a      	str	r2, [r3, #0]
	 break;
 8005780:	f000 be2a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  320 :    x=60  ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005784:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005786:	223c      	movs	r2, #60	; 0x3c
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	4b3a      	ldr	r3, [pc, #232]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 800578c:	2275      	movs	r2, #117	; 0x75
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 8005792:	2207      	movs	r2, #7
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	4b39      	ldr	r3, [pc, #228]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 8005798:	220e      	movs	r2, #14
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	4b38      	ldr	r3, [pc, #224]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	4b38      	ldr	r3, [pc, #224]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	4b37      	ldr	r3, [pc, #220]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 80057aa:	2207      	movs	r2, #7
 80057ac:	601a      	str	r2, [r3, #0]
	 break;
 80057ae:	f000 be13 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  321 :    x=67  ;  y=117  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 80057b2:	4b2f      	ldr	r3, [pc, #188]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 80057b4:	2243      	movs	r2, #67	; 0x43
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 80057ba:	2275      	movs	r2, #117	; 0x75
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 80057c0:	220b      	movs	r2, #11
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 80057c6:	220e      	movs	r2, #14
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 80057d8:	220b      	movs	r2, #11
 80057da:	601a      	str	r2, [r3, #0]
	 break;
 80057dc:	f000 bdfc 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  322 :    x=505 ;  y=103  ;  width=6   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 80057e0:	4b23      	ldr	r3, [pc, #140]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 80057e2:	f240 12f9 	movw	r2, #505	; 0x1f9
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	4b22      	ldr	r3, [pc, #136]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 80057ea:	2267      	movs	r2, #103	; 0x67
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	4b22      	ldr	r3, [pc, #136]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 80057f0:	2206      	movs	r2, #6
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	4b21      	ldr	r3, [pc, #132]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 80057f6:	220e      	movs	r2, #14
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	4b21      	ldr	r3, [pc, #132]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	4b20      	ldr	r3, [pc, #128]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	4b20      	ldr	r3, [pc, #128]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005808:	2206      	movs	r2, #6
 800580a:	601a      	str	r2, [r3, #0]
	 break;
 800580c:	f000 bde4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  323 :    x=72  ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005812:	2248      	movs	r2, #72	; 0x48
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005818:	2226      	movs	r2, #38	; 0x26
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	4b16      	ldr	r3, [pc, #88]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 800581e:	220b      	movs	r2, #11
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 8005824:	2211      	movs	r2, #17
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005838:	220c      	movs	r2, #12
 800583a:	601a      	str	r2, [r3, #0]
	 break;
 800583c:	f000 bdcc 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  324 :    x=78  ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <Odczytaj_znak_S16_uc8+0x389c>)
 8005842:	224e      	movs	r2, #78	; 0x4e
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005848:	2275      	movs	r2, #117	; 0x75
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <Odczytaj_znak_S16_uc8+0x38a4>)
 800584e:	2209      	movs	r2, #9
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <Odczytaj_znak_S16_uc8+0x38a8>)
 8005854:	220e      	movs	r2, #14
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <Odczytaj_znak_S16_uc8+0x38ac>)
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	4b08      	ldr	r3, [pc, #32]	; (8005888 <Odczytaj_znak_S16_uc8+0x38b4>)
 8005866:	2209      	movs	r2, #9
 8005868:	601a      	str	r2, [r3, #0]
	 break;
 800586a:	f000 bdb5 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 800586e:	bf00      	nop
 8005870:	2400e0c8 	.word	0x2400e0c8
 8005874:	24012ef0 	.word	0x24012ef0
 8005878:	24013124 	.word	0x24013124
 800587c:	24012ef4 	.word	0x24012ef4
 8005880:	2400e0c4 	.word	0x2400e0c4
 8005884:	2400e0cc 	.word	0x2400e0cc
 8005888:	24013120 	.word	0x24013120
	case  325 :    x=78  ;  y=0    ;  width=11  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 800588c:	4b98      	ldr	r3, [pc, #608]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 800588e:	224e      	movs	r2, #78	; 0x4e
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4b98      	ldr	r3, [pc, #608]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	4b97      	ldr	r3, [pc, #604]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 800589a:	220b      	movs	r2, #11
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	4b97      	ldr	r3, [pc, #604]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 80058a0:	2213      	movs	r2, #19
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	4b96      	ldr	r3, [pc, #600]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	4b96      	ldr	r3, [pc, #600]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	4b95      	ldr	r3, [pc, #596]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 80058b2:	220c      	movs	r2, #12
 80058b4:	601a      	str	r2, [r3, #0]
	 break;
 80058b6:	f000 bd8f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  326 :    x=231 ;  y=72   ;  width=10  ;  height=16   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 80058ba:	4b8d      	ldr	r3, [pc, #564]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80058bc:	22e7      	movs	r2, #231	; 0xe7
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	4b8c      	ldr	r3, [pc, #560]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 80058c2:	2248      	movs	r2, #72	; 0x48
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 80058c8:	220a      	movs	r2, #10
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	4b8b      	ldr	r3, [pc, #556]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 80058ce:	2210      	movs	r2, #16
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	4b8a      	ldr	r3, [pc, #552]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 80058da:	2205      	movs	r2, #5
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	4b8a      	ldr	r3, [pc, #552]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 80058e0:	220a      	movs	r2, #10
 80058e2:	601a      	str	r2, [r3, #0]
	 break;
 80058e4:	f000 bd78 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  327 :    x=83  ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 80058e8:	4b81      	ldr	r3, [pc, #516]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80058ea:	2253      	movs	r2, #83	; 0x53
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	4b81      	ldr	r3, [pc, #516]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 80058f0:	2226      	movs	r2, #38	; 0x26
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	4b80      	ldr	r3, [pc, #512]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 80058f6:	220b      	movs	r2, #11
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	4b80      	ldr	r3, [pc, #512]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 80058fc:	2211      	movs	r2, #17
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	4b7f      	ldr	r3, [pc, #508]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	4b7f      	ldr	r3, [pc, #508]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	4b7e      	ldr	r3, [pc, #504]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 8005910:	220c      	movs	r2, #12
 8005912:	601a      	str	r2, [r3, #0]
	 break;
 8005914:	f000 bd60 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  328 :    x=87  ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005918:	4b75      	ldr	r3, [pc, #468]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 800591a:	2257      	movs	r2, #87	; 0x57
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	4b75      	ldr	r3, [pc, #468]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005920:	2275      	movs	r2, #117	; 0x75
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	4b74      	ldr	r3, [pc, #464]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005926:	2209      	movs	r2, #9
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	4b74      	ldr	r3, [pc, #464]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 800592c:	220e      	movs	r2, #14
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	4b73      	ldr	r3, [pc, #460]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 800593e:	2209      	movs	r2, #9
 8005940:	601a      	str	r2, [r3, #0]
	 break;
 8005942:	f000 bd49 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  329 :    x=96  ;  y=117  ;  width=12  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 8005946:	4b6a      	ldr	r3, [pc, #424]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005948:	2260      	movs	r2, #96	; 0x60
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	4b69      	ldr	r3, [pc, #420]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 800594e:	2275      	movs	r2, #117	; 0x75
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	4b69      	ldr	r3, [pc, #420]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005954:	220c      	movs	r2, #12
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	4b68      	ldr	r3, [pc, #416]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 800595a:	220e      	movs	r2, #14
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005960:	f04f 32ff 	mov.w	r2, #4294967295
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4b67      	ldr	r3, [pc, #412]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	4b66      	ldr	r3, [pc, #408]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 800596e:	220b      	movs	r2, #11
 8005970:	601a      	str	r2, [r3, #0]
	 break;
 8005972:	f000 bd31 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  330 :    x=108 ;  y=117  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005976:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005978:	226c      	movs	r2, #108	; 0x6c
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	4b5d      	ldr	r3, [pc, #372]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 800597e:	2275      	movs	r2, #117	; 0x75
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005984:	220b      	movs	r2, #11
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	4b5c      	ldr	r3, [pc, #368]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 800598a:	220e      	movs	r2, #14
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	4b5b      	ldr	r3, [pc, #364]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 800599c:	220b      	movs	r2, #11
 800599e:	601a      	str	r2, [r3, #0]
	 break;
 80059a0:	f000 bd1a 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  331 :    x=119 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 80059a4:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80059a6:	2277      	movs	r2, #119	; 0x77
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	4b52      	ldr	r3, [pc, #328]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 80059ac:	2275      	movs	r2, #117	; 0x75
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 80059b2:	2209      	movs	r2, #9
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	4b51      	ldr	r3, [pc, #324]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 80059b8:	220e      	movs	r2, #14
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	4b50      	ldr	r3, [pc, #320]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 80059c4:	2205      	movs	r2, #5
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	4b4f      	ldr	r3, [pc, #316]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 80059ca:	2209      	movs	r2, #9
 80059cc:	601a      	str	r2, [r3, #0]
	 break;
 80059ce:	f000 bd03 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  332 :    x=94  ;  y=38   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80059d4:	225e      	movs	r2, #94	; 0x5e
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	4b46      	ldr	r3, [pc, #280]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 80059da:	2226      	movs	r2, #38	; 0x26
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	4b46      	ldr	r3, [pc, #280]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 80059e0:	220d      	movs	r2, #13
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 80059e6:	2211      	movs	r2, #17
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	4b44      	ldr	r3, [pc, #272]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	4b43      	ldr	r3, [pc, #268]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 80059fa:	220d      	movs	r2, #13
 80059fc:	601a      	str	r2, [r3, #0]
	 break;
 80059fe:	f000 bceb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  333 :    x=128 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005a04:	2280      	movs	r2, #128	; 0x80
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	4b3a      	ldr	r3, [pc, #232]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005a0a:	2275      	movs	r2, #117	; 0x75
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	4b3a      	ldr	r3, [pc, #232]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005a10:	220a      	movs	r2, #10
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	4b39      	ldr	r3, [pc, #228]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 8005a16:	220e      	movs	r2, #14
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 8005a28:	220a      	movs	r2, #10
 8005a2a:	601a      	str	r2, [r3, #0]
	 break;
 8005a2c:	f000 bcd4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  334 :    x=261 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8005a30:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005a32:	f240 1205 	movw	r2, #261	; 0x105
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005a40:	220d      	movs	r2, #13
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	4b2d      	ldr	r3, [pc, #180]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 8005a46:	2212      	movs	r2, #18
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	4b2d      	ldr	r3, [pc, #180]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005a52:	f06f 0201 	mvn.w	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 8005a5a:	220d      	movs	r2, #13
 8005a5c:	601a      	str	r2, [r3, #0]
	 break;
 8005a5e:	f000 bcbb 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  335 :    x=138 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005a64:	228a      	movs	r2, #138	; 0x8a
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005a6a:	2275      	movs	r2, #117	; 0x75
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005a70:	220a      	movs	r2, #10
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	4b21      	ldr	r3, [pc, #132]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 8005a76:	220e      	movs	r2, #14
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 8005a88:	220a      	movs	r2, #10
 8005a8a:	601a      	str	r2, [r3, #0]
	 break;
 8005a8c:	f000 bca4 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  336 :    x=107 ;  y=38   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 8005a90:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005a92:	226b      	movs	r2, #107	; 0x6b
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005a98:	2226      	movs	r2, #38	; 0x26
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005a9e:	220d      	movs	r2, #13
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 8005aa4:	2211      	movs	r2, #17
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 8005ab8:	220d      	movs	r2, #13
 8005aba:	601a      	str	r2, [r3, #0]
	 break;
 8005abc:	f000 bc8c 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  337 :    x=148 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005ac2:	2294      	movs	r2, #148	; 0x94
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005ac8:	2275      	movs	r2, #117	; 0x75
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <Odczytaj_znak_S16_uc8+0x3b24>)
 8005ace:	220a      	movs	r2, #10
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <Odczytaj_znak_S16_uc8+0x3b28>)
 8005ad4:	220e      	movs	r2, #14
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <Odczytaj_znak_S16_uc8+0x3b34>)
 8005ae6:	220a      	movs	r2, #10
 8005ae8:	601a      	str	r2, [r3, #0]
	 break;
 8005aea:	f000 bc75 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8005aee:	bf00      	nop
 8005af0:	2400e0c8 	.word	0x2400e0c8
 8005af4:	24012ef0 	.word	0x24012ef0
 8005af8:	24013124 	.word	0x24013124
 8005afc:	24012ef4 	.word	0x24012ef4
 8005b00:	2400e0c4 	.word	0x2400e0c4
 8005b04:	2400e0cc 	.word	0x2400e0cc
 8005b08:	24013120 	.word	0x24013120
	case  338 :    x=158 ;  y=117  ;  width=17  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=16   ;
 8005b0c:	4b93      	ldr	r3, [pc, #588]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b0e:	229e      	movs	r2, #158	; 0x9e
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	4b93      	ldr	r3, [pc, #588]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b14:	2275      	movs	r2, #117	; 0x75
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b1a:	2211      	movs	r2, #17
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005b20:	220e      	movs	r2, #14
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	4b91      	ldr	r3, [pc, #580]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	4b91      	ldr	r3, [pc, #580]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	4b90      	ldr	r3, [pc, #576]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005b32:	2210      	movs	r2, #16
 8005b34:	601a      	str	r2, [r3, #0]
	 break;
 8005b36:	f000 bc4f 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  339 :    x=150 ;  y=201  ;  width=16  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=16   ;
 8005b3a:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b3c:	2296      	movs	r2, #150	; 0x96
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	4b87      	ldr	r3, [pc, #540]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b42:	22c9      	movs	r2, #201	; 0xc9
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	4b87      	ldr	r3, [pc, #540]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b48:	2210      	movs	r2, #16
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	4b86      	ldr	r3, [pc, #536]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005b4e:	220b      	movs	r2, #11
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	4b86      	ldr	r3, [pc, #536]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	4b85      	ldr	r3, [pc, #532]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	4b85      	ldr	r3, [pc, #532]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005b60:	2210      	movs	r2, #16
 8005b62:	601a      	str	r2, [r3, #0]
	 break;
 8005b64:	f000 bc38 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  340 :    x=120 ;  y=38   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005b68:	4b7c      	ldr	r3, [pc, #496]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b6a:	2278      	movs	r2, #120	; 0x78
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	4b7c      	ldr	r3, [pc, #496]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b70:	2226      	movs	r2, #38	; 0x26
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b76:	220c      	movs	r2, #12
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005b7c:	2211      	movs	r2, #17
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	4b7a      	ldr	r3, [pc, #488]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	4b7a      	ldr	r3, [pc, #488]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	4b79      	ldr	r3, [pc, #484]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005b90:	220b      	movs	r2, #11
 8005b92:	601a      	str	r2, [r3, #0]
	 break;
 8005b94:	f000 bc20 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  341 :    x=175 ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8005b98:	4b70      	ldr	r3, [pc, #448]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b9a:	22af      	movs	r2, #175	; 0xaf
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	4b70      	ldr	r3, [pc, #448]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005ba0:	2275      	movs	r2, #117	; 0x75
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	4b6f      	ldr	r3, [pc, #444]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005ba6:	2207      	movs	r2, #7
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	4b6f      	ldr	r3, [pc, #444]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005bac:	220e      	movs	r2, #14
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	4b6e      	ldr	r3, [pc, #440]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	4b6d      	ldr	r3, [pc, #436]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	601a      	str	r2, [r3, #0]
	 break;
 8005bc2:	f000 bc09 	b.w	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  342 :    x=89  ;  y=0    ;  width=12  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005bc6:	4b65      	ldr	r3, [pc, #404]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005bc8:	2259      	movs	r2, #89	; 0x59
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	4b64      	ldr	r3, [pc, #400]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	4b64      	ldr	r3, [pc, #400]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005bd4:	220c      	movs	r2, #12
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	4b63      	ldr	r3, [pc, #396]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005bda:	2213      	movs	r2, #19
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	4b62      	ldr	r3, [pc, #392]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	4b62      	ldr	r3, [pc, #392]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005bec:	220b      	movs	r2, #11
 8005bee:	601a      	str	r2, [r3, #0]
	 break;
 8005bf0:	e3f2      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  343 :    x=503 ;  y=55   ;  width=7   ;  height=16   ;  xoffset=0    ;  yoffset=5    ;  xadvance=6    ;
 8005bf2:	4b5a      	ldr	r3, [pc, #360]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005bf4:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005bfc:	2237      	movs	r2, #55	; 0x37
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005c02:	2207      	movs	r2, #7
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005c08:	2210      	movs	r2, #16
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005c14:	2205      	movs	r2, #5
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	4b56      	ldr	r3, [pc, #344]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005c1a:	2206      	movs	r2, #6
 8005c1c:	601a      	str	r2, [r3, #0]
	 break;
 8005c1e:	e3db      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  344 :    x=132 ;  y=38   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005c20:	4b4e      	ldr	r3, [pc, #312]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005c22:	2284      	movs	r2, #132	; 0x84
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	4b4e      	ldr	r3, [pc, #312]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005c28:	2226      	movs	r2, #38	; 0x26
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	4b4d      	ldr	r3, [pc, #308]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005c2e:	220c      	movs	r2, #12
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	4b4d      	ldr	r3, [pc, #308]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005c34:	2211      	movs	r2, #17
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	4b4c      	ldr	r3, [pc, #304]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	4b4c      	ldr	r3, [pc, #304]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	4b4b      	ldr	r3, [pc, #300]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005c48:	220b      	movs	r2, #11
 8005c4a:	601a      	str	r2, [r3, #0]
	 break;
 8005c4c:	e3c4      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  345 :    x=182 ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8005c4e:	4b43      	ldr	r3, [pc, #268]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005c50:	22b6      	movs	r2, #182	; 0xb6
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	4b42      	ldr	r3, [pc, #264]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005c56:	2275      	movs	r2, #117	; 0x75
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005c62:	220e      	movs	r2, #14
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005c74:	2206      	movs	r2, #6
 8005c76:	601a      	str	r2, [r3, #0]
	 break;
 8005c78:	e3ae      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  346 :    x=144 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005c7a:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005c7c:	2290      	movs	r2, #144	; 0x90
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005c82:	2226      	movs	r2, #38	; 0x26
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005c88:	220b      	movs	r2, #11
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	4b36      	ldr	r3, [pc, #216]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005c8e:	2211      	movs	r2, #17
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005ca2:	220b      	movs	r2, #11
 8005ca4:	601a      	str	r2, [r3, #0]
	 break;
 8005ca6:	e397      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  347 :    x=189 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005ca8:	4b2c      	ldr	r3, [pc, #176]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005caa:	22bd      	movs	r2, #189	; 0xbd
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005cb0:	2275      	movs	r2, #117	; 0x75
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005cbc:	220e      	movs	r2, #14
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005cce:	2209      	movs	r2, #9
 8005cd0:	601a      	str	r2, [r3, #0]
	 break;
 8005cd2:	e381      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  348 :    x=274 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005cd4:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005cd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005ce4:	220b      	movs	r2, #11
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005cea:	2212      	movs	r2, #18
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	4b1f      	ldr	r3, [pc, #124]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005cf6:	f06f 0201 	mvn.w	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005cfe:	220b      	movs	r2, #11
 8005d00:	601a      	str	r2, [r3, #0]
	 break;
 8005d02:	e369      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  349 :    x=199 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005d04:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005d06:	22c7      	movs	r2, #199	; 0xc7
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005d0c:	2275      	movs	r2, #117	; 0x75
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005d12:	220a      	movs	r2, #10
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005d18:	220e      	movs	r2, #14
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005d2a:	2209      	movs	r2, #9
 8005d2c:	601a      	str	r2, [r3, #0]
	 break;
 8005d2e:	e353      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  350 :    x=155 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <Odczytaj_znak_S16_uc8+0x3d88>)
 8005d32:	229b      	movs	r2, #155	; 0x9b
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005d38:	2226      	movs	r2, #38	; 0x26
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005d3e:	220b      	movs	r2, #11
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <Odczytaj_znak_S16_uc8+0x3d94>)
 8005d44:	2211      	movs	r2, #17
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <Odczytaj_znak_S16_uc8+0x3d98>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005d56:	220b      	movs	r2, #11
 8005d58:	601a      	str	r2, [r3, #0]
	 break;
 8005d5a:	e33d      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8005d5c:	2400e0c8 	.word	0x2400e0c8
 8005d60:	24012ef0 	.word	0x24012ef0
 8005d64:	24013124 	.word	0x24013124
 8005d68:	24012ef4 	.word	0x24012ef4
 8005d6c:	2400e0c4 	.word	0x2400e0c4
 8005d70:	2400e0cc 	.word	0x2400e0cc
 8005d74:	24013120 	.word	0x24013120
	case  351 :    x=209 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8005d78:	4b92      	ldr	r3, [pc, #584]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005d7a:	22d1      	movs	r2, #209	; 0xd1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	4b92      	ldr	r3, [pc, #584]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005d80:	2275      	movs	r2, #117	; 0x75
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	4b91      	ldr	r3, [pc, #580]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005d86:	220a      	movs	r2, #10
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	4b91      	ldr	r3, [pc, #580]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005d8c:	220e      	movs	r2, #14
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	4b90      	ldr	r3, [pc, #576]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005d98:	2205      	movs	r2, #5
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	4b8f      	ldr	r3, [pc, #572]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005d9e:	2209      	movs	r2, #9
 8005da0:	601a      	str	r2, [r3, #0]
	 break;
 8005da2:	e319      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  352 :    x=166 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005da4:	4b87      	ldr	r3, [pc, #540]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005da6:	22a6      	movs	r2, #166	; 0xa6
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	4b87      	ldr	r3, [pc, #540]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005dac:	2226      	movs	r2, #38	; 0x26
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	4b86      	ldr	r3, [pc, #536]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005db2:	220b      	movs	r2, #11
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	4b86      	ldr	r3, [pc, #536]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005db8:	2211      	movs	r2, #17
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	4b85      	ldr	r3, [pc, #532]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	4b84      	ldr	r3, [pc, #528]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005dcc:	220b      	movs	r2, #11
 8005dce:	601a      	str	r2, [r3, #0]
	 break;
 8005dd0:	e302      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  353 :    x=219 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005dd2:	4b7c      	ldr	r3, [pc, #496]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005dd4:	22db      	movs	r2, #219	; 0xdb
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	4b7b      	ldr	r3, [pc, #492]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005dda:	2275      	movs	r2, #117	; 0x75
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	4b7b      	ldr	r3, [pc, #492]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005de0:	220a      	movs	r2, #10
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	4b7a      	ldr	r3, [pc, #488]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005de6:	220e      	movs	r2, #14
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	4b7a      	ldr	r3, [pc, #488]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	4b79      	ldr	r3, [pc, #484]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	4b79      	ldr	r3, [pc, #484]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005df8:	2209      	movs	r2, #9
 8005dfa:	601a      	str	r2, [r3, #0]
	 break;
 8005dfc:	e2ec      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  354 :    x=177 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005dfe:	4b71      	ldr	r3, [pc, #452]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e00:	22b1      	movs	r2, #177	; 0xb1
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	4b70      	ldr	r3, [pc, #448]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e06:	2226      	movs	r2, #38	; 0x26
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	4b70      	ldr	r3, [pc, #448]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e0c:	220b      	movs	r2, #11
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	4b6f      	ldr	r3, [pc, #444]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e12:	2211      	movs	r2, #17
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	4b6e      	ldr	r3, [pc, #440]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	4b6e      	ldr	r3, [pc, #440]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005e24:	220b      	movs	r2, #11
 8005e26:	601a      	str	r2, [r3, #0]
	 break;
 8005e28:	e2d6      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  355 :    x=188 ;  y=38   ;  width=7   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005e2a:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e2c:	22bc      	movs	r2, #188	; 0xbc
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	4b65      	ldr	r3, [pc, #404]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e32:	2226      	movs	r2, #38	; 0x26
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	4b65      	ldr	r3, [pc, #404]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e38:	2207      	movs	r2, #7
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	4b64      	ldr	r3, [pc, #400]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e3e:	2211      	movs	r2, #17
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	4b64      	ldr	r3, [pc, #400]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	4b63      	ldr	r3, [pc, #396]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
	 break;
 8005e54:	e2c0      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  356 :    x=195 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005e56:	4b5b      	ldr	r3, [pc, #364]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e58:	22c3      	movs	r2, #195	; 0xc3
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e5e:	2226      	movs	r2, #38	; 0x26
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	4b5a      	ldr	r3, [pc, #360]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e64:	220b      	movs	r2, #11
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	4b59      	ldr	r3, [pc, #356]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e6a:	2211      	movs	r2, #17
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	4b58      	ldr	r3, [pc, #352]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	4b57      	ldr	r3, [pc, #348]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005e7e:	220b      	movs	r2, #11
 8005e80:	601a      	str	r2, [r3, #0]
	 break;
 8005e82:	e2a9      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  357 :    x=229 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=8    ;
 8005e84:	4b4f      	ldr	r3, [pc, #316]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e86:	22e5      	movs	r2, #229	; 0xe5
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	4b4f      	ldr	r3, [pc, #316]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e8c:	2275      	movs	r2, #117	; 0x75
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	4b4e      	ldr	r3, [pc, #312]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e92:	2209      	movs	r2, #9
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	4b4e      	ldr	r3, [pc, #312]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e98:	220e      	movs	r2, #14
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	4b4d      	ldr	r3, [pc, #308]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	4b4d      	ldr	r3, [pc, #308]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	4b4c      	ldr	r3, [pc, #304]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005eaa:	2208      	movs	r2, #8
 8005eac:	601a      	str	r2, [r3, #0]
	 break;
 8005eae:	e293      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  358 :    x=238 ;  y=117  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005eb0:	4b44      	ldr	r3, [pc, #272]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005eb2:	22ee      	movs	r2, #238	; 0xee
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	4b44      	ldr	r3, [pc, #272]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005eb8:	2275      	movs	r2, #117	; 0x75
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	4b43      	ldr	r3, [pc, #268]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005ebe:	220b      	movs	r2, #11
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	4b43      	ldr	r3, [pc, #268]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005ec4:	220e      	movs	r2, #14
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	4b42      	ldr	r3, [pc, #264]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005ed6:	220b      	movs	r2, #11
 8005ed8:	601a      	str	r2, [r3, #0]
	 break;
 8005eda:	e27d      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  359 :    x=249 ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005edc:	4b39      	ldr	r3, [pc, #228]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005ede:	22f9      	movs	r2, #249	; 0xf9
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005ee4:	2275      	movs	r2, #117	; 0x75
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005eea:	2207      	movs	r2, #7
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005ef0:	220e      	movs	r2, #14
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	4b37      	ldr	r3, [pc, #220]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005f02:	2207      	movs	r2, #7
 8005f04:	601a      	str	r2, [r3, #0]
	 break;
 8005f06:	e267      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  360 :    x=285 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005f08:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005f0a:	f240 121d 	movw	r2, #285	; 0x11d
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005f18:	220b      	movs	r2, #11
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	4b2c      	ldr	r3, [pc, #176]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005f1e:	2212      	movs	r2, #18
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	4b2c      	ldr	r3, [pc, #176]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005f2a:	f06f 0201 	mvn.w	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	4b2a      	ldr	r3, [pc, #168]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005f32:	220b      	movs	r2, #11
 8005f34:	601a      	str	r2, [r3, #0]
	 break;
 8005f36:	e24f      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  361 :    x=256 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005f38:	4b22      	ldr	r3, [pc, #136]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005f42:	2275      	movs	r2, #117	; 0x75
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005f48:	2209      	movs	r2, #9
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005f4e:	220e      	movs	r2, #14
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	4b1f      	ldr	r3, [pc, #124]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005f60:	2209      	movs	r2, #9
 8005f62:	601a      	str	r2, [r3, #0]
	 break;
 8005f64:	e238      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  362 :    x=206 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005f66:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005f68:	22ce      	movs	r2, #206	; 0xce
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	4b16      	ldr	r3, [pc, #88]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005f6e:	2226      	movs	r2, #38	; 0x26
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005f74:	220b      	movs	r2, #11
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005f7a:	2211      	movs	r2, #17
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	4b15      	ldr	r3, [pc, #84]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005f8e:	220b      	movs	r2, #11
 8005f90:	601a      	str	r2, [r3, #0]
	 break;
 8005f92:	e221      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  363 :    x=265 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005f96:	f240 1209 	movw	r2, #265	; 0x109
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005f9e:	2275      	movs	r2, #117	; 0x75
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005fa4:	2209      	movs	r2, #9
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005faa:	220e      	movs	r2, #14
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <Odczytaj_znak_S16_uc8+0x4000>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <Odczytaj_znak_S16_uc8+0x4004>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	4b08      	ldr	r3, [pc, #32]	; (8005fdc <Odczytaj_znak_S16_uc8+0x4008>)
 8005fbc:	2209      	movs	r2, #9
 8005fbe:	601a      	str	r2, [r3, #0]
	 break;
 8005fc0:	e20a      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8005fc2:	bf00      	nop
 8005fc4:	2400e0c8 	.word	0x2400e0c8
 8005fc8:	24012ef0 	.word	0x24012ef0
 8005fcc:	24013124 	.word	0x24013124
 8005fd0:	24012ef4 	.word	0x24012ef4
 8005fd4:	2400e0c4 	.word	0x2400e0c4
 8005fd8:	2400e0cc 	.word	0x2400e0cc
 8005fdc:	24013120 	.word	0x24013120
	case  364 :    x=296 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005fe0:	4b99      	ldr	r3, [pc, #612]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8005fe2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	4b98      	ldr	r3, [pc, #608]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	4b98      	ldr	r3, [pc, #608]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8005ff0:	220b      	movs	r2, #11
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	4b97      	ldr	r3, [pc, #604]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 8005ff6:	2212      	movs	r2, #18
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	4b97      	ldr	r3, [pc, #604]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	4b96      	ldr	r3, [pc, #600]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006002:	f06f 0201 	mvn.w	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	4b95      	ldr	r3, [pc, #596]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 800600a:	220b      	movs	r2, #11
 800600c:	601a      	str	r2, [r3, #0]
	 break;
 800600e:	e1e3      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  365 :    x=274 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8006010:	4b8d      	ldr	r3, [pc, #564]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006012:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	4b8c      	ldr	r3, [pc, #560]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 800601a:	2275      	movs	r2, #117	; 0x75
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	4b8c      	ldr	r3, [pc, #560]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8006020:	2209      	movs	r2, #9
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 8006026:	220e      	movs	r2, #14
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	4b8b      	ldr	r3, [pc, #556]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	4b8a      	ldr	r3, [pc, #552]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	4b8a      	ldr	r3, [pc, #552]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 8006038:	2209      	movs	r2, #9
 800603a:	601a      	str	r2, [r3, #0]
	 break;
 800603c:	e1cc      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  366 :    x=307 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 800603e:	4b82      	ldr	r3, [pc, #520]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006040:	f240 1233 	movw	r2, #307	; 0x133
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	4b81      	ldr	r3, [pc, #516]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	4b80      	ldr	r3, [pc, #512]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 800604e:	220b      	movs	r2, #11
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	4b80      	ldr	r3, [pc, #512]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 8006054:	2212      	movs	r2, #18
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	4b7f      	ldr	r3, [pc, #508]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	4b7f      	ldr	r3, [pc, #508]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006060:	f06f 0201 	mvn.w	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	4b7e      	ldr	r3, [pc, #504]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 8006068:	220b      	movs	r2, #11
 800606a:	601a      	str	r2, [r3, #0]
	 break;
 800606c:	e1b4      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  367 :    x=283 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800606e:	4b76      	ldr	r3, [pc, #472]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006070:	f240 121b 	movw	r2, #283	; 0x11b
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	4b75      	ldr	r3, [pc, #468]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 8006078:	2275      	movs	r2, #117	; 0x75
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	4b74      	ldr	r3, [pc, #464]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 800607e:	2209      	movs	r2, #9
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	4b74      	ldr	r3, [pc, #464]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 8006084:	220e      	movs	r2, #14
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	4b73      	ldr	r3, [pc, #460]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	4b73      	ldr	r3, [pc, #460]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	4b72      	ldr	r3, [pc, #456]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 8006096:	2209      	movs	r2, #9
 8006098:	601a      	str	r2, [r3, #0]
	 break;
 800609a:	e19d      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  368 :    x=217 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 800609c:	4b6a      	ldr	r3, [pc, #424]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 800609e:	22d9      	movs	r2, #217	; 0xd9
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	4b6a      	ldr	r3, [pc, #424]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 80060a4:	2226      	movs	r2, #38	; 0x26
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	4b69      	ldr	r3, [pc, #420]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 80060aa:	220b      	movs	r2, #11
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	4b69      	ldr	r3, [pc, #420]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 80060b0:	2211      	movs	r2, #17
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	4b68      	ldr	r3, [pc, #416]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	4b68      	ldr	r3, [pc, #416]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	4b67      	ldr	r3, [pc, #412]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 80060c4:	220b      	movs	r2, #11
 80060c6:	601a      	str	r2, [r3, #0]
	 break;
 80060c8:	e186      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  369 :    x=292 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80060ca:	4b5f      	ldr	r3, [pc, #380]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 80060cc:	f44f 7292 	mov.w	r2, #292	; 0x124
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	4b5e      	ldr	r3, [pc, #376]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 80060d4:	2275      	movs	r2, #117	; 0x75
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 80060da:	2209      	movs	r2, #9
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	4b5d      	ldr	r3, [pc, #372]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 80060e0:	220e      	movs	r2, #14
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	4b5c      	ldr	r3, [pc, #368]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4b5c      	ldr	r3, [pc, #368]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	4b5b      	ldr	r3, [pc, #364]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 80060f2:	2209      	movs	r2, #9
 80060f4:	601a      	str	r2, [r3, #0]
	 break;
 80060f6:	e16f      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  370 :    x=228 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 80060f8:	4b53      	ldr	r3, [pc, #332]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 80060fa:	22e4      	movs	r2, #228	; 0xe4
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	4b53      	ldr	r3, [pc, #332]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 8006100:	2226      	movs	r2, #38	; 0x26
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	4b52      	ldr	r3, [pc, #328]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8006106:	220b      	movs	r2, #11
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	4b52      	ldr	r3, [pc, #328]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 800610c:	2211      	movs	r2, #17
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	4b51      	ldr	r3, [pc, #324]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	4b51      	ldr	r3, [pc, #324]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006118:	2201      	movs	r2, #1
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	4b50      	ldr	r3, [pc, #320]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 800611e:	220b      	movs	r2, #11
 8006120:	601a      	str	r2, [r3, #0]
	 break;
 8006122:	e159      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  371 :    x=301 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8006124:	4b48      	ldr	r3, [pc, #288]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006126:	f240 122d 	movw	r2, #301	; 0x12d
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	4b47      	ldr	r3, [pc, #284]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 800612e:	2275      	movs	r2, #117	; 0x75
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	4b47      	ldr	r3, [pc, #284]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8006134:	2209      	movs	r2, #9
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	4b46      	ldr	r3, [pc, #280]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 800613a:	220e      	movs	r2, #14
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	4b46      	ldr	r3, [pc, #280]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	4b45      	ldr	r3, [pc, #276]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006146:	2205      	movs	r2, #5
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	4b45      	ldr	r3, [pc, #276]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 800614c:	2209      	movs	r2, #9
 800614e:	601a      	str	r2, [r3, #0]
	 break;
 8006150:	e142      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  372 :    x=239 ;  y=38   ;  width=17  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=15   ;
 8006152:	4b3d      	ldr	r3, [pc, #244]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006154:	22ef      	movs	r2, #239	; 0xef
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	4b3c      	ldr	r3, [pc, #240]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 800615a:	2226      	movs	r2, #38	; 0x26
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	4b3c      	ldr	r3, [pc, #240]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8006160:	2211      	movs	r2, #17
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	4b3b      	ldr	r3, [pc, #236]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 8006166:	2211      	movs	r2, #17
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 800616c:	f04f 32ff 	mov.w	r2, #4294967295
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	4b3a      	ldr	r3, [pc, #232]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	4b39      	ldr	r3, [pc, #228]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 800617c:	220f      	movs	r2, #15
 800617e:	601a      	str	r2, [r3, #0]
	 break;
 8006180:	e12a      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  373 :    x=310 ;  y=117  ;  width=14  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8006182:	4b31      	ldr	r3, [pc, #196]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006184:	f44f 729b 	mov.w	r2, #310	; 0x136
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 800618c:	2275      	movs	r2, #117	; 0x75
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8006192:	220e      	movs	r2, #14
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 8006198:	220e      	movs	r2, #14
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 800619e:	f04f 32ff 	mov.w	r2, #4294967295
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	4b2d      	ldr	r3, [pc, #180]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	4b2d      	ldr	r3, [pc, #180]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 80061ac:	220c      	movs	r2, #12
 80061ae:	601a      	str	r2, [r3, #0]
	 break;
 80061b0:	e112      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  374 :    x=256 ;  y=38   ;  width=12  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=10   ;
 80061b2:	4b25      	ldr	r3, [pc, #148]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 80061b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	4b24      	ldr	r3, [pc, #144]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 80061bc:	2226      	movs	r2, #38	; 0x26
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	4b23      	ldr	r3, [pc, #140]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 80061c2:	220c      	movs	r2, #12
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	4b23      	ldr	r3, [pc, #140]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 80061c8:	2211      	movs	r2, #17
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	4b22      	ldr	r3, [pc, #136]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	4b21      	ldr	r3, [pc, #132]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	4b20      	ldr	r3, [pc, #128]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 80061de:	220a      	movs	r2, #10
 80061e0:	601a      	str	r2, [r3, #0]
	 break;
 80061e2:	e0f9      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  375 :    x=268 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 80061e4:	4b18      	ldr	r3, [pc, #96]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 80061e6:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	4b17      	ldr	r3, [pc, #92]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 80061ee:	2226      	movs	r2, #38	; 0x26
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	4b17      	ldr	r3, [pc, #92]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 80061f4:	220b      	movs	r2, #11
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	4b16      	ldr	r3, [pc, #88]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 80061fa:	2211      	movs	r2, #17
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	4b16      	ldr	r3, [pc, #88]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	4b15      	ldr	r3, [pc, #84]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 800620e:	2209      	movs	r2, #9
 8006210:	601a      	str	r2, [r3, #0]
	 break;
 8006212:	e0e1      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  376 :    x=279 ;  y=38   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=11   ;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <Odczytaj_znak_S16_uc8+0x4274>)
 8006216:	f240 1217 	movw	r2, #279	; 0x117
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <Odczytaj_znak_S16_uc8+0x4278>)
 800621e:	2226      	movs	r2, #38	; 0x26
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <Odczytaj_znak_S16_uc8+0x427c>)
 8006224:	220d      	movs	r2, #13
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <Odczytaj_znak_S16_uc8+0x4280>)
 800622a:	2211      	movs	r2, #17
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <Odczytaj_znak_S16_uc8+0x4284>)
 8006230:	f04f 32ff 	mov.w	r2, #4294967295
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	4b09      	ldr	r3, [pc, #36]	; (800625c <Odczytaj_znak_S16_uc8+0x4288>)
 8006238:	f04f 32ff 	mov.w	r2, #4294967295
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <Odczytaj_znak_S16_uc8+0x428c>)
 8006240:	220b      	movs	r2, #11
 8006242:	601a      	str	r2, [r3, #0]
	 break;
 8006244:	e0c8      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
 8006246:	bf00      	nop
 8006248:	2400e0c8 	.word	0x2400e0c8
 800624c:	24012ef0 	.word	0x24012ef0
 8006250:	24013124 	.word	0x24013124
 8006254:	24012ef4 	.word	0x24012ef4
 8006258:	2400e0c4 	.word	0x2400e0c4
 800625c:	2400e0cc 	.word	0x2400e0cc
 8006260:	24013120 	.word	0x24013120
	case  377 :    x=292 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8006264:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 8006266:	f44f 7292 	mov.w	r2, #292	; 0x124
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	4b5e      	ldr	r3, [pc, #376]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 800626e:	2226      	movs	r2, #38	; 0x26
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	4b5e      	ldr	r3, [pc, #376]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 8006274:	220b      	movs	r2, #11
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	4b5d      	ldr	r3, [pc, #372]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 800627a:	2211      	movs	r2, #17
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	4b5d      	ldr	r3, [pc, #372]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b5c      	ldr	r3, [pc, #368]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 8006286:	f04f 32ff 	mov.w	r2, #4294967295
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	4b5b      	ldr	r3, [pc, #364]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 800628e:	220b      	movs	r2, #11
 8006290:	601a      	str	r2, [r3, #0]
	 break;
 8006292:	e0a1      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  378 :    x=324 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8006294:	4b53      	ldr	r3, [pc, #332]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 8006296:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	4b52      	ldr	r3, [pc, #328]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 800629e:	2275      	movs	r2, #117	; 0x75
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	4b52      	ldr	r3, [pc, #328]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 80062a4:	2209      	movs	r2, #9
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	4b51      	ldr	r3, [pc, #324]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 80062aa:	220e      	movs	r2, #14
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	4b51      	ldr	r3, [pc, #324]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	4b50      	ldr	r3, [pc, #320]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	4b50      	ldr	r3, [pc, #320]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 80062bc:	2209      	movs	r2, #9
 80062be:	601a      	str	r2, [r3, #0]
	 break;
 80062c0:	e08a      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  379 :    x=303 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 80062c2:	4b48      	ldr	r3, [pc, #288]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 80062c4:	f240 122f 	movw	r2, #303	; 0x12f
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	4b47      	ldr	r3, [pc, #284]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 80062cc:	2226      	movs	r2, #38	; 0x26
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	4b46      	ldr	r3, [pc, #280]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 80062d2:	220b      	movs	r2, #11
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 80062d8:	2211      	movs	r2, #17
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	4b45      	ldr	r3, [pc, #276]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	4b45      	ldr	r3, [pc, #276]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	4b44      	ldr	r3, [pc, #272]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 80062ec:	220b      	movs	r2, #11
 80062ee:	601a      	str	r2, [r3, #0]
	 break;
 80062f0:	e072      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  380 :    x=333 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80062f2:	4b3c      	ldr	r3, [pc, #240]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 80062f4:	f240 124d 	movw	r2, #333	; 0x14d
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	4b3b      	ldr	r3, [pc, #236]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 80062fc:	2275      	movs	r2, #117	; 0x75
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	4b3a      	ldr	r3, [pc, #232]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 8006302:	2209      	movs	r2, #9
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	4b3a      	ldr	r3, [pc, #232]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 8006308:	220e      	movs	r2, #14
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	4b39      	ldr	r3, [pc, #228]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	4b38      	ldr	r3, [pc, #224]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 800631a:	2209      	movs	r2, #9
 800631c:	601a      	str	r2, [r3, #0]
	 break;
 800631e:	e05b      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  381 :    x=314 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8006320:	4b30      	ldr	r3, [pc, #192]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 8006322:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	4b2f      	ldr	r3, [pc, #188]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 800632a:	2226      	movs	r2, #38	; 0x26
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	4b2f      	ldr	r3, [pc, #188]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 8006330:	220b      	movs	r2, #11
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	4b2e      	ldr	r3, [pc, #184]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 8006336:	2211      	movs	r2, #17
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	4b2e      	ldr	r3, [pc, #184]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	4b2c      	ldr	r3, [pc, #176]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 800634a:	220b      	movs	r2, #11
 800634c:	601a      	str	r2, [r3, #0]
	 break;
 800634e:	e043      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  382 :    x=342 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8006350:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 8006352:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 800635a:	2275      	movs	r2, #117	; 0x75
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	4b23      	ldr	r3, [pc, #140]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 8006360:	2209      	movs	r2, #9
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 8006366:	220e      	movs	r2, #14
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	4b22      	ldr	r3, [pc, #136]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	4b21      	ldr	r3, [pc, #132]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 8006378:	2209      	movs	r2, #9
 800637a:	601a      	str	r2, [r3, #0]
	 break;
 800637c:	e02c      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
	case  383 :    x=351 ;  y=117  ;  width=6   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 8006380:	f240 125f 	movw	r2, #351	; 0x15f
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 8006388:	2275      	movs	r2, #117	; 0x75
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4b17      	ldr	r3, [pc, #92]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 800638e:	2206      	movs	r2, #6
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 8006394:	220e      	movs	r2, #14
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 80063a6:	2204      	movs	r2, #4
 80063a8:	601a      	str	r2, [r3, #0]
	 break;
 80063aa:	e015      	b.n	80063d8 <Odczytaj_znak_S16_uc8+0x4404>
    default   :    x=0    ;y=0    ;    width=0    ;    height=0     ;   xoffset=0  ;  yoffset=0    ;  xadvance=0 ;
 80063ac:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <Odczytaj_znak_S16_uc8+0x4410>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <Odczytaj_znak_S16_uc8+0x4414>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <Odczytaj_znak_S16_uc8+0x4418>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <Odczytaj_znak_S16_uc8+0x441c>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <Odczytaj_znak_S16_uc8+0x4420>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <Odczytaj_znak_S16_uc8+0x4424>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <Odczytaj_znak_S16_uc8+0x4428>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
		}
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	2400e0c8 	.word	0x2400e0c8
 80063e8:	24012ef0 	.word	0x24012ef0
 80063ec:	24013124 	.word	0x24013124
 80063f0:	24012ef4 	.word	0x24012ef4
 80063f4:	2400e0c4 	.word	0x2400e0c4
 80063f8:	2400e0cc 	.word	0x2400e0cc
 80063fc:	24013120 	.word	0x24013120

08006400 <Conv_String_From_UART_BMP>:
uint8_t get_color_value(uint8_t Color_mark);
int Ilosc_Lini_tesktu=0;
uint32_t Z_czasOtrzymania_tekstu=0;

int Conv_String_From_UART_BMP(uint8_t *Rec_String, uint16_t CountData)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b089      	sub	sp, #36	; 0x24
 8006404:	af02      	add	r7, sp, #8
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	807b      	strh	r3, [r7, #2]
	uint8_t Line_nr=0;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
	uint8_t Ilosc_zn_pop_rzedu=0;
 8006410:	2300      	movs	r3, #0
 8006412:	75bb      	strb	r3, [r7, #22]
	uint8_t Ilosc_znak_do_wstawienia=0;
 8006414:	2300      	movs	r3, #0
 8006416:	757b      	strb	r3, [r7, #21]

	uint8_t count_line=0;
 8006418:	2300      	movs	r3, #0
 800641a:	753b      	strb	r3, [r7, #20]

	uint8_t color_flag=0;
 800641c:	2300      	movs	r3, #0
 800641e:	74fb      	strb	r3, [r7, #19]

	for(int i=0; i<10000; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e007      	b.n	8006436 <Conv_String_From_UART_BMP+0x36>
	{
		 Created_By_UART_BMP[i]=0;
 8006426:	4a3f      	ldr	r2, [pc, #252]	; (8006524 <Conv_String_From_UART_BMP+0x124>)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<10000; i++)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f242 720f 	movw	r2, #9999	; 0x270f
 800643c:	4293      	cmp	r3, r2
 800643e:	ddf2      	ble.n	8006426 <Conv_String_From_UART_BMP+0x26>
	}

	for(int i=0; i< CountData;   i++)
 8006440:	2300      	movs	r3, #0
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	e04a      	b.n	80064dc <Conv_String_From_UART_BMP+0xdc>
	{

		if( Rec_String[i]=='$' )
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4413      	add	r3, r2
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b24      	cmp	r3, #36	; 0x24
 8006450:	d138      	bne.n	80064c4 <Conv_String_From_UART_BMP+0xc4>
		{

			count_line++;
 8006452:	7d3b      	ldrb	r3, [r7, #20]
 8006454:	3301      	adds	r3, #1
 8006456:	753b      	strb	r3, [r7, #20]

			color_flag=1;
 8006458:	2301      	movs	r3, #1
 800645a:	74fb      	strb	r3, [r7, #19]

										//rozmiar           	   							//rzad      	//bufor wyjsciowy   //color
			if(Create_String_buffer (Rec_String+Ilosc_zn_pop_rzedu+(Line_nr*3), Ilosc_znak_do_wstawienia , Line_nr , Created_By_UART_BMP, get_color_value(Rec_String[i+1]) )==0);
 800645c:	7db9      	ldrb	r1, [r7, #22]
 800645e:	7dfa      	ldrb	r2, [r7, #23]
 8006460:	4613      	mov	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4413      	add	r3, r2
 8006466:	440b      	add	r3, r1
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	18d4      	adds	r4, r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	3301      	adds	r3, #1
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4413      	add	r3, r2
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f856 	bl	8006528 <get_color_value>
 800647c:	4603      	mov	r3, r0
 800647e:	7dfa      	ldrb	r2, [r7, #23]
 8006480:	7d79      	ldrb	r1, [r7, #21]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	4b27      	ldr	r3, [pc, #156]	; (8006524 <Conv_String_From_UART_BMP+0x124>)
 8006486:	4620      	mov	r0, r4
 8006488:	f7fb fb18 	bl	8001abc <Create_String_buffer>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <Conv_String_From_UART_BMP+0x98>
			else
			{
				return Line_nr+1; // za dluga linia nr Line_nr
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	3301      	adds	r3, #1
 8006496:	e041      	b.n	800651c <Conv_String_From_UART_BMP+0x11c>
			}

			if( Rec_String[i+2] != '\0')
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3302      	adds	r3, #2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <Conv_String_From_UART_BMP+0xac>
			{
				return Line_nr+1; // inny blad
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	3301      	adds	r3, #1
 80064aa:	e037      	b.n	800651c <Conv_String_From_UART_BMP+0x11c>
			}



			Ilosc_zn_pop_rzedu=Ilosc_zn_pop_rzedu+Ilosc_znak_do_wstawienia;
 80064ac:	7dba      	ldrb	r2, [r7, #22]
 80064ae:	7d7b      	ldrb	r3, [r7, #21]
 80064b0:	4413      	add	r3, r2
 80064b2:	75bb      	strb	r3, [r7, #22]
			i=i+3;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3303      	adds	r3, #3
 80064b8:	60bb      	str	r3, [r7, #8]

			Line_nr++;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	3301      	adds	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
			Ilosc_znak_do_wstawienia=0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	757b      	strb	r3, [r7, #21]

		}

		if(Ilosc_znak_do_wstawienia>17)
 80064c4:	7d7b      	ldrb	r3, [r7, #21]
 80064c6:	2b11      	cmp	r3, #17
 80064c8:	d902      	bls.n	80064d0 <Conv_String_From_UART_BMP+0xd0>
		{
			return Line_nr+1; // za dluga linia nr Line_nr
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	3301      	adds	r3, #1
 80064ce:	e025      	b.n	800651c <Conv_String_From_UART_BMP+0x11c>
		}

		Ilosc_znak_do_wstawienia++;
 80064d0:	7d7b      	ldrb	r3, [r7, #21]
 80064d2:	3301      	adds	r3, #1
 80064d4:	757b      	strb	r3, [r7, #21]
	for(int i=0; i< CountData;   i++)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	3301      	adds	r3, #1
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	887b      	ldrh	r3, [r7, #2]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	dbb0      	blt.n	8006446 <Conv_String_From_UART_BMP+0x46>


	}

	Set_Flag_String_From_Usart(Line_nr);
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f872 	bl	80065d0 <Set_Flag_String_From_Usart>


	if(color_flag && (count_line==1 || count_line==2) )
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <Conv_String_From_UART_BMP+0x102>
 80064f2:	7d3b      	ldrb	r3, [r7, #20]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d002      	beq.n	80064fe <Conv_String_From_UART_BMP+0xfe>
 80064f8:	7d3b      	ldrb	r3, [r7, #20]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d101      	bne.n	8006502 <Conv_String_From_UART_BMP+0x102>
	{
		return 20; //1-2 lub dwie linie
 80064fe:	2314      	movs	r3, #20
 8006500:	e00c      	b.n	800651c <Conv_String_From_UART_BMP+0x11c>
	}
	else if(color_flag && (count_line==3 || count_line==4) )
 8006502:	7cfb      	ldrb	r3, [r7, #19]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <Conv_String_From_UART_BMP+0x118>
 8006508:	7d3b      	ldrb	r3, [r7, #20]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d002      	beq.n	8006514 <Conv_String_From_UART_BMP+0x114>
 800650e:	7d3b      	ldrb	r3, [r7, #20]
 8006510:	2b04      	cmp	r3, #4
 8006512:	d101      	bne.n	8006518 <Conv_String_From_UART_BMP+0x118>
	{
		return 40; //3-4 lub dwie linie
 8006514:	2328      	movs	r3, #40	; 0x28
 8006516:	e001      	b.n	800651c <Conv_String_From_UART_BMP+0x11c>
	}
	else
	{
		return Line_nr+1; // inny blad
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	3301      	adds	r3, #1
	}

}
 800651c:	4618      	mov	r0, r3
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd90      	pop	{r4, r7, pc}
 8006524:	24007bc4 	.word	0x24007bc4

08006528 <get_color_value>:

uint8_t get_color_value(uint8_t Color_mark)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
	switch(Color_mark)
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	3b41      	subs	r3, #65	; 0x41
 8006536:	2b18      	cmp	r3, #24
 8006538:	d842      	bhi.n	80065c0 <get_color_value+0x98>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <get_color_value+0x18>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	080065b9 	.word	0x080065b9
 8006544:	080065b1 	.word	0x080065b1
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065c1 	.word	0x080065c1
 8006550:	080065c1 	.word	0x080065c1
 8006554:	080065c1 	.word	0x080065c1
 8006558:	080065ad 	.word	0x080065ad
 800655c:	080065c1 	.word	0x080065c1
 8006560:	080065c1 	.word	0x080065c1
 8006564:	080065c1 	.word	0x080065c1
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065c1 	.word	0x080065c1
 8006570:	080065c1 	.word	0x080065c1
 8006574:	080065c1 	.word	0x080065c1
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065c1 	.word	0x080065c1
 8006590:	080065c1 	.word	0x080065c1
 8006594:	080065c1 	.word	0x080065c1
 8006598:	080065a5 	.word	0x080065a5
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065b5 	.word	0x080065b5
	{
	case 'W':
		return White;
 80065a4:	230f      	movs	r3, #15
 80065a6:	e00c      	b.n	80065c2 <get_color_value+0x9a>
		break;
	case 'R':
		return Red;
 80065a8:	2309      	movs	r3, #9
 80065aa:	e00a      	b.n	80065c2 <get_color_value+0x9a>
		break;
	case 'G':
		return Green;
 80065ac:	230a      	movs	r3, #10
 80065ae:	e008      	b.n	80065c2 <get_color_value+0x9a>
		break;
	case 'B':
		return Blue;
 80065b0:	230c      	movs	r3, #12
 80065b2:	e006      	b.n	80065c2 <get_color_value+0x9a>
		break;
	case 'Y':
		return Yellow;
 80065b4:	230b      	movs	r3, #11
 80065b6:	e004      	b.n	80065c2 <get_color_value+0x9a>
		break;
	case 'A':
		return Azure;
 80065b8:	230e      	movs	r3, #14
 80065ba:	e002      	b.n	80065c2 <get_color_value+0x9a>
		break;
	case 'P':
		return Purple;
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <get_color_value+0x9a>
		break;
	default :
		return 0;
 80065c0:	2300      	movs	r3, #0
		break;
	}
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop

080065d0 <Set_Flag_String_From_Usart>:


int Set_Flag_String_From_Usart(uint8_t Ilosc_Lini)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	71fb      	strb	r3, [r7, #7]
	Ilosc_Lini_tesktu=Ilosc_Lini;
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	4a06      	ldr	r2, [pc, #24]	; (80065f8 <Set_Flag_String_From_Usart+0x28>)
 80065de:	6013      	str	r3, [r2, #0]
	Z_czasOtrzymania_tekstu=HAL_GetTick();
 80065e0:	f001 fcac 	bl	8007f3c <HAL_GetTick>
 80065e4:	4603      	mov	r3, r0
 80065e6:	4a05      	ldr	r2, [pc, #20]	; (80065fc <Set_Flag_String_From_Usart+0x2c>)
 80065e8:	6013      	str	r3, [r2, #0]
	return Ilosc_Lini_tesktu;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <Set_Flag_String_From_Usart+0x28>)
 80065ec:	681b      	ldr	r3, [r3, #0]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2400a2d4 	.word	0x2400a2d4
 80065fc:	2400a2d8 	.word	0x2400a2d8

08006600 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08a      	sub	sp, #40	; 0x28
 8006604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006606:	f107 0314 	add.w	r3, r7, #20
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	609a      	str	r2, [r3, #8]
 8006612:	60da      	str	r2, [r3, #12]
 8006614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006616:	4b57      	ldr	r3, [pc, #348]	; (8006774 <MX_GPIO_Init+0x174>)
 8006618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800661c:	4a55      	ldr	r2, [pc, #340]	; (8006774 <MX_GPIO_Init+0x174>)
 800661e:	f043 0304 	orr.w	r3, r3, #4
 8006622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006626:	4b53      	ldr	r3, [pc, #332]	; (8006774 <MX_GPIO_Init+0x174>)
 8006628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006634:	4b4f      	ldr	r3, [pc, #316]	; (8006774 <MX_GPIO_Init+0x174>)
 8006636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663a:	4a4e      	ldr	r2, [pc, #312]	; (8006774 <MX_GPIO_Init+0x174>)
 800663c:	f043 0302 	orr.w	r3, r3, #2
 8006640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <MX_GPIO_Init+0x174>)
 8006646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006652:	4b48      	ldr	r3, [pc, #288]	; (8006774 <MX_GPIO_Init+0x174>)
 8006654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006658:	4a46      	ldr	r2, [pc, #280]	; (8006774 <MX_GPIO_Init+0x174>)
 800665a:	f043 0310 	orr.w	r3, r3, #16
 800665e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006662:	4b44      	ldr	r3, [pc, #272]	; (8006774 <MX_GPIO_Init+0x174>)
 8006664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006670:	4b40      	ldr	r3, [pc, #256]	; (8006774 <MX_GPIO_Init+0x174>)
 8006672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006676:	4a3f      	ldr	r2, [pc, #252]	; (8006774 <MX_GPIO_Init+0x174>)
 8006678:	f043 0308 	orr.w	r3, r3, #8
 800667c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006680:	4b3c      	ldr	r3, [pc, #240]	; (8006774 <MX_GPIO_Init+0x174>)
 8006682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800668e:	4b39      	ldr	r3, [pc, #228]	; (8006774 <MX_GPIO_Init+0x174>)
 8006690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006694:	4a37      	ldr	r2, [pc, #220]	; (8006774 <MX_GPIO_Init+0x174>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800669e:	4b35      	ldr	r3, [pc, #212]	; (8006774 <MX_GPIO_Init+0x174>)
 80066a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LATCH_Pin|U_LED4_Pin, GPIO_PIN_RESET);
 80066ac:	2200      	movs	r2, #0
 80066ae:	f244 0108 	movw	r1, #16392	; 0x4008
 80066b2:	4831      	ldr	r0, [pc, #196]	; (8006778 <MX_GPIO_Init+0x178>)
 80066b4:	f001 ff1a 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LINE_A_Pin|LINE_B_Pin|LINE_C_Pin, GPIO_PIN_RESET);
 80066b8:	2200      	movs	r2, #0
 80066ba:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80066be:	482f      	ldr	r0, [pc, #188]	; (800677c <MX_GPIO_Init+0x17c>)
 80066c0:	f001 ff14 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINE_D_GPIO_Port, LINE_D_Pin, GPIO_PIN_SET);
 80066c4:	2201      	movs	r2, #1
 80066c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ca:	482c      	ldr	r0, [pc, #176]	; (800677c <MX_GPIO_Init+0x17c>)
 80066cc:	f001 ff0e 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_RENUMn_GPIO_Port, USB_RENUMn_Pin, GPIO_PIN_RESET);
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066d6:	482a      	ldr	r0, [pc, #168]	; (8006780 <MX_GPIO_Init+0x180>)
 80066d8:	f001 ff08 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LATCH_Pin|U_LED4_Pin;
 80066dc:	f244 0308 	movw	r3, #16392	; 0x4008
 80066e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066e2:	2301      	movs	r3, #1
 80066e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ea:	2300      	movs	r3, #0
 80066ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066ee:	f107 0314 	add.w	r3, r7, #20
 80066f2:	4619      	mov	r1, r3
 80066f4:	4820      	ldr	r0, [pc, #128]	; (8006778 <MX_GPIO_Init+0x178>)
 80066f6:	f001 fd49 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LINE_A_Pin|LINE_B_Pin|LINE_C_Pin;
 80066fa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80066fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006700:	2301      	movs	r3, #1
 8006702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006704:	2301      	movs	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006708:	2302      	movs	r3, #2
 800670a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800670c:	f107 0314 	add.w	r3, r7, #20
 8006710:	4619      	mov	r1, r3
 8006712:	481a      	ldr	r0, [pc, #104]	; (800677c <MX_GPIO_Init+0x17c>)
 8006714:	f001 fd3a 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LINE_D_Pin;
 8006718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800671c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800671e:	2301      	movs	r3, #1
 8006720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006722:	2302      	movs	r3, #2
 8006724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006726:	2300      	movs	r3, #0
 8006728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LINE_D_GPIO_Port, &GPIO_InitStruct);
 800672a:	f107 0314 	add.w	r3, r7, #20
 800672e:	4619      	mov	r1, r3
 8006730:	4812      	ldr	r0, [pc, #72]	; (800677c <MX_GPIO_Init+0x17c>)
 8006732:	f001 fd2b 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_RENUMn_Pin;
 8006736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800673c:	2301      	movs	r3, #1
 800673e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006744:	2300      	movs	r3, #0
 8006746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RENUMn_GPIO_Port, &GPIO_InitStruct);
 8006748:	f107 0314 	add.w	r3, r7, #20
 800674c:	4619      	mov	r1, r3
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <MX_GPIO_Init+0x180>)
 8006750:	f001 fd1c 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006754:	2310      	movs	r3, #16
 8006756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	4619      	mov	r1, r3
 8006766:	4804      	ldr	r0, [pc, #16]	; (8006778 <MX_GPIO_Init+0x178>)
 8006768:	f001 fd10 	bl	800818c <HAL_GPIO_Init>

}
 800676c:	bf00      	nop
 800676e:	3728      	adds	r7, #40	; 0x28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	58024400 	.word	0x58024400
 8006778:	58020c00 	.word	0x58020c00
 800677c:	58020800 	.word	0x58020800
 8006780:	58020000 	.word	0x58020000

08006784 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <MX_IWDG1_Init+0x34>)
 800678a:	4a0c      	ldr	r2, [pc, #48]	; (80067bc <MX_IWDG1_Init+0x38>)
 800678c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <MX_IWDG1_Init+0x34>)
 8006790:	2202      	movs	r2, #2
 8006792:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8006794:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <MX_IWDG1_Init+0x34>)
 8006796:	f640 72ff 	movw	r2, #4095	; 0xfff
 800679a:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 160;
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <MX_IWDG1_Init+0x34>)
 800679e:	22a0      	movs	r2, #160	; 0xa0
 80067a0:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80067a2:	4805      	ldr	r0, [pc, #20]	; (80067b8 <MX_IWDG1_Init+0x34>)
 80067a4:	f001 fed5 	bl	8008552 <HAL_IWDG_Init>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 80067ae:	f000 fb89 	bl	8006ec4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80067b2:	bf00      	nop
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	24013128 	.word	0x24013128
 80067bc:	58004800 	.word	0x58004800

080067c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80067c6:	b087      	sub	sp, #28
 80067c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80067ca:	f001 fb31 	bl	8007e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067ce:	f000 fac1 	bl	8006d54 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80067d2:	f000 fb47 	bl	8006e64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067d6:	f7ff ff13 	bl	8006600 <MX_GPIO_Init>
  MX_MDMA_Init();
 80067da:	f000 fb7b 	bl	8006ed4 <MX_MDMA_Init>
  MX_TIM2_Init();
 80067de:	f000 ff87 	bl	80076f0 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 80067e2:	f000 fb97 	bl	8006f14 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 80067e6:	f000 ffc5 	bl	8007774 <MX_TIM3_Init>
  MX_TIM5_Init();
 80067ea:	f001 f877 	bl	80078dc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80067ee:	f001 fa59 	bl	8007ca4 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80067f2:	f000 fffd 	bl	80077f0 <MX_TIM4_Init>
  MX_SPI2_Init();
 80067f6:	f000 fc99 	bl	800712c <MX_SPI2_Init>
  MX_IWDG1_Init();
 80067fa:	f7ff ffc3 	bl	8006784 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(2);  //WatchDOG!!!!! na 20 MS
//	HAL_IWDG_Refresh(&hiwdg1);
	HUB_75_INIT();
 80067fe:	f7fa fb6f 	bl	8000ee0 <HUB_75_INIT>

	INIT_UART3();
 8006802:	f7fa ffb3 	bl	800176c <INIT_UART3>

	uint8_t Proces_num=0 ;
 8006806:	2300      	movs	r3, #0
 8006808:	f644 628f 	movw	r2, #20111	; 0x4e8f
 800680c:	443a      	add	r2, r7
 800680e:	7013      	strb	r3, [r2, #0]

	uint8_t Pozdr_widzow[10000]={0};
 8006810:	4bb3      	ldr	r3, [pc, #716]	; (8006ae0 <main+0x320>)
 8006812:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006816:	443a      	add	r2, r7
 8006818:	4413      	add	r3, r2
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	3304      	adds	r3, #4
 8006820:	f242 720c 	movw	r2, #9996	; 0x270c
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f007 fcc6 	bl	800e1b8 <memset>

	uint8_t B1[]= "tel. 885015433";
 800682c:	4bad      	ldr	r3, [pc, #692]	; (8006ae4 <main+0x324>)
 800682e:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006832:	443a      	add	r2, r7
 8006834:	4413      	add	r3, r2
 8006836:	4aac      	ldr	r2, [pc, #688]	; (8006ae8 <main+0x328>)
 8006838:	461c      	mov	r4, r3
 800683a:	4613      	mov	r3, r2
 800683c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800683e:	c407      	stmia	r4!, {r0, r1, r2}
 8006840:	8023      	strh	r3, [r4, #0]
 8006842:	3402      	adds	r4, #2
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	7023      	strb	r3, [r4, #0]
	int Size=sizeof(B1)-1;
 8006848:	230e      	movs	r3, #14
 800684a:	f644 6288 	movw	r2, #20104	; 0x4e88
 800684e:	443a      	add	r2, r7
 8006850:	6013      	str	r3, [r2, #0]
	Create_String_buffer (B1, Size, 0 , Pozdr_widzow,Azure);
 8006852:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006856:	443b      	add	r3, r7
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	b2d9      	uxtb	r1, r3
 800685c:	4ba0      	ldr	r3, [pc, #640]	; (8006ae0 <main+0x320>)
 800685e:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006862:	443a      	add	r2, r7
 8006864:	4413      	add	r3, r2
 8006866:	489f      	ldr	r0, [pc, #636]	; (8006ae4 <main+0x324>)
 8006868:	f644 6290 	movw	r2, #20112	; 0x4e90
 800686c:	443a      	add	r2, r7
 800686e:	4410      	add	r0, r2
 8006870:	220e      	movs	r2, #14
 8006872:	9200      	str	r2, [sp, #0]
 8006874:	2200      	movs	r2, #0
 8006876:	f7fb f921 	bl	8001abc <Create_String_buffer>
	uint8_t B2[]= "POZDRAWIAMY";
 800687a:	4b9c      	ldr	r3, [pc, #624]	; (8006aec <main+0x32c>)
 800687c:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006880:	443a      	add	r2, r7
 8006882:	4413      	add	r3, r2
 8006884:	4a9a      	ldr	r2, [pc, #616]	; (8006af0 <main+0x330>)
 8006886:	ca07      	ldmia	r2, {r0, r1, r2}
 8006888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Size=sizeof(B2)-1;
 800688c:	230b      	movs	r3, #11
 800688e:	f644 6288 	movw	r2, #20104	; 0x4e88
 8006892:	443a      	add	r2, r7
 8006894:	6013      	str	r3, [r2, #0]
	Create_String_buffer (B2, Size, 1 , Pozdr_widzow,Green);
 8006896:	f644 6388 	movw	r3, #20104	; 0x4e88
 800689a:	443b      	add	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b2d9      	uxtb	r1, r3
 80068a0:	4b8f      	ldr	r3, [pc, #572]	; (8006ae0 <main+0x320>)
 80068a2:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068a6:	443a      	add	r2, r7
 80068a8:	4413      	add	r3, r2
 80068aa:	4890      	ldr	r0, [pc, #576]	; (8006aec <main+0x32c>)
 80068ac:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068b0:	443a      	add	r2, r7
 80068b2:	4410      	add	r0, r2
 80068b4:	220a      	movs	r2, #10
 80068b6:	9200      	str	r2, [sp, #0]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f7fb f8ff 	bl	8001abc <Create_String_buffer>

//	HAL_IWDG_Refresh(&hiwdg1);

	uint8_t ZaprDoSalonuFryzStudio[10000]={0};
 80068be:	4b8d      	ldr	r3, [pc, #564]	; (8006af4 <main+0x334>)
 80068c0:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068c4:	443a      	add	r2, r7
 80068c6:	4413      	add	r3, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	3304      	adds	r3, #4
 80068ce:	f242 720c 	movw	r2, #9996	; 0x270c
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f007 fc6f 	bl	800e1b8 <memset>
	uint8_t S1[]= " ZAPRASZAMY";
 80068da:	4b87      	ldr	r3, [pc, #540]	; (8006af8 <main+0x338>)
 80068dc:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068e0:	443a      	add	r2, r7
 80068e2:	4413      	add	r3, r2
 80068e4:	4a85      	ldr	r2, [pc, #532]	; (8006afc <main+0x33c>)
 80068e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80068e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t S2[]= "  DO SALONU ";
 80068ec:	4b84      	ldr	r3, [pc, #528]	; (8006b00 <main+0x340>)
 80068ee:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068f2:	443a      	add	r2, r7
 80068f4:	4413      	add	r3, r2
 80068f6:	4a83      	ldr	r2, [pc, #524]	; (8006b04 <main+0x344>)
 80068f8:	461c      	mov	r4, r3
 80068fa:	4613      	mov	r3, r2
 80068fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068fe:	c407      	stmia	r4!, {r0, r1, r2}
 8006900:	7023      	strb	r3, [r4, #0]
	uint8_t S3[]= "FRYZJESKIEGO";
 8006902:	4b81      	ldr	r3, [pc, #516]	; (8006b08 <main+0x348>)
 8006904:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006908:	443a      	add	r2, r7
 800690a:	4413      	add	r3, r2
 800690c:	4a7f      	ldr	r2, [pc, #508]	; (8006b0c <main+0x34c>)
 800690e:	461c      	mov	r4, r3
 8006910:	4613      	mov	r3, r2
 8006912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006914:	c407      	stmia	r4!, {r0, r1, r2}
 8006916:	7023      	strb	r3, [r4, #0]
	uint8_t S4[]= "Oraz Do Studia";
 8006918:	4b7d      	ldr	r3, [pc, #500]	; (8006b10 <main+0x350>)
 800691a:	f644 6290 	movw	r2, #20112	; 0x4e90
 800691e:	443a      	add	r2, r7
 8006920:	4413      	add	r3, r2
 8006922:	4a7c      	ldr	r2, [pc, #496]	; (8006b14 <main+0x354>)
 8006924:	461c      	mov	r4, r3
 8006926:	4613      	mov	r3, r2
 8006928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800692a:	c407      	stmia	r4!, {r0, r1, r2}
 800692c:	8023      	strh	r3, [r4, #0]
 800692e:	3402      	adds	r4, #2
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	7023      	strb	r3, [r4, #0]
	uint8_t S5[]= "  PAZNOKCI!";
 8006934:	4b78      	ldr	r3, [pc, #480]	; (8006b18 <main+0x358>)
 8006936:	f644 6290 	movw	r2, #20112	; 0x4e90
 800693a:	443a      	add	r2, r7
 800693c:	4413      	add	r3, r2
 800693e:	4a77      	ldr	r2, [pc, #476]	; (8006b1c <main+0x35c>)
 8006940:	ca07      	ldmia	r2, {r0, r1, r2}
 8006942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	 Size=sizeof(S1)-1;
 8006946:	230b      	movs	r3, #11
 8006948:	f644 6288 	movw	r2, #20104	; 0x4e88
 800694c:	443a      	add	r2, r7
 800694e:	6013      	str	r3, [r2, #0]
	Create_String_buffer (S1, Size, 0 , ZaprDoSalonuFryzStudio,Azure);
 8006950:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006954:	443b      	add	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	b2d9      	uxtb	r1, r3
 800695a:	4b66      	ldr	r3, [pc, #408]	; (8006af4 <main+0x334>)
 800695c:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006960:	443a      	add	r2, r7
 8006962:	4413      	add	r3, r2
 8006964:	4864      	ldr	r0, [pc, #400]	; (8006af8 <main+0x338>)
 8006966:	f644 6290 	movw	r2, #20112	; 0x4e90
 800696a:	443a      	add	r2, r7
 800696c:	4410      	add	r0, r2
 800696e:	220e      	movs	r2, #14
 8006970:	9200      	str	r2, [sp, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	f7fb f8a2 	bl	8001abc <Create_String_buffer>
	 Size=sizeof(S2)-1;
 8006978:	230c      	movs	r3, #12
 800697a:	f644 6288 	movw	r2, #20104	; 0x4e88
 800697e:	443a      	add	r2, r7
 8006980:	6013      	str	r3, [r2, #0]
	Create_String_buffer (S2, Size, 1 , ZaprDoSalonuFryzStudio,Green);
 8006982:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006986:	443b      	add	r3, r7
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	b2d9      	uxtb	r1, r3
 800698c:	4b59      	ldr	r3, [pc, #356]	; (8006af4 <main+0x334>)
 800698e:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006992:	443a      	add	r2, r7
 8006994:	4413      	add	r3, r2
 8006996:	485a      	ldr	r0, [pc, #360]	; (8006b00 <main+0x340>)
 8006998:	f644 6290 	movw	r2, #20112	; 0x4e90
 800699c:	443a      	add	r2, r7
 800699e:	4410      	add	r0, r2
 80069a0:	220a      	movs	r2, #10
 80069a2:	9200      	str	r2, [sp, #0]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f7fb f889 	bl	8001abc <Create_String_buffer>
	 Size=sizeof(S3)-1;
 80069aa:	230c      	movs	r3, #12
 80069ac:	f644 6288 	movw	r2, #20104	; 0x4e88
 80069b0:	443a      	add	r2, r7
 80069b2:	6013      	str	r3, [r2, #0]

	 HAL_IWDG_Refresh(&hiwdg1);
 80069b4:	485a      	ldr	r0, [pc, #360]	; (8006b20 <main+0x360>)
 80069b6:	f001 fe1b 	bl	80085f0 <HAL_IWDG_Refresh>

	Create_String_buffer (S3, Size, 2 , ZaprDoSalonuFryzStudio,Yellow);
 80069ba:	f644 6388 	movw	r3, #20104	; 0x4e88
 80069be:	443b      	add	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	b2d9      	uxtb	r1, r3
 80069c4:	4b4b      	ldr	r3, [pc, #300]	; (8006af4 <main+0x334>)
 80069c6:	f644 6290 	movw	r2, #20112	; 0x4e90
 80069ca:	443a      	add	r2, r7
 80069cc:	4413      	add	r3, r2
 80069ce:	484e      	ldr	r0, [pc, #312]	; (8006b08 <main+0x348>)
 80069d0:	f644 6290 	movw	r2, #20112	; 0x4e90
 80069d4:	443a      	add	r2, r7
 80069d6:	4410      	add	r0, r2
 80069d8:	220b      	movs	r2, #11
 80069da:	9200      	str	r2, [sp, #0]
 80069dc:	2202      	movs	r2, #2
 80069de:	f7fb f86d 	bl	8001abc <Create_String_buffer>
	 Size=sizeof(S4)-1;
 80069e2:	230e      	movs	r3, #14
 80069e4:	f644 6288 	movw	r2, #20104	; 0x4e88
 80069e8:	443a      	add	r2, r7
 80069ea:	6013      	str	r3, [r2, #0]
	Create_String_buffer (S4, Size, 3 , ZaprDoSalonuFryzStudio,Purple);
 80069ec:	f644 6388 	movw	r3, #20104	; 0x4e88
 80069f0:	443b      	add	r3, r7
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	b2d9      	uxtb	r1, r3
 80069f6:	4b3f      	ldr	r3, [pc, #252]	; (8006af4 <main+0x334>)
 80069f8:	f644 6290 	movw	r2, #20112	; 0x4e90
 80069fc:	443a      	add	r2, r7
 80069fe:	4413      	add	r3, r2
 8006a00:	4843      	ldr	r0, [pc, #268]	; (8006b10 <main+0x350>)
 8006a02:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006a06:	443a      	add	r2, r7
 8006a08:	4410      	add	r0, r2
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	9200      	str	r2, [sp, #0]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	f7fb f854 	bl	8001abc <Create_String_buffer>
	Size=sizeof(S5)-1;
 8006a14:	230b      	movs	r3, #11
 8006a16:	f644 6288 	movw	r2, #20104	; 0x4e88
 8006a1a:	443a      	add	r2, r7
 8006a1c:	6013      	str	r3, [r2, #0]
	Create_String_buffer (S5, Size, 4 , ZaprDoSalonuFryzStudio,White);
 8006a1e:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006a22:	443b      	add	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	b2d9      	uxtb	r1, r3
 8006a28:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <main+0x334>)
 8006a2a:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006a2e:	443a      	add	r2, r7
 8006a30:	4413      	add	r3, r2
 8006a32:	4839      	ldr	r0, [pc, #228]	; (8006b18 <main+0x358>)
 8006a34:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006a38:	443a      	add	r2, r7
 8006a3a:	4410      	add	r0, r2
 8006a3c:	220f      	movs	r2, #15
 8006a3e:	9200      	str	r2, [sp, #0]
 8006a40:	2204      	movs	r2, #4
 8006a42:	f7fb f83b 	bl	8001abc <Create_String_buffer>
	int ZaprDoSalonuFryzStudioRow=4+1;
 8006a46:	2305      	movs	r3, #5
 8006a48:	f644 6284 	movw	r2, #20100	; 0x4e84
 8006a4c:	443a      	add	r2, r7
 8006a4e:	6013      	str	r3, [r2, #0]

	SedingBufor_Adr=OUT_B1;
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <main+0x364>)
 8006a52:	4a35      	ldr	r2, [pc, #212]	; (8006b28 <main+0x368>)
 8006a54:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg1);
 8006a56:	4832      	ldr	r0, [pc, #200]	; (8006b20 <main+0x360>)
 8006a58:	f001 fdca 	bl	80085f0 <HAL_IWDG_Refresh>
	  HandleEcho(&Thuart3);
 8006a5c:	4833      	ldr	r0, [pc, #204]	; (8006b2c <main+0x36c>)
 8006a5e:	f7fa fecf 	bl	8001800 <HandleEcho>

	  switch( Proces_num )
 8006a62:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006a66:	443b      	add	r3, r7
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	f200 814e 	bhi.w	8006d0c <main+0x54c>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <main+0x2b8>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006a95 	.word	0x08006a95
 8006a7c:	08006b35 	.word	0x08006b35
 8006a80:	08006b81 	.word	0x08006b81
 8006a84:	08006bb3 	.word	0x08006bb3
 8006a88:	08006be5 	.word	0x08006be5
 8006a8c:	08006c13 	.word	0x08006c13
 8006a90:	08006d01 	.word	0x08006d01
	  {
	  case 0:
	  	Verical_Scroll_Flow_withHOLD(ZaprDoSalonuFryzStudio, ZaprDoSalonuFryzStudioRow*16, 30, 800,300, 0);  //this fucion execution maks 550us
 8006a94:	f644 6384 	movw	r3, #20100	; 0x4e84
 8006a98:	443b      	add	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	b2d9      	uxtb	r1, r3
 8006aa2:	4814      	ldr	r0, [pc, #80]	; (8006af4 <main+0x334>)
 8006aa4:	f644 6390 	movw	r3, #20112	; 0x4e90
 8006aa8:	443b      	add	r3, r7
 8006aaa:	4418      	add	r0, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006aba:	221e      	movs	r2, #30
 8006abc:	f7fa fa88 	bl	8000fd0 <Verical_Scroll_Flow_withHOLD>
	   if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <main+0x370>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	f040 8127 	bne.w	8006d18 <main+0x558>
	   {
	  	 Proces_num++;
 8006aca:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006ace:	443b      	add	r3, r7
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006ad8:	443a      	add	r2, r7
 8006ada:	7013      	strb	r3, [r2, #0]
	   }
	  break;
 8006adc:	e11c      	b.n	8006d18 <main+0x558>
 8006ade:	bf00      	nop
 8006ae0:	ffffd8e4 	.word	0xffffd8e4
 8006ae4:	ffffd8d4 	.word	0xffffd8d4
 8006ae8:	0800eadc 	.word	0x0800eadc
 8006aec:	ffffd8c8 	.word	0xffffd8c8
 8006af0:	0800eaec 	.word	0x0800eaec
 8006af4:	ffffb1b8 	.word	0xffffb1b8
 8006af8:	ffffb1ac 	.word	0xffffb1ac
 8006afc:	0800eaf8 	.word	0x0800eaf8
 8006b00:	ffffb19c 	.word	0xffffb19c
 8006b04:	0800eb04 	.word	0x0800eb04
 8006b08:	ffffb18c 	.word	0xffffb18c
 8006b0c:	0800eb14 	.word	0x0800eb14
 8006b10:	ffffb17c 	.word	0xffffb17c
 8006b14:	0800eb24 	.word	0x0800eb24
 8006b18:	ffffb170 	.word	0xffffb170
 8006b1c:	0800eb34 	.word	0x0800eb34
 8006b20:	24013128 	.word	0x24013128
 8006b24:	24007bac 	.word	0x24007bac
 8006b28:	240067a8 	.word	0x240067a8
 8006b2c:	2400def8 	.word	0x2400def8
 8006b30:	2400a2ec 	.word	0x2400a2ec
	  case 1:

	  	Verical_Scroll_Flow_withHOLD(ZaprDoSalonuFryzStudio, (ZaprDoSalonuFryzStudioRow*16) +16 , 30, 300,800, 1);
 8006b34:	f644 6384 	movw	r3, #20100	; 0x4e84
 8006b38:	443b      	add	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	b2d9      	uxtb	r1, r3
 8006b44:	487a      	ldr	r0, [pc, #488]	; (8006d30 <main+0x570>)
 8006b46:	f644 6390 	movw	r3, #20112	; 0x4e90
 8006b4a:	443b      	add	r3, r7
 8006b4c:	4418      	add	r0, r3
 8006b4e:	2301      	movs	r3, #1
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006b5c:	221e      	movs	r2, #30
 8006b5e:	f7fa fa37 	bl	8000fd0 <Verical_Scroll_Flow_withHOLD>
	  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006b62:	4b74      	ldr	r3, [pc, #464]	; (8006d34 <main+0x574>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	f040 80d8 	bne.w	8006d1c <main+0x55c>
	  	 {
	  		 Proces_num++;
 8006b6c:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006b70:	443b      	add	r3, r7
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006b7a:	443a      	add	r2, r7
 8006b7c:	7013      	strb	r3, [r2, #0]
	  	 }
	  	break;
 8006b7e:	e0cd      	b.n	8006d1c <main+0x55c>
	  case 2:

	  	Viewing_BitMapBy_Time(Pozdr_widzow, 4000);
 8006b80:	4b6d      	ldr	r3, [pc, #436]	; (8006d38 <main+0x578>)
 8006b82:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006b86:	443a      	add	r2, r7
 8006b88:	4413      	add	r3, r2
 8006b8a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fa fb60 	bl	8001254 <Viewing_BitMapBy_Time>
	  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006b94:	4b67      	ldr	r3, [pc, #412]	; (8006d34 <main+0x574>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f040 80c1 	bne.w	8006d20 <main+0x560>
	  	 {
	  		 Proces_num++;
 8006b9e:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006ba2:	443b      	add	r3, r7
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006bac:	443a      	add	r2, r7
 8006bae:	7013      	strb	r3, [r2, #0]
	  	 }
	  	break;
 8006bb0:	e0b6      	b.n	8006d20 <main+0x560>
	  case 3:

	  	Viewing_BitMapBy_Time(Pozdr_widzow, 1000);
 8006bb2:	4b61      	ldr	r3, [pc, #388]	; (8006d38 <main+0x578>)
 8006bb4:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006bb8:	443a      	add	r2, r7
 8006bba:	4413      	add	r3, r2
 8006bbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fa fb47 	bl	8001254 <Viewing_BitMapBy_Time>
	  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006bc6:	4b5b      	ldr	r3, [pc, #364]	; (8006d34 <main+0x574>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	f040 80aa 	bne.w	8006d24 <main+0x564>
	  	 {
	  		 Proces_num++;
 8006bd0:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006bd4:	443b      	add	r3, r7
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006bde:	443a      	add	r2, r7
 8006be0:	7013      	strb	r3, [r2, #0]
	  	 }
	  	break;
 8006be2:	e09f      	b.n	8006d24 <main+0x564>
	  case 4:
		  	 Horizontal_SCROLL( Pozdr_wsz, 1450 , 800, 6);  //Pozdr_wsz
 8006be4:	2306      	movs	r3, #6
 8006be6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006bea:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8006bee:	4853      	ldr	r0, [pc, #332]	; (8006d3c <main+0x57c>)
 8006bf0:	f7fa fb66 	bl	80012c0 <Horizontal_SCROLL>
		  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006bf4:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <main+0x574>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	f040 8095 	bne.w	8006d28 <main+0x568>
		  	 {
		  		 Proces_num++;
 8006bfe:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006c02:	443b      	add	r3, r7
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006c0c:	443a      	add	r2, r7
 8006c0e:	7013      	strb	r3, [r2, #0]
		  	 }
	  	break;
 8006c10:	e08a      	b.n	8006d28 <main+0x568>
	  case 5:
		  	  	  	  //Napisy z UARTU czyli bluetootha
		  if(Ilosc_Lini_tesktu>0)
 8006c12:	4b4b      	ldr	r3, [pc, #300]	; (8006d40 <main+0x580>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dd65      	ble.n	8006ce6 <main+0x526>
		  {

			  if(Ilosc_Lini_tesktu==1 || Ilosc_Lini_tesktu==2)
 8006c1a:	4b49      	ldr	r3, [pc, #292]	; (8006d40 <main+0x580>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d003      	beq.n	8006c2a <main+0x46a>
 8006c22:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <main+0x580>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d112      	bne.n	8006c50 <main+0x490>
			  {
				  	Viewing_BitMapBy_Time( Created_By_UART_BMP , 6000);
 8006c2a:	f241 7170 	movw	r1, #6000	; 0x1770
 8006c2e:	4845      	ldr	r0, [pc, #276]	; (8006d44 <main+0x584>)
 8006c30:	f7fa fb10 	bl	8001254 <Viewing_BitMapBy_Time>

						  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006c34:	4b3f      	ldr	r3, [pc, #252]	; (8006d34 <main+0x574>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d138      	bne.n	8006cae <main+0x4ee>
						  	 {
						  		Proces_num++;
 8006c3c:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006c40:	443b      	add	r3, r7
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006c4a:	443a      	add	r2, r7
 8006c4c:	7013      	strb	r3, [r2, #0]
						  		break;
 8006c4e:	e06e      	b.n	8006d2e <main+0x56e>
						  	 }
			  }


			  else if(Ilosc_Lini_tesktu==3 || Ilosc_Lini_tesktu==4)
 8006c50:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <main+0x580>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d003      	beq.n	8006c60 <main+0x4a0>
 8006c58:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <main+0x580>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d119      	bne.n	8006c94 <main+0x4d4>
			  {
				  Verical_Scroll_Flow_withHOLD(Created_By_UART_BMP, 64, 80, 3200,3200, 1);
 8006c60:	2301      	movs	r3, #1
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8006c6e:	2250      	movs	r2, #80	; 0x50
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	4834      	ldr	r0, [pc, #208]	; (8006d44 <main+0x584>)
 8006c74:	f7fa f9ac 	bl	8000fd0 <Verical_Scroll_Flow_withHOLD>
				  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006c78:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <main+0x574>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d116      	bne.n	8006cae <main+0x4ee>
				  	 {
				  		Proces_num++;
 8006c80:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006c84:	443b      	add	r3, r7
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006c8e:	443a      	add	r2, r7
 8006c90:	7013      	strb	r3, [r2, #0]
				  		break;
 8006c92:	e04c      	b.n	8006d2e <main+0x56e>
				  	 }
			  }
			  else
			  {
				  SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <main+0x574>)
 8006c96:	2202      	movs	r2, #2
 8006c98:	701a      	strb	r2, [r3, #0]
				  Proces_num++;
 8006c9a:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006c9e:	443b      	add	r3, r7
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006ca8:	443a      	add	r2, r7
 8006caa:	7013      	strb	r3, [r2, #0]
				  break;
 8006cac:	e03f      	b.n	8006d2e <main+0x56e>
			  }

			  if(  (HAL_GetTick() - Z_czasOtrzymania_tekstu) > (1000*60*60*8) )
 8006cae:	f001 f945 	bl	8007f3c <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <main+0x588>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <main+0x58c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d935      	bls.n	8006d2c <main+0x56c>
			  {
				  SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <main+0x574>)
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	701a      	strb	r2, [r3, #0]
				  Ilosc_Lini_tesktu=0;
 8006cc6:	4b1e      	ldr	r3, [pc, #120]	; (8006d40 <main+0x580>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
				  f_start_view=1;
 8006ccc:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <main+0x590>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
				  Proces_num++;
 8006cd2:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006cd6:	443b      	add	r3, r7
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006ce0:	443a      	add	r2, r7
 8006ce2:	7013      	strb	r3, [r2, #0]
				  break;
 8006ce4:	e023      	b.n	8006d2e <main+0x56e>

		  }

		  else
		  {
			  SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8006ce6:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <main+0x574>)
 8006ce8:	2202      	movs	r2, #2
 8006cea:	701a      	strb	r2, [r3, #0]
			  Proces_num++;
 8006cec:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006cf0:	443b      	add	r3, r7
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006cfa:	443a      	add	r2, r7
 8006cfc:	7013      	strb	r3, [r2, #0]
			  break;
 8006cfe:	e016      	b.n	8006d2e <main+0x56e>
		  }
	  	break;

	  case 6:
		  Proces_num=0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006d06:	443a      	add	r2, r7
 8006d08:	7013      	strb	r3, [r2, #0]
		  break;
 8006d0a:	e010      	b.n	8006d2e <main+0x56e>
	  default :
	  	Proces_num=0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006d12:	443a      	add	r2, r7
 8006d14:	7013      	strb	r3, [r2, #0]

	  	break;
 8006d16:	e00a      	b.n	8006d2e <main+0x56e>
	  break;
 8006d18:	bf00      	nop
 8006d1a:	e69c      	b.n	8006a56 <main+0x296>
	  	break;
 8006d1c:	bf00      	nop
 8006d1e:	e69a      	b.n	8006a56 <main+0x296>
	  	break;
 8006d20:	bf00      	nop
 8006d22:	e698      	b.n	8006a56 <main+0x296>
	  	break;
 8006d24:	bf00      	nop
 8006d26:	e696      	b.n	8006a56 <main+0x296>
	  	break;
 8006d28:	bf00      	nop
 8006d2a:	e694      	b.n	8006a56 <main+0x296>
	  	break;
 8006d2c:	bf00      	nop
	  HAL_IWDG_Refresh(&hiwdg1);
 8006d2e:	e692      	b.n	8006a56 <main+0x296>
 8006d30:	ffffb1b8 	.word	0xffffb1b8
 8006d34:	2400a2ec 	.word	0x2400a2ec
 8006d38:	ffffd8e4 	.word	0xffffd8e4
 8006d3c:	0800eb40 	.word	0x0800eb40
 8006d40:	2400a2d4 	.word	0x2400a2d4
 8006d44:	24007bc4 	.word	0x24007bc4
 8006d48:	2400a2d8 	.word	0x2400a2d8
 8006d4c:	01b77400 	.word	0x01b77400
 8006d50:	24000000 	.word	0x24000000

08006d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b09c      	sub	sp, #112	; 0x70
 8006d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5e:	224c      	movs	r2, #76	; 0x4c
 8006d60:	2100      	movs	r1, #0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f007 fa28 	bl	800e1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f007 fa22 	bl	800e1b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006d74:	2002      	movs	r0, #2
 8006d76:	f001 ffef 	bl	8008d58 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	4b36      	ldr	r3, [pc, #216]	; (8006e58 <SystemClock_Config+0x104>)
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	4a35      	ldr	r2, [pc, #212]	; (8006e58 <SystemClock_Config+0x104>)
 8006d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d88:	6193      	str	r3, [r2, #24]
 8006d8a:	4b33      	ldr	r3, [pc, #204]	; (8006e58 <SystemClock_Config+0x104>)
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <SystemClock_Config+0x108>)
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	4a30      	ldr	r2, [pc, #192]	; (8006e5c <SystemClock_Config+0x108>)
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006da0:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <SystemClock_Config+0x108>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	603b      	str	r3, [r7, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006dac:	bf00      	nop
 8006dae:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <SystemClock_Config+0x104>)
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dba:	d1f8      	bne.n	8006dae <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <SystemClock_Config+0x10c>)
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f023 0303 	bic.w	r3, r3, #3
 8006dc4:	4a26      	ldr	r2, [pc, #152]	; (8006e60 <SystemClock_Config+0x10c>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_LSI;
 8006dcc:	2318      	movs	r3, #24
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8006dd8:	2320      	movs	r3, #32
 8006dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8006de0:	2301      	movs	r3, #1
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006de4:	2301      	movs	r3, #1
 8006de6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8006de8:	23f0      	movs	r3, #240	; 0xf0
 8006dea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006dec:	2302      	movs	r3, #2
 8006dee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 120;
 8006df0:	2378      	movs	r3, #120	; 0x78
 8006df2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006df4:	2302      	movs	r3, #2
 8006df6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8006df8:	2308      	movs	r3, #8
 8006dfa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 fe31 	bl	8009a70 <HAL_RCC_OscConfig>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006e14:	f000 f856 	bl	8006ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e18:	233f      	movs	r3, #63	; 0x3f
 8006e1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006e24:	2308      	movs	r3, #8
 8006e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006e28:	2340      	movs	r3, #64	; 0x40
 8006e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006e36:	2340      	movs	r3, #64	; 0x40
 8006e38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	2104      	movs	r1, #4
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f003 fa26 	bl	800a290 <HAL_RCC_ClockConfig>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8006e4a:	f000 f83b 	bl	8006ec4 <Error_Handler>
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3770      	adds	r7, #112	; 0x70
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	58024800 	.word	0x58024800
 8006e5c:	58000400 	.word	0x58000400
 8006e60:	58024400 	.word	0x58024400

08006e64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b0b0      	sub	sp, #192	; 0xc0
 8006e68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e6a:	1d3b      	adds	r3, r7, #4
 8006e6c:	22bc      	movs	r2, #188	; 0xbc
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f007 f9a1 	bl	800e1b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_SPI2;
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <PeriphCommonClock_Config+0x5c>)
 8006e78:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 8006e7e:	233c      	movs	r3, #60	; 0x3c
 8006e80:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 120;
 8006e82:	2378      	movs	r3, #120	; 0x78
 8006e84:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 120;
 8006e86:	2378      	movs	r3, #120	; 0x78
 8006e88:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 5;
 8006e8a:	2305      	movs	r3, #5
 8006e8c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 8006e9a:	2320      	movs	r3, #32
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8006e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ea2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ea4:	1d3b      	adds	r3, r7, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f003 fd22 	bl	800a8f0 <HAL_RCCEx_PeriphCLKConfig>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8006eb2:	f000 f807 	bl	8006ec4 <Error_Handler>
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	37c0      	adds	r7, #192	; 0xc0
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	02001000 	.word	0x02001000

08006ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
void MX_MDMA_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <MX_MDMA_Init+0x3c>)
 8006edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006ee0:	4a0b      	ldr	r2, [pc, #44]	; (8006f10 <MX_MDMA_Init+0x3c>)
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <MX_MDMA_Init+0x3c>)
 8006eec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 2, 0);
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2102      	movs	r1, #2
 8006efc:	207a      	movs	r0, #122	; 0x7a
 8006efe:	f001 f910 	bl	8008122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8006f02:	207a      	movs	r0, #122	; 0x7a
 8006f04:	f001 f927 	bl	8008156 <HAL_NVIC_EnableIRQ>

}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	58024400 	.word	0x58024400

08006f14 <MX_QUADSPI_Init>:
QSPI_HandleTypeDef hqspi;
MDMA_HandleTypeDef hmdma_quadspi_fifo_th;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8006f18:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f1a:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <MX_QUADSPI_Init+0x54>)
 8006f1c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4;
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f20:	2204      	movs	r2, #4
 8006f22:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f26:	2204      	movs	r2, #4
 8006f28:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f32:	2219      	movs	r2, #25
 8006f34:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006f3c:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8006f42:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f44:	2280      	movs	r2, #128	; 0x80
 8006f46:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006f4e:	4805      	ldr	r0, [pc, #20]	; (8006f64 <MX_QUADSPI_Init+0x50>)
 8006f50:	f001 ff3c 	bl	8008dcc <HAL_QSPI_Init>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8006f5a:	f7ff ffb3 	bl	8006ec4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006f5e:	bf00      	nop
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	240131a4 	.word	0x240131a4
 8006f68:	52005000 	.word	0x52005000

08006f6c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	; 0x30
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f74:	f107 031c 	add.w	r3, r7, #28
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	609a      	str	r2, [r3, #8]
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a61      	ldr	r2, [pc, #388]	; (8007110 <HAL_QSPI_MspInit+0x1a4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f040 80bc 	bne.w	8007108 <HAL_QSPI_MspInit+0x19c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006f90:	4b60      	ldr	r3, [pc, #384]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006f96:	4a5f      	ldr	r2, [pc, #380]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f9c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006fa0:	4b5c      	ldr	r3, [pc, #368]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fae:	4b59      	ldr	r3, [pc, #356]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fb4:	4a57      	ldr	r2, [pc, #348]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fbe:	4b55      	ldr	r3, [pc, #340]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fcc:	4b51      	ldr	r3, [pc, #324]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fd2:	4a50      	ldr	r2, [pc, #320]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fd4:	f043 0310 	orr.w	r3, r3, #16
 8006fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fdc:	4b4d      	ldr	r3, [pc, #308]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fea:	4b4a      	ldr	r3, [pc, #296]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ff0:	4a48      	ldr	r2, [pc, #288]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006ff2:	f043 0304 	orr.w	r3, r3, #4
 8006ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ffa:	4b46      	ldr	r3, [pc, #280]	; (8007114 <HAL_QSPI_MspInit+0x1a8>)
 8006ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007008:	2304      	movs	r3, #4
 800700a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700c:	2302      	movs	r3, #2
 800700e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007010:	2300      	movs	r3, #0
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007014:	2300      	movs	r3, #0
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007018:	2309      	movs	r3, #9
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800701c:	f107 031c 	add.w	r3, r7, #28
 8007020:	4619      	mov	r1, r3
 8007022:	483d      	ldr	r0, [pc, #244]	; (8007118 <HAL_QSPI_MspInit+0x1ac>)
 8007024:	f001 f8b2 	bl	800818c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007028:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800702c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702e:	2302      	movs	r3, #2
 8007030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007036:	2300      	movs	r3, #0
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800703a:	230a      	movs	r3, #10
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800703e:	f107 031c 	add.w	r3, r7, #28
 8007042:	4619      	mov	r1, r3
 8007044:	4835      	ldr	r0, [pc, #212]	; (800711c <HAL_QSPI_MspInit+0x1b0>)
 8007046:	f001 f8a1 	bl	800818c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800704a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800704e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007050:	2302      	movs	r3, #2
 8007052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007054:	2300      	movs	r3, #0
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007058:	2300      	movs	r3, #0
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800705c:	2309      	movs	r3, #9
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007060:	f107 031c 	add.w	r3, r7, #28
 8007064:	4619      	mov	r1, r3
 8007066:	482e      	ldr	r0, [pc, #184]	; (8007120 <HAL_QSPI_MspInit+0x1b4>)
 8007068:	f001 f890 	bl	800818c <HAL_GPIO_Init>

    /* QUADSPI MDMA Init */
    /* QUADSPI_FIFO_TH Init */
    hmdma_quadspi_fifo_th.Instance = MDMA_Channel0;
 800706c:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 800706e:	4a2e      	ldr	r2, [pc, #184]	; (8007128 <HAL_QSPI_MspInit+0x1bc>)
 8007070:	601a      	str	r2, [r3, #0]
    hmdma_quadspi_fifo_th.Init.Request = MDMA_REQUEST_QUADSPI_FIFO_TH;
 8007072:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 8007074:	2216      	movs	r2, #22
 8007076:	605a      	str	r2, [r3, #4]
    hmdma_quadspi_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8007078:	4b2a      	ldr	r3, [pc, #168]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 800707a:	2200      	movs	r2, #0
 800707c:	609a      	str	r2, [r3, #8]
    hmdma_quadspi_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 800707e:	4b29      	ldr	r3, [pc, #164]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 8007080:	2200      	movs	r2, #0
 8007082:	60da      	str	r2, [r3, #12]
    hmdma_quadspi_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8007084:	4b27      	ldr	r3, [pc, #156]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 8007086:	2200      	movs	r2, #0
 8007088:	611a      	str	r2, [r3, #16]
    hmdma_quadspi_fifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800708a:	4b26      	ldr	r3, [pc, #152]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 800708c:	2202      	movs	r2, #2
 800708e:	615a      	str	r2, [r3, #20]
    hmdma_quadspi_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8007090:	4b24      	ldr	r3, [pc, #144]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 8007092:	2200      	movs	r2, #0
 8007094:	619a      	str	r2, [r3, #24]
    hmdma_quadspi_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8007096:	4b23      	ldr	r3, [pc, #140]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 8007098:	2200      	movs	r2, #0
 800709a:	61da      	str	r2, [r3, #28]
    hmdma_quadspi_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800709c:	4b21      	ldr	r3, [pc, #132]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 800709e:	2200      	movs	r2, #0
 80070a0:	621a      	str	r2, [r3, #32]
    hmdma_quadspi_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_quadspi_fifo_th.Init.BufferTransferLength = 4;
 80070aa:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070ac:	2204      	movs	r2, #4
 80070ae:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_quadspi_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80070b0:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_quadspi_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80070b6:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_quadspi_fifo_th.Init.SourceBlockAddressOffset = 0;
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070be:	2200      	movs	r2, #0
 80070c0:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_quadspi_fifo_th.Init.DestBlockAddressOffset = 0;
 80070c2:	4b18      	ldr	r3, [pc, #96]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_quadspi_fifo_th) != HAL_OK)
 80070c8:	4816      	ldr	r0, [pc, #88]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070ca:	f001 faa1 	bl	8008610 <HAL_MDMA_Init>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_QSPI_MspInit+0x16c>
    {
      Error_Handler();
 80070d4:	f7ff fef6 	bl	8006ec4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_quadspi_fifo_th, 0, 0) != HAL_OK)
 80070d8:	2200      	movs	r2, #0
 80070da:	2100      	movs	r1, #0
 80070dc:	4811      	ldr	r0, [pc, #68]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070de:	f001 fae3 	bl	80086a8 <HAL_MDMA_ConfigPostRequestMask>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <HAL_QSPI_MspInit+0x180>
    {
      Error_Handler();
 80070e8:	f7ff feec 	bl	8006ec4 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hmdma,hmdma_quadspi_fifo_th);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a0d      	ldr	r2, [pc, #52]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80070f2:	4a0c      	ldr	r2, [pc, #48]	; (8007124 <HAL_QSPI_MspInit+0x1b8>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6413      	str	r3, [r2, #64]	; 0x40

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 2, 0);
 80070f8:	2200      	movs	r2, #0
 80070fa:	2102      	movs	r1, #2
 80070fc:	205c      	movs	r0, #92	; 0x5c
 80070fe:	f001 f810 	bl	8008122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8007102:	205c      	movs	r0, #92	; 0x5c
 8007104:	f001 f827 	bl	8008156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8007108:	bf00      	nop
 800710a:	3730      	adds	r7, #48	; 0x30
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	52005000 	.word	0x52005000
 8007114:	58024400 	.word	0x58024400
 8007118:	58020400 	.word	0x58020400
 800711c:	58021000 	.word	0x58021000
 8007120:	58020800 	.word	0x58020800
 8007124:	24013138 	.word	0x24013138
 8007128:	52000040 	.word	0x52000040

0800712c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007130:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007132:	4a28      	ldr	r2, [pc, #160]	; (80071d4 <MX_SPI2_Init+0xa8>)
 8007134:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007136:	4b26      	ldr	r3, [pc, #152]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007138:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800713c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800713e:	4b24      	ldr	r3, [pc, #144]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007140:	2200      	movs	r2, #0
 8007142:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8007144:	4b22      	ldr	r3, [pc, #136]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007146:	2203      	movs	r2, #3
 8007148:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800714a:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <MX_SPI2_Init+0xa4>)
 800714c:	2200      	movs	r2, #0
 800714e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007152:	2200      	movs	r2, #0
 8007154:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007156:	4b1e      	ldr	r3, [pc, #120]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007158:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800715c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800715e:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007160:	2200      	movs	r2, #0
 8007162:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007164:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007166:	2200      	movs	r2, #0
 8007168:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800716a:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <MX_SPI2_Init+0xa4>)
 800716c:	2200      	movs	r2, #0
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007172:	2200      	movs	r2, #0
 8007174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007176:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007178:	2200      	movs	r2, #0
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800717c:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <MX_SPI2_Init+0xa4>)
 800717e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007182:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007186:	2200      	movs	r2, #0
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <MX_SPI2_Init+0xa4>)
 800718c:	2200      	movs	r2, #0
 800718e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007196:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <MX_SPI2_Init+0xa4>)
 8007198:	2200      	movs	r2, #0
 800719a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <MX_SPI2_Init+0xa4>)
 800719e:	2200      	movs	r2, #0
 80071a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80071a2:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <MX_SPI2_Init+0xa4>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <MX_SPI2_Init+0xa4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80071ae:	4b08      	ldr	r3, [pc, #32]	; (80071d0 <MX_SPI2_Init+0xa4>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <MX_SPI2_Init+0xa4>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80071ba:	4805      	ldr	r0, [pc, #20]	; (80071d0 <MX_SPI2_Init+0xa4>)
 80071bc:	f004 fc3c 	bl	800ba38 <HAL_SPI_Init>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80071c6:	f7ff fe7d 	bl	8006ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	240131f0 	.word	0x240131f0
 80071d4:	40003800 	.word	0x40003800

080071d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	; 0x28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e0:	f107 0314 	add.w	r3, r7, #20
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	609a      	str	r2, [r3, #8]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <HAL_SPI_MspInit+0xc8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d14d      	bne.n	8007296 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071fa:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 80071fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007200:	4a28      	ldr	r2, [pc, #160]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 8007202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800720a:	4b26      	ldr	r3, [pc, #152]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 800720c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007218:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 800721a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800721e:	4a21      	ldr	r2, [pc, #132]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 8007220:	f043 0304 	orr.w	r3, r3, #4
 8007224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 800722a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007236:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 8007238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800723c:	4a19      	ldr	r2, [pc, #100]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 800723e:	f043 0302 	orr.w	r3, r3, #2
 8007242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007246:	4b17      	ldr	r3, [pc, #92]	; (80072a4 <HAL_SPI_MspInit+0xcc>)
 8007248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8007254:	2306      	movs	r3, #6
 8007256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007258:	2302      	movs	r3, #2
 800725a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007260:	2300      	movs	r3, #0
 8007262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007264:	2305      	movs	r3, #5
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	4619      	mov	r1, r3
 800726e:	480e      	ldr	r0, [pc, #56]	; (80072a8 <HAL_SPI_MspInit+0xd0>)
 8007270:	f000 ff8c 	bl	800818c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727a:	2302      	movs	r3, #2
 800727c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007282:	2300      	movs	r3, #0
 8007284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007286:	2305      	movs	r3, #5
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800728a:	f107 0314 	add.w	r3, r7, #20
 800728e:	4619      	mov	r1, r3
 8007290:	4806      	ldr	r0, [pc, #24]	; (80072ac <HAL_SPI_MspInit+0xd4>)
 8007292:	f000 ff7b 	bl	800818c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007296:	bf00      	nop
 8007298:	3728      	adds	r7, #40	; 0x28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40003800 	.word	0x40003800
 80072a4:	58024400 	.word	0x58024400
 80072a8:	58020800 	.word	0x58020800
 80072ac:	58020400 	.word	0x58020400

080072b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072b6:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <HAL_MspInit+0x30>)
 80072b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072bc:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <HAL_MspInit+0x30>)
 80072be:	f043 0302 	orr.w	r3, r3, #2
 80072c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80072c6:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <HAL_MspInit+0x30>)
 80072c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	58024400 	.word	0x58024400

080072e4 <LL_TIM_ClearFlag_CC1>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f06f 0202 	mvn.w	r2, #2
 80072f2:	611a      	str	r2, [r3, #16]
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007304:	bf00      	nop
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800730e:	b480      	push	{r7}
 8007310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007312:	e7fe      	b.n	8007312 <HardFault_Handler+0x4>

08007314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007318:	e7fe      	b.n	8007318 <MemManage_Handler+0x4>

0800731a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800731a:	b480      	push	{r7}
 800731c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800731e:	e7fe      	b.n	800731e <BusFault_Handler+0x4>

08007320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007324:	e7fe      	b.n	8007324 <UsageFault_Handler+0x4>

08007326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007326:	b480      	push	{r7}
 8007328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800732a:	bf00      	nop
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007342:	b480      	push	{r7}
 8007344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007346:	bf00      	nop
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007354:	f000 fdde 	bl	8007f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007358:	bf00      	nop
 800735a:	bd80      	pop	{r7, pc}

0800735c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	++t2;
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <TIM2_IRQHandler+0x1c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3301      	adds	r3, #1
 8007366:	4a04      	ldr	r2, [pc, #16]	; (8007378 <TIM2_IRQHandler+0x1c>)
 8007368:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	LL_TIM_ClearFlag_CC1(TIM2);
 800736a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800736e:	f7ff ffb9 	bl	80072e4 <LL_TIM_ClearFlag_CC1>
  /* USER CODE END TIM2_IRQn 1 */
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	2400a2dc 	.word	0x2400a2dc

0800737c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	TUART_CallBack_IRQ(&Thuart3);
 8007390:	4802      	ldr	r0, [pc, #8]	; (800739c <USART3_IRQHandler+0x10>)
 8007392:	f7fa fb4c 	bl	8001a2e <TUART_CallBack_IRQ>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	2400def8 	.word	0x2400def8

080073a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	TIM5_CallBack();
 80073a4:	f7f9 f80c 	bl	80003c0 <TIM5_CallBack>
	LL_TIM_ClearFlag_CC1(TIM5);
 80073a8:	4802      	ldr	r0, [pc, #8]	; (80073b4 <TIM5_IRQHandler+0x14>)
 80073aa:	f7ff ff9b 	bl	80072e4 <LL_TIM_ClearFlag_CC1>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80073ae:	bf00      	nop
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40000c00 	.word	0x40000c00

080073b8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80073bc:	4802      	ldr	r0, [pc, #8]	; (80073c8 <QUADSPI_IRQHandler+0x10>)
 80073be:	f001 fd79 	bl	8008eb4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80073c2:	bf00      	nop
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	240131a4 	.word	0x240131a4

080073cc <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_quadspi_fifo_th);
 80073d0:	4802      	ldr	r0, [pc, #8]	; (80073dc <MDMA_IRQHandler+0x10>)
 80073d2:	f001 fa63 	bl	800889c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80073d6:	bf00      	nop
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	24013138 	.word	0x24013138

080073e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073e8:	4a14      	ldr	r2, [pc, #80]	; (800743c <_sbrk+0x5c>)
 80073ea:	4b15      	ldr	r3, [pc, #84]	; (8007440 <_sbrk+0x60>)
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <_sbrk+0x64>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073fc:	4b11      	ldr	r3, [pc, #68]	; (8007444 <_sbrk+0x64>)
 80073fe:	4a12      	ldr	r2, [pc, #72]	; (8007448 <_sbrk+0x68>)
 8007400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <_sbrk+0x64>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	429a      	cmp	r2, r3
 800740e:	d207      	bcs.n	8007420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007410:	f006 fea8 	bl	800e164 <__errno>
 8007414:	4603      	mov	r3, r0
 8007416:	220c      	movs	r2, #12
 8007418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	e009      	b.n	8007434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <_sbrk+0x64>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007426:	4b07      	ldr	r3, [pc, #28]	; (8007444 <_sbrk+0x64>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	4a05      	ldr	r2, [pc, #20]	; (8007444 <_sbrk+0x64>)
 8007430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	24080000 	.word	0x24080000
 8007440:	00000400 	.word	0x00000400
 8007444:	2400a2e0 	.word	0x2400a2e0
 8007448:	240132d8 	.word	0x240132d8

0800744c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007450:	4b29      	ldr	r3, [pc, #164]	; (80074f8 <SystemInit+0xac>)
 8007452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007456:	4a28      	ldr	r2, [pc, #160]	; (80074f8 <SystemInit+0xac>)
 8007458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800745c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007460:	4b26      	ldr	r3, [pc, #152]	; (80074fc <SystemInit+0xb0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <SystemInit+0xb0>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800746c:	4b23      	ldr	r3, [pc, #140]	; (80074fc <SystemInit+0xb0>)
 800746e:	2200      	movs	r2, #0
 8007470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007472:	4b22      	ldr	r3, [pc, #136]	; (80074fc <SystemInit+0xb0>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4921      	ldr	r1, [pc, #132]	; (80074fc <SystemInit+0xb0>)
 8007478:	4b21      	ldr	r3, [pc, #132]	; (8007500 <SystemInit+0xb4>)
 800747a:	4013      	ands	r3, r2
 800747c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800747e:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <SystemInit+0xb0>)
 8007480:	2200      	movs	r2, #0
 8007482:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <SystemInit+0xb0>)
 8007486:	2200      	movs	r2, #0
 8007488:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800748a:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <SystemInit+0xb0>)
 800748c:	2200      	movs	r2, #0
 800748e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007490:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <SystemInit+0xb0>)
 8007492:	2200      	movs	r2, #0
 8007494:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8007496:	4b19      	ldr	r3, [pc, #100]	; (80074fc <SystemInit+0xb0>)
 8007498:	2200      	movs	r2, #0
 800749a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800749c:	4b17      	ldr	r3, [pc, #92]	; (80074fc <SystemInit+0xb0>)
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80074a2:	4b16      	ldr	r3, [pc, #88]	; (80074fc <SystemInit+0xb0>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80074a8:	4b14      	ldr	r3, [pc, #80]	; (80074fc <SystemInit+0xb0>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <SystemInit+0xb0>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80074b4:	4b11      	ldr	r3, [pc, #68]	; (80074fc <SystemInit+0xb0>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <SystemInit+0xb0>)
 80074bc:	2200      	movs	r2, #0
 80074be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074c0:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <SystemInit+0xb0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <SystemInit+0xb0>)
 80074c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <SystemInit+0xb0>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <SystemInit+0xb8>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <SystemInit+0xbc>)
 80074d8:	4013      	ands	r3, r2
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074de:	d202      	bcs.n	80074e6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80074e0:	4b0a      	ldr	r3, [pc, #40]	; (800750c <SystemInit+0xc0>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074e6:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <SystemInit+0xac>)
 80074e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	e000ed00 	.word	0xe000ed00
 80074fc:	58024400 	.word	0x58024400
 8007500:	eaf6ed7f 	.word	0xeaf6ed7f
 8007504:	5c001000 	.word	0x5c001000
 8007508:	ffff0000 	.word	0xffff0000
 800750c:	51008108 	.word	0x51008108

08007510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <__NVIC_GetPriorityGrouping+0x18>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	f003 0307 	and.w	r3, r3, #7
}
 800751e:	4618      	mov	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	e000ed00 	.word	0xe000ed00

0800752c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800753a:	2b00      	cmp	r3, #0
 800753c:	db0b      	blt.n	8007556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f003 021f 	and.w	r2, r3, #31
 8007544:	4907      	ldr	r1, [pc, #28]	; (8007564 <__NVIC_EnableIRQ+0x38>)
 8007546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	2001      	movs	r0, #1
 800754e:	fa00 f202 	lsl.w	r2, r0, r2
 8007552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	e000e100 	.word	0xe000e100

08007568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	db0a      	blt.n	8007592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	490c      	ldr	r1, [pc, #48]	; (80075b4 <__NVIC_SetPriority+0x4c>)
 8007582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007586:	0112      	lsls	r2, r2, #4
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	440b      	add	r3, r1
 800758c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007590:	e00a      	b.n	80075a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	4908      	ldr	r1, [pc, #32]	; (80075b8 <__NVIC_SetPriority+0x50>)
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	3b04      	subs	r3, #4
 80075a0:	0112      	lsls	r2, r2, #4
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	440b      	add	r3, r1
 80075a6:	761a      	strb	r2, [r3, #24]
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	e000e100 	.word	0xe000e100
 80075b8:	e000ed00 	.word	0xe000ed00

080075bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075bc:	b480      	push	{r7}
 80075be:	b089      	sub	sp, #36	; 0x24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	f1c3 0307 	rsb	r3, r3, #7
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	bf28      	it	cs
 80075da:	2304      	movcs	r3, #4
 80075dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	3304      	adds	r3, #4
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d902      	bls.n	80075ec <NVIC_EncodePriority+0x30>
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	3b03      	subs	r3, #3
 80075ea:	e000      	b.n	80075ee <NVIC_EncodePriority+0x32>
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	43da      	mvns	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	401a      	ands	r2, r3
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007604:	f04f 31ff 	mov.w	r1, #4294967295
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	fa01 f303 	lsl.w	r3, r1, r3
 800760e:	43d9      	mvns	r1, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007614:	4313      	orrs	r3, r2
         );
}
 8007616:	4618      	mov	r0, r3
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <LL_TIM_DisableARRPreload>:
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <LL_TIM_SetClockSource>:
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <LL_TIM_SetClockSource+0x28>)
 8007654:	4013      	ands	r3, r2
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	fffebff8 	.word	0xfffebff8

08007670 <LL_TIM_SetTriggerOutput>:
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	605a      	str	r2, [r3, #4]
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <LL_TIM_DisableMasterSlaveMode>:
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <LL_APB1_GRP1_EnableClock+0x34>)
 80076c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80076c6:	4909      	ldr	r1, [pc, #36]	; (80076ec <LL_APB1_GRP1_EnableClock+0x34>)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <LL_APB1_GRP1_EnableClock+0x34>)
 80076d2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4013      	ands	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80076dc:	68fb      	ldr	r3, [r7, #12]
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	58024400 	.word	0x58024400

080076f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	609a      	str	r2, [r3, #8]
 8007700:	60da      	str	r2, [r3, #12]
 8007702:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8007704:	2001      	movs	r0, #1
 8007706:	f7ff ffd7 	bl	80076b8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800770a:	f7ff ff01 	bl	8007510 <__NVIC_GetPriorityGrouping>
 800770e:	4603      	mov	r3, r0
 8007710:	2200      	movs	r2, #0
 8007712:	2104      	movs	r1, #4
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff ff51 	bl	80075bc <NVIC_EncodePriority>
 800771a:	4603      	mov	r3, r0
 800771c:	4619      	mov	r1, r3
 800771e:	201c      	movs	r0, #28
 8007720:	f7ff ff22 	bl	8007568 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8007724:	201c      	movs	r0, #28
 8007726:	f7ff ff01 	bl	800752c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 800772a:	23ef      	movs	r3, #239	; 0xef
 800772c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800772e:	2300      	movs	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 99;
 8007732:	2363      	movs	r3, #99	; 0x63
 8007734:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	4619      	mov	r1, r3
 800773e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007742:	f006 fb33 	bl	800ddac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8007746:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800774a:	f7ff ff6a 	bl	8007622 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800774e:	2100      	movs	r1, #0
 8007750:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007754:	f7ff ff76 	bl	8007644 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8007758:	2100      	movs	r1, #0
 800775a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800775e:	f7ff ff87 	bl	8007670 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8007762:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007766:	f7ff ff96 	bl	8007696 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800776a:	bf00      	nop
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800777a:	1d3b      	adds	r3, r7, #4
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8007788:	2002      	movs	r0, #2
 800778a:	f7ff ff95 	bl	80076b8 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800778e:	f7ff febf 	bl	8007510 <__NVIC_GetPriorityGrouping>
 8007792:	4603      	mov	r3, r0
 8007794:	2200      	movs	r2, #0
 8007796:	2104      	movs	r1, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff ff0f 	bl	80075bc <NVIC_EncodePriority>
 800779e:	4603      	mov	r3, r0
 80077a0:	4619      	mov	r1, r3
 80077a2:	201d      	movs	r0, #29
 80077a4:	f7ff fee0 	bl	8007568 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80077a8:	201d      	movs	r0, #29
 80077aa:	f7ff febf 	bl	800752c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 80077ae:	23ef      	movs	r3, #239	; 0xef
 80077b0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9;
 80077b6:	2309      	movs	r3, #9
 80077b8:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80077ba:	2300      	movs	r3, #0
 80077bc:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80077be:	1d3b      	adds	r3, r7, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	480a      	ldr	r0, [pc, #40]	; (80077ec <MX_TIM3_Init+0x78>)
 80077c4:	f006 faf2 	bl	800ddac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80077c8:	4808      	ldr	r0, [pc, #32]	; (80077ec <MX_TIM3_Init+0x78>)
 80077ca:	f7ff ff2a 	bl	8007622 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80077ce:	2100      	movs	r1, #0
 80077d0:	4806      	ldr	r0, [pc, #24]	; (80077ec <MX_TIM3_Init+0x78>)
 80077d2:	f7ff ff37 	bl	8007644 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80077d6:	2100      	movs	r1, #0
 80077d8:	4804      	ldr	r0, [pc, #16]	; (80077ec <MX_TIM3_Init+0x78>)
 80077da:	f7ff ff49 	bl	8007670 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80077de:	4803      	ldr	r0, [pc, #12]	; (80077ec <MX_TIM3_Init+0x78>)
 80077e0:	f7ff ff59 	bl	8007696 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40000400 	.word	0x40000400

080077f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08e      	sub	sp, #56	; 0x38
 80077f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	605a      	str	r2, [r3, #4]
 8007800:	609a      	str	r2, [r3, #8]
 8007802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007804:	f107 031c 	add.w	r3, r7, #28
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007810:	463b      	mov	r3, r7
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	605a      	str	r2, [r3, #4]
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	611a      	str	r2, [r3, #16]
 800781e:	615a      	str	r2, [r3, #20]
 8007820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007822:	4b2c      	ldr	r3, [pc, #176]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007824:	4a2c      	ldr	r2, [pc, #176]	; (80078d8 <MX_TIM4_Init+0xe8>)
 8007826:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8007828:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <MX_TIM4_Init+0xe4>)
 800782a:	2201      	movs	r2, #1
 800782c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800782e:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007830:	2200      	movs	r2, #0
 8007832:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8007834:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007836:	2264      	movs	r2, #100	; 0x64
 8007838:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800783a:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <MX_TIM4_Init+0xe4>)
 800783c:	2200      	movs	r2, #0
 800783e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007842:	2200      	movs	r2, #0
 8007844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007846:	4823      	ldr	r0, [pc, #140]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007848:	f004 fa13 	bl	800bc72 <HAL_TIM_Base_Init>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8007852:	f7ff fb37 	bl	8006ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800785c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007860:	4619      	mov	r1, r3
 8007862:	481c      	ldr	r0, [pc, #112]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007864:	f004 fcd6 	bl	800c214 <HAL_TIM_ConfigClockSource>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800786e:	f7ff fb29 	bl	8006ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007872:	4818      	ldr	r0, [pc, #96]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007874:	f004 fa54 	bl	800bd20 <HAL_TIM_PWM_Init>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800787e:	f7ff fb21 	bl	8006ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	4619      	mov	r1, r3
 8007890:	4810      	ldr	r0, [pc, #64]	; (80078d4 <MX_TIM4_Init+0xe4>)
 8007892:	f005 f9df 	bl	800cc54 <HAL_TIMEx_MasterConfigSynchronization>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800789c:	f7ff fb12 	bl	8006ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80078a0:	2360      	movs	r3, #96	; 0x60
 80078a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078ac:	2300      	movs	r3, #0
 80078ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80078b0:	463b      	mov	r3, r7
 80078b2:	2200      	movs	r2, #0
 80078b4:	4619      	mov	r1, r3
 80078b6:	4807      	ldr	r0, [pc, #28]	; (80078d4 <MX_TIM4_Init+0xe4>)
 80078b8:	f004 fb9c 	bl	800bff4 <HAL_TIM_PWM_ConfigChannel>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80078c2:	f7ff faff 	bl	8006ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80078c6:	4803      	ldr	r0, [pc, #12]	; (80078d4 <MX_TIM4_Init+0xe4>)
 80078c8:	f000 f868 	bl	800799c <HAL_TIM_MspPostInit>

}
 80078cc:	bf00      	nop
 80078ce:	3738      	adds	r7, #56	; 0x38
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	24013278 	.word	0x24013278
 80078d8:	40000800 	.word	0x40000800

080078dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80078e2:	1d3b      	adds	r3, r7, #4
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80078f0:	2008      	movs	r0, #8
 80078f2:	f7ff fee1 	bl	80076b8 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80078f6:	f7ff fe0b 	bl	8007510 <__NVIC_GetPriorityGrouping>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2200      	movs	r2, #0
 80078fe:	2103      	movs	r1, #3
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fe5b 	bl	80075bc <NVIC_EncodePriority>
 8007906:	4603      	mov	r3, r0
 8007908:	4619      	mov	r1, r3
 800790a:	2032      	movs	r0, #50	; 0x32
 800790c:	f7ff fe2c 	bl	8007568 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8007910:	2032      	movs	r0, #50	; 0x32
 8007912:	f7ff fe0b 	bl	800752c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8007916:	23ef      	movs	r3, #239	; 0xef
 8007918:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 100;
 800791e:	2364      	movs	r3, #100	; 0x64
 8007920:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8007926:	1d3b      	adds	r3, r7, #4
 8007928:	4619      	mov	r1, r3
 800792a:	480a      	ldr	r0, [pc, #40]	; (8007954 <MX_TIM5_Init+0x78>)
 800792c:	f006 fa3e 	bl	800ddac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8007930:	4808      	ldr	r0, [pc, #32]	; (8007954 <MX_TIM5_Init+0x78>)
 8007932:	f7ff fe76 	bl	8007622 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8007936:	2100      	movs	r1, #0
 8007938:	4806      	ldr	r0, [pc, #24]	; (8007954 <MX_TIM5_Init+0x78>)
 800793a:	f7ff fe83 	bl	8007644 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800793e:	2100      	movs	r1, #0
 8007940:	4804      	ldr	r0, [pc, #16]	; (8007954 <MX_TIM5_Init+0x78>)
 8007942:	f7ff fe95 	bl	8007670 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8007946:	4803      	ldr	r0, [pc, #12]	; (8007954 <MX_TIM5_Init+0x78>)
 8007948:	f7ff fea5 	bl	8007696 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40000c00 	.word	0x40000c00

08007958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <HAL_TIM_Base_MspInit+0x3c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10e      	bne.n	8007988 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800796a:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <HAL_TIM_Base_MspInit+0x40>)
 800796c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007970:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_TIM_Base_MspInit+0x40>)
 8007972:	f043 0304 	orr.w	r3, r3, #4
 8007976:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <HAL_TIM_Base_MspInit+0x40>)
 800797c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	40000800 	.word	0x40000800
 8007998:	58024400 	.word	0x58024400

0800799c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	605a      	str	r2, [r3, #4]
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <HAL_TIM_MspPostInit+0x6c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d11f      	bne.n	80079fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <HAL_TIM_MspPostInit+0x70>)
 80079c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079c4:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <HAL_TIM_MspPostInit+0x70>)
 80079c6:	f043 0308 	orr.w	r3, r3, #8
 80079ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <HAL_TIM_MspPostInit+0x70>)
 80079d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80079dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e2:	2302      	movs	r3, #2
 80079e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80079ee:	2302      	movs	r3, #2
 80079f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	4619      	mov	r1, r3
 80079f8:	4805      	ldr	r0, [pc, #20]	; (8007a10 <HAL_TIM_MspPostInit+0x74>)
 80079fa:	f000 fbc7 	bl	800818c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80079fe:	bf00      	nop
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40000800 	.word	0x40000800
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	58020c00 	.word	0x58020c00

08007a14 <__NVIC_GetPriorityGrouping>:
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <__NVIC_GetPriorityGrouping+0x18>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	0a1b      	lsrs	r3, r3, #8
 8007a1e:	f003 0307 	and.w	r3, r3, #7
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	e000ed00 	.word	0xe000ed00

08007a30 <__NVIC_EnableIRQ>:
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	db0b      	blt.n	8007a5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	f003 021f 	and.w	r2, r3, #31
 8007a48:	4907      	ldr	r1, [pc, #28]	; (8007a68 <__NVIC_EnableIRQ+0x38>)
 8007a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	2001      	movs	r0, #1
 8007a52:	fa00 f202 	lsl.w	r2, r0, r2
 8007a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	e000e100 	.word	0xe000e100

08007a6c <__NVIC_SetPriority>:
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	6039      	str	r1, [r7, #0]
 8007a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	db0a      	blt.n	8007a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	490c      	ldr	r1, [pc, #48]	; (8007ab8 <__NVIC_SetPriority+0x4c>)
 8007a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	440b      	add	r3, r1
 8007a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a94:	e00a      	b.n	8007aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	4908      	ldr	r1, [pc, #32]	; (8007abc <__NVIC_SetPriority+0x50>)
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	3b04      	subs	r3, #4
 8007aa4:	0112      	lsls	r2, r2, #4
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	761a      	strb	r2, [r3, #24]
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	e000e100 	.word	0xe000e100
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <NVIC_EncodePriority>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	; 0x24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	f1c3 0307 	rsb	r3, r3, #7
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	bf28      	it	cs
 8007ade:	2304      	movcs	r3, #4
 8007ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	2b06      	cmp	r3, #6
 8007ae8:	d902      	bls.n	8007af0 <NVIC_EncodePriority+0x30>
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	3b03      	subs	r3, #3
 8007aee:	e000      	b.n	8007af2 <NVIC_EncodePriority+0x32>
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	fa02 f303 	lsl.w	r3, r2, r3
 8007afe:	43da      	mvns	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	401a      	ands	r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b08:	f04f 31ff 	mov.w	r1, #4294967295
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b12:	43d9      	mvns	r1, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b18:	4313      	orrs	r3, r2
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3724      	adds	r7, #36	; 0x24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <LL_USART_Enable>:
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f043 0201 	orr.w	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <LL_USART_DisableFIFO>:
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <LL_USART_SetTXFIFOThreshold>:
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	075b      	lsls	r3, r3, #29
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	609a      	str	r2, [r3, #8]
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <LL_USART_SetRXFIFOThreshold>:
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	065b      	lsls	r3, r3, #25
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	609a      	str	r2, [r3, #8]
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <LL_USART_ConfigAsyncMode>:
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	609a      	str	r2, [r3, #8]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <LL_USART_IsActiveFlag_TEACK>:
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bf6:	d101      	bne.n	8007bfc <LL_USART_IsActiveFlag_TEACK+0x1a>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <LL_USART_IsActiveFlag_TEACK+0x1c>
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <LL_USART_IsActiveFlag_REACK>:
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c1e:	d101      	bne.n	8007c24 <LL_USART_IsActiveFlag_REACK+0x1a>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <LL_USART_IsActiveFlag_REACK+0x1c>
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <LL_AHB4_GRP1_EnableClock>:
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <LL_AHB4_GRP1_EnableClock+0x34>)
 8007c3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007c42:	4909      	ldr	r1, [pc, #36]	; (8007c68 <LL_AHB4_GRP1_EnableClock+0x34>)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <LL_AHB4_GRP1_EnableClock+0x34>)
 8007c4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4013      	ands	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c58:	68fb      	ldr	r3, [r7, #12]
}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	58024400 	.word	0x58024400

08007c6c <LL_APB1_GRP1_EnableClock>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <LL_APB1_GRP1_EnableClock+0x34>)
 8007c76:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007c7a:	4909      	ldr	r1, [pc, #36]	; (8007ca0 <LL_APB1_GRP1_EnableClock+0x34>)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <LL_APB1_GRP1_EnableClock+0x34>)
 8007c86:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c90:	68fb      	ldr	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	58024400 	.word	0x58024400

08007ca4 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b0be      	sub	sp, #248	; 0xf8
 8007ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007caa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007cae:	2220      	movs	r2, #32
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f006 fa80 	bl	800e1b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
 8007cc4:	60da      	str	r2, [r3, #12]
 8007cc6:	611a      	str	r2, [r3, #16]
 8007cc8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	22bc      	movs	r2, #188	; 0xbc
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f006 fa71 	bl	800e1b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cde:	1d3b      	adds	r3, r7, #4
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f002 fe05 	bl	800a8f0 <HAL_RCCEx_PeriphCLKConfig>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 8007cec:	f7ff f8ea 	bl	8006ec4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8007cf0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007cf4:	f7ff ffba 	bl	8007c6c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8007cf8:	2008      	movs	r0, #8
 8007cfa:	f7ff ff9b 	bl	8007c34 <LL_AHB4_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8007cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007d06:	2302      	movs	r3, #2
 8007d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007d1e:	2307      	movs	r3, #7
 8007d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d24:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	482a      	ldr	r0, [pc, #168]	; (8007dd4 <MX_USART3_UART_Init+0x130>)
 8007d2c:	f005 f8f4 	bl	800cf18 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007d30:	f7ff fe70 	bl	8007a14 <__NVIC_GetPriorityGrouping>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2200      	movs	r2, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fec0 	bl	8007ac0 <NVIC_EncodePriority>
 8007d40:	4603      	mov	r3, r0
 8007d42:	4619      	mov	r1, r3
 8007d44:	2027      	movs	r0, #39	; 0x27
 8007d46:	f7ff fe91 	bl	8007a6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8007d4a:	2027      	movs	r0, #39	; 0x27
 8007d4c:	f7ff fe70 	bl	8007a30 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  USART_InitStruct.BaudRate = 9600;
 8007d56:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007d70:	230c      	movs	r3, #12
 8007d72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  LL_USART_Init(USART3, &USART_InitStruct);
 8007d82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007d86:	4619      	mov	r1, r3
 8007d88:	4813      	ldr	r0, [pc, #76]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007d8a:	f006 f941 	bl	800e010 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4811      	ldr	r0, [pc, #68]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007d92:	f7ff fee8 	bl	8007b66 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8007d96:	2100      	movs	r1, #0
 8007d98:	480f      	ldr	r0, [pc, #60]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007d9a:	f7ff fef8 	bl	8007b8e <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8007d9e:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007da0:	f7ff fed1 	bl	8007b46 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 8007da4:	480c      	ldr	r0, [pc, #48]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007da6:	f7ff ff06 	bl	8007bb6 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 8007daa:	480b      	ldr	r0, [pc, #44]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007dac:	f7ff febb 	bl	8007b26 <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8007db0:	bf00      	nop
 8007db2:	4809      	ldr	r0, [pc, #36]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007db4:	f7ff ff15 	bl	8007be2 <LL_USART_IsActiveFlag_TEACK>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f9      	beq.n	8007db2 <MX_USART3_UART_Init+0x10e>
 8007dbe:	4806      	ldr	r0, [pc, #24]	; (8007dd8 <MX_USART3_UART_Init+0x134>)
 8007dc0:	f7ff ff23 	bl	8007c0a <LL_USART_IsActiveFlag_REACK>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f3      	beq.n	8007db2 <MX_USART3_UART_Init+0x10e>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	37f8      	adds	r7, #248	; 0xf8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	58020c00 	.word	0x58020c00
 8007dd8:	40004800 	.word	0x40004800

08007ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e14 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007de0:	f7ff fb34 	bl	800744c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007de4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007de6:	e003      	b.n	8007df0 <LoopCopyDataInit>

08007de8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007de8:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8007dea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007dec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007dee:	3104      	adds	r1, #4

08007df0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007df0:	480a      	ldr	r0, [pc, #40]	; (8007e1c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8007df4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007df6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007df8:	d3f6      	bcc.n	8007de8 <CopyDataInit>
  ldr  r2, =_sbss
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	; (8007e24 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8007dfc:	e002      	b.n	8007e04 <LoopFillZerobss>

08007dfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007dfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e00:	f842 3b04 	str.w	r3, [r2], #4

08007e04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e04:	4b08      	ldr	r3, [pc, #32]	; (8007e28 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8007e06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e08:	d3f9      	bcc.n	8007dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007e0a:	f006 f9b1 	bl	800e170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e0e:	f7fe fcd7 	bl	80067c0 <main>
  bx  lr    
 8007e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007e14:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8007e18:	0801466c 	.word	0x0801466c
  ldr  r0, =_sdata
 8007e1c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8007e20:	2400407c 	.word	0x2400407c
  ldr  r2, =_sbss
 8007e24:	2400407c 	.word	0x2400407c
  ldr  r3, = _ebss
 8007e28:	240132d8 	.word	0x240132d8

08007e2c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e2c:	e7fe      	b.n	8007e2c <ADC3_IRQHandler>
	...

08007e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e36:	2003      	movs	r0, #3
 8007e38:	f000 f968 	bl	800810c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e3c:	f002 fbde 	bl	800a5fc <HAL_RCC_GetSysClockFreq>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <HAL_Init+0x68>)
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	f003 030f 	and.w	r3, r3, #15
 8007e4c:	4913      	ldr	r1, [pc, #76]	; (8007e9c <HAL_Init+0x6c>)
 8007e4e:	5ccb      	ldrb	r3, [r1, r3]
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <HAL_Init+0x68>)
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	4a0e      	ldr	r2, [pc, #56]	; (8007e9c <HAL_Init+0x6c>)
 8007e64:	5cd3      	ldrb	r3, [r2, r3]
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e70:	4a0b      	ldr	r2, [pc, #44]	; (8007ea0 <HAL_Init+0x70>)
 8007e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e74:	4a0b      	ldr	r2, [pc, #44]	; (8007ea4 <HAL_Init+0x74>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f000 f814 	bl	8007ea8 <HAL_InitTick>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e002      	b.n	8007e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007e8a:	f7ff fa11 	bl	80072b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	080145e0 	.word	0x080145e0
 8007ea0:	2400400c 	.word	0x2400400c
 8007ea4:	24004008 	.word	0x24004008

08007ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007eb0:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <HAL_InitTick+0x60>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e021      	b.n	8007f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007ebc:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <HAL_InitTick+0x64>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <HAL_InitTick+0x60>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f94d 	bl	8008172 <HAL_SYSTICK_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e00e      	b.n	8007f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b0f      	cmp	r3, #15
 8007ee6:	d80a      	bhi.n	8007efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	f000 f917 	bl	8008122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ef4:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <HAL_InitTick+0x68>)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e000      	b.n	8007f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	24004014 	.word	0x24004014
 8007f0c:	24004008 	.word	0x24004008
 8007f10:	24004010 	.word	0x24004010

08007f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_IncTick+0x20>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <HAL_IncTick+0x24>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4413      	add	r3, r2
 8007f24:	4a04      	ldr	r2, [pc, #16]	; (8007f38 <HAL_IncTick+0x24>)
 8007f26:	6013      	str	r3, [r2, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	24004014 	.word	0x24004014
 8007f38:	240132c4 	.word	0x240132c4

08007f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8007f40:	4b03      	ldr	r3, [pc, #12]	; (8007f50 <HAL_GetTick+0x14>)
 8007f42:	681b      	ldr	r3, [r3, #0]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	240132c4 	.word	0x240132c4

08007f54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007f58:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <HAL_GetREVID+0x14>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	0c1b      	lsrs	r3, r3, #16
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	5c001000 	.word	0x5c001000

08007f6c <__NVIC_SetPriorityGrouping>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <__NVIC_SetPriorityGrouping+0x40>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f88:	4013      	ands	r3, r2
 8007f8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f9a:	4a04      	ldr	r2, [pc, #16]	; (8007fac <__NVIC_SetPriorityGrouping+0x40>)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	60d3      	str	r3, [r2, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	e000ed00 	.word	0xe000ed00
 8007fb0:	05fa0000 	.word	0x05fa0000

08007fb4 <__NVIC_GetPriorityGrouping>:
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fb8:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <__NVIC_GetPriorityGrouping+0x18>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	0a1b      	lsrs	r3, r3, #8
 8007fbe:	f003 0307 	and.w	r3, r3, #7
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	e000ed00 	.word	0xe000ed00

08007fd0 <__NVIC_EnableIRQ>:
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	db0b      	blt.n	8007ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	f003 021f 	and.w	r2, r3, #31
 8007fe8:	4907      	ldr	r1, [pc, #28]	; (8008008 <__NVIC_EnableIRQ+0x38>)
 8007fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	e000e100 	.word	0xe000e100

0800800c <__NVIC_SetPriority>:
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800801c:	2b00      	cmp	r3, #0
 800801e:	db0a      	blt.n	8008036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b2da      	uxtb	r2, r3
 8008024:	490c      	ldr	r1, [pc, #48]	; (8008058 <__NVIC_SetPriority+0x4c>)
 8008026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800802a:	0112      	lsls	r2, r2, #4
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	440b      	add	r3, r1
 8008030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008034:	e00a      	b.n	800804c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4908      	ldr	r1, [pc, #32]	; (800805c <__NVIC_SetPriority+0x50>)
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	3b04      	subs	r3, #4
 8008044:	0112      	lsls	r2, r2, #4
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	440b      	add	r3, r1
 800804a:	761a      	strb	r2, [r3, #24]
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	e000e100 	.word	0xe000e100
 800805c:	e000ed00 	.word	0xe000ed00

08008060 <NVIC_EncodePriority>:
{
 8008060:	b480      	push	{r7}
 8008062:	b089      	sub	sp, #36	; 0x24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f1c3 0307 	rsb	r3, r3, #7
 800807a:	2b04      	cmp	r3, #4
 800807c:	bf28      	it	cs
 800807e:	2304      	movcs	r3, #4
 8008080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3304      	adds	r3, #4
 8008086:	2b06      	cmp	r3, #6
 8008088:	d902      	bls.n	8008090 <NVIC_EncodePriority+0x30>
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	3b03      	subs	r3, #3
 800808e:	e000      	b.n	8008092 <NVIC_EncodePriority+0x32>
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008094:	f04f 32ff 	mov.w	r2, #4294967295
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	43da      	mvns	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	401a      	ands	r2, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080a8:	f04f 31ff 	mov.w	r1, #4294967295
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	fa01 f303 	lsl.w	r3, r1, r3
 80080b2:	43d9      	mvns	r1, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080b8:	4313      	orrs	r3, r2
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3724      	adds	r7, #36	; 0x24
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080d8:	d301      	bcc.n	80080de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080da:	2301      	movs	r3, #1
 80080dc:	e00f      	b.n	80080fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080de:	4a0a      	ldr	r2, [pc, #40]	; (8008108 <SysTick_Config+0x40>)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080e6:	210f      	movs	r1, #15
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	f7ff ff8e 	bl	800800c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <SysTick_Config+0x40>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080f6:	4b04      	ldr	r3, [pc, #16]	; (8008108 <SysTick_Config+0x40>)
 80080f8:	2207      	movs	r2, #7
 80080fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000e010 	.word	0xe000e010

0800810c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff29 	bl	8007f6c <__NVIC_SetPriorityGrouping>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af00      	add	r7, sp, #0
 8008128:	4603      	mov	r3, r0
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008130:	f7ff ff40 	bl	8007fb4 <__NVIC_GetPriorityGrouping>
 8008134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	6978      	ldr	r0, [r7, #20]
 800813c:	f7ff ff90 	bl	8008060 <NVIC_EncodePriority>
 8008140:	4602      	mov	r2, r0
 8008142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff ff5f 	bl	800800c <__NVIC_SetPriority>
}
 800814e:	bf00      	nop
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	4603      	mov	r3, r0
 800815e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff ff33 	bl	8007fd0 <__NVIC_EnableIRQ>
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff ffa4 	bl	80080c8 <SysTick_Config>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800818c:	b480      	push	{r7}
 800818e:	b089      	sub	sp, #36	; 0x24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800819a:	4b89      	ldr	r3, [pc, #548]	; (80083c0 <HAL_GPIO_Init+0x234>)
 800819c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800819e:	e194      	b.n	80084ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	2101      	movs	r1, #1
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ac:	4013      	ands	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8186 	beq.w	80084c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d00b      	beq.n	80081d8 <HAL_GPIO_Init+0x4c>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d007      	beq.n	80081d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80081cc:	2b11      	cmp	r3, #17
 80081ce:	d003      	beq.n	80081d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b12      	cmp	r3, #18
 80081d6:	d130      	bne.n	800823a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	2203      	movs	r2, #3
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	43db      	mvns	r3, r3
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4313      	orrs	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800820e:	2201      	movs	r2, #1
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43db      	mvns	r3, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4013      	ands	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f003 0201 	and.w	r2, r3, #1
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	4313      	orrs	r3, r2
 8008232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	2203      	movs	r2, #3
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43db      	mvns	r3, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4013      	ands	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4313      	orrs	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d003      	beq.n	800827a <HAL_GPIO_Init+0xee>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b12      	cmp	r3, #18
 8008278:	d123      	bne.n	80082c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	08da      	lsrs	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3208      	adds	r2, #8
 8008282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	220f      	movs	r2, #15
 8008292:	fa02 f303 	lsl.w	r3, r2, r3
 8008296:	43db      	mvns	r3, r3
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	4013      	ands	r3, r2
 800829c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	fa02 f303 	lsl.w	r3, r2, r3
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	08da      	lsrs	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3208      	adds	r2, #8
 80082bc:	69b9      	ldr	r1, [r7, #24]
 80082be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	2203      	movs	r2, #3
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	43db      	mvns	r3, r3
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4013      	ands	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f003 0203 	and.w	r2, r3, #3
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 80e0 	beq.w	80084c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008304:	4b2f      	ldr	r3, [pc, #188]	; (80083c4 <HAL_GPIO_Init+0x238>)
 8008306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800830a:	4a2e      	ldr	r2, [pc, #184]	; (80083c4 <HAL_GPIO_Init+0x238>)
 800830c:	f043 0302 	orr.w	r3, r3, #2
 8008310:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008314:	4b2b      	ldr	r3, [pc, #172]	; (80083c4 <HAL_GPIO_Init+0x238>)
 8008316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008322:	4a29      	ldr	r2, [pc, #164]	; (80083c8 <HAL_GPIO_Init+0x23c>)
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	089b      	lsrs	r3, r3, #2
 8008328:	3302      	adds	r3, #2
 800832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	220f      	movs	r2, #15
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	43db      	mvns	r3, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4013      	ands	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a20      	ldr	r2, [pc, #128]	; (80083cc <HAL_GPIO_Init+0x240>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d052      	beq.n	80083f4 <HAL_GPIO_Init+0x268>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <HAL_GPIO_Init+0x244>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d031      	beq.n	80083ba <HAL_GPIO_Init+0x22e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <HAL_GPIO_Init+0x248>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d02b      	beq.n	80083b6 <HAL_GPIO_Init+0x22a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <HAL_GPIO_Init+0x24c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d025      	beq.n	80083b2 <HAL_GPIO_Init+0x226>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <HAL_GPIO_Init+0x250>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d01f      	beq.n	80083ae <HAL_GPIO_Init+0x222>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <HAL_GPIO_Init+0x254>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d019      	beq.n	80083aa <HAL_GPIO_Init+0x21e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <HAL_GPIO_Init+0x258>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <HAL_GPIO_Init+0x21a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <HAL_GPIO_Init+0x25c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00d      	beq.n	80083a2 <HAL_GPIO_Init+0x216>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a18      	ldr	r2, [pc, #96]	; (80083ec <HAL_GPIO_Init+0x260>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <HAL_GPIO_Init+0x212>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <HAL_GPIO_Init+0x264>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d101      	bne.n	800839a <HAL_GPIO_Init+0x20e>
 8008396:	2309      	movs	r3, #9
 8008398:	e02d      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 800839a:	230a      	movs	r3, #10
 800839c:	e02b      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 800839e:	2308      	movs	r3, #8
 80083a0:	e029      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083a2:	2307      	movs	r3, #7
 80083a4:	e027      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083a6:	2306      	movs	r3, #6
 80083a8:	e025      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083aa:	2305      	movs	r3, #5
 80083ac:	e023      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083ae:	2304      	movs	r3, #4
 80083b0:	e021      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083b2:	2303      	movs	r3, #3
 80083b4:	e01f      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e01d      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e01b      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083be:	bf00      	nop
 80083c0:	58000080 	.word	0x58000080
 80083c4:	58024400 	.word	0x58024400
 80083c8:	58000400 	.word	0x58000400
 80083cc:	58020000 	.word	0x58020000
 80083d0:	58020400 	.word	0x58020400
 80083d4:	58020800 	.word	0x58020800
 80083d8:	58020c00 	.word	0x58020c00
 80083dc:	58021000 	.word	0x58021000
 80083e0:	58021400 	.word	0x58021400
 80083e4:	58021800 	.word	0x58021800
 80083e8:	58021c00 	.word	0x58021c00
 80083ec:	58022000 	.word	0x58022000
 80083f0:	58022400 	.word	0x58022400
 80083f4:	2300      	movs	r3, #0
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	f002 0203 	and.w	r2, r2, #3
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	4093      	lsls	r3, r2
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	4313      	orrs	r3, r2
 8008404:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008406:	4938      	ldr	r1, [pc, #224]	; (80084e8 <HAL_GPIO_Init+0x35c>)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	089b      	lsrs	r3, r3, #2
 800840c:	3302      	adds	r3, #2
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	43db      	mvns	r3, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4013      	ands	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	43db      	mvns	r3, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4013      	ands	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	43db      	mvns	r3, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	4013      	ands	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800848e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4013      	ands	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80084bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f47f ae63 	bne.w	80081a0 <HAL_GPIO_Init+0x14>
  }
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	3724      	adds	r7, #36	; 0x24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	58000400 	.word	0x58000400

080084ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
 80084f8:	4613      	mov	r3, r2
 80084fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084fc:	787b      	ldrb	r3, [r7, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008502:	887a      	ldrh	r2, [r7, #2]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008508:	e003      	b.n	8008512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800850a:	887b      	ldrh	r3, [r7, #2]
 800850c:	041a      	lsls	r2, r3, #16
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	619a      	str	r2, [r3, #24]
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008530:	887a      	ldrh	r2, [r7, #2]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4013      	ands	r3, r2
 8008536:	041a      	lsls	r2, r3, #16
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	43d9      	mvns	r1, r3
 800853c:	887b      	ldrh	r3, [r7, #2]
 800853e:	400b      	ands	r3, r1
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	619a      	str	r2, [r3, #24]
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e041      	b.n	80085e8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800856c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f245 5255 	movw	r2, #21845	; 0x5555
 8008576:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6852      	ldr	r2, [r2, #4]
 8008580:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6892      	ldr	r2, [r2, #8]
 800858a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800858c:	f7ff fcd6 	bl	8007f3c <HAL_GetTick>
 8008590:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008592:	e00f      	b.n	80085b4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008594:	f7ff fcd2 	bl	8007f3c <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b30      	cmp	r3, #48	; 0x30
 80085a0:	d908      	bls.n	80085b4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e019      	b.n	80085e8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e8      	bne.n	8008594 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d005      	beq.n	80085dc <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68d2      	ldr	r2, [r2, #12]
 80085d8:	611a      	str	r2, [r3, #16]
 80085da:	e004      	b.n	80085e6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80085e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008600:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008618:	f7ff fc90 	bl	8007f3c <HAL_GetTick>
 800861c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e03b      	b.n	80086a0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008648:	e00f      	b.n	800866a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800864a:	f7ff fc77 	bl	8007f3c <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b05      	cmp	r3, #5
 8008656:	d908      	bls.n	800866a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2240      	movs	r2, #64	; 0x40
 800865c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2203      	movs	r2, #3
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e01a      	b.n	80086a0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e8      	bne.n	800864a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fad5 	bl	8008c28 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e03e      	b.n	8008740 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_MDMA_ConfigPostRequestMask+0x28>
 80086cc:	2302      	movs	r3, #2
 80086ce:	e037      	b.n	8008740 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d126      	bne.n	8008732 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d11c      	bne.n	800872c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008716:	611a      	str	r2, [r3, #16]
 8008718:	e00d      	b.n	8008736 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008728:	611a      	str	r2, [r3, #16]
 800872a:	e004      	b.n	8008736 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	e001      	b.n	8008736 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008740:	4618      	mov	r0, r3
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af02      	add	r7, sp, #8
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e070      	b.n	8008846 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_MDMA_Start_IT+0x26>
 800876e:	2302      	movs	r3, #2
 8008770:	e069      	b.n	8008846 <HAL_MDMA_Start_IT+0xfa>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b01      	cmp	r3, #1
 8008784:	d158      	bne.n	8008838 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2202      	movs	r2, #2
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0201 	bic.w	r2, r2, #1
 80087a2:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f9ca 	bl	8008b48 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0206 	orr.w	r2, r2, #6
 80087c2:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d007      	beq.n	80087dc <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0210 	orr.w	r2, r2, #16
 80087da:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d007      	beq.n	80087f4 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0208 	orr.w	r2, r2, #8
 80087f2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0220 	orr.w	r2, r2, #32
 800880a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008824:	d10e      	bne.n	8008844 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	e005      	b.n	8008844 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 8008840:	2302      	movs	r3, #2
 8008842:	e000      	b.n	8008846 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e017      	b.n	8008890 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d004      	beq.n	8008876 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2280      	movs	r2, #128	; 0x80
 8008870:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e00c      	b.n	8008890 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2204      	movs	r2, #4
 800887a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80088a8:	4b9a      	ldr	r3, [pc, #616]	; (8008b14 <HAL_MDMA_IRQHandler+0x278>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a9a      	ldr	r2, [pc, #616]	; (8008b18 <HAL_MDMA_IRQHandler+0x27c>)
 80088ae:	fba2 2303 	umull	r2, r3, r2, r3
 80088b2:	0a9b      	lsrs	r3, r3, #10
 80088b4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	4b97      	ldr	r3, [pc, #604]	; (8008b1c <HAL_MDMA_IRQHandler+0x280>)
 80088be:	4413      	add	r3, r2
 80088c0:	099b      	lsrs	r3, r3, #6
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	2201      	movs	r2, #1
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80088ce:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 812e 	beq.w	8008b3a <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d054      	beq.n	8008996 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04d      	beq.n	8008996 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0202 	bic.w	r2, r2, #2
 8008908:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008920:	f043 0201 	orr.w	r2, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	669a      	str	r2, [r3, #104]	; 0x68
 8008928:	e005      	b.n	8008936 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892e:	f043 0202 	orr.w	r2, r3, #2
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008944:	f043 0204 	orr.w	r2, r3, #4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800895a:	f043 0208 	orr.w	r2, r3, #8
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008970:	f043 0210 	orr.w	r2, r3, #16
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008986:	f043 0220 	orr.w	r2, r3, #32
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d012      	beq.n	80089ca <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2210      	movs	r2, #16
 80089b8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f003 0310 	and.w	r3, r3, #16
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2208      	movs	r2, #8
 80089ec:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d012      	beq.n	8008a32 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f003 0308 	and.w	r3, r3, #8
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2204      	movs	r2, #4
 8008a20:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d039      	beq.n	8008ab4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d032      	beq.n	8008ab4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8008a5c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d110      	bne.n	8008a8c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d05d      	beq.n	8008b3e <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
        }
        return;
 8008a8a:	e058      	b.n	8008b3e <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2202      	movs	r2, #2
 8008a92:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d041      	beq.n	8008b40 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2204      	movs	r2, #4
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0201 	bic.w	r2, r2, #1
 8008ad2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60bb      	str	r3, [r7, #8]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d307      	bcc.n	8008af0 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f2      	bne.n	8008ad4 <HAL_MDMA_IRQHandler+0x238>
 8008aee:	e000      	b.n	8008af2 <HAL_MDMA_IRQHandler+0x256>
        break;
 8008af0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b10:	e00a      	b.n	8008b28 <HAL_MDMA_IRQHandler+0x28c>
 8008b12:	bf00      	nop
 8008b14:	24004008 	.word	0x24004008
 8008b18:	1b4e81b5 	.word	0x1b4e81b5
 8008b1c:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
 8008b38:	e002      	b.n	8008b40 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8008b3e:	bf00      	nop
    }
  }
}
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop

08008b48 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695a      	ldr	r2, [r3, #20]
 8008b5c:	4b31      	ldr	r3, [pc, #196]	; (8008c24 <MDMA_SetConfig+0xdc>)
 8008b5e:	4013      	ands	r3, r2
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	051a      	lsls	r2, r3, #20
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	221f      	movs	r2, #31
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bac:	d002      	beq.n	8008bb4 <MDMA_SetConfig+0x6c>
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d108      	bne.n	8008bc6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8008bc4:	e007      	b.n	8008bd6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008bdc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be4:	d002      	beq.n	8008bec <MDMA_SetConfig+0xa4>
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d108      	bne.n	8008bfe <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8008bfc:	e007      	b.n	8008c0e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008c0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008c18:	bf00      	nop
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	fffe0000 	.word	0xfffe0000

08008c28 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68d9      	ldr	r1, [r3, #12]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691a      	ldr	r2, [r3, #16]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008c4e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008c5a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008c66:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008c70:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008c7c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008c7e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c88:	d107      	bne.n	8008c9a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008c98:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	da11      	bge.n	8008cce <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	695a      	ldr	r2, [r3, #20]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008cb8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbe:	425b      	negs	r3, r3
 8008cc0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	621a      	str	r2, [r3, #32]
 8008ccc:	e006      	b.n	8008cdc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	b292      	uxth	r2, r2
 8008cda:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da15      	bge.n	8008d10 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008cf2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	425b      	negs	r3, r3
 8008cfa:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6a19      	ldr	r1, [r3, #32]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	041a      	lsls	r2, r3, #16
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	621a      	str	r2, [r3, #32]
 8008d0e:	e009      	b.n	8008d24 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6a19      	ldr	r1, [r3, #32]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	041a      	lsls	r2, r3, #16
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2c:	d006      	beq.n	8008d3c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	629a      	str	r2, [r3, #40]	; 0x28
 8008d3a:	e003      	b.n	8008d44 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2200      	movs	r2, #0
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008d4c:	bf00      	nop
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d00a      	beq.n	8008d82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d001      	beq.n	8008d7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e01f      	b.n	8008dbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e01d      	b.n	8008dbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d82:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f023 0207 	bic.w	r2, r3, #7
 8008d8a:	490f      	ldr	r1, [pc, #60]	; (8008dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d92:	f7ff f8d3 	bl	8007f3c <HAL_GetTick>
 8008d96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d98:	e009      	b.n	8008dae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d9a:	f7ff f8cf 	bl	8007f3c <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008da8:	d901      	bls.n	8008dae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e007      	b.n	8008dbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dba:	d1ee      	bne.n	8008d9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	58024800 	.word	0x58024800

08008dcc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008dd4:	f7ff f8b2 	bl	8007f3c <HAL_GetTick>
 8008dd8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e05f      	b.n	8008ea4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d107      	bne.n	8008e00 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7fe f8bb 	bl	8006f6c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008df6:	f241 3188 	movw	r1, #5000	; 0x1388
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fc00 	bl	8009600 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	021a      	lsls	r2, r3, #8
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	2120      	movs	r1, #32
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fc65 	bl	80096f6 <QSPI_WaitFlagStateUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d135      	bne.n	8008ea2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <HAL_QSPI_Init+0xe0>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6852      	ldr	r2, [r2, #4]
 8008e44:	0611      	lsls	r1, r2, #24
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68d2      	ldr	r2, [r2, #12]
 8008e4a:	4311      	orrs	r1, r2
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	69d2      	ldr	r2, [r2, #28]
 8008e50:	4311      	orrs	r1, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6a12      	ldr	r2, [r2, #32]
 8008e56:	4311      	orrs	r1, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	430b      	orrs	r3, r1
 8008e5e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <HAL_QSPI_Init+0xe4>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6912      	ldr	r2, [r2, #16]
 8008e6e:	0411      	lsls	r1, r2, #16
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6952      	ldr	r2, [r2, #20]
 8008e74:	4311      	orrs	r1, r2
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6992      	ldr	r2, [r2, #24]
 8008e7a:	4311      	orrs	r1, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6812      	ldr	r2, [r2, #0]
 8008e80:	430b      	orrs	r3, r1
 8008e82:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f042 0201 	orr.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	00ffff2f 	.word	0x00ffff2f
 8008eb0:	ffe0f8fe 	.word	0xffe0f8fe

08008eb4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d064      	beq.n	8008fa0 <HAL_QSPI_IRQHandler+0xec>
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d05f      	beq.n	8008fa0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3320      	adds	r3, #32
 8008ee6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b12      	cmp	r3, #18
 8008ef2:	d125      	bne.n	8008f40 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008ef4:	e01c      	b.n	8008f30 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00f      	beq.n	8008f1e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	781a      	ldrb	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f1c:	e008      	b.n	8008f30 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f2c:	601a      	str	r2, [r3, #0]
          break;
 8008f2e:	e033      	b.n	8008f98 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1db      	bne.n	8008ef6 <HAL_QSPI_IRQHandler+0x42>
 8008f3e:	e02b      	b.n	8008f98 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b22      	cmp	r3, #34	; 0x22
 8008f4a:	d125      	bne.n	8008f98 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008f4c:	e01d      	b.n	8008f8a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d010      	beq.n	8008f78 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	1e5a      	subs	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
 8008f76:	e008      	b.n	8008f8a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f86:	601a      	str	r2, [r3, #0]
          break;
 8008f88:	e006      	b.n	8008f98 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1da      	bne.n	8008f4e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fab7 	bl	800950c <HAL_QSPI_FifoThresholdCallback>
 8008f9e:	e13c      	b.n	800921a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80b0 	beq.w	800910c <HAL_QSPI_IRQHandler+0x258>
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 80aa 	beq.w	800910c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008fce:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b12      	cmp	r3, #18
 8008fda:	d120      	bne.n	800901e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0204 	bic.w	r2, r2, #4
 8008ff8:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0201 	bic.w	r2, r2, #1
 800900c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f7 ff34 	bl	8000e84 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800901c:	e0fa      	b.n	8009214 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b22      	cmp	r3, #34	; 0x22
 8009028:	d143      	bne.n	80090b2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0204 	bic.w	r2, r2, #4
 8009046:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	60da      	str	r2, [r3, #12]
 800905c:	e021      	b.n	80090a2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3320      	adds	r3, #32
 8009064:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8009066:	e013      	b.n	8009090 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	2b00      	cmp	r3, #0
 800906e:	d017      	beq.n	80090a0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	7812      	ldrb	r2, [r2, #0]
 8009078:	b2d2      	uxtb	r2, r2
 800907a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	1e5a      	subs	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e4      	bne.n	8009068 <HAL_QSPI_IRQHandler+0x1b4>
 800909e:	e000      	b.n	80090a2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80090a0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa24 	bl	80094f8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80090b0:	e0b0      	b.n	8009214 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d107      	bne.n	80090ce <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa0c 	bl	80094e4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80090cc:	e0a2      	b.n	8009214 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b08      	cmp	r3, #8
 80090d8:	f040 809c 	bne.w	8009214 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	695a      	ldr	r2, [r3, #20]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80090ea:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f9e7 	bl	80094d0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009102:	e087      	b.n	8009214 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9d9 	bl	80094bc <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800910a:	e083      	b.n	8009214 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01f      	beq.n	8009156 <HAL_QSPI_IRQHandler+0x2a2>
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01a      	beq.n	8009156 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2208      	movs	r2, #8
 8009126:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00b      	beq.n	800914e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8009144:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9e6 	bl	8009520 <HAL_QSPI_StatusMatchCallback>
 8009154:	e061      	b.n	800921a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	2b00      	cmp	r3, #0
 800915e:	d047      	beq.n	80091f0 <HAL_QSPI_IRQHandler+0x33c>
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d042      	beq.n	80091f0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2201      	movs	r2, #1
 8009170:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009180:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009186:	f043 0202 	orr.w	r2, r3, #2
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b00      	cmp	r3, #0
 800919a:	d021      	beq.n	80091e0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0204 	bic.w	r2, r2, #4
 80091aa:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b0:	4a1c      	ldr	r2, [pc, #112]	; (8009224 <HAL_QSPI_IRQHandler+0x370>)
 80091b2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fb48 	bl	800884e <HAL_MDMA_Abort_IT>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d029      	beq.n	8009218 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c8:	f043 0204 	orr.w	r2, r3, #4
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f96f 	bl	80094bc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80091de:	e01b      	b.n	8009218 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f967 	bl	80094bc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80091ee:	e013      	b.n	8009218 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00f      	beq.n	800921a <HAL_QSPI_IRQHandler+0x366>
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2210      	movs	r2, #16
 800920a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f991 	bl	8009534 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8009212:	e002      	b.n	800921a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009214:	bf00      	nop
 8009216:	e000      	b.n	800921a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009218:	bf00      	nop
}
 800921a:	bf00      	nop
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	08009691 	.word	0x08009691

08009228 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009234:	f7fe fe82 	bl	8007f3c <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b01      	cmp	r3, #1
 8009244:	d101      	bne.n	800924a <HAL_QSPI_Command+0x22>
 8009246:	2302      	movs	r3, #2
 8009248:	e048      	b.n	80092dc <HAL_QSPI_Command+0xb4>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b01      	cmp	r3, #1
 800925c:	d137      	bne.n	80092ce <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2200      	movs	r2, #0
 8009274:	2120      	movs	r1, #32
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fa3d 	bl	80096f6 <QSPI_WaitFlagStateUntilTimeout>
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d125      	bne.n	80092d2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009286:	2200      	movs	r2, #0
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 fa6a 	bl	8009764 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	d115      	bne.n	80092c4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2201      	movs	r2, #1
 80092a0:	2102      	movs	r1, #2
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fa27 	bl	80096f6 <QSPI_WaitFlagStateUntilTimeout>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10f      	bne.n	80092d2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2202      	movs	r2, #2
 80092b8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092c2:	e006      	b.n	80092d2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092cc:	e001      	b.n	80092d2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80092ce:	2302      	movs	r3, #2
 80092d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_QSPI_Transmit_DMA>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 80092e4:	b590      	push	{r4, r7, lr}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_QSPI_Transmit_DMA+0x28>
 8009308:	2302      	movs	r3, #2
 800930a:	e0cb      	b.n	80094a4 <HAL_QSPI_Transmit_DMA+0x1c0>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 80ba 	bne.w	8009496 <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 80a6 	beq.w	800947c <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2212      	movs	r2, #18
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2203      	movs	r2, #3
 8009344:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695a      	ldr	r2, [r3, #20]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009362:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009368:	4a50      	ldr	r2, [pc, #320]	; (80094ac <HAL_QSPI_Transmit_DMA+0x1c8>)
 800936a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009370:	4a4f      	ldr	r2, [pc, #316]	; (80094b0 <HAL_QSPI_Transmit_DMA+0x1cc>)
 8009372:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009378:	2200      	movs	r2, #0
 800937a:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6919      	ldr	r1, [r3, #16]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b4a      	ldr	r3, [pc, #296]	; (80094b4 <HAL_QSPI_Transmit_DMA+0x1d0>)
 800938c:	400b      	ands	r3, r1
 800938e:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10c      	bne.n	80093b4 <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	4b45      	ldr	r3, [pc, #276]	; (80094b8 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	f043 0302 	orr.w	r3, r3, #2
 80093b0:	6113      	str	r3, [r2, #16]
 80093b2:	e02c      	b.n	800940e <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	2b10      	cmp	r3, #16
 80093bc:	d10c      	bne.n	80093d8 <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	691a      	ldr	r2, [r3, #16]
 80093c6:	4b3c      	ldr	r3, [pc, #240]	; (80094b8 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80093d4:	6113      	str	r3, [r2, #16]
 80093d6:	e01a      	b.n	800940e <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d10d      	bne.n	80093fe <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	4a33      	ldr	r2, [pc, #204]	; (80094b8 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80093ec:	401a      	ands	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f2:	6819      	ldr	r1, [r3, #0]
 80093f4:	f240 2302 	movw	r3, #514	; 0x202
 80093f8:	4313      	orrs	r3, r2
 80093fa:	610b      	str	r3, [r1, #16]
 80093fc:	e007      	b.n	800940e <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009402:	f043 0204 	orr.w	r2, r3, #4
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3320      	adds	r3, #32
 800941a:	461c      	mov	r4, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	2201      	movs	r2, #1
 8009422:	9200      	str	r2, [sp, #0]
 8009424:	4622      	mov	r2, r4
 8009426:	f7ff f991 	bl	800874c <HAL_MDMA_Start_IT>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d114      	bne.n	800945a <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009446:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0204 	orr.w	r2, r2, #4
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	e023      	b.n	80094a2 <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009462:	f043 0204 	orr.w	r2, r3, #4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800947a:	e012      	b.n	80094a2 <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009480:	f043 0208 	orr.w	r2, r3, #8
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009494:	e005      	b.n	80094a2 <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
 8009496:	2302      	movs	r3, #2
 8009498:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd90      	pop	{r4, r7, pc}
 80094ac:	0800961d 	.word	0x0800961d
 80094b0:	0800964d 	.word	0x0800964d
 80094b4:	fffff3f3 	.word	0xfffff3f3
 80094b8:	fffffcfc 	.word	0xfffffcfc

080094bc <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d046      	beq.n	80095f2 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2208      	movs	r2, #8
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8009582:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01b      	beq.n	80095ca <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0204 	bic.w	r2, r2, #4
 80095a0:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a6:	4a15      	ldr	r2, [pc, #84]	; (80095fc <HAL_QSPI_Abort_IT+0xb4>)
 80095a8:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff f94d 	bl	800884e <HAL_MDMA_Abort_IT>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01b      	beq.n	80095f2 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff ff84 	bl	80094d0 <HAL_QSPI_AbortCpltCallback>
 80095c8:	e013      	b.n	80095f2 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2202      	movs	r2, #2
 80095d0:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80095e0:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f042 0202 	orr.w	r2, r2, #2
 80095f0:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	08009691 	.word	0x08009691

08009600 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800963e:	601a      	str	r2, [r3, #0]
}
 8009640:	bf00      	nop
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966a:	f043 0204 	orr.w	r2, r3, #4
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0204 	bic.w	r2, r2, #4
 8009680:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff ff60 	bl	8009548 <HAL_QSPI_Abort_IT>

}
 8009688:	bf00      	nop
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b08      	cmp	r3, #8
 80096b4:	d114      	bne.n	80096e0 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2202      	movs	r2, #2
 80096bc:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096cc:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0202 	orr.w	r2, r2, #2
 80096dc:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80096de:	e006      	b.n	80096ee <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7ff fee7 	bl	80094bc <HAL_QSPI_ErrorCallback>
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	603b      	str	r3, [r7, #0]
 8009702:	4613      	mov	r3, r2
 8009704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009706:	e01a      	b.n	800973e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970e:	d016      	beq.n	800973e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009710:	f7fe fc14 	bl	8007f3c <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	429a      	cmp	r2, r3
 800971e:	d302      	bcc.n	8009726 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10b      	bne.n	800973e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2204      	movs	r2, #4
 800972a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009732:	f043 0201 	orr.w	r2, r3, #1
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e00e      	b.n	800975c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4013      	ands	r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	bf14      	ite	ne
 800974c:	2301      	movne	r3, #1
 800974e:	2300      	moveq	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	461a      	mov	r2, r3
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	429a      	cmp	r2, r3
 8009758:	d1d6      	bne.n	8009708 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d009      	beq.n	800978c <QSPI_Config+0x28>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800977e:	d005      	beq.n	800978c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3a01      	subs	r2, #1
 800978a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 80b9 	beq.w	8009908 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d05f      	beq.n	800985e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	6892      	ldr	r2, [r2, #8]
 80097a6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d031      	beq.n	8009814 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b8:	431a      	orrs	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	431a      	orrs	r2, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	049b      	lsls	r3, r3, #18
 80097cc:	431a      	orrs	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	431a      	orrs	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	431a      	orrs	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	431a      	orrs	r2, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	431a      	orrs	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	ea42 0103 	orr.w	r1, r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009804:	f000 812e 	beq.w	8009a64 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	6852      	ldr	r2, [r2, #4]
 8009810:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009812:	e127      	b.n	8009a64 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	431a      	orrs	r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009822:	431a      	orrs	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	431a      	orrs	r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	049b      	lsls	r3, r3, #18
 8009830:	431a      	orrs	r2, r3
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	431a      	orrs	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	431a      	orrs	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	431a      	orrs	r2, r3
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	431a      	orrs	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	ea42 0103 	orr.w	r1, r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	430a      	orrs	r2, r1
 800985a:	615a      	str	r2, [r3, #20]
}
 800985c:	e102      	b.n	8009a64 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d02e      	beq.n	80098c4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	431a      	orrs	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009874:	431a      	orrs	r2, r3
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987a:	431a      	orrs	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	049b      	lsls	r3, r3, #18
 8009882:	431a      	orrs	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	431a      	orrs	r2, r3
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	431a      	orrs	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	431a      	orrs	r2, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	ea42 0103 	orr.w	r1, r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80098b4:	f000 80d6 	beq.w	8009a64 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	6852      	ldr	r2, [r2, #4]
 80098c0:	619a      	str	r2, [r3, #24]
}
 80098c2:	e0cf      	b.n	8009a64 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	431a      	orrs	r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d2:	431a      	orrs	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	431a      	orrs	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	049b      	lsls	r3, r3, #18
 80098e0:	431a      	orrs	r2, r3
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	431a      	orrs	r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	431a      	orrs	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	ea42 0103 	orr.w	r1, r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	430a      	orrs	r2, r1
 8009904:	615a      	str	r2, [r3, #20]
}
 8009906:	e0ad      	b.n	8009a64 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d058      	beq.n	80099c2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	6892      	ldr	r2, [r2, #8]
 8009918:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d02d      	beq.n	800997e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992a:	431a      	orrs	r2, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	431a      	orrs	r2, r3
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	431a      	orrs	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	049b      	lsls	r3, r3, #18
 800993e:	431a      	orrs	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	431a      	orrs	r2, r3
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	431a      	orrs	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	431a      	orrs	r2, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	431a      	orrs	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	ea42 0103 	orr.w	r1, r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	430a      	orrs	r2, r1
 8009968:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009970:	d078      	beq.n	8009a64 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	6852      	ldr	r2, [r2, #4]
 800997a:	619a      	str	r2, [r3, #24]
}
 800997c:	e072      	b.n	8009a64 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	431a      	orrs	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998c:	431a      	orrs	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	431a      	orrs	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	049b      	lsls	r3, r3, #18
 800999a:	431a      	orrs	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	ea42 0103 	orr.w	r1, r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	430a      	orrs	r2, r1
 80099be:	615a      	str	r2, [r3, #20]
}
 80099c0:	e050      	b.n	8009a64 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d02a      	beq.n	8009a20 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d2:	431a      	orrs	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d8:	431a      	orrs	r2, r3
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	431a      	orrs	r2, r3
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	049b      	lsls	r3, r3, #18
 80099e6:	431a      	orrs	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	ea42 0103 	orr.w	r1, r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009a12:	d027      	beq.n	8009a64 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	6852      	ldr	r2, [r2, #4]
 8009a1c:	619a      	str	r2, [r3, #24]
}
 8009a1e:	e021      	b.n	8009a64 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01d      	beq.n	8009a64 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	431a      	orrs	r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a36:	431a      	orrs	r2, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	049b      	lsls	r3, r3, #18
 8009a44:	431a      	orrs	r2, r3
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	431a      	orrs	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	ea42 0103 	orr.w	r1, r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	615a      	str	r2, [r3, #20]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08c      	sub	sp, #48	; 0x30
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e3ff      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8087 	beq.w	8009b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a90:	4b99      	ldr	r3, [pc, #612]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a9a:	4b97      	ldr	r3, [pc, #604]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	2b10      	cmp	r3, #16
 8009aa4:	d007      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x46>
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b18      	cmp	r3, #24
 8009aaa:	d110      	bne.n	8009ace <HAL_RCC_OscConfig+0x5e>
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	f003 0303 	and.w	r3, r3, #3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d10b      	bne.n	8009ace <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab6:	4b90      	ldr	r3, [pc, #576]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d06c      	beq.n	8009b9c <HAL_RCC_OscConfig+0x12c>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d168      	bne.n	8009b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e3d9      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad6:	d106      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x76>
 8009ad8:	4b87      	ldr	r3, [pc, #540]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a86      	ldr	r2, [pc, #536]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	e02e      	b.n	8009b44 <HAL_RCC_OscConfig+0xd4>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10c      	bne.n	8009b08 <HAL_RCC_OscConfig+0x98>
 8009aee:	4b82      	ldr	r3, [pc, #520]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a81      	ldr	r2, [pc, #516]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	4b7f      	ldr	r3, [pc, #508]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a7e      	ldr	r2, [pc, #504]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e01d      	b.n	8009b44 <HAL_RCC_OscConfig+0xd4>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b10:	d10c      	bne.n	8009b2c <HAL_RCC_OscConfig+0xbc>
 8009b12:	4b79      	ldr	r3, [pc, #484]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a78      	ldr	r2, [pc, #480]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	4b76      	ldr	r3, [pc, #472]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a75      	ldr	r2, [pc, #468]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	e00b      	b.n	8009b44 <HAL_RCC_OscConfig+0xd4>
 8009b2c:	4b72      	ldr	r3, [pc, #456]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a71      	ldr	r2, [pc, #452]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4b6f      	ldr	r3, [pc, #444]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a6e      	ldr	r2, [pc, #440]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d013      	beq.n	8009b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4c:	f7fe f9f6 	bl	8007f3c <HAL_GetTick>
 8009b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b54:	f7fe f9f2 	bl	8007f3c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b64      	cmp	r3, #100	; 0x64
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e38d      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b66:	4b64      	ldr	r3, [pc, #400]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0f0      	beq.n	8009b54 <HAL_RCC_OscConfig+0xe4>
 8009b72:	e014      	b.n	8009b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7fe f9e2 	bl	8007f3c <HAL_GetTick>
 8009b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b7c:	f7fe f9de 	bl	8007f3c <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b64      	cmp	r3, #100	; 0x64
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e379      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b8e:	4b5a      	ldr	r3, [pc, #360]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0x10c>
 8009b9a:	e000      	b.n	8009b9e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 80ae 	beq.w	8009d08 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bac:	4b52      	ldr	r3, [pc, #328]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bb6:	4b50      	ldr	r3, [pc, #320]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x162>
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	2b18      	cmp	r3, #24
 8009bc6:	d13a      	bne.n	8009c3e <HAL_RCC_OscConfig+0x1ce>
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d135      	bne.n	8009c3e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bd2:	4b49      	ldr	r3, [pc, #292]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d005      	beq.n	8009bea <HAL_RCC_OscConfig+0x17a>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e34b      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bea:	f7fe f9b3 	bl	8007f54 <HAL_GetREVID>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d817      	bhi.n	8009c28 <HAL_RCC_OscConfig+0x1b8>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	2b40      	cmp	r3, #64	; 0x40
 8009bfe:	d108      	bne.n	8009c12 <HAL_RCC_OscConfig+0x1a2>
 8009c00:	4b3d      	ldr	r3, [pc, #244]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c08:	4a3b      	ldr	r2, [pc, #236]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c0e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c10:	e07a      	b.n	8009d08 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c12:	4b39      	ldr	r3, [pc, #228]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	031b      	lsls	r3, r3, #12
 8009c20:	4935      	ldr	r1, [pc, #212]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c26:	e06f      	b.n	8009d08 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c28:	4b33      	ldr	r3, [pc, #204]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	061b      	lsls	r3, r3, #24
 8009c36:	4930      	ldr	r1, [pc, #192]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c3c:	e064      	b.n	8009d08 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d045      	beq.n	8009cd2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c46:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f023 0219 	bic.w	r2, r3, #25
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	4929      	ldr	r1, [pc, #164]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c58:	f7fe f970 	bl	8007f3c <HAL_GetTick>
 8009c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c5e:	e008      	b.n	8009c72 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c60:	f7fe f96c 	bl	8007f3c <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e307      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c72:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0304 	and.w	r3, r3, #4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0f0      	beq.n	8009c60 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c7e:	f7fe f969 	bl	8007f54 <HAL_GetREVID>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d817      	bhi.n	8009cbc <HAL_RCC_OscConfig+0x24c>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	d108      	bne.n	8009ca6 <HAL_RCC_OscConfig+0x236>
 8009c94:	4b18      	ldr	r3, [pc, #96]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c9c:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca2:	6053      	str	r3, [r2, #4]
 8009ca4:	e030      	b.n	8009d08 <HAL_RCC_OscConfig+0x298>
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	031b      	lsls	r3, r3, #12
 8009cb4:	4910      	ldr	r1, [pc, #64]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	604b      	str	r3, [r1, #4]
 8009cba:	e025      	b.n	8009d08 <HAL_RCC_OscConfig+0x298>
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	061b      	lsls	r3, r3, #24
 8009cca:	490b      	ldr	r1, [pc, #44]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	604b      	str	r3, [r1, #4]
 8009cd0:	e01a      	b.n	8009d08 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <HAL_RCC_OscConfig+0x288>)
 8009cd8:	f023 0301 	bic.w	r3, r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cde:	f7fe f92d 	bl	8007f3c <HAL_GetTick>
 8009ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ce4:	e00a      	b.n	8009cfc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ce6:	f7fe f929 	bl	8007f3c <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d903      	bls.n	8009cfc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e2c4      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
 8009cf8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cfc:	4ba4      	ldr	r3, [pc, #656]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1ee      	bne.n	8009ce6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 80a9 	beq.w	8009e68 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d16:	4b9e      	ldr	r3, [pc, #632]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d20:	4b9b      	ldr	r3, [pc, #620]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d007      	beq.n	8009d3c <HAL_RCC_OscConfig+0x2cc>
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b18      	cmp	r3, #24
 8009d30:	d13a      	bne.n	8009da8 <HAL_RCC_OscConfig+0x338>
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f003 0303 	and.w	r3, r3, #3
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d135      	bne.n	8009da8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d3c:	4b94      	ldr	r3, [pc, #592]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_RCC_OscConfig+0x2e4>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	2b80      	cmp	r3, #128	; 0x80
 8009d4e:	d001      	beq.n	8009d54 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e296      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d54:	f7fe f8fe 	bl	8007f54 <HAL_GetREVID>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d817      	bhi.n	8009d92 <HAL_RCC_OscConfig+0x322>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	d108      	bne.n	8009d7c <HAL_RCC_OscConfig+0x30c>
 8009d6a:	4b89      	ldr	r3, [pc, #548]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d72:	4a87      	ldr	r2, [pc, #540]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d7a:	e075      	b.n	8009e68 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d7c:	4b84      	ldr	r3, [pc, #528]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a1b      	ldr	r3, [r3, #32]
 8009d88:	069b      	lsls	r3, r3, #26
 8009d8a:	4981      	ldr	r1, [pc, #516]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d90:	e06a      	b.n	8009e68 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d92:	4b7f      	ldr	r3, [pc, #508]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	061b      	lsls	r3, r3, #24
 8009da0:	497b      	ldr	r1, [pc, #492]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009da6:	e05f      	b.n	8009e68 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d042      	beq.n	8009e36 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009db0:	4b77      	ldr	r3, [pc, #476]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a76      	ldr	r2, [pc, #472]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dbc:	f7fe f8be 	bl	8007f3c <HAL_GetTick>
 8009dc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dc2:	e008      	b.n	8009dd6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009dc4:	f7fe f8ba 	bl	8007f3c <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d901      	bls.n	8009dd6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e255      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dd6:	4b6e      	ldr	r3, [pc, #440]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0f0      	beq.n	8009dc4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009de2:	f7fe f8b7 	bl	8007f54 <HAL_GetREVID>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d817      	bhi.n	8009e20 <HAL_RCC_OscConfig+0x3b0>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d108      	bne.n	8009e0a <HAL_RCC_OscConfig+0x39a>
 8009df8:	4b65      	ldr	r3, [pc, #404]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e00:	4a63      	ldr	r2, [pc, #396]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e06:	6053      	str	r3, [r2, #4]
 8009e08:	e02e      	b.n	8009e68 <HAL_RCC_OscConfig+0x3f8>
 8009e0a:	4b61      	ldr	r3, [pc, #388]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	069b      	lsls	r3, r3, #26
 8009e18:	495d      	ldr	r1, [pc, #372]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	604b      	str	r3, [r1, #4]
 8009e1e:	e023      	b.n	8009e68 <HAL_RCC_OscConfig+0x3f8>
 8009e20:	4b5b      	ldr	r3, [pc, #364]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	061b      	lsls	r3, r3, #24
 8009e2e:	4958      	ldr	r1, [pc, #352]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60cb      	str	r3, [r1, #12]
 8009e34:	e018      	b.n	8009e68 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e36:	4b56      	ldr	r3, [pc, #344]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a55      	ldr	r2, [pc, #340]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e42:	f7fe f87b 	bl	8007f3c <HAL_GetTick>
 8009e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e48:	e008      	b.n	8009e5c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e4a:	f7fe f877 	bl	8007f3c <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d901      	bls.n	8009e5c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e212      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e5c:	4b4c      	ldr	r3, [pc, #304]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1f0      	bne.n	8009e4a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d036      	beq.n	8009ee2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d019      	beq.n	8009eb0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e7c:	4b44      	ldr	r3, [pc, #272]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e80:	4a43      	ldr	r2, [pc, #268]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e88:	f7fe f858 	bl	8007f3c <HAL_GetTick>
 8009e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e8e:	e008      	b.n	8009ea2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e90:	f7fe f854 	bl	8007f3c <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d901      	bls.n	8009ea2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e1ef      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ea2:	4b3b      	ldr	r3, [pc, #236]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0f0      	beq.n	8009e90 <HAL_RCC_OscConfig+0x420>
 8009eae:	e018      	b.n	8009ee2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009eb0:	4b37      	ldr	r3, [pc, #220]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb4:	4a36      	ldr	r2, [pc, #216]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009eb6:	f023 0301 	bic.w	r3, r3, #1
 8009eba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ebc:	f7fe f83e 	bl	8007f3c <HAL_GetTick>
 8009ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ec2:	e008      	b.n	8009ed6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ec4:	f7fe f83a 	bl	8007f3c <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d901      	bls.n	8009ed6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e1d5      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ed6:	4b2e      	ldr	r3, [pc, #184]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1f0      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d036      	beq.n	8009f5c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d019      	beq.n	8009f2a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ef6:	4b26      	ldr	r3, [pc, #152]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a25      	ldr	r2, [pc, #148]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f02:	f7fe f81b 	bl	8007f3c <HAL_GetTick>
 8009f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f08:	e008      	b.n	8009f1c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f0a:	f7fe f817 	bl	8007f3c <HAL_GetTick>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d901      	bls.n	8009f1c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e1b2      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f1c:	4b1c      	ldr	r3, [pc, #112]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0f0      	beq.n	8009f0a <HAL_RCC_OscConfig+0x49a>
 8009f28:	e018      	b.n	8009f5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f2a:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a18      	ldr	r2, [pc, #96]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f36:	f7fe f801 	bl	8007f3c <HAL_GetTick>
 8009f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f3c:	e008      	b.n	8009f50 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f3e:	f7fd fffd 	bl	8007f3c <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d901      	bls.n	8009f50 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e198      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <HAL_RCC_OscConfig+0x520>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f0      	bne.n	8009f3e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 8085 	beq.w	800a074 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <HAL_RCC_OscConfig+0x524>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a09      	ldr	r2, [pc, #36]	; (8009f94 <HAL_RCC_OscConfig+0x524>)
 8009f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f76:	f7fd ffe1 	bl	8007f3c <HAL_GetTick>
 8009f7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f7c:	e00c      	b.n	8009f98 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f7e:	f7fd ffdd 	bl	8007f3c <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b64      	cmp	r3, #100	; 0x64
 8009f8a:	d905      	bls.n	8009f98 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e178      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
 8009f90:	58024400 	.word	0x58024400
 8009f94:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f98:	4b96      	ldr	r3, [pc, #600]	; (800a1f4 <HAL_RCC_OscConfig+0x784>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d0ec      	beq.n	8009f7e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d106      	bne.n	8009fba <HAL_RCC_OscConfig+0x54a>
 8009fac:	4b92      	ldr	r3, [pc, #584]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb0:	4a91      	ldr	r2, [pc, #580]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fb2:	f043 0301 	orr.w	r3, r3, #1
 8009fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fb8:	e02d      	b.n	800a016 <HAL_RCC_OscConfig+0x5a6>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10c      	bne.n	8009fdc <HAL_RCC_OscConfig+0x56c>
 8009fc2:	4b8d      	ldr	r3, [pc, #564]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc6:	4a8c      	ldr	r2, [pc, #560]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fc8:	f023 0301 	bic.w	r3, r3, #1
 8009fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8009fce:	4b8a      	ldr	r3, [pc, #552]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd2:	4a89      	ldr	r2, [pc, #548]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fd4:	f023 0304 	bic.w	r3, r3, #4
 8009fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8009fda:	e01c      	b.n	800a016 <HAL_RCC_OscConfig+0x5a6>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b05      	cmp	r3, #5
 8009fe2:	d10c      	bne.n	8009ffe <HAL_RCC_OscConfig+0x58e>
 8009fe4:	4b84      	ldr	r3, [pc, #528]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe8:	4a83      	ldr	r2, [pc, #524]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009fea:	f043 0304 	orr.w	r3, r3, #4
 8009fee:	6713      	str	r3, [r2, #112]	; 0x70
 8009ff0:	4b81      	ldr	r3, [pc, #516]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	4a80      	ldr	r2, [pc, #512]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 8009ff6:	f043 0301 	orr.w	r3, r3, #1
 8009ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8009ffc:	e00b      	b.n	800a016 <HAL_RCC_OscConfig+0x5a6>
 8009ffe:	4b7e      	ldr	r3, [pc, #504]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	4a7d      	ldr	r2, [pc, #500]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a004:	f023 0301 	bic.w	r3, r3, #1
 800a008:	6713      	str	r3, [r2, #112]	; 0x70
 800a00a:	4b7b      	ldr	r3, [pc, #492]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00e:	4a7a      	ldr	r2, [pc, #488]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a010:	f023 0304 	bic.w	r3, r3, #4
 800a014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d015      	beq.n	800a04a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a01e:	f7fd ff8d 	bl	8007f3c <HAL_GetTick>
 800a022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a024:	e00a      	b.n	800a03c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a026:	f7fd ff89 	bl	8007f3c <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	f241 3288 	movw	r2, #5000	; 0x1388
 800a034:	4293      	cmp	r3, r2
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e122      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a03c:	4b6e      	ldr	r3, [pc, #440]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0ee      	beq.n	800a026 <HAL_RCC_OscConfig+0x5b6>
 800a048:	e014      	b.n	800a074 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a04a:	f7fd ff77 	bl	8007f3c <HAL_GetTick>
 800a04e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a050:	e00a      	b.n	800a068 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a052:	f7fd ff73 	bl	8007f3c <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a060:	4293      	cmp	r3, r2
 800a062:	d901      	bls.n	800a068 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e10c      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a068:	4b63      	ldr	r3, [pc, #396]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1ee      	bne.n	800a052 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 8101 	beq.w	800a280 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a07e:	4b5e      	ldr	r3, [pc, #376]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a086:	2b18      	cmp	r3, #24
 800a088:	f000 80bc 	beq.w	800a204 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b02      	cmp	r3, #2
 800a092:	f040 8095 	bne.w	800a1c0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a096:	4b58      	ldr	r3, [pc, #352]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a57      	ldr	r2, [pc, #348]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a09c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a2:	f7fd ff4b 	bl	8007f3c <HAL_GetTick>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0a8:	e008      	b.n	800a0bc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0aa:	f7fd ff47 	bl	8007f3c <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d901      	bls.n	800a0bc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e0e2      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0bc:	4b4e      	ldr	r3, [pc, #312]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1f0      	bne.n	800a0aa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0c8:	4b4b      	ldr	r3, [pc, #300]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a0ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0cc:	4b4b      	ldr	r3, [pc, #300]	; (800a1fc <HAL_RCC_OscConfig+0x78c>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0d8:	0112      	lsls	r2, r2, #4
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	4946      	ldr	r1, [pc, #280]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	628b      	str	r3, [r1, #40]	; 0x28
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	025b      	lsls	r3, r3, #9
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a104:	431a      	orrs	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	3b01      	subs	r3, #1
 800a10c:	061b      	lsls	r3, r3, #24
 800a10e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a112:	4939      	ldr	r1, [pc, #228]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a114:	4313      	orrs	r3, r2
 800a116:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a118:	4b37      	ldr	r3, [pc, #220]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	4a36      	ldr	r2, [pc, #216]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a11e:	f023 0301 	bic.w	r3, r3, #1
 800a122:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a124:	4b34      	ldr	r3, [pc, #208]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a128:	4b35      	ldr	r3, [pc, #212]	; (800a200 <HAL_RCC_OscConfig+0x790>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a130:	00d2      	lsls	r2, r2, #3
 800a132:	4931      	ldr	r1, [pc, #196]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a134:	4313      	orrs	r3, r2
 800a136:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a138:	4b2f      	ldr	r3, [pc, #188]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	f023 020c 	bic.w	r2, r3, #12
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	492c      	ldr	r1, [pc, #176]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a146:	4313      	orrs	r3, r2
 800a148:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a14a:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	f023 0202 	bic.w	r2, r3, #2
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a156:	4928      	ldr	r1, [pc, #160]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a15c:	4b26      	ldr	r3, [pc, #152]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	4a25      	ldr	r2, [pc, #148]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a168:	4b23      	ldr	r3, [pc, #140]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	4a22      	ldr	r2, [pc, #136]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a16e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a174:	4b20      	ldr	r3, [pc, #128]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a17a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a17e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a180:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	4a1c      	ldr	r2, [pc, #112]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a186:	f043 0301 	orr.w	r3, r3, #1
 800a18a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a18c:	4b1a      	ldr	r3, [pc, #104]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a19      	ldr	r2, [pc, #100]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a198:	f7fd fed0 	bl	8007f3c <HAL_GetTick>
 800a19c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1a0:	f7fd fecc 	bl	8007f3c <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e067      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1b2:	4b11      	ldr	r3, [pc, #68]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0f0      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x730>
 800a1be:	e05f      	b.n	800a280 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1c0:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a1c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1cc:	f7fd feb6 	bl	8007f3c <HAL_GetTick>
 800a1d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1d2:	e008      	b.n	800a1e6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1d4:	f7fd feb2 	bl	8007f3c <HAL_GetTick>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d901      	bls.n	800a1e6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e04d      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1e6:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <HAL_RCC_OscConfig+0x788>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f0      	bne.n	800a1d4 <HAL_RCC_OscConfig+0x764>
 800a1f2:	e045      	b.n	800a280 <HAL_RCC_OscConfig+0x810>
 800a1f4:	58024800 	.word	0x58024800
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	fffffc0c 	.word	0xfffffc0c
 800a200:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a204:	4b21      	ldr	r3, [pc, #132]	; (800a28c <HAL_RCC_OscConfig+0x81c>)
 800a206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a208:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a20a:	4b20      	ldr	r3, [pc, #128]	; (800a28c <HAL_RCC_OscConfig+0x81c>)
 800a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	2b01      	cmp	r3, #1
 800a216:	d031      	beq.n	800a27c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f003 0203 	and.w	r2, r3, #3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a222:	429a      	cmp	r2, r3
 800a224:	d12a      	bne.n	800a27c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	091b      	lsrs	r3, r3, #4
 800a22a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a232:	429a      	cmp	r2, r3
 800a234:	d122      	bne.n	800a27c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a240:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a242:	429a      	cmp	r2, r3
 800a244:	d11a      	bne.n	800a27c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	0a5b      	lsrs	r3, r3, #9
 800a24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a254:	429a      	cmp	r2, r3
 800a256:	d111      	bne.n	800a27c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	0c1b      	lsrs	r3, r3, #16
 800a25c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a266:	429a      	cmp	r2, r3
 800a268:	d108      	bne.n	800a27c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	0e1b      	lsrs	r3, r3, #24
 800a26e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a276:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a278:	429a      	cmp	r2, r3
 800a27a:	d001      	beq.n	800a280 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e000      	b.n	800a282 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3730      	adds	r7, #48	; 0x30
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400

0800a290 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e19c      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2a4:	4b8a      	ldr	r3, [pc, #552]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d910      	bls.n	800a2d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2b2:	4b87      	ldr	r3, [pc, #540]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f023 020f 	bic.w	r2, r3, #15
 800a2ba:	4985      	ldr	r1, [pc, #532]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2c2:	4b83      	ldr	r3, [pc, #524]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d001      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e184      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0304 	and.w	r3, r3, #4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d010      	beq.n	800a302 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	4b7b      	ldr	r3, [pc, #492]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d908      	bls.n	800a302 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2f0:	4b78      	ldr	r3, [pc, #480]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4975      	ldr	r1, [pc, #468]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0308 	and.w	r3, r3, #8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d010      	beq.n	800a330 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	695a      	ldr	r2, [r3, #20]
 800a312:	4b70      	ldr	r3, [pc, #448]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d908      	bls.n	800a330 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a31e:	4b6d      	ldr	r3, [pc, #436]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	496a      	ldr	r1, [pc, #424]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d010      	beq.n	800a35e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699a      	ldr	r2, [r3, #24]
 800a340:	4b64      	ldr	r3, [pc, #400]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a348:	429a      	cmp	r2, r3
 800a34a:	d908      	bls.n	800a35e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a34c:	4b61      	ldr	r3, [pc, #388]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	495e      	ldr	r1, [pc, #376]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d010      	beq.n	800a38c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	69da      	ldr	r2, [r3, #28]
 800a36e:	4b59      	ldr	r3, [pc, #356]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a376:	429a      	cmp	r2, r3
 800a378:	d908      	bls.n	800a38c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a37a:	4b56      	ldr	r3, [pc, #344]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	4953      	ldr	r1, [pc, #332]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d010      	beq.n	800a3ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	4b4d      	ldr	r3, [pc, #308]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	f003 030f 	and.w	r3, r3, #15
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d908      	bls.n	800a3ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3a8:	4b4a      	ldr	r3, [pc, #296]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	f023 020f 	bic.w	r2, r3, #15
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	4947      	ldr	r1, [pc, #284]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d055      	beq.n	800a472 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a3c6:	4b43      	ldr	r3, [pc, #268]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	4940      	ldr	r1, [pc, #256]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d107      	bne.n	800a3f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3e0:	4b3c      	ldr	r3, [pc, #240]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d121      	bne.n	800a430 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e0f6      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d107      	bne.n	800a408 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3f8:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d115      	bne.n	800a430 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e0ea      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d107      	bne.n	800a420 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a410:	4b30      	ldr	r3, [pc, #192]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e0de      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a420:	4b2c      	ldr	r3, [pc, #176]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0d6      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	f023 0207 	bic.w	r2, r3, #7
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	4925      	ldr	r1, [pc, #148]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a442:	f7fd fd7b 	bl	8007f3c <HAL_GetTick>
 800a446:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a448:	e00a      	b.n	800a460 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a44a:	f7fd fd77 	bl	8007f3c <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	f241 3288 	movw	r2, #5000	; 0x1388
 800a458:	4293      	cmp	r3, r2
 800a45a:	d901      	bls.n	800a460 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e0be      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a460:	4b1c      	ldr	r3, [pc, #112]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	429a      	cmp	r2, r3
 800a470:	d1eb      	bne.n	800a44a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d010      	beq.n	800a4a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	4b14      	ldr	r3, [pc, #80]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	f003 030f 	and.w	r3, r3, #15
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d208      	bcs.n	800a4a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a48e:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	f023 020f 	bic.w	r2, r3, #15
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	490e      	ldr	r1, [pc, #56]	; (800a4d4 <HAL_RCC_ClockConfig+0x244>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 030f 	and.w	r3, r3, #15
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d214      	bcs.n	800a4d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ae:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f023 020f 	bic.w	r2, r3, #15
 800a4b6:	4906      	ldr	r1, [pc, #24]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <HAL_RCC_ClockConfig+0x240>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d005      	beq.n	800a4d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e086      	b.n	800a5de <HAL_RCC_ClockConfig+0x34e>
 800a4d0:	52002000 	.word	0x52002000
 800a4d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d010      	beq.n	800a506 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691a      	ldr	r2, [r3, #16]
 800a4e8:	4b3f      	ldr	r3, [pc, #252]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d208      	bcs.n	800a506 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4f4:	4b3c      	ldr	r3, [pc, #240]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	4939      	ldr	r1, [pc, #228]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a502:	4313      	orrs	r3, r2
 800a504:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0308 	and.w	r3, r3, #8
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d010      	beq.n	800a534 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	695a      	ldr	r2, [r3, #20]
 800a516:	4b34      	ldr	r3, [pc, #208]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a51e:	429a      	cmp	r2, r3
 800a520:	d208      	bcs.n	800a534 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a522:	4b31      	ldr	r3, [pc, #196]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	492e      	ldr	r1, [pc, #184]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a530:	4313      	orrs	r3, r2
 800a532:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0310 	and.w	r3, r3, #16
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699a      	ldr	r2, [r3, #24]
 800a544:	4b28      	ldr	r3, [pc, #160]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a546:	69db      	ldr	r3, [r3, #28]
 800a548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d208      	bcs.n	800a562 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a550:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	4922      	ldr	r1, [pc, #136]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0320 	and.w	r3, r3, #32
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d010      	beq.n	800a590 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69da      	ldr	r2, [r3, #28]
 800a572:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d208      	bcs.n	800a590 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a57e:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	4917      	ldr	r1, [pc, #92]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a590:	f000 f834 	bl	800a5fc <HAL_RCC_GetSysClockFreq>
 800a594:	4602      	mov	r2, r0
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	4912      	ldr	r1, [pc, #72]	; (800a5ec <HAL_RCC_ClockConfig+0x35c>)
 800a5a2:	5ccb      	ldrb	r3, [r1, r3]
 800a5a4:	f003 031f 	and.w	r3, r3, #31
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5ae:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <HAL_RCC_ClockConfig+0x358>)
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <HAL_RCC_ClockConfig+0x35c>)
 800a5b8:	5cd3      	ldrb	r3, [r2, r3]
 800a5ba:	f003 031f 	and.w	r3, r3, #31
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c4:	4a0a      	ldr	r2, [pc, #40]	; (800a5f0 <HAL_RCC_ClockConfig+0x360>)
 800a5c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5c8:	4a0a      	ldr	r2, [pc, #40]	; (800a5f4 <HAL_RCC_ClockConfig+0x364>)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <HAL_RCC_ClockConfig+0x368>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fd fc68 	bl	8007ea8 <HAL_InitTick>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	080145e0 	.word	0x080145e0
 800a5f0:	2400400c 	.word	0x2400400c
 800a5f4:	24004008 	.word	0x24004008
 800a5f8:	24004010 	.word	0x24004010

0800a5fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b089      	sub	sp, #36	; 0x24
 800a600:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a602:	4bb3      	ldr	r3, [pc, #716]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a60a:	2b18      	cmp	r3, #24
 800a60c:	f200 8155 	bhi.w	800a8ba <HAL_RCC_GetSysClockFreq+0x2be>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a8bb 	.word	0x0800a8bb
 800a620:	0800a8bb 	.word	0x0800a8bb
 800a624:	0800a8bb 	.word	0x0800a8bb
 800a628:	0800a8bb 	.word	0x0800a8bb
 800a62c:	0800a8bb 	.word	0x0800a8bb
 800a630:	0800a8bb 	.word	0x0800a8bb
 800a634:	0800a8bb 	.word	0x0800a8bb
 800a638:	0800a6a3 	.word	0x0800a6a3
 800a63c:	0800a8bb 	.word	0x0800a8bb
 800a640:	0800a8bb 	.word	0x0800a8bb
 800a644:	0800a8bb 	.word	0x0800a8bb
 800a648:	0800a8bb 	.word	0x0800a8bb
 800a64c:	0800a8bb 	.word	0x0800a8bb
 800a650:	0800a8bb 	.word	0x0800a8bb
 800a654:	0800a8bb 	.word	0x0800a8bb
 800a658:	0800a6a9 	.word	0x0800a6a9
 800a65c:	0800a8bb 	.word	0x0800a8bb
 800a660:	0800a8bb 	.word	0x0800a8bb
 800a664:	0800a8bb 	.word	0x0800a8bb
 800a668:	0800a8bb 	.word	0x0800a8bb
 800a66c:	0800a8bb 	.word	0x0800a8bb
 800a670:	0800a8bb 	.word	0x0800a8bb
 800a674:	0800a8bb 	.word	0x0800a8bb
 800a678:	0800a6af 	.word	0x0800a6af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a67c:	4b94      	ldr	r3, [pc, #592]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	d009      	beq.n	800a69c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a688:	4b91      	ldr	r3, [pc, #580]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	08db      	lsrs	r3, r3, #3
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	4a90      	ldr	r2, [pc, #576]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a694:	fa22 f303 	lsr.w	r3, r2, r3
 800a698:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a69a:	e111      	b.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a69c:	4b8d      	ldr	r3, [pc, #564]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a69e:	61bb      	str	r3, [r7, #24]
    break;
 800a6a0:	e10e      	b.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a6a2:	4b8d      	ldr	r3, [pc, #564]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6a4:	61bb      	str	r3, [r7, #24]
    break;
 800a6a6:	e10b      	b.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a6a8:	4b8c      	ldr	r3, [pc, #560]	; (800a8dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a6aa:	61bb      	str	r3, [r7, #24]
    break;
 800a6ac:	e108      	b.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6ae:	4b88      	ldr	r3, [pc, #544]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b2:	f003 0303 	and.w	r3, r3, #3
 800a6b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a6b8:	4b85      	ldr	r3, [pc, #532]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6bc:	091b      	lsrs	r3, r3, #4
 800a6be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6c4:	4b82      	ldr	r3, [pc, #520]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a6ce:	4b80      	ldr	r3, [pc, #512]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d2:	08db      	lsrs	r3, r3, #3
 800a6d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	fb02 f303 	mul.w	r3, r2, r3
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 80e1 	beq.w	800a8b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	f000 8083 	beq.w	800a800 <HAL_RCC_GetSysClockFreq+0x204>
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	f200 80a1 	bhi.w	800a844 <HAL_RCC_GetSysClockFreq+0x248>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <HAL_RCC_GetSysClockFreq+0x114>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d056      	beq.n	800a7bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a70e:	e099      	b.n	800a844 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a710:	4b6f      	ldr	r3, [pc, #444]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0320 	and.w	r3, r3, #32
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d02d      	beq.n	800a778 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a71c:	4b6c      	ldr	r3, [pc, #432]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	08db      	lsrs	r3, r3, #3
 800a722:	f003 0303 	and.w	r3, r3, #3
 800a726:	4a6b      	ldr	r2, [pc, #428]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a728:	fa22 f303 	lsr.w	r3, r2, r3
 800a72c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	ee07 3a90 	vmov	s15, r3
 800a734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a746:	4b62      	ldr	r3, [pc, #392]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74e:	ee07 3a90 	vmov	s15, r3
 800a752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a756:	ed97 6a02 	vldr	s12, [r7, #8]
 800a75a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a8e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a772:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a776:	e087      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a782:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a8e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78a:	4b51      	ldr	r3, [pc, #324]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a79e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a8e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ba:	e065      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a8e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ce:	4b40      	ldr	r3, [pc, #256]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a8e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7fe:	e043      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a8ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800a80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a812:	4b2f      	ldr	r3, [pc, #188]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a822:	ed97 6a02 	vldr	s12, [r7, #8]
 800a826:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a8e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a842:	e021      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a8e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a856:	4b1e      	ldr	r3, [pc, #120]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a866:	ed97 6a02 	vldr	s12, [r7, #8]
 800a86a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a8e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a886:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88c:	0a5b      	lsrs	r3, r3, #9
 800a88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a892:	3301      	adds	r3, #1
 800a894:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ac:	ee17 3a90 	vmov	r3, s15
 800a8b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a8b2:	e005      	b.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61bb      	str	r3, [r7, #24]
    break;
 800a8b8:	e002      	b.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a8bc:	61bb      	str	r3, [r7, #24]
    break;
 800a8be:	bf00      	nop
  }

  return sysclockfreq;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3724      	adds	r7, #36	; 0x24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	03d09000 	.word	0x03d09000
 800a8d8:	003d0900 	.word	0x003d0900
 800a8dc:	007a1200 	.word	0x007a1200
 800a8e0:	46000000 	.word	0x46000000
 800a8e4:	4c742400 	.word	0x4c742400
 800a8e8:	4a742400 	.word	0x4a742400
 800a8ec:	4af42400 	.word	0x4af42400

0800a8f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d03f      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a914:	d02a      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a91a:	d824      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a91c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a920:	d018      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a926:	d81e      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a92c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a930:	d007      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a932:	e018      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a934:	4bab      	ldr	r3, [pc, #684]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	4aaa      	ldr	r2, [pc, #680]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a93a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a93e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a940:	e015      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	3304      	adds	r3, #4
 800a946:	2102      	movs	r1, #2
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 ff11 	bl	800b770 <RCCEx_PLL2_Config>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a952:	e00c      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3324      	adds	r3, #36	; 0x24
 800a958:	2102      	movs	r1, #2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 ffba 	bl	800b8d4 <RCCEx_PLL3_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a964:	e003      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	75fb      	strb	r3, [r7, #23]
      break;
 800a96a:	e000      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a96c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a974:	4b9b      	ldr	r3, [pc, #620]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a980:	4998      	ldr	r1, [pc, #608]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a982:	4313      	orrs	r3, r2
 800a984:	650b      	str	r3, [r1, #80]	; 0x50
 800a986:	e001      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a994:	2b00      	cmp	r3, #0
 800a996:	d03d      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d826      	bhi.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a9a0:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9bd 	.word	0x0800a9bd
 800a9ac:	0800a9cb 	.word	0x0800a9cb
 800a9b0:	0800a9dd 	.word	0x0800a9dd
 800a9b4:	0800a9f5 	.word	0x0800a9f5
 800a9b8:	0800a9f5 	.word	0x0800a9f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9bc:	4b89      	ldr	r3, [pc, #548]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4a88      	ldr	r2, [pc, #544]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9c8:	e015      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 fecd 	bl	800b770 <RCCEx_PLL2_Config>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9da:	e00c      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3324      	adds	r3, #36	; 0x24
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 ff76 	bl	800b8d4 <RCCEx_PLL3_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9ec:	e003      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f2:	e000      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a9f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9fc:	4b79      	ldr	r3, [pc, #484]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa00:	f023 0207 	bic.w	r2, r3, #7
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa08:	4976      	ldr	r1, [pc, #472]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	650b      	str	r3, [r1, #80]	; 0x50
 800aa0e:	e001      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d042      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa28:	d02b      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800aa2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa2e:	d825      	bhi.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aa30:	2bc0      	cmp	r3, #192	; 0xc0
 800aa32:	d028      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800aa34:	2bc0      	cmp	r3, #192	; 0xc0
 800aa36:	d821      	bhi.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aa38:	2b80      	cmp	r3, #128	; 0x80
 800aa3a:	d016      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800aa3c:	2b80      	cmp	r3, #128	; 0x80
 800aa3e:	d81d      	bhi.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800aa44:	2b40      	cmp	r3, #64	; 0x40
 800aa46:	d007      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800aa48:	e018      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa4a:	4b66      	ldr	r3, [pc, #408]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	4a65      	ldr	r2, [pc, #404]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aa56:	e017      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fe86 	bl	800b770 <RCCEx_PLL2_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aa68:	e00e      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3324      	adds	r3, #36	; 0x24
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 ff2f 	bl	800b8d4 <RCCEx_PLL3_Config>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aa7a:	e005      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa80:	e002      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aa82:	bf00      	nop
 800aa84:	e000      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aa86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d109      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aa8e:	4b55      	ldr	r3, [pc, #340]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa9a:	4952      	ldr	r1, [pc, #328]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	650b      	str	r3, [r1, #80]	; 0x50
 800aaa0:	e001      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d049      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aabc:	d030      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800aabe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aac2:	d82a      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aac8:	d02c      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800aaca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aace:	d824      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aad4:	d018      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800aad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aada:	d81e      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d003      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800aae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aae4:	d007      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aae6:	e018      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae8:	4b3e      	ldr	r3, [pc, #248]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4a3d      	ldr	r2, [pc, #244]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aaf4:	e017      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	2100      	movs	r1, #0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 fe37 	bl	800b770 <RCCEx_PLL2_Config>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ab06:	e00e      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3324      	adds	r3, #36	; 0x24
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fee0 	bl	800b8d4 <RCCEx_PLL3_Config>
 800ab14:	4603      	mov	r3, r0
 800ab16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab18:	e005      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab1e:	e002      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ab20:	bf00      	nop
 800ab22:	e000      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ab24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab2c:	4b2d      	ldr	r3, [pc, #180]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab3a:	492a      	ldr	r1, [pc, #168]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	658b      	str	r3, [r1, #88]	; 0x58
 800ab40:	e001      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d04c      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab5c:	d030      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ab5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab62:	d82a      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab68:	d02c      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800ab6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab6e:	d824      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab74:	d018      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ab76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab7a:	d81e      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d003      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ab80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab84:	d007      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ab86:	e018      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab88:	4b16      	ldr	r3, [pc, #88]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	4a15      	ldr	r2, [pc, #84]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab94:	e017      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fde7 	bl	800b770 <RCCEx_PLL2_Config>
 800aba2:	4603      	mov	r3, r0
 800aba4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aba6:	e00e      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	2100      	movs	r1, #0
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fe90 	bl	800b8d4 <RCCEx_PLL3_Config>
 800abb4:	4603      	mov	r3, r0
 800abb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abb8:	e005      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	75fb      	strb	r3, [r7, #23]
      break;
 800abbe:	e002      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800abc0:	bf00      	nop
 800abc2:	e000      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800abc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10d      	bne.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abda:	4902      	ldr	r1, [pc, #8]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	658b      	str	r3, [r1, #88]	; 0x58
 800abe0:	e004      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d032      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abfc:	2b30      	cmp	r3, #48	; 0x30
 800abfe:	d01c      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ac00:	2b30      	cmp	r3, #48	; 0x30
 800ac02:	d817      	bhi.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ac04:	2b20      	cmp	r3, #32
 800ac06:	d00c      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d813      	bhi.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d016      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ac10:	2b10      	cmp	r3, #16
 800ac12:	d10f      	bne.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac14:	4baf      	ldr	r3, [pc, #700]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	4aae      	ldr	r2, [pc, #696]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ac20:	e00e      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	3304      	adds	r3, #4
 800ac26:	2102      	movs	r1, #2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f000 fda1 	bl	800b770 <RCCEx_PLL2_Config>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ac32:	e005      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	75fb      	strb	r3, [r7, #23]
      break;
 800ac38:	e002      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ac3a:	bf00      	nop
 800ac3c:	e000      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ac3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d109      	bne.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ac46:	4ba3      	ldr	r3, [pc, #652]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac52:	49a0      	ldr	r1, [pc, #640]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac58:	e001      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d047      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac72:	d030      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800ac74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac78:	d82a      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ac7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac7e:	d02c      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800ac80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac84:	d824      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ac86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac8a:	d018      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ac8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac90:	d81e      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800ac96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9a:	d007      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800ac9c:	e018      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac9e:	4b8d      	ldr	r3, [pc, #564]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca2:	4a8c      	ldr	r2, [pc, #560]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800acaa:	e017      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	2100      	movs	r1, #0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fd5c 	bl	800b770 <RCCEx_PLL2_Config>
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800acbc:	e00e      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3324      	adds	r3, #36	; 0x24
 800acc2:	2100      	movs	r1, #0
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fe05 	bl	800b8d4 <RCCEx_PLL3_Config>
 800acca:	4603      	mov	r3, r0
 800accc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800acce:	e005      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	75fb      	strb	r3, [r7, #23]
      break;
 800acd4:	e002      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800acd6:	bf00      	nop
 800acd8:	e000      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800acda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ace2:	4b7c      	ldr	r3, [pc, #496]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ace4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acee:	4979      	ldr	r1, [pc, #484]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	650b      	str	r3, [r1, #80]	; 0x50
 800acf4:	e001      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d049      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad0e:	d02e      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ad10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad14:	d828      	bhi.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ad16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad1a:	d02a      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800ad1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad20:	d822      	bhi.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ad22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad26:	d026      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ad28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad2c:	d81c      	bhi.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ad2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad32:	d010      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ad34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad38:	d816      	bhi.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d01d      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ad3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad42:	d111      	bne.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3304      	adds	r3, #4
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fd10 	bl	800b770 <RCCEx_PLL2_Config>
 800ad50:	4603      	mov	r3, r0
 800ad52:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ad54:	e012      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3324      	adds	r3, #36	; 0x24
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 fdb9 	bl	800b8d4 <RCCEx_PLL3_Config>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ad66:	e009      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6c:	e006      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ad6e:	bf00      	nop
 800ad70:	e004      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ad72:	bf00      	nop
 800ad74:	e002      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ad76:	bf00      	nop
 800ad78:	e000      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ad7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad82:	4b54      	ldr	r3, [pc, #336]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8e:	4951      	ldr	r1, [pc, #324]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	650b      	str	r3, [r1, #80]	; 0x50
 800ad94:	e001      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d04b      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adb0:	d02e      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800adb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adb6:	d828      	bhi.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800adb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adbc:	d02a      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800adbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc2:	d822      	bhi.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800adc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adc8:	d026      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800adca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adce:	d81c      	bhi.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800add0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add4:	d010      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800add6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adda:	d816      	bhi.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01d      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800ade0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ade4:	d111      	bne.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3304      	adds	r3, #4
 800adea:	2101      	movs	r1, #1
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fcbf 	bl	800b770 <RCCEx_PLL2_Config>
 800adf2:	4603      	mov	r3, r0
 800adf4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800adf6:	e012      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3324      	adds	r3, #36	; 0x24
 800adfc:	2101      	movs	r1, #1
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fd68 	bl	800b8d4 <RCCEx_PLL3_Config>
 800ae04:	4603      	mov	r3, r0
 800ae06:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ae08:	e009      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae0e:	e006      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae10:	bf00      	nop
 800ae12:	e004      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae14:	bf00      	nop
 800ae16:	e002      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae18:	bf00      	nop
 800ae1a:	e000      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae24:	4b2b      	ldr	r3, [pc, #172]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae28:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae32:	4928      	ldr	r1, [pc, #160]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	658b      	str	r3, [r1, #88]	; 0x58
 800ae38:	e001      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d02f      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae52:	d00e      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ae54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae58:	d814      	bhi.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d015      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ae5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae62:	d10f      	bne.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae64:	4b1b      	ldr	r3, [pc, #108]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	4a1a      	ldr	r2, [pc, #104]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae70:	e00c      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3304      	adds	r3, #4
 800ae76:	2101      	movs	r1, #1
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fc79 	bl	800b770 <RCCEx_PLL2_Config>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae82:	e003      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
      break;
 800ae88:	e000      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800ae8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d109      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae92:	4b10      	ldr	r3, [pc, #64]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae9e:	490d      	ldr	r1, [pc, #52]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	650b      	str	r3, [r1, #80]	; 0x50
 800aea4:	e001      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d033      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	d81c      	bhi.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800aebe:	a201      	add	r2, pc, #4	; (adr r2, 800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800aec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec4:	0800aeff 	.word	0x0800aeff
 800aec8:	0800aed9 	.word	0x0800aed9
 800aecc:	0800aee7 	.word	0x0800aee7
 800aed0:	0800aeff 	.word	0x0800aeff
 800aed4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aed8:	4bb8      	ldr	r3, [pc, #736]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	4ab7      	ldr	r2, [pc, #732]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aee4:	e00c      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3304      	adds	r3, #4
 800aeea:	2102      	movs	r1, #2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fc3f 	bl	800b770 <RCCEx_PLL2_Config>
 800aef2:	4603      	mov	r3, r0
 800aef4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aef6:	e003      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	75fb      	strb	r3, [r7, #23]
      break;
 800aefc:	e000      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800aefe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d109      	bne.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af06:	4bad      	ldr	r3, [pc, #692]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0a:	f023 0203 	bic.w	r2, r3, #3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af12:	49aa      	ldr	r1, [pc, #680]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af14:	4313      	orrs	r3, r2
 800af16:	64cb      	str	r3, [r1, #76]	; 0x4c
 800af18:	e001      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 8086 	beq.w	800b038 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af2c:	4ba4      	ldr	r3, [pc, #656]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4aa3      	ldr	r2, [pc, #652]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800af32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af38:	f7fd f800 	bl	8007f3c <HAL_GetTick>
 800af3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af3e:	e009      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af40:	f7fc fffc 	bl	8007f3c <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b64      	cmp	r3, #100	; 0x64
 800af4c:	d902      	bls.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	75fb      	strb	r3, [r7, #23]
        break;
 800af52:	e005      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af54:	4b9a      	ldr	r3, [pc, #616]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0ef      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d166      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af66:	4b95      	ldr	r3, [pc, #596]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af70:	4053      	eors	r3, r2
 800af72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af76:	2b00      	cmp	r3, #0
 800af78:	d013      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af7a:	4b90      	ldr	r3, [pc, #576]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af84:	4b8d      	ldr	r3, [pc, #564]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af88:	4a8c      	ldr	r2, [pc, #560]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af90:	4b8a      	ldr	r3, [pc, #552]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af94:	4a89      	ldr	r2, [pc, #548]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af9c:	4a87      	ldr	r2, [pc, #540]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afac:	d115      	bne.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afae:	f7fc ffc5 	bl	8007f3c <HAL_GetTick>
 800afb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afb4:	e00b      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afb6:	f7fc ffc1 	bl	8007f3c <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d902      	bls.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	75fb      	strb	r3, [r7, #23]
            break;
 800afcc:	e005      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afce:	4b7b      	ldr	r3, [pc, #492]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800afd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0ed      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d126      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afee:	d10d      	bne.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aff0:	4b72      	ldr	r3, [pc, #456]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800affe:	0919      	lsrs	r1, r3, #4
 800b000:	4b70      	ldr	r3, [pc, #448]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b002:	400b      	ands	r3, r1
 800b004:	496d      	ldr	r1, [pc, #436]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b006:	4313      	orrs	r3, r2
 800b008:	610b      	str	r3, [r1, #16]
 800b00a:	e005      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b00c:	4b6b      	ldr	r3, [pc, #428]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	4a6a      	ldr	r2, [pc, #424]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b012:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b016:	6113      	str	r3, [r2, #16]
 800b018:	4b68      	ldr	r3, [pc, #416]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b01a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b026:	4965      	ldr	r1, [pc, #404]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	670b      	str	r3, [r1, #112]	; 0x70
 800b02c:	e004      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	75bb      	strb	r3, [r7, #22]
 800b032:	e001      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d07e      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b048:	2b28      	cmp	r3, #40	; 0x28
 800b04a:	d867      	bhi.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b04c:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b052:	bf00      	nop
 800b054:	0800b123 	.word	0x0800b123
 800b058:	0800b11d 	.word	0x0800b11d
 800b05c:	0800b11d 	.word	0x0800b11d
 800b060:	0800b11d 	.word	0x0800b11d
 800b064:	0800b11d 	.word	0x0800b11d
 800b068:	0800b11d 	.word	0x0800b11d
 800b06c:	0800b11d 	.word	0x0800b11d
 800b070:	0800b11d 	.word	0x0800b11d
 800b074:	0800b0f9 	.word	0x0800b0f9
 800b078:	0800b11d 	.word	0x0800b11d
 800b07c:	0800b11d 	.word	0x0800b11d
 800b080:	0800b11d 	.word	0x0800b11d
 800b084:	0800b11d 	.word	0x0800b11d
 800b088:	0800b11d 	.word	0x0800b11d
 800b08c:	0800b11d 	.word	0x0800b11d
 800b090:	0800b11d 	.word	0x0800b11d
 800b094:	0800b10b 	.word	0x0800b10b
 800b098:	0800b11d 	.word	0x0800b11d
 800b09c:	0800b11d 	.word	0x0800b11d
 800b0a0:	0800b11d 	.word	0x0800b11d
 800b0a4:	0800b11d 	.word	0x0800b11d
 800b0a8:	0800b11d 	.word	0x0800b11d
 800b0ac:	0800b11d 	.word	0x0800b11d
 800b0b0:	0800b11d 	.word	0x0800b11d
 800b0b4:	0800b123 	.word	0x0800b123
 800b0b8:	0800b11d 	.word	0x0800b11d
 800b0bc:	0800b11d 	.word	0x0800b11d
 800b0c0:	0800b11d 	.word	0x0800b11d
 800b0c4:	0800b11d 	.word	0x0800b11d
 800b0c8:	0800b11d 	.word	0x0800b11d
 800b0cc:	0800b11d 	.word	0x0800b11d
 800b0d0:	0800b11d 	.word	0x0800b11d
 800b0d4:	0800b123 	.word	0x0800b123
 800b0d8:	0800b11d 	.word	0x0800b11d
 800b0dc:	0800b11d 	.word	0x0800b11d
 800b0e0:	0800b11d 	.word	0x0800b11d
 800b0e4:	0800b11d 	.word	0x0800b11d
 800b0e8:	0800b11d 	.word	0x0800b11d
 800b0ec:	0800b11d 	.word	0x0800b11d
 800b0f0:	0800b11d 	.word	0x0800b11d
 800b0f4:	0800b123 	.word	0x0800b123
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fb36 	bl	800b770 <RCCEx_PLL2_Config>
 800b104:	4603      	mov	r3, r0
 800b106:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b108:	e00c      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3324      	adds	r3, #36	; 0x24
 800b10e:	2101      	movs	r1, #1
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fbdf 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b11a:	e003      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]
      break;
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b122:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b136:	4921      	ldr	r1, [pc, #132]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	654b      	str	r3, [r1, #84]	; 0x54
 800b13c:	e001      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d03e      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b152:	2b05      	cmp	r3, #5
 800b154:	d820      	bhi.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b156:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15c:	0800b19f 	.word	0x0800b19f
 800b160:	0800b175 	.word	0x0800b175
 800b164:	0800b187 	.word	0x0800b187
 800b168:	0800b19f 	.word	0x0800b19f
 800b16c:	0800b19f 	.word	0x0800b19f
 800b170:	0800b19f 	.word	0x0800b19f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3304      	adds	r3, #4
 800b178:	2101      	movs	r1, #1
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 faf8 	bl	800b770 <RCCEx_PLL2_Config>
 800b180:	4603      	mov	r3, r0
 800b182:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b184:	e00c      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3324      	adds	r3, #36	; 0x24
 800b18a:	2101      	movs	r1, #1
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 fba1 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b196:	e003      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	75fb      	strb	r3, [r7, #23]
      break;
 800b19c:	e000      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b19e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1a0:	7dfb      	ldrb	r3, [r7, #23]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d110      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1aa:	f023 0207 	bic.w	r2, r3, #7
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b2:	4902      	ldr	r1, [pc, #8]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	654b      	str	r3, [r1, #84]	; 0x54
 800b1b8:	e008      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b1ba:	bf00      	nop
 800b1bc:	58024400 	.word	0x58024400
 800b1c0:	58024800 	.word	0x58024800
 800b1c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d039      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1de:	2b05      	cmp	r3, #5
 800b1e0:	d820      	bhi.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b1e2:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e8:	0800b22b 	.word	0x0800b22b
 800b1ec:	0800b201 	.word	0x0800b201
 800b1f0:	0800b213 	.word	0x0800b213
 800b1f4:	0800b22b 	.word	0x0800b22b
 800b1f8:	0800b22b 	.word	0x0800b22b
 800b1fc:	0800b22b 	.word	0x0800b22b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3304      	adds	r3, #4
 800b204:	2101      	movs	r1, #1
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fab2 	bl	800b770 <RCCEx_PLL2_Config>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b210:	e00c      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3324      	adds	r3, #36	; 0x24
 800b216:	2101      	movs	r1, #1
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 fb5b 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b222:	e003      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	75fb      	strb	r3, [r7, #23]
      break;
 800b228:	e000      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b22a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b232:	4bb7      	ldr	r3, [pc, #732]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b236:	f023 0207 	bic.w	r2, r3, #7
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b240:	49b3      	ldr	r1, [pc, #716]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b242:	4313      	orrs	r3, r2
 800b244:	658b      	str	r3, [r1, #88]	; 0x58
 800b246:	e001      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0320 	and.w	r3, r3, #32
 800b254:	2b00      	cmp	r3, #0
 800b256:	d04b      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b25e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b262:	d02e      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b268:	d828      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26e:	d02a      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b274:	d822      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b27a:	d026      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b27c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b280:	d81c      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b286:	d010      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b28c:	d816      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d01d      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b296:	d111      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3304      	adds	r3, #4
 800b29c:	2100      	movs	r1, #0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fa66 	bl	800b770 <RCCEx_PLL2_Config>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b2a8:	e012      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3324      	adds	r3, #36	; 0x24
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fb0f 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b2ba:	e009      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	75fb      	strb	r3, [r7, #23]
      break;
 800b2c0:	e006      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b2c2:	bf00      	nop
 800b2c4:	e004      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b2c6:	bf00      	nop
 800b2c8:	e002      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b2ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2d6:	4b8e      	ldr	r3, [pc, #568]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2e4:	498a      	ldr	r1, [pc, #552]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	654b      	str	r3, [r1, #84]	; 0x54
 800b2ea:	e001      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d04b      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b302:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b306:	d02e      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b308:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b30c:	d828      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b312:	d02a      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b318:	d822      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b31a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b31e:	d026      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b324:	d81c      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b32a:	d010      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b330:	d816      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b332:	2b00      	cmp	r3, #0
 800b334:	d01d      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b33a:	d111      	bne.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3304      	adds	r3, #4
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f000 fa14 	bl	800b770 <RCCEx_PLL2_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b34c:	e012      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3324      	adds	r3, #36	; 0x24
 800b352:	2102      	movs	r1, #2
 800b354:	4618      	mov	r0, r3
 800b356:	f000 fabd 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b35e:	e009      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	75fb      	strb	r3, [r7, #23]
      break;
 800b364:	e006      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b366:	bf00      	nop
 800b368:	e004      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b36a:	bf00      	nop
 800b36c:	e002      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b36e:	bf00      	nop
 800b370:	e000      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b372:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b37a:	4b65      	ldr	r3, [pc, #404]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b388:	4961      	ldr	r1, [pc, #388]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	658b      	str	r3, [r1, #88]	; 0x58
 800b38e:	e001      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
 800b392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d04b      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3aa:	d02e      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b3ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3b0:	d828      	bhi.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3b6:	d02a      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b3b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3bc:	d822      	bhi.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b3be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3c2:	d026      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b3c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3c8:	d81c      	bhi.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b3ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ce:	d010      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3d4:	d816      	bhi.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d01d      	beq.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3de:	d111      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 f9c2 	bl	800b770 <RCCEx_PLL2_Config>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b3f0:	e012      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3324      	adds	r3, #36	; 0x24
 800b3f6:	2102      	movs	r1, #2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fa6b 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b402:	e009      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	75fb      	strb	r3, [r7, #23]
      break;
 800b408:	e006      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b40a:	bf00      	nop
 800b40c:	e004      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b40e:	bf00      	nop
 800b410:	e002      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b412:	bf00      	nop
 800b414:	e000      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b416:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10a      	bne.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b41e:	4b3c      	ldr	r3, [pc, #240]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b42c:	4938      	ldr	r1, [pc, #224]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	658b      	str	r3, [r1, #88]	; 0x58
 800b432:	e001      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b434:	7dfb      	ldrb	r3, [r7, #23]
 800b436:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01a      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b44e:	d10a      	bne.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3324      	adds	r3, #36	; 0x24
 800b454:	2102      	movs	r1, #2
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fa3c 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b466:	4b2a      	ldr	r3, [pc, #168]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b474:	4926      	ldr	r1, [pc, #152]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b476:	4313      	orrs	r3, r2
 800b478:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0310 	and.w	r3, r3, #16
 800b482:	2b00      	cmp	r3, #0
 800b484:	d01a      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b490:	d10a      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	3324      	adds	r3, #36	; 0x24
 800b496:	2102      	movs	r1, #2
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fa1b 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b4a8:	4b19      	ldr	r3, [pc, #100]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4b6:	4916      	ldr	r1, [pc, #88]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d036      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d2:	d01f      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b4d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d8:	d817      	bhi.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e2:	d009      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b4e4:	e011      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 f93f 	bl	800b770 <RCCEx_PLL2_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b4f6:	e00e      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3324      	adds	r3, #36	; 0x24
 800b4fc:	2102      	movs	r1, #2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 f9e8 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b508:	e005      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	75fb      	strb	r3, [r7, #23]
      break;
 800b50e:	e002      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b510:	58024400 	.word	0x58024400
      break;
 800b514:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10a      	bne.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b51c:	4b93      	ldr	r3, [pc, #588]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b52a:	4990      	ldr	r1, [pc, #576]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	658b      	str	r3, [r1, #88]	; 0x58
 800b530:	e001      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d033      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b54c:	d01c      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b54e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b552:	d816      	bhi.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b558:	d003      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b55a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b55e:	d007      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b560:	e00f      	b.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b562:	4b82      	ldr	r3, [pc, #520]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	4a81      	ldr	r2, [pc, #516]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b56c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b56e:	e00c      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3324      	adds	r3, #36	; 0x24
 800b574:	2101      	movs	r1, #1
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f9ac 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b57c:	4603      	mov	r3, r0
 800b57e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b580:	e003      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	75fb      	strb	r3, [r7, #23]
      break;
 800b586:	e000      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b590:	4b76      	ldr	r3, [pc, #472]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b59e:	4973      	ldr	r1, [pc, #460]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	654b      	str	r3, [r1, #84]	; 0x54
 800b5a4:	e001      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
 800b5a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d029      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c2:	d007      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b5c4:	e00f      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5c6:	4b69      	ldr	r3, [pc, #420]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ca:	4a68      	ldr	r2, [pc, #416]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b5d2:	e00b      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	2102      	movs	r1, #2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 f8c8 	bl	800b770 <RCCEx_PLL2_Config>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b5e4:	e002      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d109      	bne.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b5f2:	4b5e      	ldr	r3, [pc, #376]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5fe:	495b      	ldr	r1, [pc, #364]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b600:	4313      	orrs	r3, r2
 800b602:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b604:	e001      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00a      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3324      	adds	r3, #36	; 0x24
 800b61a:	2102      	movs	r1, #2
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 f959 	bl	800b8d4 <RCCEx_PLL3_Config>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d030      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b63c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b640:	d017      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b646:	d811      	bhi.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b64c:	d013      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b652:	d80b      	bhi.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d010      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b65c:	d106      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b65e:	4b43      	ldr	r3, [pc, #268]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	4a42      	ldr	r2, [pc, #264]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b66a:	e007      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	75fb      	strb	r3, [r7, #23]
      break;
 800b670:	e004      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b672:	bf00      	nop
 800b674:	e002      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b676:	bf00      	nop
 800b678:	e000      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b67a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b682:	4b3a      	ldr	r3, [pc, #232]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68e:	4937      	ldr	r1, [pc, #220]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b690:	4313      	orrs	r3, r2
 800b692:	654b      	str	r3, [r1, #84]	; 0x54
 800b694:	e001      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d008      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b6a6:	4b31      	ldr	r3, [pc, #196]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b2:	492e      	ldr	r1, [pc, #184]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b6c4:	4b29      	ldr	r3, [pc, #164]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6d2:	4926      	ldr	r1, [pc, #152]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d008      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b6e4:	4b21      	ldr	r3, [pc, #132]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6f0:	491e      	ldr	r1, [pc, #120]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00d      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b702:	4b1a      	ldr	r3, [pc, #104]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	4a19      	ldr	r2, [pc, #100]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b70c:	6113      	str	r3, [r2, #16]
 800b70e:	4b17      	ldr	r3, [pc, #92]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b710:	691a      	ldr	r2, [r3, #16]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b718:	4914      	ldr	r1, [pc, #80]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	da08      	bge.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b726:	4b11      	ldr	r3, [pc, #68]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b732:	490e      	ldr	r1, [pc, #56]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b734:	4313      	orrs	r3, r2
 800b736:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b744:	4b09      	ldr	r3, [pc, #36]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b748:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b752:	4906      	ldr	r1, [pc, #24]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b754:	4313      	orrs	r3, r2
 800b756:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b758:	7dbb      	ldrb	r3, [r7, #22]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	e000      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	58024400 	.word	0x58024400

0800b770 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b77e:	4b53      	ldr	r3, [pc, #332]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	2b03      	cmp	r3, #3
 800b788:	d101      	bne.n	800b78e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e099      	b.n	800b8c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b78e:	4b4f      	ldr	r3, [pc, #316]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a4e      	ldr	r2, [pc, #312]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b794:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b79a:	f7fc fbcf 	bl	8007f3c <HAL_GetTick>
 800b79e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7a0:	e008      	b.n	800b7b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b7a2:	f7fc fbcb 	bl	8007f3c <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d901      	bls.n	800b7b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e086      	b.n	800b8c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7b4:	4b45      	ldr	r3, [pc, #276]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f0      	bne.n	800b7a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7c0:	4b42      	ldr	r3, [pc, #264]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	031b      	lsls	r3, r3, #12
 800b7ce:	493f      	ldr	r1, [pc, #252]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	628b      	str	r3, [r1, #40]	; 0x28
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	025b      	lsls	r3, r3, #9
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	041b      	lsls	r3, r3, #16
 800b7f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	061b      	lsls	r3, r3, #24
 800b800:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b804:	4931      	ldr	r1, [pc, #196]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b806:	4313      	orrs	r3, r2
 800b808:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b80a:	4b30      	ldr	r3, [pc, #192]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	492d      	ldr	r1, [pc, #180]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b818:	4313      	orrs	r3, r2
 800b81a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b81c:	4b2b      	ldr	r3, [pc, #172]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	f023 0220 	bic.w	r2, r3, #32
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	4928      	ldr	r1, [pc, #160]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b82a:	4313      	orrs	r3, r2
 800b82c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b82e:	4b27      	ldr	r3, [pc, #156]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b832:	4a26      	ldr	r2, [pc, #152]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b834:	f023 0310 	bic.w	r3, r3, #16
 800b838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b83a:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b83c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b83e:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <RCCEx_PLL2_Config+0x160>)
 800b840:	4013      	ands	r3, r2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	69d2      	ldr	r2, [r2, #28]
 800b846:	00d2      	lsls	r2, r2, #3
 800b848:	4920      	ldr	r1, [pc, #128]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b84a:	4313      	orrs	r3, r2
 800b84c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b84e:	4b1f      	ldr	r3, [pc, #124]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b852:	4a1e      	ldr	r2, [pc, #120]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b854:	f043 0310 	orr.w	r3, r3, #16
 800b858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b860:	4b1a      	ldr	r3, [pc, #104]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	4a19      	ldr	r2, [pc, #100]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b86a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b86c:	e00f      	b.n	800b88e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d106      	bne.n	800b882 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b874:	4b15      	ldr	r3, [pc, #84]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	4a14      	ldr	r2, [pc, #80]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b87a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b87e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b880:	e005      	b.n	800b88e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b882:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b886:	4a11      	ldr	r2, [pc, #68]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b88c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b88e:	4b0f      	ldr	r3, [pc, #60]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a0e      	ldr	r2, [pc, #56]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b89a:	f7fc fb4f 	bl	8007f3c <HAL_GetTick>
 800b89e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8a0:	e008      	b.n	800b8b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b8a2:	f7fc fb4b 	bl	8007f3c <HAL_GetTick>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d901      	bls.n	800b8b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e006      	b.n	800b8c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8b4:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <RCCEx_PLL2_Config+0x15c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0f0      	beq.n	800b8a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	58024400 	.word	0x58024400
 800b8d0:	ffff0007 	.word	0xffff0007

0800b8d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8e2:	4b53      	ldr	r3, [pc, #332]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d101      	bne.n	800b8f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e099      	b.n	800ba26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8f2:	4b4f      	ldr	r3, [pc, #316]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a4e      	ldr	r2, [pc, #312]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b8f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8fe:	f7fc fb1d 	bl	8007f3c <HAL_GetTick>
 800b902:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b904:	e008      	b.n	800b918 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b906:	f7fc fb19 	bl	8007f3c <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	2b02      	cmp	r3, #2
 800b912:	d901      	bls.n	800b918 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e086      	b.n	800ba26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b918:	4b45      	ldr	r3, [pc, #276]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f0      	bne.n	800b906 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b924:	4b42      	ldr	r3, [pc, #264]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	051b      	lsls	r3, r3, #20
 800b932:	493f      	ldr	r1, [pc, #252]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b934:	4313      	orrs	r3, r2
 800b936:	628b      	str	r3, [r1, #40]	; 0x28
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	3b01      	subs	r3, #1
 800b948:	025b      	lsls	r3, r3, #9
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	431a      	orrs	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	3b01      	subs	r3, #1
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	3b01      	subs	r3, #1
 800b962:	061b      	lsls	r3, r3, #24
 800b964:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b968:	4931      	ldr	r1, [pc, #196]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b96e:	4b30      	ldr	r3, [pc, #192]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b972:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	492d      	ldr	r1, [pc, #180]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b980:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	4928      	ldr	r1, [pc, #160]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b992:	4b27      	ldr	r3, [pc, #156]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b996:	4a26      	ldr	r2, [pc, #152]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b99c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b99e:	4b24      	ldr	r3, [pc, #144]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9a2:	4b24      	ldr	r3, [pc, #144]	; (800ba34 <RCCEx_PLL3_Config+0x160>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	69d2      	ldr	r2, [r2, #28]
 800b9aa:	00d2      	lsls	r2, r2, #3
 800b9ac:	4920      	ldr	r1, [pc, #128]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9b2:	4b1f      	ldr	r3, [pc, #124]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	4a19      	ldr	r2, [pc, #100]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b9ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9d0:	e00f      	b.n	800b9f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d106      	bne.n	800b9e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9d8:	4b15      	ldr	r3, [pc, #84]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	4a14      	ldr	r2, [pc, #80]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9e4:	e005      	b.n	800b9f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9e6:	4b12      	ldr	r3, [pc, #72]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ea:	4a11      	ldr	r2, [pc, #68]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9f2:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a0e      	ldr	r2, [pc, #56]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800b9f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9fe:	f7fc fa9d 	bl	8007f3c <HAL_GetTick>
 800ba02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba04:	e008      	b.n	800ba18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ba06:	f7fc fa99 	bl	8007f3c <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d901      	bls.n	800ba18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e006      	b.n	800ba26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba18:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <RCCEx_PLL3_Config+0x15c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0f0      	beq.n	800ba06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	58024400 	.word	0x58024400
 800ba34:	ffff0007 	.word	0xffff0007

0800ba38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e0eb      	b.n	800bc26 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a75      	ldr	r2, [pc, #468]	; (800bc30 <HAL_SPI_Init+0x1f8>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d00f      	beq.n	800ba7e <HAL_SPI_Init+0x46>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a74      	ldr	r2, [pc, #464]	; (800bc34 <HAL_SPI_Init+0x1fc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00a      	beq.n	800ba7e <HAL_SPI_Init+0x46>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a72      	ldr	r2, [pc, #456]	; (800bc38 <HAL_SPI_Init+0x200>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d005      	beq.n	800ba7e <HAL_SPI_Init+0x46>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d901      	bls.n	800ba7e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e0d3      	b.n	800bc26 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f8dc 	bl	800bc3c <SPI_GetPacketSize>
 800ba84:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a69      	ldr	r2, [pc, #420]	; (800bc30 <HAL_SPI_Init+0x1f8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00c      	beq.n	800baaa <HAL_SPI_Init+0x72>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a67      	ldr	r2, [pc, #412]	; (800bc34 <HAL_SPI_Init+0x1fc>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d007      	beq.n	800baaa <HAL_SPI_Init+0x72>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a66      	ldr	r2, [pc, #408]	; (800bc38 <HAL_SPI_Init+0x200>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d002      	beq.n	800baaa <HAL_SPI_Init+0x72>
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b08      	cmp	r3, #8
 800baa8:	d811      	bhi.n	800bace <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baae:	4a60      	ldr	r2, [pc, #384]	; (800bc30 <HAL_SPI_Init+0x1f8>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d009      	beq.n	800bac8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a5e      	ldr	r2, [pc, #376]	; (800bc34 <HAL_SPI_Init+0x1fc>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d004      	beq.n	800bac8 <HAL_SPI_Init+0x90>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a5d      	ldr	r2, [pc, #372]	; (800bc38 <HAL_SPI_Init+0x200>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d104      	bne.n	800bad2 <HAL_SPI_Init+0x9a>
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b10      	cmp	r3, #16
 800bacc:	d901      	bls.n	800bad2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e0a9      	b.n	800bc26 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d106      	bne.n	800baec <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7fb fb76 	bl	80071d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2202      	movs	r2, #2
 800baf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f022 0201 	bic.w	r2, r2, #1
 800bb02:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb0c:	d119      	bne.n	800bb42 <HAL_SPI_Init+0x10a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb16:	d103      	bne.n	800bb20 <HAL_SPI_Init+0xe8>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d008      	beq.n	800bb32 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10c      	bne.n	800bb42 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb30:	d107      	bne.n	800bb42 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	69da      	ldr	r2, [r3, #28]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4a:	431a      	orrs	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb54:	ea42 0103 	orr.w	r1, r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68da      	ldr	r2, [r3, #12]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	431a      	orrs	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	431a      	orrs	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	431a      	orrs	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb96:	431a      	orrs	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba2:	ea42 0103 	orr.w	r1, r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d113      	bne.n	800bbe2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbcc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbe0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 0201 	bic.w	r2, r2, #1
 800bbf0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	40013000 	.word	0x40013000
 800bc34:	40003800 	.word	0x40003800
 800bc38:	40003c00 	.word	0x40003c00

0800bc3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc48:	095b      	lsrs	r3, r3, #5
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	3301      	adds	r3, #1
 800bc54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	3307      	adds	r3, #7
 800bc5a:	08db      	lsrs	r3, r3, #3
 800bc5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	fb02 f303 	mul.w	r3, r2, r3
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b082      	sub	sp, #8
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e049      	b.n	800bd18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d106      	bne.n	800bc9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7fb fe5d 	bl	8007958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2202      	movs	r2, #2
 800bca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f000 fba3 	bl	800c3fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e049      	b.n	800bdc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f841 	bl	800bdce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	f000 fb4c 	bl	800c3fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b083      	sub	sp, #12
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bdd6:	bf00      	nop
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
	...

0800bde4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <HAL_TIM_PWM_Start+0x24>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	bf14      	ite	ne
 800be00:	2301      	movne	r3, #1
 800be02:	2300      	moveq	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	e03c      	b.n	800be82 <HAL_TIM_PWM_Start+0x9e>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d109      	bne.n	800be22 <HAL_TIM_PWM_Start+0x3e>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b01      	cmp	r3, #1
 800be18:	bf14      	ite	ne
 800be1a:	2301      	movne	r3, #1
 800be1c:	2300      	moveq	r3, #0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	e02f      	b.n	800be82 <HAL_TIM_PWM_Start+0x9e>
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2b08      	cmp	r3, #8
 800be26:	d109      	bne.n	800be3c <HAL_TIM_PWM_Start+0x58>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b01      	cmp	r3, #1
 800be32:	bf14      	ite	ne
 800be34:	2301      	movne	r3, #1
 800be36:	2300      	moveq	r3, #0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	e022      	b.n	800be82 <HAL_TIM_PWM_Start+0x9e>
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2b0c      	cmp	r3, #12
 800be40:	d109      	bne.n	800be56 <HAL_TIM_PWM_Start+0x72>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	bf14      	ite	ne
 800be4e:	2301      	movne	r3, #1
 800be50:	2300      	moveq	r3, #0
 800be52:	b2db      	uxtb	r3, r3
 800be54:	e015      	b.n	800be82 <HAL_TIM_PWM_Start+0x9e>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b10      	cmp	r3, #16
 800be5a:	d109      	bne.n	800be70 <HAL_TIM_PWM_Start+0x8c>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b01      	cmp	r3, #1
 800be66:	bf14      	ite	ne
 800be68:	2301      	movne	r3, #1
 800be6a:	2300      	moveq	r3, #0
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	e008      	b.n	800be82 <HAL_TIM_PWM_Start+0x9e>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b01      	cmp	r3, #1
 800be7a:	bf14      	ite	ne
 800be7c:	2301      	movne	r3, #1
 800be7e:	2300      	moveq	r3, #0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e09c      	b.n	800bfc4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <HAL_TIM_PWM_Start+0xb6>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2202      	movs	r2, #2
 800be94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be98:	e023      	b.n	800bee2 <HAL_TIM_PWM_Start+0xfe>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b04      	cmp	r3, #4
 800be9e:	d104      	bne.n	800beaa <HAL_TIM_PWM_Start+0xc6>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2202      	movs	r2, #2
 800bea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bea8:	e01b      	b.n	800bee2 <HAL_TIM_PWM_Start+0xfe>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b08      	cmp	r3, #8
 800beae:	d104      	bne.n	800beba <HAL_TIM_PWM_Start+0xd6>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2202      	movs	r2, #2
 800beb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800beb8:	e013      	b.n	800bee2 <HAL_TIM_PWM_Start+0xfe>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b0c      	cmp	r3, #12
 800bebe:	d104      	bne.n	800beca <HAL_TIM_PWM_Start+0xe6>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2202      	movs	r2, #2
 800bec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bec8:	e00b      	b.n	800bee2 <HAL_TIM_PWM_Start+0xfe>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b10      	cmp	r3, #16
 800bece:	d104      	bne.n	800beda <HAL_TIM_PWM_Start+0xf6>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2202      	movs	r2, #2
 800bed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bed8:	e003      	b.n	800bee2 <HAL_TIM_PWM_Start+0xfe>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2202      	movs	r2, #2
 800bede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2201      	movs	r2, #1
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fe8c 	bl	800cc08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a35      	ldr	r2, [pc, #212]	; (800bfcc <HAL_TIM_PWM_Start+0x1e8>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d013      	beq.n	800bf22 <HAL_TIM_PWM_Start+0x13e>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a34      	ldr	r2, [pc, #208]	; (800bfd0 <HAL_TIM_PWM_Start+0x1ec>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d00e      	beq.n	800bf22 <HAL_TIM_PWM_Start+0x13e>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a32      	ldr	r2, [pc, #200]	; (800bfd4 <HAL_TIM_PWM_Start+0x1f0>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d009      	beq.n	800bf22 <HAL_TIM_PWM_Start+0x13e>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a31      	ldr	r2, [pc, #196]	; (800bfd8 <HAL_TIM_PWM_Start+0x1f4>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d004      	beq.n	800bf22 <HAL_TIM_PWM_Start+0x13e>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a2f      	ldr	r2, [pc, #188]	; (800bfdc <HAL_TIM_PWM_Start+0x1f8>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d101      	bne.n	800bf26 <HAL_TIM_PWM_Start+0x142>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <HAL_TIM_PWM_Start+0x144>
 800bf26:	2300      	movs	r3, #0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d007      	beq.n	800bf3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a22      	ldr	r2, [pc, #136]	; (800bfcc <HAL_TIM_PWM_Start+0x1e8>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d01d      	beq.n	800bf82 <HAL_TIM_PWM_Start+0x19e>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4e:	d018      	beq.n	800bf82 <HAL_TIM_PWM_Start+0x19e>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a22      	ldr	r2, [pc, #136]	; (800bfe0 <HAL_TIM_PWM_Start+0x1fc>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d013      	beq.n	800bf82 <HAL_TIM_PWM_Start+0x19e>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a21      	ldr	r2, [pc, #132]	; (800bfe4 <HAL_TIM_PWM_Start+0x200>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d00e      	beq.n	800bf82 <HAL_TIM_PWM_Start+0x19e>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a1f      	ldr	r2, [pc, #124]	; (800bfe8 <HAL_TIM_PWM_Start+0x204>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d009      	beq.n	800bf82 <HAL_TIM_PWM_Start+0x19e>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a17      	ldr	r2, [pc, #92]	; (800bfd0 <HAL_TIM_PWM_Start+0x1ec>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d004      	beq.n	800bf82 <HAL_TIM_PWM_Start+0x19e>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1b      	ldr	r2, [pc, #108]	; (800bfec <HAL_TIM_PWM_Start+0x208>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d115      	bne.n	800bfae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	4b19      	ldr	r3, [pc, #100]	; (800bff0 <HAL_TIM_PWM_Start+0x20c>)
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b06      	cmp	r3, #6
 800bf92:	d015      	beq.n	800bfc0 <HAL_TIM_PWM_Start+0x1dc>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf9a:	d011      	beq.n	800bfc0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f042 0201 	orr.w	r2, r2, #1
 800bfaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfac:	e008      	b.n	800bfc0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f042 0201 	orr.w	r2, r2, #1
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	e000      	b.n	800bfc2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	40010000 	.word	0x40010000
 800bfd0:	40010400 	.word	0x40010400
 800bfd4:	40014000 	.word	0x40014000
 800bfd8:	40014400 	.word	0x40014400
 800bfdc:	40014800 	.word	0x40014800
 800bfe0:	40000400 	.word	0x40000400
 800bfe4:	40000800 	.word	0x40000800
 800bfe8:	40000c00 	.word	0x40000c00
 800bfec:	40001800 	.word	0x40001800
 800bff0:	00010007 	.word	0x00010007

0800bff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c006:	2b01      	cmp	r3, #1
 800c008:	d101      	bne.n	800c00e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e0fd      	b.n	800c20a <HAL_TIM_PWM_ConfigChannel+0x216>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b14      	cmp	r3, #20
 800c01a:	f200 80f0 	bhi.w	800c1fe <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c01e:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c079 	.word	0x0800c079
 800c028:	0800c1ff 	.word	0x0800c1ff
 800c02c:	0800c1ff 	.word	0x0800c1ff
 800c030:	0800c1ff 	.word	0x0800c1ff
 800c034:	0800c0b9 	.word	0x0800c0b9
 800c038:	0800c1ff 	.word	0x0800c1ff
 800c03c:	0800c1ff 	.word	0x0800c1ff
 800c040:	0800c1ff 	.word	0x0800c1ff
 800c044:	0800c0fb 	.word	0x0800c0fb
 800c048:	0800c1ff 	.word	0x0800c1ff
 800c04c:	0800c1ff 	.word	0x0800c1ff
 800c050:	0800c1ff 	.word	0x0800c1ff
 800c054:	0800c13b 	.word	0x0800c13b
 800c058:	0800c1ff 	.word	0x0800c1ff
 800c05c:	0800c1ff 	.word	0x0800c1ff
 800c060:	0800c1ff 	.word	0x0800c1ff
 800c064:	0800c17d 	.word	0x0800c17d
 800c068:	0800c1ff 	.word	0x0800c1ff
 800c06c:	0800c1ff 	.word	0x0800c1ff
 800c070:	0800c1ff 	.word	0x0800c1ff
 800c074:	0800c1bd 	.word	0x0800c1bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 fa56 	bl	800c530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	699a      	ldr	r2, [r3, #24]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0208 	orr.w	r2, r2, #8
 800c092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	699a      	ldr	r2, [r3, #24]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f022 0204 	bic.w	r2, r2, #4
 800c0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6999      	ldr	r1, [r3, #24]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	619a      	str	r2, [r3, #24]
      break;
 800c0b6:	e0a3      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68b9      	ldr	r1, [r7, #8]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 fac6 	bl	800c650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6999      	ldr	r1, [r3, #24]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	021a      	lsls	r2, r3, #8
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	619a      	str	r2, [r3, #24]
      break;
 800c0f8:	e082      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68b9      	ldr	r1, [r7, #8]
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fb2f 	bl	800c764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	69da      	ldr	r2, [r3, #28]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f042 0208 	orr.w	r2, r2, #8
 800c114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	69da      	ldr	r2, [r3, #28]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0204 	bic.w	r2, r2, #4
 800c124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	69d9      	ldr	r1, [r3, #28]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	691a      	ldr	r2, [r3, #16]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	430a      	orrs	r2, r1
 800c136:	61da      	str	r2, [r3, #28]
      break;
 800c138:	e062      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68b9      	ldr	r1, [r7, #8]
 800c140:	4618      	mov	r0, r3
 800c142:	f000 fb95 	bl	800c870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	69da      	ldr	r2, [r3, #28]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69da      	ldr	r2, [r3, #28]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69d9      	ldr	r1, [r3, #28]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	021a      	lsls	r2, r3, #8
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	61da      	str	r2, [r3, #28]
      break;
 800c17a:	e041      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	4618      	mov	r0, r3
 800c184:	f000 fbdc 	bl	800c940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0208 	orr.w	r2, r2, #8
 800c196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f022 0204 	bic.w	r2, r2, #4
 800c1a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	691a      	ldr	r2, [r3, #16]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c1ba:	e021      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fc1e 	bl	800ca04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	021a      	lsls	r2, r3, #8
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c1fc:	e000      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c1fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop

0800c214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d101      	bne.n	800c22c <HAL_TIM_ConfigClockSource+0x18>
 800c228:	2302      	movs	r3, #2
 800c22a:	e0db      	b.n	800c3e4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4b69      	ldr	r3, [pc, #420]	; (800c3ec <HAL_TIM_ConfigClockSource+0x1d8>)
 800c248:	4013      	ands	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a63      	ldr	r2, [pc, #396]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c262:	4293      	cmp	r3, r2
 800c264:	f000 80a9 	beq.w	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c268:	4a61      	ldr	r2, [pc, #388]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	f200 80ae 	bhi.w	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c270:	4a60      	ldr	r2, [pc, #384]	; (800c3f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	f000 80a1 	beq.w	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c278:	4a5e      	ldr	r2, [pc, #376]	; (800c3f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	f200 80a6 	bhi.w	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c280:	4a5d      	ldr	r2, [pc, #372]	; (800c3f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c282:	4293      	cmp	r3, r2
 800c284:	f000 8099 	beq.w	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c288:	4a5b      	ldr	r2, [pc, #364]	; (800c3f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	f200 809e 	bhi.w	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c290:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c294:	f000 8091 	beq.w	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c298:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c29c:	f200 8096 	bhi.w	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2a4:	f000 8089 	beq.w	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c2a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2ac:	f200 808e 	bhi.w	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2b4:	d03e      	beq.n	800c334 <HAL_TIM_ConfigClockSource+0x120>
 800c2b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ba:	f200 8087 	bhi.w	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2c2:	f000 8085 	beq.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ca:	d87f      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2cc:	2b70      	cmp	r3, #112	; 0x70
 800c2ce:	d01a      	beq.n	800c306 <HAL_TIM_ConfigClockSource+0xf2>
 800c2d0:	2b70      	cmp	r3, #112	; 0x70
 800c2d2:	d87b      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2d4:	2b60      	cmp	r3, #96	; 0x60
 800c2d6:	d050      	beq.n	800c37a <HAL_TIM_ConfigClockSource+0x166>
 800c2d8:	2b60      	cmp	r3, #96	; 0x60
 800c2da:	d877      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2dc:	2b50      	cmp	r3, #80	; 0x50
 800c2de:	d03c      	beq.n	800c35a <HAL_TIM_ConfigClockSource+0x146>
 800c2e0:	2b50      	cmp	r3, #80	; 0x50
 800c2e2:	d873      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2e4:	2b40      	cmp	r3, #64	; 0x40
 800c2e6:	d058      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x186>
 800c2e8:	2b40      	cmp	r3, #64	; 0x40
 800c2ea:	d86f      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2ec:	2b30      	cmp	r3, #48	; 0x30
 800c2ee:	d064      	beq.n	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c2f0:	2b30      	cmp	r3, #48	; 0x30
 800c2f2:	d86b      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2f4:	2b20      	cmp	r3, #32
 800c2f6:	d060      	beq.n	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c2f8:	2b20      	cmp	r3, #32
 800c2fa:	d867      	bhi.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d05c      	beq.n	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
 800c300:	2b10      	cmp	r3, #16
 800c302:	d05a      	beq.n	800c3ba <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c304:	e062      	b.n	800c3cc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	6899      	ldr	r1, [r3, #8]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f000 fc57 	bl	800cbc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	609a      	str	r2, [r3, #8]
      break;
 800c332:	e04e      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	6899      	ldr	r1, [r3, #8]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	f000 fc40 	bl	800cbc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689a      	ldr	r2, [r3, #8]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c356:	609a      	str	r2, [r3, #8]
      break;
 800c358:	e03b      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	6859      	ldr	r1, [r3, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	461a      	mov	r2, r3
 800c368:	f000 fbb0 	bl	800cacc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2150      	movs	r1, #80	; 0x50
 800c372:	4618      	mov	r0, r3
 800c374:	f000 fc0a 	bl	800cb8c <TIM_ITRx_SetConfig>
      break;
 800c378:	e02b      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	6859      	ldr	r1, [r3, #4]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	461a      	mov	r2, r3
 800c388:	f000 fbcf 	bl	800cb2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2160      	movs	r1, #96	; 0x60
 800c392:	4618      	mov	r0, r3
 800c394:	f000 fbfa 	bl	800cb8c <TIM_ITRx_SetConfig>
      break;
 800c398:	e01b      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6859      	ldr	r1, [r3, #4]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f000 fb90 	bl	800cacc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2140      	movs	r1, #64	; 0x40
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 fbea 	bl	800cb8c <TIM_ITRx_SetConfig>
      break;
 800c3b8:	e00b      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	f000 fbe1 	bl	800cb8c <TIM_ITRx_SetConfig>
        break;
 800c3ca:	e002      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c3cc:	bf00      	nop
 800c3ce:	e000      	b.n	800c3d2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c3d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	ffceff88 	.word	0xffceff88
 800c3f0:	00100040 	.word	0x00100040
 800c3f4:	00100030 	.word	0x00100030
 800c3f8:	00100020 	.word	0x00100020

0800c3fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a40      	ldr	r2, [pc, #256]	; (800c510 <TIM_Base_SetConfig+0x114>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d013      	beq.n	800c43c <TIM_Base_SetConfig+0x40>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c41a:	d00f      	beq.n	800c43c <TIM_Base_SetConfig+0x40>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a3d      	ldr	r2, [pc, #244]	; (800c514 <TIM_Base_SetConfig+0x118>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d00b      	beq.n	800c43c <TIM_Base_SetConfig+0x40>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a3c      	ldr	r2, [pc, #240]	; (800c518 <TIM_Base_SetConfig+0x11c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d007      	beq.n	800c43c <TIM_Base_SetConfig+0x40>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a3b      	ldr	r2, [pc, #236]	; (800c51c <TIM_Base_SetConfig+0x120>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d003      	beq.n	800c43c <TIM_Base_SetConfig+0x40>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a3a      	ldr	r2, [pc, #232]	; (800c520 <TIM_Base_SetConfig+0x124>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d108      	bne.n	800c44e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a2f      	ldr	r2, [pc, #188]	; (800c510 <TIM_Base_SetConfig+0x114>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d01f      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c45c:	d01b      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a2c      	ldr	r2, [pc, #176]	; (800c514 <TIM_Base_SetConfig+0x118>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d017      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a2b      	ldr	r2, [pc, #172]	; (800c518 <TIM_Base_SetConfig+0x11c>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d013      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a2a      	ldr	r2, [pc, #168]	; (800c51c <TIM_Base_SetConfig+0x120>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00f      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a29      	ldr	r2, [pc, #164]	; (800c520 <TIM_Base_SetConfig+0x124>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d00b      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a28      	ldr	r2, [pc, #160]	; (800c524 <TIM_Base_SetConfig+0x128>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d007      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a27      	ldr	r2, [pc, #156]	; (800c528 <TIM_Base_SetConfig+0x12c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d003      	beq.n	800c496 <TIM_Base_SetConfig+0x9a>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a26      	ldr	r2, [pc, #152]	; (800c52c <TIM_Base_SetConfig+0x130>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d108      	bne.n	800c4a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c49c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a10      	ldr	r2, [pc, #64]	; (800c510 <TIM_Base_SetConfig+0x114>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d00f      	beq.n	800c4f4 <TIM_Base_SetConfig+0xf8>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a12      	ldr	r2, [pc, #72]	; (800c520 <TIM_Base_SetConfig+0x124>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d00b      	beq.n	800c4f4 <TIM_Base_SetConfig+0xf8>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a11      	ldr	r2, [pc, #68]	; (800c524 <TIM_Base_SetConfig+0x128>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d007      	beq.n	800c4f4 <TIM_Base_SetConfig+0xf8>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a10      	ldr	r2, [pc, #64]	; (800c528 <TIM_Base_SetConfig+0x12c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d003      	beq.n	800c4f4 <TIM_Base_SetConfig+0xf8>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a0f      	ldr	r2, [pc, #60]	; (800c52c <TIM_Base_SetConfig+0x130>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d103      	bne.n	800c4fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	691a      	ldr	r2, [r3, #16]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	615a      	str	r2, [r3, #20]
}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	40010000 	.word	0x40010000
 800c514:	40000400 	.word	0x40000400
 800c518:	40000800 	.word	0x40000800
 800c51c:	40000c00 	.word	0x40000c00
 800c520:	40010400 	.word	0x40010400
 800c524:	40014000 	.word	0x40014000
 800c528:	40014400 	.word	0x40014400
 800c52c:	40014800 	.word	0x40014800

0800c530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f023 0201 	bic.w	r2, r3, #1
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4b37      	ldr	r3, [pc, #220]	; (800c638 <TIM_OC1_SetConfig+0x108>)
 800c55c:	4013      	ands	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f023 0303 	bic.w	r3, r3, #3
 800c566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4313      	orrs	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f023 0302 	bic.w	r3, r3, #2
 800c578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4313      	orrs	r3, r2
 800c582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a2d      	ldr	r2, [pc, #180]	; (800c63c <TIM_OC1_SetConfig+0x10c>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d00f      	beq.n	800c5ac <TIM_OC1_SetConfig+0x7c>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a2c      	ldr	r2, [pc, #176]	; (800c640 <TIM_OC1_SetConfig+0x110>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d00b      	beq.n	800c5ac <TIM_OC1_SetConfig+0x7c>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a2b      	ldr	r2, [pc, #172]	; (800c644 <TIM_OC1_SetConfig+0x114>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d007      	beq.n	800c5ac <TIM_OC1_SetConfig+0x7c>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a2a      	ldr	r2, [pc, #168]	; (800c648 <TIM_OC1_SetConfig+0x118>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d003      	beq.n	800c5ac <TIM_OC1_SetConfig+0x7c>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a29      	ldr	r2, [pc, #164]	; (800c64c <TIM_OC1_SetConfig+0x11c>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d10c      	bne.n	800c5c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f023 0308 	bic.w	r3, r3, #8
 800c5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f023 0304 	bic.w	r3, r3, #4
 800c5c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a1c      	ldr	r2, [pc, #112]	; (800c63c <TIM_OC1_SetConfig+0x10c>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d00f      	beq.n	800c5ee <TIM_OC1_SetConfig+0xbe>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a1b      	ldr	r2, [pc, #108]	; (800c640 <TIM_OC1_SetConfig+0x110>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00b      	beq.n	800c5ee <TIM_OC1_SetConfig+0xbe>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a1a      	ldr	r2, [pc, #104]	; (800c644 <TIM_OC1_SetConfig+0x114>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d007      	beq.n	800c5ee <TIM_OC1_SetConfig+0xbe>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a19      	ldr	r2, [pc, #100]	; (800c648 <TIM_OC1_SetConfig+0x118>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d003      	beq.n	800c5ee <TIM_OC1_SetConfig+0xbe>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a18      	ldr	r2, [pc, #96]	; (800c64c <TIM_OC1_SetConfig+0x11c>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d111      	bne.n	800c612 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	693a      	ldr	r2, [r7, #16]
 800c604:	4313      	orrs	r3, r2
 800c606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	4313      	orrs	r3, r2
 800c610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	621a      	str	r2, [r3, #32]
}
 800c62c:	bf00      	nop
 800c62e:	371c      	adds	r7, #28
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	fffeff8f 	.word	0xfffeff8f
 800c63c:	40010000 	.word	0x40010000
 800c640:	40010400 	.word	0x40010400
 800c644:	40014000 	.word	0x40014000
 800c648:	40014400 	.word	0x40014400
 800c64c:	40014800 	.word	0x40014800

0800c650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	f023 0210 	bic.w	r2, r3, #16
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	4b34      	ldr	r3, [pc, #208]	; (800c74c <TIM_OC2_SetConfig+0xfc>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	4313      	orrs	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	f023 0320 	bic.w	r3, r3, #32
 800c69a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	011b      	lsls	r3, r3, #4
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a29      	ldr	r2, [pc, #164]	; (800c750 <TIM_OC2_SetConfig+0x100>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d003      	beq.n	800c6b8 <TIM_OC2_SetConfig+0x68>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a28      	ldr	r2, [pc, #160]	; (800c754 <TIM_OC2_SetConfig+0x104>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d10d      	bne.n	800c6d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	011b      	lsls	r3, r3, #4
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a1e      	ldr	r2, [pc, #120]	; (800c750 <TIM_OC2_SetConfig+0x100>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d00f      	beq.n	800c6fc <TIM_OC2_SetConfig+0xac>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a1d      	ldr	r2, [pc, #116]	; (800c754 <TIM_OC2_SetConfig+0x104>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d00b      	beq.n	800c6fc <TIM_OC2_SetConfig+0xac>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a1c      	ldr	r2, [pc, #112]	; (800c758 <TIM_OC2_SetConfig+0x108>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d007      	beq.n	800c6fc <TIM_OC2_SetConfig+0xac>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a1b      	ldr	r2, [pc, #108]	; (800c75c <TIM_OC2_SetConfig+0x10c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d003      	beq.n	800c6fc <TIM_OC2_SetConfig+0xac>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a1a      	ldr	r2, [pc, #104]	; (800c760 <TIM_OC2_SetConfig+0x110>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d113      	bne.n	800c724 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c70a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	4313      	orrs	r3, r2
 800c716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	4313      	orrs	r3, r2
 800c722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	621a      	str	r2, [r3, #32]
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	feff8fff 	.word	0xfeff8fff
 800c750:	40010000 	.word	0x40010000
 800c754:	40010400 	.word	0x40010400
 800c758:	40014000 	.word	0x40014000
 800c75c:	40014400 	.word	0x40014400
 800c760:	40014800 	.word	0x40014800

0800c764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f023 0303 	bic.w	r3, r3, #3
 800c79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	021b      	lsls	r3, r3, #8
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a27      	ldr	r2, [pc, #156]	; (800c85c <TIM_OC3_SetConfig+0xf8>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d003      	beq.n	800c7ca <TIM_OC3_SetConfig+0x66>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a26      	ldr	r2, [pc, #152]	; (800c860 <TIM_OC3_SetConfig+0xfc>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d10d      	bne.n	800c7e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a1c      	ldr	r2, [pc, #112]	; (800c85c <TIM_OC3_SetConfig+0xf8>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00f      	beq.n	800c80e <TIM_OC3_SetConfig+0xaa>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a1b      	ldr	r2, [pc, #108]	; (800c860 <TIM_OC3_SetConfig+0xfc>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00b      	beq.n	800c80e <TIM_OC3_SetConfig+0xaa>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <TIM_OC3_SetConfig+0x100>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <TIM_OC3_SetConfig+0xaa>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a19      	ldr	r2, [pc, #100]	; (800c868 <TIM_OC3_SetConfig+0x104>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d003      	beq.n	800c80e <TIM_OC3_SetConfig+0xaa>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a18      	ldr	r2, [pc, #96]	; (800c86c <TIM_OC3_SetConfig+0x108>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d113      	bne.n	800c836 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	011b      	lsls	r3, r3, #4
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	4313      	orrs	r3, r2
 800c828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	011b      	lsls	r3, r3, #4
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	4313      	orrs	r3, r2
 800c834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	621a      	str	r2, [r3, #32]
}
 800c850:	bf00      	nop
 800c852:	371c      	adds	r7, #28
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	40010000 	.word	0x40010000
 800c860:	40010400 	.word	0x40010400
 800c864:	40014000 	.word	0x40014000
 800c868:	40014400 	.word	0x40014400
 800c86c:	40014800 	.word	0x40014800

0800c870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	021b      	lsls	r3, r3, #8
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	031b      	lsls	r3, r3, #12
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a18      	ldr	r2, [pc, #96]	; (800c92c <TIM_OC4_SetConfig+0xbc>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d00f      	beq.n	800c8f0 <TIM_OC4_SetConfig+0x80>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a17      	ldr	r2, [pc, #92]	; (800c930 <TIM_OC4_SetConfig+0xc0>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00b      	beq.n	800c8f0 <TIM_OC4_SetConfig+0x80>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a16      	ldr	r2, [pc, #88]	; (800c934 <TIM_OC4_SetConfig+0xc4>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d007      	beq.n	800c8f0 <TIM_OC4_SetConfig+0x80>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a15      	ldr	r2, [pc, #84]	; (800c938 <TIM_OC4_SetConfig+0xc8>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d003      	beq.n	800c8f0 <TIM_OC4_SetConfig+0x80>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a14      	ldr	r2, [pc, #80]	; (800c93c <TIM_OC4_SetConfig+0xcc>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d109      	bne.n	800c904 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	019b      	lsls	r3, r3, #6
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	4313      	orrs	r3, r2
 800c902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	621a      	str	r2, [r3, #32]
}
 800c91e:	bf00      	nop
 800c920:	371c      	adds	r7, #28
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	40010000 	.word	0x40010000
 800c930:	40010400 	.word	0x40010400
 800c934:	40014000 	.word	0x40014000
 800c938:	40014400 	.word	0x40014400
 800c93c:	40014800 	.word	0x40014800

0800c940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	4313      	orrs	r3, r2
 800c978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	041b      	lsls	r3, r3, #16
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a17      	ldr	r2, [pc, #92]	; (800c9f0 <TIM_OC5_SetConfig+0xb0>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d00f      	beq.n	800c9b6 <TIM_OC5_SetConfig+0x76>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a16      	ldr	r2, [pc, #88]	; (800c9f4 <TIM_OC5_SetConfig+0xb4>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d00b      	beq.n	800c9b6 <TIM_OC5_SetConfig+0x76>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a15      	ldr	r2, [pc, #84]	; (800c9f8 <TIM_OC5_SetConfig+0xb8>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d007      	beq.n	800c9b6 <TIM_OC5_SetConfig+0x76>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a14      	ldr	r2, [pc, #80]	; (800c9fc <TIM_OC5_SetConfig+0xbc>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d003      	beq.n	800c9b6 <TIM_OC5_SetConfig+0x76>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a13      	ldr	r2, [pc, #76]	; (800ca00 <TIM_OC5_SetConfig+0xc0>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d109      	bne.n	800c9ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	695b      	ldr	r3, [r3, #20]
 800c9c2:	021b      	lsls	r3, r3, #8
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	697a      	ldr	r2, [r7, #20]
 800c9ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	621a      	str	r2, [r3, #32]
}
 800c9e4:	bf00      	nop
 800c9e6:	371c      	adds	r7, #28
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40010400 	.word	0x40010400
 800c9f8:	40014000 	.word	0x40014000
 800c9fc:	40014400 	.word	0x40014400
 800ca00:	40014800 	.word	0x40014800

0800ca04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	021b      	lsls	r3, r3, #8
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	051b      	lsls	r3, r3, #20
 800ca4e:	693a      	ldr	r2, [r7, #16]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a18      	ldr	r2, [pc, #96]	; (800cab8 <TIM_OC6_SetConfig+0xb4>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d00f      	beq.n	800ca7c <TIM_OC6_SetConfig+0x78>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a17      	ldr	r2, [pc, #92]	; (800cabc <TIM_OC6_SetConfig+0xb8>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d00b      	beq.n	800ca7c <TIM_OC6_SetConfig+0x78>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a16      	ldr	r2, [pc, #88]	; (800cac0 <TIM_OC6_SetConfig+0xbc>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d007      	beq.n	800ca7c <TIM_OC6_SetConfig+0x78>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a15      	ldr	r2, [pc, #84]	; (800cac4 <TIM_OC6_SetConfig+0xc0>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d003      	beq.n	800ca7c <TIM_OC6_SetConfig+0x78>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a14      	ldr	r2, [pc, #80]	; (800cac8 <TIM_OC6_SetConfig+0xc4>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d109      	bne.n	800ca90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	029b      	lsls	r3, r3, #10
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	693a      	ldr	r2, [r7, #16]
 800caa8:	621a      	str	r2, [r3, #32]
}
 800caaa:	bf00      	nop
 800caac:	371c      	adds	r7, #28
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40010400 	.word	0x40010400
 800cac0:	40014000 	.word	0x40014000
 800cac4:	40014400 	.word	0x40014400
 800cac8:	40014800 	.word	0x40014800

0800cacc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	f023 0201 	bic.w	r2, r3, #1
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800caf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	011b      	lsls	r3, r3, #4
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	f023 030a 	bic.w	r3, r3, #10
 800cb08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	621a      	str	r2, [r3, #32]
}
 800cb1e:	bf00      	nop
 800cb20:	371c      	adds	r7, #28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b087      	sub	sp, #28
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	f023 0210 	bic.w	r2, r3, #16
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6a1b      	ldr	r3, [r3, #32]
 800cb4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	031b      	lsls	r3, r3, #12
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	011b      	lsls	r3, r3, #4
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	697a      	ldr	r2, [r7, #20]
 800cb76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	621a      	str	r2, [r3, #32]
}
 800cb7e:	bf00      	nop
 800cb80:	371c      	adds	r7, #28
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
	...

0800cb8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <TIM_ITRx_SetConfig+0x38>)
 800cba0:	4013      	ands	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	f043 0307 	orr.w	r3, r3, #7
 800cbae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	609a      	str	r2, [r3, #8]
}
 800cbb6:	bf00      	nop
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	ffcfff8f 	.word	0xffcfff8f

0800cbc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	021a      	lsls	r2, r3, #8
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	431a      	orrs	r2, r3
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	609a      	str	r2, [r3, #8]
}
 800cbfc:	bf00      	nop
 800cbfe:	371c      	adds	r7, #28
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b087      	sub	sp, #28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	f003 031f 	and.w	r3, r3, #31
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6a1a      	ldr	r2, [r3, #32]
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	43db      	mvns	r3, r3
 800cc2a:	401a      	ands	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a1a      	ldr	r2, [r3, #32]
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	f003 031f 	and.w	r3, r3, #31
 800cc3a:	6879      	ldr	r1, [r7, #4]
 800cc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc40:	431a      	orrs	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	621a      	str	r2, [r3, #32]
}
 800cc46:	bf00      	nop
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
	...

0800cc54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d101      	bne.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e068      	b.n	800cd3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2202      	movs	r2, #2
 800cc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a2e      	ldr	r2, [pc, #184]	; (800cd4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d004      	beq.n	800cca0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a2d      	ldr	r2, [pc, #180]	; (800cd50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d108      	bne.n	800ccb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cca6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a1e      	ldr	r2, [pc, #120]	; (800cd4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d01d      	beq.n	800cd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccde:	d018      	beq.n	800cd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a1b      	ldr	r2, [pc, #108]	; (800cd54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d013      	beq.n	800cd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a1a      	ldr	r2, [pc, #104]	; (800cd58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d00e      	beq.n	800cd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a18      	ldr	r2, [pc, #96]	; (800cd5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d009      	beq.n	800cd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a13      	ldr	r2, [pc, #76]	; (800cd50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d004      	beq.n	800cd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a14      	ldr	r2, [pc, #80]	; (800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d10c      	bne.n	800cd2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	4313      	orrs	r3, r2
 800cd22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	40010000 	.word	0x40010000
 800cd50:	40010400 	.word	0x40010400
 800cd54:	40000400 	.word	0x40000400
 800cd58:	40000800 	.word	0x40000800
 800cd5c:	40000c00 	.word	0x40000c00
 800cd60:	40001800 	.word	0x40001800

0800cd64 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6819      	ldr	r1, [r3, #0]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	fb03 f203 	mul.w	r2, r3, r3
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	4413      	add	r3, r2
 800cd80:	43db      	mvns	r3, r3
 800cd82:	ea01 0203 	and.w	r2, r1, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	fb03 f303 	mul.w	r3, r3, r3
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	fb01 f303 	mul.w	r3, r1, r3
 800cd92:	431a      	orrs	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	685a      	ldr	r2, [r3, #4]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	43db      	mvns	r3, r3
 800cdb8:	401a      	ands	r2, r3
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	6879      	ldr	r1, [r7, #4]
 800cdbe:	fb01 f303 	mul.w	r3, r1, r3
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	605a      	str	r2, [r3, #4]
}
 800cdc8:	bf00      	nop
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6899      	ldr	r1, [r3, #8]
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	fb03 f203 	mul.w	r2, r3, r3
 800cdea:	4613      	mov	r3, r2
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	4413      	add	r3, r2
 800cdf0:	43db      	mvns	r3, r3
 800cdf2:	ea01 0203 	and.w	r2, r1, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	fb03 f303 	mul.w	r3, r3, r3
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	fb01 f303 	mul.w	r3, r1, r3
 800ce02:	431a      	orrs	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	609a      	str	r2, [r3, #8]
}
 800ce08:	bf00      	nop
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	68d9      	ldr	r1, [r3, #12]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	fb03 f203 	mul.w	r2, r3, r3
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	4413      	add	r3, r2
 800ce30:	43db      	mvns	r3, r3
 800ce32:	ea01 0203 	and.w	r2, r1, r3
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	fb03 f303 	mul.w	r3, r3, r3
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	fb01 f303 	mul.w	r3, r1, r3
 800ce42:	431a      	orrs	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	60da      	str	r2, [r3, #12]
}
 800ce48:	bf00      	nop
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6a19      	ldr	r1, [r3, #32]
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	fb03 f303 	mul.w	r3, r3, r3
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	fb02 f303 	mul.w	r3, r2, r3
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	fb02 f203 	mul.w	r2, r2, r3
 800ce76:	4613      	mov	r3, r2
 800ce78:	011b      	lsls	r3, r3, #4
 800ce7a:	1a9b      	subs	r3, r3, r2
 800ce7c:	43db      	mvns	r3, r3
 800ce7e:	ea01 0203 	and.w	r2, r1, r3
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	fb03 f303 	mul.w	r3, r3, r3
 800ce88:	68b9      	ldr	r1, [r7, #8]
 800ce8a:	fb01 f303 	mul.w	r3, r1, r3
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	fb01 f303 	mul.w	r3, r1, r3
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	fb01 f303 	mul.w	r3, r1, r3
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800cea0:	bf00      	nop
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	0a1b      	lsrs	r3, r3, #8
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	0a12      	lsrs	r2, r2, #8
 800cec4:	fb02 f303 	mul.w	r3, r2, r3
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	0a12      	lsrs	r2, r2, #8
 800cecc:	fb02 f303 	mul.w	r3, r2, r3
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	0a12      	lsrs	r2, r2, #8
 800ced4:	fb02 f203 	mul.w	r2, r2, r3
 800ced8:	4613      	mov	r3, r2
 800ceda:	011b      	lsls	r3, r3, #4
 800cedc:	1a9b      	subs	r3, r3, r2
 800cede:	43db      	mvns	r3, r3
 800cee0:	ea01 0203 	and.w	r2, r1, r3
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	0a1b      	lsrs	r3, r3, #8
 800cee8:	68b9      	ldr	r1, [r7, #8]
 800ceea:	0a09      	lsrs	r1, r1, #8
 800ceec:	fb01 f303 	mul.w	r3, r1, r3
 800cef0:	68b9      	ldr	r1, [r7, #8]
 800cef2:	0a09      	lsrs	r1, r1, #8
 800cef4:	fb01 f303 	mul.w	r3, r1, r3
 800cef8:	68b9      	ldr	r1, [r7, #8]
 800cefa:	0a09      	lsrs	r1, r1, #8
 800cefc:	fb01 f303 	mul.w	r3, r1, r3
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	fb01 f303 	mul.w	r3, r1, r3
 800cf06:	431a      	orrs	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800cf0c:	bf00      	nop
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b088      	sub	sp, #32
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	fa93 f3a3 	rbit	r3, r3
 800cf2e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <LL_GPIO_Init+0x26>
  {
    return 32U;
 800cf3a:	2320      	movs	r3, #32
 800cf3c:	e003      	b.n	800cf46 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	fab3 f383 	clz	r3, r3
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cf48:	e048      	b.n	800cfdc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	2101      	movs	r1, #1
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	fa01 f303 	lsl.w	r3, r1, r3
 800cf56:	4013      	ands	r3, r2
 800cf58:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d03a      	beq.n	800cfd6 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d003      	beq.n	800cf70 <LL_GPIO_Init+0x58>
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d10e      	bne.n	800cf8e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	461a      	mov	r2, r3
 800cf76:	69b9      	ldr	r1, [r7, #24]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7ff ff2b 	bl	800cdd4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	6819      	ldr	r1, [r3, #0]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	461a      	mov	r2, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff ff0b 	bl	800cda4 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	461a      	mov	r2, r3
 800cf94:	69b9      	ldr	r1, [r7, #24]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff ff3c 	bl	800ce14 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	d111      	bne.n	800cfc8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	2bff      	cmp	r3, #255	; 0xff
 800cfa8:	d807      	bhi.n	800cfba <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	695b      	ldr	r3, [r3, #20]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	69b9      	ldr	r1, [r7, #24]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7ff ff4e 	bl	800ce54 <LL_GPIO_SetAFPin_0_7>
 800cfb8:	e006      	b.n	800cfc8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	695b      	ldr	r3, [r3, #20]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	69b9      	ldr	r1, [r7, #24]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff ff72 	bl	800ceac <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	69b9      	ldr	r1, [r7, #24]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff fec7 	bl	800cd64 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1af      	bne.n	800cf4a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3720      	adds	r7, #32
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 800cff8:	4b07      	ldr	r3, [pc, #28]	; (800d018 <LL_RCC_HSE_IsReady+0x24>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d004:	d101      	bne.n	800d00a <LL_RCC_HSE_IsReady+0x16>
 800d006:	2301      	movs	r3, #1
 800d008:	e000      	b.n	800d00c <LL_RCC_HSE_IsReady+0x18>
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	58024400 	.word	0x58024400

0800d01c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 800d020:	4b06      	ldr	r3, [pc, #24]	; (800d03c <LL_RCC_HSI_IsReady+0x20>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d101      	bne.n	800d030 <LL_RCC_HSI_IsReady+0x14>
 800d02c:	2301      	movs	r3, #1
 800d02e:	e000      	b.n	800d032 <LL_RCC_HSI_IsReady+0x16>
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	58024400 	.word	0x58024400

0800d040 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800d040:	b480      	push	{r7}
 800d042:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800d044:	4b04      	ldr	r3, [pc, #16]	; (800d058 <LL_RCC_HSI_GetDivider+0x18>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 0318 	and.w	r3, r3, #24
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	58024400 	.word	0x58024400

0800d05c <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <LL_RCC_CSI_IsReady+0x24>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d06c:	d101      	bne.n	800d072 <LL_RCC_CSI_IsReady+0x16>
 800d06e:	2301      	movs	r3, #1
 800d070:	e000      	b.n	800d074 <LL_RCC_CSI_IsReady+0x18>
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	58024400 	.word	0x58024400

0800d084 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY))?1UL:0UL);
 800d088:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <LL_RCC_LSE_IsReady+0x20>)
 800d08a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d08c:	f003 0302 	and.w	r3, r3, #2
 800d090:	2b02      	cmp	r3, #2
 800d092:	d101      	bne.n	800d098 <LL_RCC_LSE_IsReady+0x14>
 800d094:	2301      	movs	r3, #1
 800d096:	e000      	b.n	800d09a <LL_RCC_LSE_IsReady+0x16>
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	58024400 	.word	0x58024400

0800d0a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d0ac:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <LL_RCC_GetSysClkSource+0x18>)
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	58024400 	.word	0x58024400

0800d0c4 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <LL_RCC_GetSysPrescaler+0x18>)
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	58024400 	.word	0x58024400

0800d0e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <LL_RCC_GetAHBPrescaler+0x18>)
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	58024400 	.word	0x58024400

0800d0fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800d100:	4b04      	ldr	r3, [pc, #16]	; (800d114 <LL_RCC_GetAPB1Prescaler+0x18>)
 800d102:	69db      	ldr	r3, [r3, #28]
 800d104:	f003 0370 	and.w	r3, r3, #112	; 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800d108:	4618      	mov	r0, r3
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	58024400 	.word	0x58024400

0800d118 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800d118:	b480      	push	{r7}
 800d11a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800d11c:	4b04      	ldr	r3, [pc, #16]	; (800d130 <LL_RCC_GetAPB2Prescaler+0x18>)
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800d124:	4618      	mov	r0, r3
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	58024400 	.word	0x58024400

0800d134 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	4b0e      	ldr	r3, [pc, #56]	; (800d17c <LL_RCC_GetClockSource+0x48>)
 800d142:	4413      	add	r3, r2
 800d144:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t) (Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT) );
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	0e19      	lsrs	r1, r3, #24
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	0a1b      	lsrs	r3, r3, #8
 800d152:	f003 031f 	and.w	r3, r3, #31
 800d156:	fa01 f303 	lsl.w	r3, r1, r3
 800d15a:	401a      	ands	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	0a1b      	lsrs	r3, r3, #8
 800d160:	f003 031f 	and.w	r3, r3, #31
 800d164:	fa22 f303 	lsr.w	r3, r2, r3
 800d168:	041a      	lsls	r2, r3, #16
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4313      	orrs	r3, r2
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	5802444c 	.word	0x5802444c

0800d180 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7ff ffd3 	bl	800d134 <LL_RCC_GetClockSource>
 800d18e:	4603      	mov	r3, r0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800d19c:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <LL_RCC_PLL_GetSource+0x18>)
 800d19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a0:	f003 0303 	and.w	r3, r3, #3
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	58024400 	.word	0x58024400

0800d1b4 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 800d1b8:	4b07      	ldr	r3, [pc, #28]	; (800d1d8 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1c4:	d101      	bne.n	800d1ca <LL_RCC_PLL1P_IsEnabled+0x16>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <LL_RCC_PLL1P_IsEnabled+0x18>
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	58024400 	.word	0x58024400

0800d1dc <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800d1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1ec:	d101      	bne.n	800d1f2 <LL_RCC_PLL1Q_IsEnabled+0x16>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	58024400 	.word	0x58024400

0800d204 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800d204:	b480      	push	{r7}
 800d206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 800d208:	4b07      	ldr	r3, [pc, #28]	; (800d228 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d214:	d101      	bne.n	800d21a <LL_RCC_PLL1R_IsEnabled+0x16>
 800d216:	2301      	movs	r3, #1
 800d218:	e000      	b.n	800d21c <LL_RCC_PLL1R_IsEnabled+0x18>
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	58024400 	.word	0x58024400

0800d22c <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800d22c:	b480      	push	{r7}
 800d22e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 800d230:	4b06      	ldr	r3, [pc, #24]	; (800d24c <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800d232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d101      	bne.n	800d240 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	58024400 	.word	0x58024400

0800d250 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800d250:	b480      	push	{r7}
 800d252:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800d254:	4b04      	ldr	r3, [pc, #16]	; (800d268 <LL_RCC_PLL1_GetN+0x18>)
 800d256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25c:	3301      	adds	r3, #1
}
 800d25e:	4618      	mov	r0, r3
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	58024400 	.word	0x58024400

0800d26c <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800d26c:	b480      	push	{r7}
 800d26e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <LL_RCC_PLL1_GetM+0x18>)
 800d272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d274:	091b      	lsrs	r3, r3, #4
 800d276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	58024400 	.word	0x58024400

0800d288 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800d288:	b480      	push	{r7}
 800d28a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800d28c:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <LL_RCC_PLL1_GetP+0x1c>)
 800d28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d290:	0a5b      	lsrs	r3, r3, #9
 800d292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d296:	3301      	adds	r3, #1
}
 800d298:	4618      	mov	r0, r3
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	58024400 	.word	0x58024400

0800d2a8 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800d2ac:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <LL_RCC_PLL1_GetQ+0x1c>)
 800d2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b0:	0c1b      	lsrs	r3, r3, #16
 800d2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2b6:	3301      	adds	r3, #1
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	58024400 	.word	0x58024400

0800d2c8 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800d2cc:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <LL_RCC_PLL1_GetR+0x1c>)
 800d2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d0:	0e1b      	lsrs	r3, r3, #24
 800d2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d6:	3301      	adds	r3, #1
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	58024400 	.word	0x58024400

0800d2e8 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800d2ec:	4b04      	ldr	r3, [pc, #16]	; (800d300 <LL_RCC_PLL1_GetFRACN+0x18>)
 800d2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f0:	08db      	lsrs	r3, r3, #3
 800d2f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr
 800d300:	58024400 	.word	0x58024400

0800d304 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800d304:	b480      	push	{r7}
 800d306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 800d308:	4b07      	ldr	r3, [pc, #28]	; (800d328 <LL_RCC_PLL2_IsReady+0x24>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d314:	d101      	bne.n	800d31a <LL_RCC_PLL2_IsReady+0x16>
 800d316:	2301      	movs	r3, #1
 800d318:	e000      	b.n	800d31c <LL_RCC_PLL2_IsReady+0x18>
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	58024400 	.word	0x58024400

0800d32c <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800d32c:	b480      	push	{r7}
 800d32e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN)?1UL:0UL);
 800d330:	4b07      	ldr	r3, [pc, #28]	; (800d350 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d338:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d33c:	d101      	bne.n	800d342 <LL_RCC_PLL2P_IsEnabled+0x16>
 800d33e:	2301      	movs	r3, #1
 800d340:	e000      	b.n	800d344 <LL_RCC_PLL2P_IsEnabled+0x18>
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	58024400 	.word	0x58024400

0800d354 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800d354:	b480      	push	{r7}
 800d356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN)?1UL:0UL);
 800d358:	4b07      	ldr	r3, [pc, #28]	; (800d378 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d364:	d101      	bne.n	800d36a <LL_RCC_PLL2Q_IsEnabled+0x16>
 800d366:	2301      	movs	r3, #1
 800d368:	e000      	b.n	800d36c <LL_RCC_PLL2Q_IsEnabled+0x18>
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	58024400 	.word	0x58024400

0800d37c <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800d37c:	b480      	push	{r7}
 800d37e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN)?1UL:0UL);
 800d380:	4b07      	ldr	r3, [pc, #28]	; (800d3a0 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800d382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d38c:	d101      	bne.n	800d392 <LL_RCC_PLL2R_IsEnabled+0x16>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <LL_RCC_PLL2R_IsEnabled+0x18>
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	58024400 	.word	0x58024400

0800d3a4 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 800d3a8:	4b06      	ldr	r3, [pc, #24]	; (800d3c4 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800d3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ac:	f003 0310 	and.w	r3, r3, #16
 800d3b0:	2b10      	cmp	r3, #16
 800d3b2:	d101      	bne.n	800d3b8 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e000      	b.n	800d3ba <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	58024400 	.word	0x58024400

0800d3c8 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800d3cc:	4b04      	ldr	r3, [pc, #16]	; (800d3e0 <LL_RCC_PLL2_GetN+0x18>)
 800d3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d4:	3301      	adds	r3, #1
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	58024400 	.word	0x58024400

0800d3e4 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800d3e8:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <LL_RCC_PLL2_GetM+0x18>)
 800d3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ec:	0b1b      	lsrs	r3, r3, #12
 800d3ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	58024400 	.word	0x58024400

0800d400 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800d400:	b480      	push	{r7}
 800d402:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800d404:	4b05      	ldr	r3, [pc, #20]	; (800d41c <LL_RCC_PLL2_GetP+0x1c>)
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	0a5b      	lsrs	r3, r3, #9
 800d40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d40e:	3301      	adds	r3, #1
}
 800d410:	4618      	mov	r0, r3
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	58024400 	.word	0x58024400

0800d420 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800d424:	4b05      	ldr	r3, [pc, #20]	; (800d43c <LL_RCC_PLL2_GetQ+0x1c>)
 800d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d428:	0c1b      	lsrs	r3, r3, #16
 800d42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d42e:	3301      	adds	r3, #1
}
 800d430:	4618      	mov	r0, r3
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	58024400 	.word	0x58024400

0800d440 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800d444:	4b05      	ldr	r3, [pc, #20]	; (800d45c <LL_RCC_PLL2_GetR+0x1c>)
 800d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d448:	0e1b      	lsrs	r3, r3, #24
 800d44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d44e:	3301      	adds	r3, #1
}
 800d450:	4618      	mov	r0, r3
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	58024400 	.word	0x58024400

0800d460 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <LL_RCC_PLL2_GetFRACN+0x18>)
 800d466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d468:	08db      	lsrs	r3, r3, #3
 800d46a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800d46e:	4618      	mov	r0, r3
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	58024400 	.word	0x58024400

0800d47c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800d47c:	b480      	push	{r7}
 800d47e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 800d480:	4b07      	ldr	r3, [pc, #28]	; (800d4a0 <LL_RCC_PLL3_IsReady+0x24>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d48c:	d101      	bne.n	800d492 <LL_RCC_PLL3_IsReady+0x16>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <LL_RCC_PLL3_IsReady+0x18>
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	58024400 	.word	0x58024400

0800d4a4 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 800d4a8:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4b4:	d101      	bne.n	800d4ba <LL_RCC_PLL3P_IsEnabled+0x16>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <LL_RCC_PLL3P_IsEnabled+0x18>
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	58024400 	.word	0x58024400

0800d4cc <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN)?1UL:0UL);
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d4dc:	d101      	bne.n	800d4e2 <LL_RCC_PLL3Q_IsEnabled+0x16>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e000      	b.n	800d4e4 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	58024400 	.word	0x58024400

0800d4f4 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN)?1UL:0UL);
 800d4f8:	4b07      	ldr	r3, [pc, #28]	; (800d518 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d504:	d101      	bne.n	800d50a <LL_RCC_PLL3R_IsEnabled+0x16>
 800d506:	2301      	movs	r3, #1
 800d508:	e000      	b.n	800d50c <LL_RCC_PLL3R_IsEnabled+0x18>
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	58024400 	.word	0x58024400

0800d51c <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 800d520:	4b07      	ldr	r3, [pc, #28]	; (800d540 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d52c:	d101      	bne.n	800d532 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800d52e:	2301      	movs	r3, #1
 800d530:	e000      	b.n	800d534 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	58024400 	.word	0x58024400

0800d544 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800d544:	b480      	push	{r7}
 800d546:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800d548:	4b04      	ldr	r3, [pc, #16]	; (800d55c <LL_RCC_PLL3_GetN+0x18>)
 800d54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d550:	3301      	adds	r3, #1
}
 800d552:	4618      	mov	r0, r3
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	58024400 	.word	0x58024400

0800d560 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800d560:	b480      	push	{r7}
 800d562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800d564:	4b04      	ldr	r3, [pc, #16]	; (800d578 <LL_RCC_PLL3_GetM+0x18>)
 800d566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d568:	0d1b      	lsrs	r3, r3, #20
 800d56a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d56e:	4618      	mov	r0, r3
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	58024400 	.word	0x58024400

0800d57c <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800d57c:	b480      	push	{r7}
 800d57e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <LL_RCC_PLL3_GetP+0x1c>)
 800d582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d584:	0a5b      	lsrs	r3, r3, #9
 800d586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d58a:	3301      	adds	r3, #1
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	58024400 	.word	0x58024400

0800d59c <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800d5a0:	4b05      	ldr	r3, [pc, #20]	; (800d5b8 <LL_RCC_PLL3_GetQ+0x1c>)
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a4:	0c1b      	lsrs	r3, r3, #16
 800d5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5aa:	3301      	adds	r3, #1
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	58024400 	.word	0x58024400

0800d5bc <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800d5c0:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <LL_RCC_PLL3_GetR+0x1c>)
 800d5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c4:	0e1b      	lsrs	r3, r3, #24
 800d5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ca:	3301      	adds	r3, #1
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	58024400 	.word	0x58024400

0800d5dc <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800d5e0:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <LL_RCC_PLL3_GetFRACN+0x18>)
 800d5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e4:	08db      	lsrs	r3, r3, #3
 800d5e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	58024400 	.word	0x58024400

0800d5f8 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b08a      	sub	sp, #40	; 0x28
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800d600:	2300      	movs	r3, #0
 800d602:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800d604:	2300      	movs	r3, #0
 800d606:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800d608:	f7ff fdc6 	bl	800d198 <LL_RCC_PLL_GetSource>
 800d60c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b02      	cmp	r3, #2
 800d612:	d01f      	beq.n	800d654 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2b02      	cmp	r3, #2
 800d618:	d824      	bhi.n	800d664 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <LL_RCC_GetPLL1ClockFreq+0x30>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d00e      	beq.n	800d644 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800d626:	e01d      	b.n	800d664 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800d628:	f7ff fcf8 	bl	800d01c <LL_RCC_HSI_IsReady>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d01a      	beq.n	800d668 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800d632:	f7ff fd05 	bl	800d040 <LL_RCC_HSI_GetDivider>
 800d636:	4603      	mov	r3, r0
 800d638:	08db      	lsrs	r3, r3, #3
 800d63a:	4a38      	ldr	r2, [pc, #224]	; (800d71c <LL_RCC_GetPLL1ClockFreq+0x124>)
 800d63c:	fa22 f303 	lsr.w	r3, r2, r3
 800d640:	61fb      	str	r3, [r7, #28]
      break;
 800d642:	e011      	b.n	800d668 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800d644:	f7ff fd0a 	bl	800d05c <LL_RCC_CSI_IsReady>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00e      	beq.n	800d66c <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800d64e:	4b34      	ldr	r3, [pc, #208]	; (800d720 <LL_RCC_GetPLL1ClockFreq+0x128>)
 800d650:	61fb      	str	r3, [r7, #28]
      break;
 800d652:	e00b      	b.n	800d66c <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800d654:	f7ff fcce 	bl	800cff4 <LL_RCC_HSE_IsReady>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d008      	beq.n	800d670 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800d65e:	4b31      	ldr	r3, [pc, #196]	; (800d724 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800d660:	61fb      	str	r3, [r7, #28]
      break;
 800d662:	e005      	b.n	800d670 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800d664:	bf00      	nop
 800d666:	e004      	b.n	800d672 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800d668:	bf00      	nop
 800d66a:	e002      	b.n	800d672 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800d66c:	bf00      	nop
 800d66e:	e000      	b.n	800d672 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800d670:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800d684:	f7ff fdf2 	bl	800d26c <LL_RCC_PLL1_GetM>
 800d688:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800d68a:	f7ff fde1 	bl	800d250 <LL_RCC_PLL1_GetN>
 800d68e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800d690:	f7ff fdcc 	bl	800d22c <LL_RCC_PLL1FRACN_IsEnabled>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d002      	beq.n	800d6a0 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800d69a:	f7ff fe25 	bl	800d2e8 <LL_RCC_PLL1_GetFRACN>
 800d69e:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d035      	beq.n	800d712 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800d6a6:	f7ff fd85 	bl	800d1b4 <LL_RCC_PLL1P_IsEnabled>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00c      	beq.n	800d6ca <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800d6b0:	f7ff fdea 	bl	800d288 <LL_RCC_PLL1_GetP>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	6939      	ldr	r1, [r7, #16]
 800d6be:	69f8      	ldr	r0, [r7, #28]
 800d6c0:	f000 f964 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800d6ca:	f7ff fd87 	bl	800d1dc <LL_RCC_PLL1Q_IsEnabled>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00c      	beq.n	800d6ee <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800d6d4:	f7ff fde8 	bl	800d2a8 <LL_RCC_PLL1_GetQ>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	6939      	ldr	r1, [r7, #16]
 800d6e2:	69f8      	ldr	r0, [r7, #28]
 800d6e4:	f000 f952 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800d6ee:	f7ff fd89 	bl	800d204 <LL_RCC_PLL1R_IsEnabled>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00c      	beq.n	800d712 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800d6f8:	f7ff fde6 	bl	800d2c8 <LL_RCC_PLL1_GetR>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	6939      	ldr	r1, [r7, #16]
 800d706:	69f8      	ldr	r0, [r7, #28]
 800d708:	f000 f940 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d70c:	4602      	mov	r2, r0
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	609a      	str	r2, [r3, #8]
    }
  }
}
 800d712:	bf00      	nop
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	03d09000 	.word	0x03d09000
 800d720:	003d0900 	.word	0x003d0900
 800d724:	007a1200 	.word	0x007a1200

0800d728 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08a      	sub	sp, #40	; 0x28
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800d730:	2300      	movs	r3, #0
 800d732:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800d738:	f7ff fd2e 	bl	800d198 <LL_RCC_PLL_GetSource>
 800d73c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d01f      	beq.n	800d784 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	2b02      	cmp	r3, #2
 800d748:	d824      	bhi.n	800d794 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <LL_RCC_GetPLL2ClockFreq+0x30>
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d00e      	beq.n	800d774 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800d756:	e01d      	b.n	800d794 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800d758:	f7ff fc60 	bl	800d01c <LL_RCC_HSI_IsReady>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d01a      	beq.n	800d798 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800d762:	f7ff fc6d 	bl	800d040 <LL_RCC_HSI_GetDivider>
 800d766:	4603      	mov	r3, r0
 800d768:	08db      	lsrs	r3, r3, #3
 800d76a:	4a38      	ldr	r2, [pc, #224]	; (800d84c <LL_RCC_GetPLL2ClockFreq+0x124>)
 800d76c:	fa22 f303 	lsr.w	r3, r2, r3
 800d770:	61fb      	str	r3, [r7, #28]
      break;
 800d772:	e011      	b.n	800d798 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800d774:	f7ff fc72 	bl	800d05c <LL_RCC_CSI_IsReady>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00e      	beq.n	800d79c <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800d77e:	4b34      	ldr	r3, [pc, #208]	; (800d850 <LL_RCC_GetPLL2ClockFreq+0x128>)
 800d780:	61fb      	str	r3, [r7, #28]
      break;
 800d782:	e00b      	b.n	800d79c <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800d784:	f7ff fc36 	bl	800cff4 <LL_RCC_HSE_IsReady>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d008      	beq.n	800d7a0 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800d78e:	4b31      	ldr	r3, [pc, #196]	; (800d854 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800d790:	61fb      	str	r3, [r7, #28]
      break;
 800d792:	e005      	b.n	800d7a0 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800d794:	bf00      	nop
 800d796:	e004      	b.n	800d7a2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800d798:	bf00      	nop
 800d79a:	e002      	b.n	800d7a2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800d79c:	bf00      	nop
 800d79e:	e000      	b.n	800d7a2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800d7a0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800d7b4:	f7ff fe16 	bl	800d3e4 <LL_RCC_PLL2_GetM>
 800d7b8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800d7ba:	f7ff fe05 	bl	800d3c8 <LL_RCC_PLL2_GetN>
 800d7be:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800d7c0:	f7ff fdf0 	bl	800d3a4 <LL_RCC_PLL2FRACN_IsEnabled>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800d7ca:	f7ff fe49 	bl	800d460 <LL_RCC_PLL2_GetFRACN>
 800d7ce:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d035      	beq.n	800d842 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800d7d6:	f7ff fda9 	bl	800d32c <LL_RCC_PLL2P_IsEnabled>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00c      	beq.n	800d7fa <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800d7e0:	f7ff fe0e 	bl	800d400 <LL_RCC_PLL2_GetP>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	6939      	ldr	r1, [r7, #16]
 800d7ee:	69f8      	ldr	r0, [r7, #28]
 800d7f0:	f000 f8cc 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d7fa:	f7ff fdab 	bl	800d354 <LL_RCC_PLL2Q_IsEnabled>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00c      	beq.n	800d81e <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800d804:	f7ff fe0c 	bl	800d420 <LL_RCC_PLL2_GetQ>
 800d808:	4603      	mov	r3, r0
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	6939      	ldr	r1, [r7, #16]
 800d812:	69f8      	ldr	r0, [r7, #28]
 800d814:	f000 f8ba 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d818:	4602      	mov	r2, r0
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800d81e:	f7ff fdad 	bl	800d37c <LL_RCC_PLL2R_IsEnabled>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00c      	beq.n	800d842 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800d828:	f7ff fe0a 	bl	800d440 <LL_RCC_PLL2_GetR>
 800d82c:	4603      	mov	r3, r0
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	6939      	ldr	r1, [r7, #16]
 800d836:	69f8      	ldr	r0, [r7, #28]
 800d838:	f000 f8a8 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d83c:	4602      	mov	r2, r0
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	609a      	str	r2, [r3, #8]
    }
  }
}
 800d842:	bf00      	nop
 800d844:	3720      	adds	r7, #32
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	03d09000 	.word	0x03d09000
 800d850:	003d0900 	.word	0x003d0900
 800d854:	007a1200 	.word	0x007a1200

0800d858 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08a      	sub	sp, #40	; 0x28
 800d85c:	af02      	add	r7, sp, #8
 800d85e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800d860:	2300      	movs	r3, #0
 800d862:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800d864:	2300      	movs	r3, #0
 800d866:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800d868:	f7ff fc96 	bl	800d198 <LL_RCC_PLL_GetSource>
 800d86c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b02      	cmp	r3, #2
 800d872:	d01f      	beq.n	800d8b4 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2b02      	cmp	r3, #2
 800d878:	d824      	bhi.n	800d8c4 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d003      	beq.n	800d888 <LL_RCC_GetPLL3ClockFreq+0x30>
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d00e      	beq.n	800d8a4 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800d886:	e01d      	b.n	800d8c4 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800d888:	f7ff fbc8 	bl	800d01c <LL_RCC_HSI_IsReady>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d01a      	beq.n	800d8c8 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800d892:	f7ff fbd5 	bl	800d040 <LL_RCC_HSI_GetDivider>
 800d896:	4603      	mov	r3, r0
 800d898:	08db      	lsrs	r3, r3, #3
 800d89a:	4a39      	ldr	r2, [pc, #228]	; (800d980 <LL_RCC_GetPLL3ClockFreq+0x128>)
 800d89c:	fa22 f303 	lsr.w	r3, r2, r3
 800d8a0:	61fb      	str	r3, [r7, #28]
      break;
 800d8a2:	e011      	b.n	800d8c8 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800d8a4:	f7ff fbda 	bl	800d05c <LL_RCC_CSI_IsReady>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00e      	beq.n	800d8cc <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800d8ae:	4b35      	ldr	r3, [pc, #212]	; (800d984 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800d8b0:	61fb      	str	r3, [r7, #28]
      break;
 800d8b2:	e00b      	b.n	800d8cc <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800d8b4:	f7ff fb9e 	bl	800cff4 <LL_RCC_HSE_IsReady>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d008      	beq.n	800d8d0 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800d8be:	4b32      	ldr	r3, [pc, #200]	; (800d988 <LL_RCC_GetPLL3ClockFreq+0x130>)
 800d8c0:	61fb      	str	r3, [r7, #28]
      break;
 800d8c2:	e005      	b.n	800d8d0 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800d8c4:	bf00      	nop
 800d8c6:	e004      	b.n	800d8d2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800d8c8:	bf00      	nop
 800d8ca:	e002      	b.n	800d8d2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800d8cc:	bf00      	nop
 800d8ce:	e000      	b.n	800d8d2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800d8d0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800d8e4:	f7ff fe3c 	bl	800d560 <LL_RCC_PLL3_GetM>
 800d8e8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800d8ea:	f7ff fe2b 	bl	800d544 <LL_RCC_PLL3_GetN>
 800d8ee:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800d8f0:	f7ff fe14 	bl	800d51c <LL_RCC_PLL3FRACN_IsEnabled>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800d8fa:	f7ff fe6f 	bl	800d5dc <LL_RCC_PLL3_GetFRACN>
 800d8fe:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d038      	beq.n	800d978 <LL_RCC_GetPLL3ClockFreq+0x120>
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d035      	beq.n	800d978 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800d90c:	f7ff fdca 	bl	800d4a4 <LL_RCC_PLL3P_IsEnabled>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00c      	beq.n	800d930 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800d916:	f7ff fe31 	bl	800d57c <LL_RCC_PLL3_GetP>
 800d91a:	4603      	mov	r3, r0
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	6939      	ldr	r1, [r7, #16]
 800d924:	69f8      	ldr	r0, [r7, #28]
 800d926:	f000 f831 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d92a:	4602      	mov	r2, r0
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d930:	f7ff fdcc 	bl	800d4cc <LL_RCC_PLL3Q_IsEnabled>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00c      	beq.n	800d954 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800d93a:	f7ff fe2f 	bl	800d59c <LL_RCC_PLL3_GetQ>
 800d93e:	4603      	mov	r3, r0
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	6939      	ldr	r1, [r7, #16]
 800d948:	69f8      	ldr	r0, [r7, #28]
 800d94a:	f000 f81f 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d94e:	4602      	mov	r2, r0
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800d954:	f7ff fdce 	bl	800d4f4 <LL_RCC_PLL3R_IsEnabled>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00c      	beq.n	800d978 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800d95e:	f7ff fe2d 	bl	800d5bc <LL_RCC_PLL3_GetR>
 800d962:	4603      	mov	r3, r0
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	6939      	ldr	r1, [r7, #16]
 800d96c:	69f8      	ldr	r0, [r7, #28]
 800d96e:	f000 f80d 	bl	800d98c <LL_RCC_CalcPLLClockFreq>
 800d972:	4602      	mov	r2, r0
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	609a      	str	r2, [r3, #8]
    }
  }
}
 800d978:	bf00      	nop
 800d97a:	3720      	adds	r7, #32
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	03d09000 	.word	0x03d09000
 800d984:	003d0900 	.word	0x003d0900
 800d988:	007a1200 	.word	0x007a1200

0800d98c <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	ee07 3a90 	vmov	s15, r3
 800d9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	ee07 3a90 	vmov	s15, r3
 800d9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	ee07 3a90 	vmov	s15, r3
 800d9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800d9c6:	eddf 5a10 	vldr	s11, [pc, #64]	; 800da08 <LL_RCC_CalcPLLClockFreq+0x7c>
 800d9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d6:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq/(float_t)PQR;
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	ee07 3a90 	vmov	s15, r3
 800d9e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d9e4:	edd7 6a05 	vldr	s13, [r7, #20]
 800d9e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9ec:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800d9f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9f8:	ee17 3a90 	vmov	r3, s15
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	371c      	adds	r7, #28
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	46000000 	.word	0x46000000

0800da0c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800da0c:	b590      	push	{r4, r7, lr}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800da14:	2300      	movs	r3, #0
 800da16:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff fbb1 	bl	800d180 <LL_RCC_GetUSARTClockSource>
 800da1e:	4603      	mov	r3, r0
 800da20:	4a62      	ldr	r2, [pc, #392]	; (800dbac <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800da22:	4293      	cmp	r3, r2
 800da24:	f000 80a9 	beq.w	800db7a <LL_RCC_GetUSARTClockFreq+0x16e>
 800da28:	4a60      	ldr	r2, [pc, #384]	; (800dbac <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	f200 80ae 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da30:	4a5f      	ldr	r2, [pc, #380]	; (800dbb0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800da32:	4293      	cmp	r3, r2
 800da34:	f000 80a1 	beq.w	800db7a <LL_RCC_GetUSARTClockFreq+0x16e>
 800da38:	4a5d      	ldr	r2, [pc, #372]	; (800dbb0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	f200 80a6 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da40:	4a5c      	ldr	r2, [pc, #368]	; (800dbb4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800da42:	4293      	cmp	r3, r2
 800da44:	f000 8091 	beq.w	800db6a <LL_RCC_GetUSARTClockFreq+0x15e>
 800da48:	4a5a      	ldr	r2, [pc, #360]	; (800dbb4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	f200 809e 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da50:	4a59      	ldr	r2, [pc, #356]	; (800dbb8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800da52:	4293      	cmp	r3, r2
 800da54:	f000 8089 	beq.w	800db6a <LL_RCC_GetUSARTClockFreq+0x15e>
 800da58:	4a57      	ldr	r2, [pc, #348]	; (800dbb8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	f200 8096 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da60:	4a56      	ldr	r2, [pc, #344]	; (800dbbc <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d073      	beq.n	800db4e <LL_RCC_GetUSARTClockFreq+0x142>
 800da66:	4a55      	ldr	r2, [pc, #340]	; (800dbbc <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	f200 808f 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da6e:	4a54      	ldr	r2, [pc, #336]	; (800dbc0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d06c      	beq.n	800db4e <LL_RCC_GetUSARTClockFreq+0x142>
 800da74:	4a52      	ldr	r2, [pc, #328]	; (800dbc0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800da76:	4293      	cmp	r3, r2
 800da78:	f200 8088 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da7c:	4a51      	ldr	r2, [pc, #324]	; (800dbc4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d058      	beq.n	800db34 <LL_RCC_GetUSARTClockFreq+0x128>
 800da82:	4a50      	ldr	r2, [pc, #320]	; (800dbc4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800da84:	4293      	cmp	r3, r2
 800da86:	f200 8081 	bhi.w	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da8a:	4a4f      	ldr	r2, [pc, #316]	; (800dbc8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d051      	beq.n	800db34 <LL_RCC_GetUSARTClockFreq+0x128>
 800da90:	4a4d      	ldr	r2, [pc, #308]	; (800dbc8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d87a      	bhi.n	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800da96:	4a4d      	ldr	r2, [pc, #308]	; (800dbcc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d03e      	beq.n	800db1a <LL_RCC_GetUSARTClockFreq+0x10e>
 800da9c:	4a4b      	ldr	r2, [pc, #300]	; (800dbcc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d874      	bhi.n	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800daa2:	4a4b      	ldr	r2, [pc, #300]	; (800dbd0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d038      	beq.n	800db1a <LL_RCC_GetUSARTClockFreq+0x10e>
 800daa8:	4a49      	ldr	r2, [pc, #292]	; (800dbd0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d86e      	bhi.n	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
 800daae:	4a49      	ldr	r2, [pc, #292]	; (800dbd4 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d01a      	beq.n	800daea <LL_RCC_GetUSARTClockFreq+0xde>
 800dab4:	4a48      	ldr	r2, [pc, #288]	; (800dbd8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d168      	bne.n	800db8c <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 800daba:	f000 f895 	bl	800dbe8 <RCC_GetSystemClockFreq>
 800dabe:	4604      	mov	r4, r0
 800dac0:	f7ff fb00 	bl	800d0c4 <LL_RCC_GetSysPrescaler>
 800dac4:	4603      	mov	r3, r0
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	f003 030f 	and.w	r3, r3, #15
 800dacc:	4a43      	ldr	r2, [pc, #268]	; (800dbdc <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800dace:	5cd3      	ldrb	r3, [r2, r3]
 800dad0:	f003 031f 	and.w	r3, r3, #31
 800dad4:	fa24 f303 	lsr.w	r3, r4, r3
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 f8e7 	bl	800dcac <RCC_GetHCLKClockFreq>
 800dade:	4603      	mov	r3, r0
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 f911 	bl	800dd08 <RCC_GetPCLK2ClockFreq>
 800dae6:	6178      	str	r0, [r7, #20]
      break;
 800dae8:	e05b      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 800daea:	f000 f87d 	bl	800dbe8 <RCC_GetSystemClockFreq>
 800daee:	4604      	mov	r4, r0
 800daf0:	f7ff fae8 	bl	800d0c4 <LL_RCC_GetSysPrescaler>
 800daf4:	4603      	mov	r3, r0
 800daf6:	0a1b      	lsrs	r3, r3, #8
 800daf8:	f003 030f 	and.w	r3, r3, #15
 800dafc:	4a37      	ldr	r2, [pc, #220]	; (800dbdc <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800dafe:	5cd3      	ldrb	r3, [r2, r3]
 800db00:	f003 031f 	and.w	r3, r3, #31
 800db04:	fa24 f303 	lsr.w	r3, r4, r3
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 f8cf 	bl	800dcac <RCC_GetHCLKClockFreq>
 800db0e:	4603      	mov	r3, r0
 800db10:	4618      	mov	r0, r3
 800db12:	f000 f8e1 	bl	800dcd8 <RCC_GetPCLK1ClockFreq>
 800db16:	6178      	str	r0, [r7, #20]
      break;
 800db18:	e043      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800db1a:	f7ff fbf3 	bl	800d304 <LL_RCC_PLL2_IsReady>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d035      	beq.n	800db90 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800db24:	f107 0308 	add.w	r3, r7, #8
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff fdfd 	bl	800d728 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	617b      	str	r3, [r7, #20]
      }
      break;
 800db32:	e02d      	b.n	800db90 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800db34:	f7ff fca2 	bl	800d47c <LL_RCC_PLL3_IsReady>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d02a      	beq.n	800db94 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800db3e:	f107 0308 	add.w	r3, r7, #8
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff fe88 	bl	800d858 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	617b      	str	r3, [r7, #20]
      }
      break;
 800db4c:	e022      	b.n	800db94 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800db4e:	f7ff fa65 	bl	800d01c <LL_RCC_HSI_IsReady>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d01f      	beq.n	800db98 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800db58:	f7ff fa72 	bl	800d040 <LL_RCC_HSI_GetDivider>
 800db5c:	4603      	mov	r3, r0
 800db5e:	08db      	lsrs	r3, r3, #3
 800db60:	4a1f      	ldr	r2, [pc, #124]	; (800dbe0 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800db62:	fa22 f303 	lsr.w	r3, r2, r3
 800db66:	617b      	str	r3, [r7, #20]
      }
      break;
 800db68:	e016      	b.n	800db98 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800db6a:	f7ff fa77 	bl	800d05c <LL_RCC_CSI_IsReady>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d013      	beq.n	800db9c <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800db74:	4b1b      	ldr	r3, [pc, #108]	; (800dbe4 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800db76:	617b      	str	r3, [r7, #20]
      }
      break;
 800db78:	e010      	b.n	800db9c <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800db7a:	f7ff fa83 	bl	800d084 <LL_RCC_LSE_IsReady>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00d      	beq.n	800dba0 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800db84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db88:	617b      	str	r3, [r7, #20]
      }
      break;
 800db8a:	e009      	b.n	800dba0 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800db8c:	bf00      	nop
 800db8e:	e008      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800db90:	bf00      	nop
 800db92:	e006      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800db94:	bf00      	nop
 800db96:	e004      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800db98:	bf00      	nop
 800db9a:	e002      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800db9c:	bf00      	nop
 800db9e:	e000      	b.n	800dba2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800dba0:	bf00      	nop
  }

  return usart_frequency;
 800dba2:	697b      	ldr	r3, [r7, #20]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	371c      	adds	r7, #28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd90      	pop	{r4, r7, pc}
 800dbac:	07050308 	.word	0x07050308
 800dbb0:	07050008 	.word	0x07050008
 800dbb4:	07040308 	.word	0x07040308
 800dbb8:	07040008 	.word	0x07040008
 800dbbc:	07030308 	.word	0x07030308
 800dbc0:	07030008 	.word	0x07030008
 800dbc4:	07020308 	.word	0x07020308
 800dbc8:	07020008 	.word	0x07020008
 800dbcc:	07010308 	.word	0x07010308
 800dbd0:	07010008 	.word	0x07010008
 800dbd4:	07000008 	.word	0x07000008
 800dbd8:	07000308 	.word	0x07000308
 800dbdc:	080145f0 	.word	0x080145f0
 800dbe0:	03d09000 	.word	0x03d09000
 800dbe4:	003d0900 	.word	0x003d0900

0800dbe8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800dbf2:	f7ff fa59 	bl	800d0a8 <LL_RCC_GetSysClkSource>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b18      	cmp	r3, #24
 800dbfa:	d84b      	bhi.n	800dc94 <RCC_GetSystemClockFreq+0xac>
 800dbfc:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <RCC_GetSystemClockFreq+0x1c>)
 800dbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc02:	bf00      	nop
 800dc04:	0800dc69 	.word	0x0800dc69
 800dc08:	0800dc95 	.word	0x0800dc95
 800dc0c:	0800dc95 	.word	0x0800dc95
 800dc10:	0800dc95 	.word	0x0800dc95
 800dc14:	0800dc95 	.word	0x0800dc95
 800dc18:	0800dc95 	.word	0x0800dc95
 800dc1c:	0800dc95 	.word	0x0800dc95
 800dc20:	0800dc95 	.word	0x0800dc95
 800dc24:	0800dc7b 	.word	0x0800dc7b
 800dc28:	0800dc95 	.word	0x0800dc95
 800dc2c:	0800dc95 	.word	0x0800dc95
 800dc30:	0800dc95 	.word	0x0800dc95
 800dc34:	0800dc95 	.word	0x0800dc95
 800dc38:	0800dc95 	.word	0x0800dc95
 800dc3c:	0800dc95 	.word	0x0800dc95
 800dc40:	0800dc95 	.word	0x0800dc95
 800dc44:	0800dc81 	.word	0x0800dc81
 800dc48:	0800dc95 	.word	0x0800dc95
 800dc4c:	0800dc95 	.word	0x0800dc95
 800dc50:	0800dc95 	.word	0x0800dc95
 800dc54:	0800dc95 	.word	0x0800dc95
 800dc58:	0800dc95 	.word	0x0800dc95
 800dc5c:	0800dc95 	.word	0x0800dc95
 800dc60:	0800dc95 	.word	0x0800dc95
 800dc64:	0800dc87 	.word	0x0800dc87
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800dc68:	f7ff f9ea 	bl	800d040 <LL_RCC_HSI_GetDivider>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	08db      	lsrs	r3, r3, #3
 800dc70:	4a0b      	ldr	r2, [pc, #44]	; (800dca0 <RCC_GetSystemClockFreq+0xb8>)
 800dc72:	fa22 f303 	lsr.w	r3, r2, r3
 800dc76:	60fb      	str	r3, [r7, #12]
      break;
 800dc78:	e00d      	b.n	800dc96 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800dc7a:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <RCC_GetSystemClockFreq+0xbc>)
 800dc7c:	60fb      	str	r3, [r7, #12]
      break;
 800dc7e:	e00a      	b.n	800dc96 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800dc80:	4b09      	ldr	r3, [pc, #36]	; (800dca8 <RCC_GetSystemClockFreq+0xc0>)
 800dc82:	60fb      	str	r3, [r7, #12]
      break;
 800dc84:	e007      	b.n	800dc96 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800dc86:	463b      	mov	r3, r7
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fcb5 	bl	800d5f8 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	60fb      	str	r3, [r7, #12]
      break;
 800dc92:	e000      	b.n	800dc96 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800dc94:	bf00      	nop
  }

  return frequency;
 800dc96:	68fb      	ldr	r3, [r7, #12]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	03d09000 	.word	0x03d09000
 800dca4:	003d0900 	.word	0x003d0900
 800dca8:	007a1200 	.word	0x007a1200

0800dcac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800dcb4:	f7ff fa14 	bl	800d0e0 <LL_RCC_GetAHBPrescaler>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	f003 030f 	and.w	r3, r3, #15
 800dcbe:	4a05      	ldr	r2, [pc, #20]	; (800dcd4 <RCC_GetHCLKClockFreq+0x28>)
 800dcc0:	5cd3      	ldrb	r3, [r2, r3]
 800dcc2:	f003 031f 	and.w	r3, r3, #31
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	080145f0 	.word	0x080145f0

0800dcd8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800dce0:	f7ff fa0c 	bl	800d0fc <LL_RCC_GetAPB1Prescaler>
 800dce4:	4603      	mov	r3, r0
 800dce6:	091b      	lsrs	r3, r3, #4
 800dce8:	f003 0307 	and.w	r3, r3, #7
 800dcec:	4a05      	ldr	r2, [pc, #20]	; (800dd04 <RCC_GetPCLK1ClockFreq+0x2c>)
 800dcee:	5cd3      	ldrb	r3, [r2, r3]
 800dcf0:	f003 031f 	and.w	r3, r3, #31
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	080145f0 	.word	0x080145f0

0800dd08 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800dd10:	f7ff fa02 	bl	800d118 <LL_RCC_GetAPB2Prescaler>
 800dd14:	4603      	mov	r3, r0
 800dd16:	0a1b      	lsrs	r3, r3, #8
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	4a05      	ldr	r2, [pc, #20]	; (800dd34 <RCC_GetPCLK2ClockFreq+0x2c>)
 800dd1e:	5cd3      	ldrb	r3, [r2, r3]
 800dd20:	f003 031f 	and.w	r3, r3, #31
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	080145f0 	.word	0x080145f0

0800dd38 <LL_TIM_SetPrescaler>:
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dd48:	bf00      	nop
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <LL_TIM_SetAutoReload>:
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800dd64:	bf00      	nop
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <LL_TIM_SetRepetitionCounter>:
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	683a      	ldr	r2, [r7, #0]
 800dd7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	695b      	ldr	r3, [r3, #20]
 800dd98:	f043 0201 	orr.w	r2, r3, #1
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	615a      	str	r2, [r3, #20]
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a3d      	ldr	r2, [pc, #244]	; (800deb4 <LL_TIM_Init+0x108>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d013      	beq.n	800ddec <LL_TIM_Init+0x40>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddca:	d00f      	beq.n	800ddec <LL_TIM_Init+0x40>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a3a      	ldr	r2, [pc, #232]	; (800deb8 <LL_TIM_Init+0x10c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d00b      	beq.n	800ddec <LL_TIM_Init+0x40>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a39      	ldr	r2, [pc, #228]	; (800debc <LL_TIM_Init+0x110>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d007      	beq.n	800ddec <LL_TIM_Init+0x40>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a38      	ldr	r2, [pc, #224]	; (800dec0 <LL_TIM_Init+0x114>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d003      	beq.n	800ddec <LL_TIM_Init+0x40>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a37      	ldr	r2, [pc, #220]	; (800dec4 <LL_TIM_Init+0x118>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d106      	bne.n	800ddfa <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a2d      	ldr	r2, [pc, #180]	; (800deb4 <LL_TIM_Init+0x108>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d01f      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de08:	d01b      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a2a      	ldr	r2, [pc, #168]	; (800deb8 <LL_TIM_Init+0x10c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d017      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a29      	ldr	r2, [pc, #164]	; (800debc <LL_TIM_Init+0x110>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d013      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a28      	ldr	r2, [pc, #160]	; (800dec0 <LL_TIM_Init+0x114>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d00f      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a27      	ldr	r2, [pc, #156]	; (800dec4 <LL_TIM_Init+0x118>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d00b      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a26      	ldr	r2, [pc, #152]	; (800dec8 <LL_TIM_Init+0x11c>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d007      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a25      	ldr	r2, [pc, #148]	; (800decc <LL_TIM_Init+0x120>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d003      	beq.n	800de42 <LL_TIM_Init+0x96>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a24      	ldr	r2, [pc, #144]	; (800ded0 <LL_TIM_Init+0x124>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d106      	bne.n	800de50 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff ff79 	bl	800dd54 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff ff65 	bl	800dd38 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a10      	ldr	r2, [pc, #64]	; (800deb4 <LL_TIM_Init+0x108>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00f      	beq.n	800de96 <LL_TIM_Init+0xea>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a12      	ldr	r2, [pc, #72]	; (800dec4 <LL_TIM_Init+0x118>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d00b      	beq.n	800de96 <LL_TIM_Init+0xea>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a11      	ldr	r2, [pc, #68]	; (800dec8 <LL_TIM_Init+0x11c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d007      	beq.n	800de96 <LL_TIM_Init+0xea>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a10      	ldr	r2, [pc, #64]	; (800decc <LL_TIM_Init+0x120>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d003      	beq.n	800de96 <LL_TIM_Init+0xea>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a0f      	ldr	r2, [pc, #60]	; (800ded0 <LL_TIM_Init+0x124>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d105      	bne.n	800dea2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff ff67 	bl	800dd70 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff ff72 	bl	800dd8c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	40010000 	.word	0x40010000
 800deb8:	40000400 	.word	0x40000400
 800debc:	40000800 	.word	0x40000800
 800dec0:	40000c00 	.word	0x40000c00
 800dec4:	40010400 	.word	0x40010400
 800dec8:	40014000 	.word	0x40014000
 800decc:	40014400 	.word	0x40014400
 800ded0:	40014800 	.word	0x40014800

0800ded4 <LL_USART_IsEnabled>:
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d101      	bne.n	800deec <LL_USART_IsEnabled+0x18>
 800dee8:	2301      	movs	r3, #1
 800deea:	e000      	b.n	800deee <LL_USART_IsEnabled+0x1a>
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr

0800defa <LL_USART_SetPrescaler>:
{
 800defa:	b480      	push	{r7}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df08:	f023 030f 	bic.w	r3, r3, #15
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	b292      	uxth	r2, r2
 800df10:	431a      	orrs	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800df16:	bf00      	nop
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <LL_USART_SetStopBitsLength>:
{
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	431a      	orrs	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	605a      	str	r2, [r3, #4]
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <LL_USART_SetHWFlowCtrl>:
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	431a      	orrs	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	609a      	str	r2, [r3, #8]
}
 800df62:	bf00      	nop
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
	...

0800df70 <LL_USART_SetBaudRate>:
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
 800df7c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b0b      	cmp	r3, #11
 800df82:	d83c      	bhi.n	800dffe <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d039      	beq.n	800dffe <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df90:	d122      	bne.n	800dfd8 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	b2db      	uxtb	r3, r3
 800df96:	461a      	mov	r2, r3
 800df98:	4b1c      	ldr	r3, [pc, #112]	; (800e00c <LL_USART_SetBaudRate+0x9c>)
 800df9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df9e:	68ba      	ldr	r2, [r7, #8]
 800dfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa4:	005a      	lsls	r2, r3, #1
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	085b      	lsrs	r3, r3, #1
 800dfaa:	441a      	add	r2, r3
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	085b      	lsrs	r3, r3, #1
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	693a      	ldr	r2, [r7, #16]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	60da      	str	r2, [r3, #12]
}
 800dfd6:	e012      	b.n	800dffe <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4b0b      	ldr	r3, [pc, #44]	; (800e00c <LL_USART_SetBaudRate+0x9c>)
 800dfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	085b      	lsrs	r3, r3, #1
 800dfee:	441a      	add	r2, r3
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	461a      	mov	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	60da      	str	r2, [r3, #12]
}
 800dffe:	bf00      	nop
 800e000:	371c      	adds	r7, #28
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	08014600 	.word	0x08014600

0800e010 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af02      	add	r7, sp, #8
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800e01e:	2300      	movs	r3, #0
 800e020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff ff56 	bl	800ded4 <LL_USART_IsEnabled>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d17f      	bne.n	800e12e <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	4b41      	ldr	r3, [pc, #260]	; (800e138 <LL_USART_Init+0x128>)
 800e034:	4013      	ands	r3, r2
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	6891      	ldr	r1, [r2, #8]
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	6912      	ldr	r2, [r2, #16]
 800e03e:	4311      	orrs	r1, r2
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	6952      	ldr	r2, [r2, #20]
 800e044:	4311      	orrs	r1, r2
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	69d2      	ldr	r2, [r2, #28]
 800e04a:	430a      	orrs	r2, r1
 800e04c:	431a      	orrs	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	4619      	mov	r1, r3
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff ff62 	bl	800df22 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	4619      	mov	r1, r3
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff ff6f 	bl	800df48 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a33      	ldr	r2, [pc, #204]	; (800e13c <LL_USART_Init+0x12c>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d104      	bne.n	800e07c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800e072:	4833      	ldr	r0, [pc, #204]	; (800e140 <LL_USART_Init+0x130>)
 800e074:	f7ff fcca 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e078:	60b8      	str	r0, [r7, #8]
 800e07a:	e03d      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a31      	ldr	r2, [pc, #196]	; (800e144 <LL_USART_Init+0x134>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d104      	bne.n	800e08e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800e084:	4830      	ldr	r0, [pc, #192]	; (800e148 <LL_USART_Init+0x138>)
 800e086:	f7ff fcc1 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e08a:	60b8      	str	r0, [r7, #8]
 800e08c:	e034      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a2e      	ldr	r2, [pc, #184]	; (800e14c <LL_USART_Init+0x13c>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d104      	bne.n	800e0a0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800e096:	482c      	ldr	r0, [pc, #176]	; (800e148 <LL_USART_Init+0x138>)
 800e098:	f7ff fcb8 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e09c:	60b8      	str	r0, [r7, #8]
 800e09e:	e02b      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a2b      	ldr	r2, [pc, #172]	; (800e150 <LL_USART_Init+0x140>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d104      	bne.n	800e0b2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800e0a8:	4827      	ldr	r0, [pc, #156]	; (800e148 <LL_USART_Init+0x138>)
 800e0aa:	f7ff fcaf 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e0ae:	60b8      	str	r0, [r7, #8]
 800e0b0:	e022      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a27      	ldr	r2, [pc, #156]	; (800e154 <LL_USART_Init+0x144>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d104      	bne.n	800e0c4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800e0ba:	4823      	ldr	r0, [pc, #140]	; (800e148 <LL_USART_Init+0x138>)
 800e0bc:	f7ff fca6 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e0c0:	60b8      	str	r0, [r7, #8]
 800e0c2:	e019      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4a24      	ldr	r2, [pc, #144]	; (800e158 <LL_USART_Init+0x148>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d104      	bne.n	800e0d6 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800e0cc:	481c      	ldr	r0, [pc, #112]	; (800e140 <LL_USART_Init+0x130>)
 800e0ce:	f7ff fc9d 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e0d2:	60b8      	str	r0, [r7, #8]
 800e0d4:	e010      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a20      	ldr	r2, [pc, #128]	; (800e15c <LL_USART_Init+0x14c>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d104      	bne.n	800e0e8 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800e0de:	481a      	ldr	r0, [pc, #104]	; (800e148 <LL_USART_Init+0x138>)
 800e0e0:	f7ff fc94 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e0e4:	60b8      	str	r0, [r7, #8]
 800e0e6:	e007      	b.n	800e0f8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a1d      	ldr	r2, [pc, #116]	; (800e160 <LL_USART_Init+0x150>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d103      	bne.n	800e0f8 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800e0f0:	4815      	ldr	r0, [pc, #84]	; (800e148 <LL_USART_Init+0x138>)
 800e0f2:	f7ff fc8b 	bl	800da0c <LL_RCC_GetUSARTClockFreq>
 800e0f6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d011      	beq.n	800e122 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00d      	beq.n	800e122 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800e106:	2300      	movs	r3, #0
 800e108:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	69d9      	ldr	r1, [r3, #28]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	460b      	mov	r3, r1
 800e11a:	68b9      	ldr	r1, [r7, #8]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff ff27 	bl	800df70 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fee6 	bl	800defa <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	efff69f3 	.word	0xefff69f3
 800e13c:	40011000 	.word	0x40011000
 800e140:	07000308 	.word	0x07000308
 800e144:	40004400 	.word	0x40004400
 800e148:	07000008 	.word	0x07000008
 800e14c:	40004800 	.word	0x40004800
 800e150:	40004c00 	.word	0x40004c00
 800e154:	40005000 	.word	0x40005000
 800e158:	40011400 	.word	0x40011400
 800e15c:	40007800 	.word	0x40007800
 800e160:	40007c00 	.word	0x40007c00

0800e164 <__errno>:
 800e164:	4b01      	ldr	r3, [pc, #4]	; (800e16c <__errno+0x8>)
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	24004018 	.word	0x24004018

0800e170 <__libc_init_array>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	4d0d      	ldr	r5, [pc, #52]	; (800e1a8 <__libc_init_array+0x38>)
 800e174:	4c0d      	ldr	r4, [pc, #52]	; (800e1ac <__libc_init_array+0x3c>)
 800e176:	1b64      	subs	r4, r4, r5
 800e178:	10a4      	asrs	r4, r4, #2
 800e17a:	2600      	movs	r6, #0
 800e17c:	42a6      	cmp	r6, r4
 800e17e:	d109      	bne.n	800e194 <__libc_init_array+0x24>
 800e180:	4d0b      	ldr	r5, [pc, #44]	; (800e1b0 <__libc_init_array+0x40>)
 800e182:	4c0c      	ldr	r4, [pc, #48]	; (800e1b4 <__libc_init_array+0x44>)
 800e184:	f000 fc4e 	bl	800ea24 <_init>
 800e188:	1b64      	subs	r4, r4, r5
 800e18a:	10a4      	asrs	r4, r4, #2
 800e18c:	2600      	movs	r6, #0
 800e18e:	42a6      	cmp	r6, r4
 800e190:	d105      	bne.n	800e19e <__libc_init_array+0x2e>
 800e192:	bd70      	pop	{r4, r5, r6, pc}
 800e194:	f855 3b04 	ldr.w	r3, [r5], #4
 800e198:	4798      	blx	r3
 800e19a:	3601      	adds	r6, #1
 800e19c:	e7ee      	b.n	800e17c <__libc_init_array+0xc>
 800e19e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1a2:	4798      	blx	r3
 800e1a4:	3601      	adds	r6, #1
 800e1a6:	e7f2      	b.n	800e18e <__libc_init_array+0x1e>
 800e1a8:	08014664 	.word	0x08014664
 800e1ac:	08014664 	.word	0x08014664
 800e1b0:	08014664 	.word	0x08014664
 800e1b4:	08014668 	.word	0x08014668

0800e1b8 <memset>:
 800e1b8:	4402      	add	r2, r0
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d100      	bne.n	800e1c2 <memset+0xa>
 800e1c0:	4770      	bx	lr
 800e1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1c6:	e7f9      	b.n	800e1bc <memset+0x4>

0800e1c8 <siprintf>:
 800e1c8:	b40e      	push	{r1, r2, r3}
 800e1ca:	b500      	push	{lr}
 800e1cc:	b09c      	sub	sp, #112	; 0x70
 800e1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800e1d0:	9002      	str	r0, [sp, #8]
 800e1d2:	9006      	str	r0, [sp, #24]
 800e1d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1d8:	4809      	ldr	r0, [pc, #36]	; (800e200 <siprintf+0x38>)
 800e1da:	9107      	str	r1, [sp, #28]
 800e1dc:	9104      	str	r1, [sp, #16]
 800e1de:	4909      	ldr	r1, [pc, #36]	; (800e204 <siprintf+0x3c>)
 800e1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e4:	9105      	str	r1, [sp, #20]
 800e1e6:	6800      	ldr	r0, [r0, #0]
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	a902      	add	r1, sp, #8
 800e1ec:	f000 f868 	bl	800e2c0 <_svfiprintf_r>
 800e1f0:	9b02      	ldr	r3, [sp, #8]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
 800e1f6:	b01c      	add	sp, #112	; 0x70
 800e1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1fc:	b003      	add	sp, #12
 800e1fe:	4770      	bx	lr
 800e200:	24004018 	.word	0x24004018
 800e204:	ffff0208 	.word	0xffff0208

0800e208 <__ssputs_r>:
 800e208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e20c:	688e      	ldr	r6, [r1, #8]
 800e20e:	429e      	cmp	r6, r3
 800e210:	4682      	mov	sl, r0
 800e212:	460c      	mov	r4, r1
 800e214:	4690      	mov	r8, r2
 800e216:	461f      	mov	r7, r3
 800e218:	d838      	bhi.n	800e28c <__ssputs_r+0x84>
 800e21a:	898a      	ldrh	r2, [r1, #12]
 800e21c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e220:	d032      	beq.n	800e288 <__ssputs_r+0x80>
 800e222:	6825      	ldr	r5, [r4, #0]
 800e224:	6909      	ldr	r1, [r1, #16]
 800e226:	eba5 0901 	sub.w	r9, r5, r1
 800e22a:	6965      	ldr	r5, [r4, #20]
 800e22c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e234:	3301      	adds	r3, #1
 800e236:	444b      	add	r3, r9
 800e238:	106d      	asrs	r5, r5, #1
 800e23a:	429d      	cmp	r5, r3
 800e23c:	bf38      	it	cc
 800e23e:	461d      	movcc	r5, r3
 800e240:	0553      	lsls	r3, r2, #21
 800e242:	d531      	bpl.n	800e2a8 <__ssputs_r+0xa0>
 800e244:	4629      	mov	r1, r5
 800e246:	f000 fb47 	bl	800e8d8 <_malloc_r>
 800e24a:	4606      	mov	r6, r0
 800e24c:	b950      	cbnz	r0, 800e264 <__ssputs_r+0x5c>
 800e24e:	230c      	movs	r3, #12
 800e250:	f8ca 3000 	str.w	r3, [sl]
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e25a:	81a3      	strh	r3, [r4, #12]
 800e25c:	f04f 30ff 	mov.w	r0, #4294967295
 800e260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e264:	6921      	ldr	r1, [r4, #16]
 800e266:	464a      	mov	r2, r9
 800e268:	f000 fabe 	bl	800e7e8 <memcpy>
 800e26c:	89a3      	ldrh	r3, [r4, #12]
 800e26e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	6126      	str	r6, [r4, #16]
 800e27a:	6165      	str	r5, [r4, #20]
 800e27c:	444e      	add	r6, r9
 800e27e:	eba5 0509 	sub.w	r5, r5, r9
 800e282:	6026      	str	r6, [r4, #0]
 800e284:	60a5      	str	r5, [r4, #8]
 800e286:	463e      	mov	r6, r7
 800e288:	42be      	cmp	r6, r7
 800e28a:	d900      	bls.n	800e28e <__ssputs_r+0x86>
 800e28c:	463e      	mov	r6, r7
 800e28e:	4632      	mov	r2, r6
 800e290:	6820      	ldr	r0, [r4, #0]
 800e292:	4641      	mov	r1, r8
 800e294:	f000 fab6 	bl	800e804 <memmove>
 800e298:	68a3      	ldr	r3, [r4, #8]
 800e29a:	6822      	ldr	r2, [r4, #0]
 800e29c:	1b9b      	subs	r3, r3, r6
 800e29e:	4432      	add	r2, r6
 800e2a0:	60a3      	str	r3, [r4, #8]
 800e2a2:	6022      	str	r2, [r4, #0]
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e7db      	b.n	800e260 <__ssputs_r+0x58>
 800e2a8:	462a      	mov	r2, r5
 800e2aa:	f000 fb6f 	bl	800e98c <_realloc_r>
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d1e1      	bne.n	800e278 <__ssputs_r+0x70>
 800e2b4:	6921      	ldr	r1, [r4, #16]
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	f000 fabe 	bl	800e838 <_free_r>
 800e2bc:	e7c7      	b.n	800e24e <__ssputs_r+0x46>
	...

0800e2c0 <_svfiprintf_r>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	4698      	mov	r8, r3
 800e2c6:	898b      	ldrh	r3, [r1, #12]
 800e2c8:	061b      	lsls	r3, r3, #24
 800e2ca:	b09d      	sub	sp, #116	; 0x74
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	4614      	mov	r4, r2
 800e2d2:	d50e      	bpl.n	800e2f2 <_svfiprintf_r+0x32>
 800e2d4:	690b      	ldr	r3, [r1, #16]
 800e2d6:	b963      	cbnz	r3, 800e2f2 <_svfiprintf_r+0x32>
 800e2d8:	2140      	movs	r1, #64	; 0x40
 800e2da:	f000 fafd 	bl	800e8d8 <_malloc_r>
 800e2de:	6028      	str	r0, [r5, #0]
 800e2e0:	6128      	str	r0, [r5, #16]
 800e2e2:	b920      	cbnz	r0, 800e2ee <_svfiprintf_r+0x2e>
 800e2e4:	230c      	movs	r3, #12
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ec:	e0d1      	b.n	800e492 <_svfiprintf_r+0x1d2>
 800e2ee:	2340      	movs	r3, #64	; 0x40
 800e2f0:	616b      	str	r3, [r5, #20]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f6:	2320      	movs	r3, #32
 800e2f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e300:	2330      	movs	r3, #48	; 0x30
 800e302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4ac <_svfiprintf_r+0x1ec>
 800e306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30a:	f04f 0901 	mov.w	r9, #1
 800e30e:	4623      	mov	r3, r4
 800e310:	469a      	mov	sl, r3
 800e312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e316:	b10a      	cbz	r2, 800e31c <_svfiprintf_r+0x5c>
 800e318:	2a25      	cmp	r2, #37	; 0x25
 800e31a:	d1f9      	bne.n	800e310 <_svfiprintf_r+0x50>
 800e31c:	ebba 0b04 	subs.w	fp, sl, r4
 800e320:	d00b      	beq.n	800e33a <_svfiprintf_r+0x7a>
 800e322:	465b      	mov	r3, fp
 800e324:	4622      	mov	r2, r4
 800e326:	4629      	mov	r1, r5
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ff6d 	bl	800e208 <__ssputs_r>
 800e32e:	3001      	adds	r0, #1
 800e330:	f000 80aa 	beq.w	800e488 <_svfiprintf_r+0x1c8>
 800e334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e336:	445a      	add	r2, fp
 800e338:	9209      	str	r2, [sp, #36]	; 0x24
 800e33a:	f89a 3000 	ldrb.w	r3, [sl]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 80a2 	beq.w	800e488 <_svfiprintf_r+0x1c8>
 800e344:	2300      	movs	r3, #0
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e34e:	f10a 0a01 	add.w	sl, sl, #1
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	9307      	str	r3, [sp, #28]
 800e356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e35a:	931a      	str	r3, [sp, #104]	; 0x68
 800e35c:	4654      	mov	r4, sl
 800e35e:	2205      	movs	r2, #5
 800e360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e364:	4851      	ldr	r0, [pc, #324]	; (800e4ac <_svfiprintf_r+0x1ec>)
 800e366:	f7f1 ffbb 	bl	80002e0 <memchr>
 800e36a:	9a04      	ldr	r2, [sp, #16]
 800e36c:	b9d8      	cbnz	r0, 800e3a6 <_svfiprintf_r+0xe6>
 800e36e:	06d0      	lsls	r0, r2, #27
 800e370:	bf44      	itt	mi
 800e372:	2320      	movmi	r3, #32
 800e374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e378:	0711      	lsls	r1, r2, #28
 800e37a:	bf44      	itt	mi
 800e37c:	232b      	movmi	r3, #43	; 0x2b
 800e37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e382:	f89a 3000 	ldrb.w	r3, [sl]
 800e386:	2b2a      	cmp	r3, #42	; 0x2a
 800e388:	d015      	beq.n	800e3b6 <_svfiprintf_r+0xf6>
 800e38a:	9a07      	ldr	r2, [sp, #28]
 800e38c:	4654      	mov	r4, sl
 800e38e:	2000      	movs	r0, #0
 800e390:	f04f 0c0a 	mov.w	ip, #10
 800e394:	4621      	mov	r1, r4
 800e396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39a:	3b30      	subs	r3, #48	; 0x30
 800e39c:	2b09      	cmp	r3, #9
 800e39e:	d94e      	bls.n	800e43e <_svfiprintf_r+0x17e>
 800e3a0:	b1b0      	cbz	r0, 800e3d0 <_svfiprintf_r+0x110>
 800e3a2:	9207      	str	r2, [sp, #28]
 800e3a4:	e014      	b.n	800e3d0 <_svfiprintf_r+0x110>
 800e3a6:	eba0 0308 	sub.w	r3, r0, r8
 800e3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	9304      	str	r3, [sp, #16]
 800e3b2:	46a2      	mov	sl, r4
 800e3b4:	e7d2      	b.n	800e35c <_svfiprintf_r+0x9c>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	1d19      	adds	r1, r3, #4
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	9103      	str	r1, [sp, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	bfbb      	ittet	lt
 800e3c2:	425b      	neglt	r3, r3
 800e3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c8:	9307      	strge	r3, [sp, #28]
 800e3ca:	9307      	strlt	r3, [sp, #28]
 800e3cc:	bfb8      	it	lt
 800e3ce:	9204      	strlt	r2, [sp, #16]
 800e3d0:	7823      	ldrb	r3, [r4, #0]
 800e3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d4:	d10c      	bne.n	800e3f0 <_svfiprintf_r+0x130>
 800e3d6:	7863      	ldrb	r3, [r4, #1]
 800e3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e3da:	d135      	bne.n	800e448 <_svfiprintf_r+0x188>
 800e3dc:	9b03      	ldr	r3, [sp, #12]
 800e3de:	1d1a      	adds	r2, r3, #4
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	9203      	str	r2, [sp, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	bfb8      	it	lt
 800e3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3ec:	3402      	adds	r4, #2
 800e3ee:	9305      	str	r3, [sp, #20]
 800e3f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4bc <_svfiprintf_r+0x1fc>
 800e3f4:	7821      	ldrb	r1, [r4, #0]
 800e3f6:	2203      	movs	r2, #3
 800e3f8:	4650      	mov	r0, sl
 800e3fa:	f7f1 ff71 	bl	80002e0 <memchr>
 800e3fe:	b140      	cbz	r0, 800e412 <_svfiprintf_r+0x152>
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	eba0 000a 	sub.w	r0, r0, sl
 800e406:	fa03 f000 	lsl.w	r0, r3, r0
 800e40a:	9b04      	ldr	r3, [sp, #16]
 800e40c:	4303      	orrs	r3, r0
 800e40e:	3401      	adds	r4, #1
 800e410:	9304      	str	r3, [sp, #16]
 800e412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e416:	4826      	ldr	r0, [pc, #152]	; (800e4b0 <_svfiprintf_r+0x1f0>)
 800e418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e41c:	2206      	movs	r2, #6
 800e41e:	f7f1 ff5f 	bl	80002e0 <memchr>
 800e422:	2800      	cmp	r0, #0
 800e424:	d038      	beq.n	800e498 <_svfiprintf_r+0x1d8>
 800e426:	4b23      	ldr	r3, [pc, #140]	; (800e4b4 <_svfiprintf_r+0x1f4>)
 800e428:	bb1b      	cbnz	r3, 800e472 <_svfiprintf_r+0x1b2>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	3307      	adds	r3, #7
 800e42e:	f023 0307 	bic.w	r3, r3, #7
 800e432:	3308      	adds	r3, #8
 800e434:	9303      	str	r3, [sp, #12]
 800e436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e438:	4433      	add	r3, r6
 800e43a:	9309      	str	r3, [sp, #36]	; 0x24
 800e43c:	e767      	b.n	800e30e <_svfiprintf_r+0x4e>
 800e43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e442:	460c      	mov	r4, r1
 800e444:	2001      	movs	r0, #1
 800e446:	e7a5      	b.n	800e394 <_svfiprintf_r+0xd4>
 800e448:	2300      	movs	r3, #0
 800e44a:	3401      	adds	r4, #1
 800e44c:	9305      	str	r3, [sp, #20]
 800e44e:	4619      	mov	r1, r3
 800e450:	f04f 0c0a 	mov.w	ip, #10
 800e454:	4620      	mov	r0, r4
 800e456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45a:	3a30      	subs	r2, #48	; 0x30
 800e45c:	2a09      	cmp	r2, #9
 800e45e:	d903      	bls.n	800e468 <_svfiprintf_r+0x1a8>
 800e460:	2b00      	cmp	r3, #0
 800e462:	d0c5      	beq.n	800e3f0 <_svfiprintf_r+0x130>
 800e464:	9105      	str	r1, [sp, #20]
 800e466:	e7c3      	b.n	800e3f0 <_svfiprintf_r+0x130>
 800e468:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46c:	4604      	mov	r4, r0
 800e46e:	2301      	movs	r3, #1
 800e470:	e7f0      	b.n	800e454 <_svfiprintf_r+0x194>
 800e472:	ab03      	add	r3, sp, #12
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	462a      	mov	r2, r5
 800e478:	4b0f      	ldr	r3, [pc, #60]	; (800e4b8 <_svfiprintf_r+0x1f8>)
 800e47a:	a904      	add	r1, sp, #16
 800e47c:	4638      	mov	r0, r7
 800e47e:	f3af 8000 	nop.w
 800e482:	1c42      	adds	r2, r0, #1
 800e484:	4606      	mov	r6, r0
 800e486:	d1d6      	bne.n	800e436 <_svfiprintf_r+0x176>
 800e488:	89ab      	ldrh	r3, [r5, #12]
 800e48a:	065b      	lsls	r3, r3, #25
 800e48c:	f53f af2c 	bmi.w	800e2e8 <_svfiprintf_r+0x28>
 800e490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e492:	b01d      	add	sp, #116	; 0x74
 800e494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e498:	ab03      	add	r3, sp, #12
 800e49a:	9300      	str	r3, [sp, #0]
 800e49c:	462a      	mov	r2, r5
 800e49e:	4b06      	ldr	r3, [pc, #24]	; (800e4b8 <_svfiprintf_r+0x1f8>)
 800e4a0:	a904      	add	r1, sp, #16
 800e4a2:	4638      	mov	r0, r7
 800e4a4:	f000 f87a 	bl	800e59c <_printf_i>
 800e4a8:	e7eb      	b.n	800e482 <_svfiprintf_r+0x1c2>
 800e4aa:	bf00      	nop
 800e4ac:	08014630 	.word	0x08014630
 800e4b0:	0801463a 	.word	0x0801463a
 800e4b4:	00000000 	.word	0x00000000
 800e4b8:	0800e209 	.word	0x0800e209
 800e4bc:	08014636 	.word	0x08014636

0800e4c0 <_printf_common>:
 800e4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c4:	4616      	mov	r6, r2
 800e4c6:	4699      	mov	r9, r3
 800e4c8:	688a      	ldr	r2, [r1, #8]
 800e4ca:	690b      	ldr	r3, [r1, #16]
 800e4cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	bfb8      	it	lt
 800e4d4:	4613      	movlt	r3, r2
 800e4d6:	6033      	str	r3, [r6, #0]
 800e4d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4dc:	4607      	mov	r7, r0
 800e4de:	460c      	mov	r4, r1
 800e4e0:	b10a      	cbz	r2, 800e4e6 <_printf_common+0x26>
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	6033      	str	r3, [r6, #0]
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	0699      	lsls	r1, r3, #26
 800e4ea:	bf42      	ittt	mi
 800e4ec:	6833      	ldrmi	r3, [r6, #0]
 800e4ee:	3302      	addmi	r3, #2
 800e4f0:	6033      	strmi	r3, [r6, #0]
 800e4f2:	6825      	ldr	r5, [r4, #0]
 800e4f4:	f015 0506 	ands.w	r5, r5, #6
 800e4f8:	d106      	bne.n	800e508 <_printf_common+0x48>
 800e4fa:	f104 0a19 	add.w	sl, r4, #25
 800e4fe:	68e3      	ldr	r3, [r4, #12]
 800e500:	6832      	ldr	r2, [r6, #0]
 800e502:	1a9b      	subs	r3, r3, r2
 800e504:	42ab      	cmp	r3, r5
 800e506:	dc26      	bgt.n	800e556 <_printf_common+0x96>
 800e508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e50c:	1e13      	subs	r3, r2, #0
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	bf18      	it	ne
 800e512:	2301      	movne	r3, #1
 800e514:	0692      	lsls	r2, r2, #26
 800e516:	d42b      	bmi.n	800e570 <_printf_common+0xb0>
 800e518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e51c:	4649      	mov	r1, r9
 800e51e:	4638      	mov	r0, r7
 800e520:	47c0      	blx	r8
 800e522:	3001      	adds	r0, #1
 800e524:	d01e      	beq.n	800e564 <_printf_common+0xa4>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	68e5      	ldr	r5, [r4, #12]
 800e52a:	6832      	ldr	r2, [r6, #0]
 800e52c:	f003 0306 	and.w	r3, r3, #6
 800e530:	2b04      	cmp	r3, #4
 800e532:	bf08      	it	eq
 800e534:	1aad      	subeq	r5, r5, r2
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	6922      	ldr	r2, [r4, #16]
 800e53a:	bf0c      	ite	eq
 800e53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e540:	2500      	movne	r5, #0
 800e542:	4293      	cmp	r3, r2
 800e544:	bfc4      	itt	gt
 800e546:	1a9b      	subgt	r3, r3, r2
 800e548:	18ed      	addgt	r5, r5, r3
 800e54a:	2600      	movs	r6, #0
 800e54c:	341a      	adds	r4, #26
 800e54e:	42b5      	cmp	r5, r6
 800e550:	d11a      	bne.n	800e588 <_printf_common+0xc8>
 800e552:	2000      	movs	r0, #0
 800e554:	e008      	b.n	800e568 <_printf_common+0xa8>
 800e556:	2301      	movs	r3, #1
 800e558:	4652      	mov	r2, sl
 800e55a:	4649      	mov	r1, r9
 800e55c:	4638      	mov	r0, r7
 800e55e:	47c0      	blx	r8
 800e560:	3001      	adds	r0, #1
 800e562:	d103      	bne.n	800e56c <_printf_common+0xac>
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56c:	3501      	adds	r5, #1
 800e56e:	e7c6      	b.n	800e4fe <_printf_common+0x3e>
 800e570:	18e1      	adds	r1, r4, r3
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	2030      	movs	r0, #48	; 0x30
 800e576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e57a:	4422      	add	r2, r4
 800e57c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e584:	3302      	adds	r3, #2
 800e586:	e7c7      	b.n	800e518 <_printf_common+0x58>
 800e588:	2301      	movs	r3, #1
 800e58a:	4622      	mov	r2, r4
 800e58c:	4649      	mov	r1, r9
 800e58e:	4638      	mov	r0, r7
 800e590:	47c0      	blx	r8
 800e592:	3001      	adds	r0, #1
 800e594:	d0e6      	beq.n	800e564 <_printf_common+0xa4>
 800e596:	3601      	adds	r6, #1
 800e598:	e7d9      	b.n	800e54e <_printf_common+0x8e>
	...

0800e59c <_printf_i>:
 800e59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	4691      	mov	r9, r2
 800e5a4:	7e27      	ldrb	r7, [r4, #24]
 800e5a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5a8:	2f78      	cmp	r7, #120	; 0x78
 800e5aa:	4680      	mov	r8, r0
 800e5ac:	469a      	mov	sl, r3
 800e5ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5b2:	d807      	bhi.n	800e5c4 <_printf_i+0x28>
 800e5b4:	2f62      	cmp	r7, #98	; 0x62
 800e5b6:	d80a      	bhi.n	800e5ce <_printf_i+0x32>
 800e5b8:	2f00      	cmp	r7, #0
 800e5ba:	f000 80d8 	beq.w	800e76e <_printf_i+0x1d2>
 800e5be:	2f58      	cmp	r7, #88	; 0x58
 800e5c0:	f000 80a3 	beq.w	800e70a <_printf_i+0x16e>
 800e5c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e5c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5cc:	e03a      	b.n	800e644 <_printf_i+0xa8>
 800e5ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5d2:	2b15      	cmp	r3, #21
 800e5d4:	d8f6      	bhi.n	800e5c4 <_printf_i+0x28>
 800e5d6:	a001      	add	r0, pc, #4	; (adr r0, 800e5dc <_printf_i+0x40>)
 800e5d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e5dc:	0800e635 	.word	0x0800e635
 800e5e0:	0800e649 	.word	0x0800e649
 800e5e4:	0800e5c5 	.word	0x0800e5c5
 800e5e8:	0800e5c5 	.word	0x0800e5c5
 800e5ec:	0800e5c5 	.word	0x0800e5c5
 800e5f0:	0800e5c5 	.word	0x0800e5c5
 800e5f4:	0800e649 	.word	0x0800e649
 800e5f8:	0800e5c5 	.word	0x0800e5c5
 800e5fc:	0800e5c5 	.word	0x0800e5c5
 800e600:	0800e5c5 	.word	0x0800e5c5
 800e604:	0800e5c5 	.word	0x0800e5c5
 800e608:	0800e755 	.word	0x0800e755
 800e60c:	0800e679 	.word	0x0800e679
 800e610:	0800e737 	.word	0x0800e737
 800e614:	0800e5c5 	.word	0x0800e5c5
 800e618:	0800e5c5 	.word	0x0800e5c5
 800e61c:	0800e777 	.word	0x0800e777
 800e620:	0800e5c5 	.word	0x0800e5c5
 800e624:	0800e679 	.word	0x0800e679
 800e628:	0800e5c5 	.word	0x0800e5c5
 800e62c:	0800e5c5 	.word	0x0800e5c5
 800e630:	0800e73f 	.word	0x0800e73f
 800e634:	680b      	ldr	r3, [r1, #0]
 800e636:	1d1a      	adds	r2, r3, #4
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	600a      	str	r2, [r1, #0]
 800e63c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e644:	2301      	movs	r3, #1
 800e646:	e0a3      	b.n	800e790 <_printf_i+0x1f4>
 800e648:	6825      	ldr	r5, [r4, #0]
 800e64a:	6808      	ldr	r0, [r1, #0]
 800e64c:	062e      	lsls	r6, r5, #24
 800e64e:	f100 0304 	add.w	r3, r0, #4
 800e652:	d50a      	bpl.n	800e66a <_printf_i+0xce>
 800e654:	6805      	ldr	r5, [r0, #0]
 800e656:	600b      	str	r3, [r1, #0]
 800e658:	2d00      	cmp	r5, #0
 800e65a:	da03      	bge.n	800e664 <_printf_i+0xc8>
 800e65c:	232d      	movs	r3, #45	; 0x2d
 800e65e:	426d      	negs	r5, r5
 800e660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e664:	485e      	ldr	r0, [pc, #376]	; (800e7e0 <_printf_i+0x244>)
 800e666:	230a      	movs	r3, #10
 800e668:	e019      	b.n	800e69e <_printf_i+0x102>
 800e66a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e66e:	6805      	ldr	r5, [r0, #0]
 800e670:	600b      	str	r3, [r1, #0]
 800e672:	bf18      	it	ne
 800e674:	b22d      	sxthne	r5, r5
 800e676:	e7ef      	b.n	800e658 <_printf_i+0xbc>
 800e678:	680b      	ldr	r3, [r1, #0]
 800e67a:	6825      	ldr	r5, [r4, #0]
 800e67c:	1d18      	adds	r0, r3, #4
 800e67e:	6008      	str	r0, [r1, #0]
 800e680:	0628      	lsls	r0, r5, #24
 800e682:	d501      	bpl.n	800e688 <_printf_i+0xec>
 800e684:	681d      	ldr	r5, [r3, #0]
 800e686:	e002      	b.n	800e68e <_printf_i+0xf2>
 800e688:	0669      	lsls	r1, r5, #25
 800e68a:	d5fb      	bpl.n	800e684 <_printf_i+0xe8>
 800e68c:	881d      	ldrh	r5, [r3, #0]
 800e68e:	4854      	ldr	r0, [pc, #336]	; (800e7e0 <_printf_i+0x244>)
 800e690:	2f6f      	cmp	r7, #111	; 0x6f
 800e692:	bf0c      	ite	eq
 800e694:	2308      	moveq	r3, #8
 800e696:	230a      	movne	r3, #10
 800e698:	2100      	movs	r1, #0
 800e69a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e69e:	6866      	ldr	r6, [r4, #4]
 800e6a0:	60a6      	str	r6, [r4, #8]
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	bfa2      	ittt	ge
 800e6a6:	6821      	ldrge	r1, [r4, #0]
 800e6a8:	f021 0104 	bicge.w	r1, r1, #4
 800e6ac:	6021      	strge	r1, [r4, #0]
 800e6ae:	b90d      	cbnz	r5, 800e6b4 <_printf_i+0x118>
 800e6b0:	2e00      	cmp	r6, #0
 800e6b2:	d04d      	beq.n	800e750 <_printf_i+0x1b4>
 800e6b4:	4616      	mov	r6, r2
 800e6b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6ba:	fb03 5711 	mls	r7, r3, r1, r5
 800e6be:	5dc7      	ldrb	r7, [r0, r7]
 800e6c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6c4:	462f      	mov	r7, r5
 800e6c6:	42bb      	cmp	r3, r7
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	d9f4      	bls.n	800e6b6 <_printf_i+0x11a>
 800e6cc:	2b08      	cmp	r3, #8
 800e6ce:	d10b      	bne.n	800e6e8 <_printf_i+0x14c>
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	07df      	lsls	r7, r3, #31
 800e6d4:	d508      	bpl.n	800e6e8 <_printf_i+0x14c>
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6861      	ldr	r1, [r4, #4]
 800e6da:	4299      	cmp	r1, r3
 800e6dc:	bfde      	ittt	le
 800e6de:	2330      	movle	r3, #48	; 0x30
 800e6e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6e8:	1b92      	subs	r2, r2, r6
 800e6ea:	6122      	str	r2, [r4, #16]
 800e6ec:	f8cd a000 	str.w	sl, [sp]
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	aa03      	add	r2, sp, #12
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f7ff fee2 	bl	800e4c0 <_printf_common>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d14c      	bne.n	800e79a <_printf_i+0x1fe>
 800e700:	f04f 30ff 	mov.w	r0, #4294967295
 800e704:	b004      	add	sp, #16
 800e706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70a:	4835      	ldr	r0, [pc, #212]	; (800e7e0 <_printf_i+0x244>)
 800e70c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	680e      	ldr	r6, [r1, #0]
 800e714:	061f      	lsls	r7, r3, #24
 800e716:	f856 5b04 	ldr.w	r5, [r6], #4
 800e71a:	600e      	str	r6, [r1, #0]
 800e71c:	d514      	bpl.n	800e748 <_printf_i+0x1ac>
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	bf44      	itt	mi
 800e722:	f043 0320 	orrmi.w	r3, r3, #32
 800e726:	6023      	strmi	r3, [r4, #0]
 800e728:	b91d      	cbnz	r5, 800e732 <_printf_i+0x196>
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	f023 0320 	bic.w	r3, r3, #32
 800e730:	6023      	str	r3, [r4, #0]
 800e732:	2310      	movs	r3, #16
 800e734:	e7b0      	b.n	800e698 <_printf_i+0xfc>
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	f043 0320 	orr.w	r3, r3, #32
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	2378      	movs	r3, #120	; 0x78
 800e740:	4828      	ldr	r0, [pc, #160]	; (800e7e4 <_printf_i+0x248>)
 800e742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e746:	e7e3      	b.n	800e710 <_printf_i+0x174>
 800e748:	065e      	lsls	r6, r3, #25
 800e74a:	bf48      	it	mi
 800e74c:	b2ad      	uxthmi	r5, r5
 800e74e:	e7e6      	b.n	800e71e <_printf_i+0x182>
 800e750:	4616      	mov	r6, r2
 800e752:	e7bb      	b.n	800e6cc <_printf_i+0x130>
 800e754:	680b      	ldr	r3, [r1, #0]
 800e756:	6826      	ldr	r6, [r4, #0]
 800e758:	6960      	ldr	r0, [r4, #20]
 800e75a:	1d1d      	adds	r5, r3, #4
 800e75c:	600d      	str	r5, [r1, #0]
 800e75e:	0635      	lsls	r5, r6, #24
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	d501      	bpl.n	800e768 <_printf_i+0x1cc>
 800e764:	6018      	str	r0, [r3, #0]
 800e766:	e002      	b.n	800e76e <_printf_i+0x1d2>
 800e768:	0671      	lsls	r1, r6, #25
 800e76a:	d5fb      	bpl.n	800e764 <_printf_i+0x1c8>
 800e76c:	8018      	strh	r0, [r3, #0]
 800e76e:	2300      	movs	r3, #0
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	4616      	mov	r6, r2
 800e774:	e7ba      	b.n	800e6ec <_printf_i+0x150>
 800e776:	680b      	ldr	r3, [r1, #0]
 800e778:	1d1a      	adds	r2, r3, #4
 800e77a:	600a      	str	r2, [r1, #0]
 800e77c:	681e      	ldr	r6, [r3, #0]
 800e77e:	6862      	ldr	r2, [r4, #4]
 800e780:	2100      	movs	r1, #0
 800e782:	4630      	mov	r0, r6
 800e784:	f7f1 fdac 	bl	80002e0 <memchr>
 800e788:	b108      	cbz	r0, 800e78e <_printf_i+0x1f2>
 800e78a:	1b80      	subs	r0, r0, r6
 800e78c:	6060      	str	r0, [r4, #4]
 800e78e:	6863      	ldr	r3, [r4, #4]
 800e790:	6123      	str	r3, [r4, #16]
 800e792:	2300      	movs	r3, #0
 800e794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e798:	e7a8      	b.n	800e6ec <_printf_i+0x150>
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	4632      	mov	r2, r6
 800e79e:	4649      	mov	r1, r9
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	47d0      	blx	sl
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d0ab      	beq.n	800e700 <_printf_i+0x164>
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	079b      	lsls	r3, r3, #30
 800e7ac:	d413      	bmi.n	800e7d6 <_printf_i+0x23a>
 800e7ae:	68e0      	ldr	r0, [r4, #12]
 800e7b0:	9b03      	ldr	r3, [sp, #12]
 800e7b2:	4298      	cmp	r0, r3
 800e7b4:	bfb8      	it	lt
 800e7b6:	4618      	movlt	r0, r3
 800e7b8:	e7a4      	b.n	800e704 <_printf_i+0x168>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	4632      	mov	r2, r6
 800e7be:	4649      	mov	r1, r9
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	47d0      	blx	sl
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	d09b      	beq.n	800e700 <_printf_i+0x164>
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	68e3      	ldr	r3, [r4, #12]
 800e7cc:	9903      	ldr	r1, [sp, #12]
 800e7ce:	1a5b      	subs	r3, r3, r1
 800e7d0:	42ab      	cmp	r3, r5
 800e7d2:	dcf2      	bgt.n	800e7ba <_printf_i+0x21e>
 800e7d4:	e7eb      	b.n	800e7ae <_printf_i+0x212>
 800e7d6:	2500      	movs	r5, #0
 800e7d8:	f104 0619 	add.w	r6, r4, #25
 800e7dc:	e7f5      	b.n	800e7ca <_printf_i+0x22e>
 800e7de:	bf00      	nop
 800e7e0:	08014641 	.word	0x08014641
 800e7e4:	08014652 	.word	0x08014652

0800e7e8 <memcpy>:
 800e7e8:	440a      	add	r2, r1
 800e7ea:	4291      	cmp	r1, r2
 800e7ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7f0:	d100      	bne.n	800e7f4 <memcpy+0xc>
 800e7f2:	4770      	bx	lr
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7fe:	4291      	cmp	r1, r2
 800e800:	d1f9      	bne.n	800e7f6 <memcpy+0xe>
 800e802:	bd10      	pop	{r4, pc}

0800e804 <memmove>:
 800e804:	4288      	cmp	r0, r1
 800e806:	b510      	push	{r4, lr}
 800e808:	eb01 0402 	add.w	r4, r1, r2
 800e80c:	d902      	bls.n	800e814 <memmove+0x10>
 800e80e:	4284      	cmp	r4, r0
 800e810:	4623      	mov	r3, r4
 800e812:	d807      	bhi.n	800e824 <memmove+0x20>
 800e814:	1e43      	subs	r3, r0, #1
 800e816:	42a1      	cmp	r1, r4
 800e818:	d008      	beq.n	800e82c <memmove+0x28>
 800e81a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e81e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e822:	e7f8      	b.n	800e816 <memmove+0x12>
 800e824:	4402      	add	r2, r0
 800e826:	4601      	mov	r1, r0
 800e828:	428a      	cmp	r2, r1
 800e82a:	d100      	bne.n	800e82e <memmove+0x2a>
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e836:	e7f7      	b.n	800e828 <memmove+0x24>

0800e838 <_free_r>:
 800e838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e83a:	2900      	cmp	r1, #0
 800e83c:	d048      	beq.n	800e8d0 <_free_r+0x98>
 800e83e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e842:	9001      	str	r0, [sp, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f1a1 0404 	sub.w	r4, r1, #4
 800e84a:	bfb8      	it	lt
 800e84c:	18e4      	addlt	r4, r4, r3
 800e84e:	f000 f8d3 	bl	800e9f8 <__malloc_lock>
 800e852:	4a20      	ldr	r2, [pc, #128]	; (800e8d4 <_free_r+0x9c>)
 800e854:	9801      	ldr	r0, [sp, #4]
 800e856:	6813      	ldr	r3, [r2, #0]
 800e858:	4615      	mov	r5, r2
 800e85a:	b933      	cbnz	r3, 800e86a <_free_r+0x32>
 800e85c:	6063      	str	r3, [r4, #4]
 800e85e:	6014      	str	r4, [r2, #0]
 800e860:	b003      	add	sp, #12
 800e862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e866:	f000 b8cd 	b.w	800ea04 <__malloc_unlock>
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	d90b      	bls.n	800e886 <_free_r+0x4e>
 800e86e:	6821      	ldr	r1, [r4, #0]
 800e870:	1862      	adds	r2, r4, r1
 800e872:	4293      	cmp	r3, r2
 800e874:	bf04      	itt	eq
 800e876:	681a      	ldreq	r2, [r3, #0]
 800e878:	685b      	ldreq	r3, [r3, #4]
 800e87a:	6063      	str	r3, [r4, #4]
 800e87c:	bf04      	itt	eq
 800e87e:	1852      	addeq	r2, r2, r1
 800e880:	6022      	streq	r2, [r4, #0]
 800e882:	602c      	str	r4, [r5, #0]
 800e884:	e7ec      	b.n	800e860 <_free_r+0x28>
 800e886:	461a      	mov	r2, r3
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	b10b      	cbz	r3, 800e890 <_free_r+0x58>
 800e88c:	42a3      	cmp	r3, r4
 800e88e:	d9fa      	bls.n	800e886 <_free_r+0x4e>
 800e890:	6811      	ldr	r1, [r2, #0]
 800e892:	1855      	adds	r5, r2, r1
 800e894:	42a5      	cmp	r5, r4
 800e896:	d10b      	bne.n	800e8b0 <_free_r+0x78>
 800e898:	6824      	ldr	r4, [r4, #0]
 800e89a:	4421      	add	r1, r4
 800e89c:	1854      	adds	r4, r2, r1
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	6011      	str	r1, [r2, #0]
 800e8a2:	d1dd      	bne.n	800e860 <_free_r+0x28>
 800e8a4:	681c      	ldr	r4, [r3, #0]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	6053      	str	r3, [r2, #4]
 800e8aa:	4421      	add	r1, r4
 800e8ac:	6011      	str	r1, [r2, #0]
 800e8ae:	e7d7      	b.n	800e860 <_free_r+0x28>
 800e8b0:	d902      	bls.n	800e8b8 <_free_r+0x80>
 800e8b2:	230c      	movs	r3, #12
 800e8b4:	6003      	str	r3, [r0, #0]
 800e8b6:	e7d3      	b.n	800e860 <_free_r+0x28>
 800e8b8:	6825      	ldr	r5, [r4, #0]
 800e8ba:	1961      	adds	r1, r4, r5
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	bf04      	itt	eq
 800e8c0:	6819      	ldreq	r1, [r3, #0]
 800e8c2:	685b      	ldreq	r3, [r3, #4]
 800e8c4:	6063      	str	r3, [r4, #4]
 800e8c6:	bf04      	itt	eq
 800e8c8:	1949      	addeq	r1, r1, r5
 800e8ca:	6021      	streq	r1, [r4, #0]
 800e8cc:	6054      	str	r4, [r2, #4]
 800e8ce:	e7c7      	b.n	800e860 <_free_r+0x28>
 800e8d0:	b003      	add	sp, #12
 800e8d2:	bd30      	pop	{r4, r5, pc}
 800e8d4:	2400a2e4 	.word	0x2400a2e4

0800e8d8 <_malloc_r>:
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	1ccd      	adds	r5, r1, #3
 800e8dc:	f025 0503 	bic.w	r5, r5, #3
 800e8e0:	3508      	adds	r5, #8
 800e8e2:	2d0c      	cmp	r5, #12
 800e8e4:	bf38      	it	cc
 800e8e6:	250c      	movcc	r5, #12
 800e8e8:	2d00      	cmp	r5, #0
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	db01      	blt.n	800e8f2 <_malloc_r+0x1a>
 800e8ee:	42a9      	cmp	r1, r5
 800e8f0:	d903      	bls.n	800e8fa <_malloc_r+0x22>
 800e8f2:	230c      	movs	r3, #12
 800e8f4:	6033      	str	r3, [r6, #0]
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8fa:	f000 f87d 	bl	800e9f8 <__malloc_lock>
 800e8fe:	4921      	ldr	r1, [pc, #132]	; (800e984 <_malloc_r+0xac>)
 800e900:	680a      	ldr	r2, [r1, #0]
 800e902:	4614      	mov	r4, r2
 800e904:	b99c      	cbnz	r4, 800e92e <_malloc_r+0x56>
 800e906:	4f20      	ldr	r7, [pc, #128]	; (800e988 <_malloc_r+0xb0>)
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	b923      	cbnz	r3, 800e916 <_malloc_r+0x3e>
 800e90c:	4621      	mov	r1, r4
 800e90e:	4630      	mov	r0, r6
 800e910:	f000 f862 	bl	800e9d8 <_sbrk_r>
 800e914:	6038      	str	r0, [r7, #0]
 800e916:	4629      	mov	r1, r5
 800e918:	4630      	mov	r0, r6
 800e91a:	f000 f85d 	bl	800e9d8 <_sbrk_r>
 800e91e:	1c43      	adds	r3, r0, #1
 800e920:	d123      	bne.n	800e96a <_malloc_r+0x92>
 800e922:	230c      	movs	r3, #12
 800e924:	6033      	str	r3, [r6, #0]
 800e926:	4630      	mov	r0, r6
 800e928:	f000 f86c 	bl	800ea04 <__malloc_unlock>
 800e92c:	e7e3      	b.n	800e8f6 <_malloc_r+0x1e>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	1b5b      	subs	r3, r3, r5
 800e932:	d417      	bmi.n	800e964 <_malloc_r+0x8c>
 800e934:	2b0b      	cmp	r3, #11
 800e936:	d903      	bls.n	800e940 <_malloc_r+0x68>
 800e938:	6023      	str	r3, [r4, #0]
 800e93a:	441c      	add	r4, r3
 800e93c:	6025      	str	r5, [r4, #0]
 800e93e:	e004      	b.n	800e94a <_malloc_r+0x72>
 800e940:	6863      	ldr	r3, [r4, #4]
 800e942:	42a2      	cmp	r2, r4
 800e944:	bf0c      	ite	eq
 800e946:	600b      	streq	r3, [r1, #0]
 800e948:	6053      	strne	r3, [r2, #4]
 800e94a:	4630      	mov	r0, r6
 800e94c:	f000 f85a 	bl	800ea04 <__malloc_unlock>
 800e950:	f104 000b 	add.w	r0, r4, #11
 800e954:	1d23      	adds	r3, r4, #4
 800e956:	f020 0007 	bic.w	r0, r0, #7
 800e95a:	1ac2      	subs	r2, r0, r3
 800e95c:	d0cc      	beq.n	800e8f8 <_malloc_r+0x20>
 800e95e:	1a1b      	subs	r3, r3, r0
 800e960:	50a3      	str	r3, [r4, r2]
 800e962:	e7c9      	b.n	800e8f8 <_malloc_r+0x20>
 800e964:	4622      	mov	r2, r4
 800e966:	6864      	ldr	r4, [r4, #4]
 800e968:	e7cc      	b.n	800e904 <_malloc_r+0x2c>
 800e96a:	1cc4      	adds	r4, r0, #3
 800e96c:	f024 0403 	bic.w	r4, r4, #3
 800e970:	42a0      	cmp	r0, r4
 800e972:	d0e3      	beq.n	800e93c <_malloc_r+0x64>
 800e974:	1a21      	subs	r1, r4, r0
 800e976:	4630      	mov	r0, r6
 800e978:	f000 f82e 	bl	800e9d8 <_sbrk_r>
 800e97c:	3001      	adds	r0, #1
 800e97e:	d1dd      	bne.n	800e93c <_malloc_r+0x64>
 800e980:	e7cf      	b.n	800e922 <_malloc_r+0x4a>
 800e982:	bf00      	nop
 800e984:	2400a2e4 	.word	0x2400a2e4
 800e988:	2400a2e8 	.word	0x2400a2e8

0800e98c <_realloc_r>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	4607      	mov	r7, r0
 800e990:	4614      	mov	r4, r2
 800e992:	460e      	mov	r6, r1
 800e994:	b921      	cbnz	r1, 800e9a0 <_realloc_r+0x14>
 800e996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e99a:	4611      	mov	r1, r2
 800e99c:	f7ff bf9c 	b.w	800e8d8 <_malloc_r>
 800e9a0:	b922      	cbnz	r2, 800e9ac <_realloc_r+0x20>
 800e9a2:	f7ff ff49 	bl	800e838 <_free_r>
 800e9a6:	4625      	mov	r5, r4
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ac:	f000 f830 	bl	800ea10 <_malloc_usable_size_r>
 800e9b0:	42a0      	cmp	r0, r4
 800e9b2:	d20f      	bcs.n	800e9d4 <_realloc_r+0x48>
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4638      	mov	r0, r7
 800e9b8:	f7ff ff8e 	bl	800e8d8 <_malloc_r>
 800e9bc:	4605      	mov	r5, r0
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d0f2      	beq.n	800e9a8 <_realloc_r+0x1c>
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	f7ff ff0f 	bl	800e7e8 <memcpy>
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7ff ff33 	bl	800e838 <_free_r>
 800e9d2:	e7e9      	b.n	800e9a8 <_realloc_r+0x1c>
 800e9d4:	4635      	mov	r5, r6
 800e9d6:	e7e7      	b.n	800e9a8 <_realloc_r+0x1c>

0800e9d8 <_sbrk_r>:
 800e9d8:	b538      	push	{r3, r4, r5, lr}
 800e9da:	4d06      	ldr	r5, [pc, #24]	; (800e9f4 <_sbrk_r+0x1c>)
 800e9dc:	2300      	movs	r3, #0
 800e9de:	4604      	mov	r4, r0
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	602b      	str	r3, [r5, #0]
 800e9e4:	f7f8 fcfc 	bl	80073e0 <_sbrk>
 800e9e8:	1c43      	adds	r3, r0, #1
 800e9ea:	d102      	bne.n	800e9f2 <_sbrk_r+0x1a>
 800e9ec:	682b      	ldr	r3, [r5, #0]
 800e9ee:	b103      	cbz	r3, 800e9f2 <_sbrk_r+0x1a>
 800e9f0:	6023      	str	r3, [r4, #0]
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}
 800e9f4:	240132c8 	.word	0x240132c8

0800e9f8 <__malloc_lock>:
 800e9f8:	4801      	ldr	r0, [pc, #4]	; (800ea00 <__malloc_lock+0x8>)
 800e9fa:	f000 b811 	b.w	800ea20 <__retarget_lock_acquire_recursive>
 800e9fe:	bf00      	nop
 800ea00:	240132d0 	.word	0x240132d0

0800ea04 <__malloc_unlock>:
 800ea04:	4801      	ldr	r0, [pc, #4]	; (800ea0c <__malloc_unlock+0x8>)
 800ea06:	f000 b80c 	b.w	800ea22 <__retarget_lock_release_recursive>
 800ea0a:	bf00      	nop
 800ea0c:	240132d0 	.word	0x240132d0

0800ea10 <_malloc_usable_size_r>:
 800ea10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea14:	1f18      	subs	r0, r3, #4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	bfbc      	itt	lt
 800ea1a:	580b      	ldrlt	r3, [r1, r0]
 800ea1c:	18c0      	addlt	r0, r0, r3
 800ea1e:	4770      	bx	lr

0800ea20 <__retarget_lock_acquire_recursive>:
 800ea20:	4770      	bx	lr

0800ea22 <__retarget_lock_release_recursive>:
 800ea22:	4770      	bx	lr

0800ea24 <_init>:
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	bf00      	nop
 800ea28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea2a:	bc08      	pop	{r3}
 800ea2c:	469e      	mov	lr, r3
 800ea2e:	4770      	bx	lr

0800ea30 <_fini>:
 800ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea32:	bf00      	nop
 800ea34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea36:	bc08      	pop	{r3}
 800ea38:	469e      	mov	lr, r3
 800ea3a:	4770      	bx	lr
