
WYSWTLACZ_HUB75a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001050  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800952c  0800952c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800952c  0800952c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800952c  0800952c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000498c  24000010  08009544  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400499c  08009544  0002499c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003038c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f21  00000000  00000000  000503ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  000552f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00056be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ead8  00000000  00000000  00058318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e58c  00000000  00000000  00096df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d34f  00000000  00000000  000b537c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002326cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  00232720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080084c4 	.word	0x080084c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080084c4 	.word	0x080084c4

080002d8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f043 0201 	orr.w	r2, r3, #1
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	f043 0202 	orr.w	r2, r3, #2
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <TIM5_CallBack>:
SCR_PROCES SCR_PROCESS;
uint8_t *SedingBufor_Adr=0;
uint8_t Bufor_Send_Picker=BUFOR1;

void TIM5_CallBack()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100);
 800031c:	4b48      	ldr	r3, [pc, #288]	; (8000440 <TIM5_CallBack+0x128>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2264      	movs	r2, #100	; 0x64
 8000322:	635a      	str	r2, [r3, #52]	; 0x34

	if(HUB75_DescStruct.Mode256ColorFlag == true)
 8000324:	4a47      	ldr	r2, [pc, #284]	; (8000444 <TIM5_CallBack+0x12c>)
 8000326:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 800032a:	4413      	add	r3, r2
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d07e      	beq.n	8000430 <TIM5_CallBack+0x118>
	{
					/* 8 ticks to send each line - it should work then is one tick*/
					static uint32_t Count8Ticks;
					Count8Ticks++;
 8000332:	4b45      	ldr	r3, [pc, #276]	; (8000448 <TIM5_CallBack+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	4a43      	ldr	r2, [pc, #268]	; (8000448 <TIM5_CallBack+0x130>)
 800033a:	6013      	str	r3, [r2, #0]
					if(Count8Ticks == 8)
 800033c:	4b42      	ldr	r3, [pc, #264]	; (8000448 <TIM5_CallBack+0x130>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b08      	cmp	r3, #8
 8000342:	d13c      	bne.n	80003be <TIM5_CallBack+0xa6>
					{
						Count8Ticks = 0 ;
 8000344:	4b40      	ldr	r3, [pc, #256]	; (8000448 <TIM5_CallBack+0x130>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]

						if(HUB75_DescStruct.ActualBCDModulationTicks > 8 )
 800034a:	4a3e      	ldr	r2, [pc, #248]	; (8000444 <TIM5_CallBack+0x12c>)
 800034c:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000350:	4413      	add	r3, r2
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b08      	cmp	r3, #8
 8000356:	d90b      	bls.n	8000370 <TIM5_CallBack+0x58>
						{
							HUB75_DescStruct.ActualBCDModulationTicks = 0;
 8000358:	4a3a      	ldr	r2, [pc, #232]	; (8000444 <TIM5_CallBack+0x12c>)
 800035a:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 800035e:	4413      	add	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
							HUB75_DescStruct.ActualPickedBuffor = 0;
 8000364:	4a37      	ldr	r2, [pc, #220]	; (8000444 <TIM5_CallBack+0x12c>)
 8000366:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 800036a:	4413      	add	r3, r2
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
						}

						if(HUB75_DescStruct.ActualBCDModulationTicks == 2)
 8000370:	4a34      	ldr	r2, [pc, #208]	; (8000444 <TIM5_CallBack+0x12c>)
 8000372:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b02      	cmp	r3, #2
 800037c:	d105      	bne.n	800038a <TIM5_CallBack+0x72>
						{
							HUB75_DescStruct.ActualPickedBuffor = 1;
 800037e:	4a31      	ldr	r2, [pc, #196]	; (8000444 <TIM5_CallBack+0x12c>)
 8000380:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 8000384:	4413      	add	r3, r2
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
						}
						if(HUB75_DescStruct.ActualBCDModulationTicks == 4)
 800038a:	4a2e      	ldr	r2, [pc, #184]	; (8000444 <TIM5_CallBack+0x12c>)
 800038c:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 8000390:	4413      	add	r3, r2
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b04      	cmp	r3, #4
 8000396:	d105      	bne.n	80003a4 <TIM5_CallBack+0x8c>
						{
							HUB75_DescStruct.ActualPickedBuffor = 2;
 8000398:	4a2a      	ldr	r2, [pc, #168]	; (8000444 <TIM5_CallBack+0x12c>)
 800039a:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 800039e:	4413      	add	r3, r2
 80003a0:	2202      	movs	r2, #2
 80003a2:	701a      	strb	r2, [r3, #0]
						}


						HUB75_DescStruct.ActualBCDModulationTicks++;
 80003a4:	4a27      	ldr	r2, [pc, #156]	; (8000444 <TIM5_CallBack+0x12c>)
 80003a6:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 80003aa:	4413      	add	r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	b2d9      	uxtb	r1, r3
 80003b2:	4a24      	ldr	r2, [pc, #144]	; (8000444 <TIM5_CallBack+0x12c>)
 80003b4:	f643 33c6 	movw	r3, #15302	; 0x3bc6
 80003b8:	4413      	add	r3, r2
 80003ba:	460a      	mov	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]
					}




		if( HUB75_DescStruct.ActualPickedBuffor == 0)
 80003be:	4a21      	ldr	r2, [pc, #132]	; (8000444 <TIM5_CallBack+0x12c>)
 80003c0:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 80003c4:	4413      	add	r3, r2
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d103      	bne.n	80003d4 <TIM5_CallBack+0xbc>
		{
			Send_BUF_IN_SCR( HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1 );
 80003cc:	481d      	ldr	r0, [pc, #116]	; (8000444 <TIM5_CallBack+0x12c>)
 80003ce:	f000 f843 	bl	8000458 <Send_BUF_IN_SCR>
 80003d2:	e014      	b.n	80003fe <TIM5_CallBack+0xe6>
		}
		else if( HUB75_DescStruct.ActualPickedBuffor == 1)
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <TIM5_CallBack+0x12c>)
 80003d6:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 80003da:	4413      	add	r3, r2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d103      	bne.n	80003ea <TIM5_CallBack+0xd2>
		{
			Send_BUF_IN_SCR( HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2 );
 80003e2:	481a      	ldr	r0, [pc, #104]	; (800044c <TIM5_CallBack+0x134>)
 80003e4:	f000 f838 	bl	8000458 <Send_BUF_IN_SCR>
 80003e8:	e009      	b.n	80003fe <TIM5_CallBack+0xe6>
		}
		else if ( HUB75_DescStruct.ActualPickedBuffor == 2)
 80003ea:	4a16      	ldr	r2, [pc, #88]	; (8000444 <TIM5_CallBack+0x12c>)
 80003ec:	f643 33c5 	movw	r3, #15301	; 0x3bc5
 80003f0:	4413      	add	r3, r2
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d102      	bne.n	80003fe <TIM5_CallBack+0xe6>
		{
			Send_BUF_IN_SCR( HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3 );
 80003f8:	4815      	ldr	r0, [pc, #84]	; (8000450 <TIM5_CallBack+0x138>)
 80003fa:	f000 f82d 	bl	8000458 <Send_BUF_IN_SCR>
		}



		/*UNUSED NOW*/
		HUB75_DescStruct.ActualPushedLine++;
 80003fe:	4a11      	ldr	r2, [pc, #68]	; (8000444 <TIM5_CallBack+0x12c>)
 8000400:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 8000404:	4413      	add	r3, r2
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	490e      	ldr	r1, [pc, #56]	; (8000444 <TIM5_CallBack+0x12c>)
 800040c:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 8000410:	440b      	add	r3, r1
 8000412:	601a      	str	r2, [r3, #0]
		if(HUB75_DescStruct.ActualPushedLine > 8)
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <TIM5_CallBack+0x12c>)
 8000416:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 800041a:	4413      	add	r3, r2
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b08      	cmp	r3, #8
 8000420:	dd0b      	ble.n	800043a <TIM5_CallBack+0x122>
		{
			HUB75_DescStruct.ActualPushedLine= 0;
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <TIM5_CallBack+0x12c>)
 8000424:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 8000428:	4413      	add	r3, r2
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Send_BUF_IN_SCR( SedingBufor_Adr );
	}
}
 800042e:	e004      	b.n	800043a <TIM5_CallBack+0x122>
		Send_BUF_IN_SCR( SedingBufor_Adr );
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <TIM5_CallBack+0x13c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f80f 	bl	8000458 <Send_BUF_IN_SCR>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2400494c 	.word	0x2400494c
 8000444:	24000a74 	.word	0x24000a74
 8000448:	24000a2c 	.word	0x24000a2c
 800044c:	2400146a 	.word	0x2400146a
 8000450:	24001e60 	.word	0x24001e60
 8000454:	24000a28 	.word	0x24000a28

08000458 <Send_BUF_IN_SCR>:
void Send_BUF_IN_SCR(uint8_t *SendBuffer)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]

	 if(LINIA>7)
 8000460:	4b8c      	ldr	r3, [pc, #560]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b07      	cmp	r3, #7
 8000466:	dd03      	ble.n	8000470 <Send_BUF_IN_SCR+0x18>
	 {
		  LINIA=-1;
 8000468:	4b8a      	ldr	r3, [pc, #552]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 800046a:	f04f 32ff 	mov.w	r2, #4294967295
 800046e:	601a      	str	r2, [r3, #0]
	 }
	 LINIA++;
 8000470:	4b88      	ldr	r3, [pc, #544]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	4a87      	ldr	r2, [pc, #540]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000478:	6013      	str	r3, [r2, #0]

		switch(LINIA) {
 800047a:	4b86      	ldr	r3, [pc, #536]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b07      	cmp	r3, #7
 8000480:	f200 8104 	bhi.w	800068c <Send_BUF_IN_SCR+0x234>
 8000484:	a201      	add	r2, pc, #4	; (adr r2, 800048c <Send_BUF_IN_SCR+0x34>)
 8000486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048a:	bf00      	nop
 800048c:	08000651 	.word	0x08000651
 8000490:	08000615 	.word	0x08000615
 8000494:	080005d9 	.word	0x080005d9
 8000498:	0800059d 	.word	0x0800059d
 800049c:	08000561 	.word	0x08000561
 80004a0:	08000525 	.word	0x08000525
 80004a4:	080004e9 	.word	0x080004e9
 80004a8:	080004ad 	.word	0x080004ad
					case 7: //7
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+(  LINIA *300  ));
 80004ac:	4b79      	ldr	r3, [pc, #484]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004b4:	fb02 f303 	mul.w	r3, r2, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	4619      	mov	r1, r3
 80004c0:	4875      	ldr	r0, [pc, #468]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 80004c2:	f003 f893 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	4874      	ldr	r0, [pc, #464]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80004cc:	f002 f9f0 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	4871      	ldr	r0, [pc, #452]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80004d6:	f002 f9eb 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e0:	486e      	ldr	r0, [pc, #440]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80004e2:	f002 f9e5 	bl	80028b0 <HAL_GPIO_WritePin>

						break;
 80004e6:	e0d1      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 6: //6
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300 ));
 80004e8:	4b6a      	ldr	r3, [pc, #424]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	fb02 f303 	mul.w	r3, r2, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4619      	mov	r1, r3
 80004fc:	4866      	ldr	r0, [pc, #408]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 80004fe:	f003 f875 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2140      	movs	r1, #64	; 0x40
 8000506:	4865      	ldr	r0, [pc, #404]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000508:	f002 f9d2 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	4862      	ldr	r0, [pc, #392]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000512:	f002 f9cd 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051c:	485f      	ldr	r0, [pc, #380]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800051e:	f002 f9c7 	bl	80028b0 <HAL_GPIO_WritePin>

						break;
 8000522:	e0b3      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 5: //5
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000524:	4b5b      	ldr	r3, [pc, #364]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800052c:	fb02 f303 	mul.w	r3, r2, r3
 8000530:	461a      	mov	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4619      	mov	r1, r3
 8000538:	4857      	ldr	r0, [pc, #348]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 800053a:	f003 f857 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	4856      	ldr	r0, [pc, #344]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000544:	f002 f9b4 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4853      	ldr	r0, [pc, #332]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800054e:	f002 f9af 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	4850      	ldr	r0, [pc, #320]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800055a:	f002 f9a9 	bl	80028b0 <HAL_GPIO_WritePin>

						break;
 800055e:	e095      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 4:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000560:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000568:	fb02 f303 	mul.w	r3, r2, r3
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4619      	mov	r1, r3
 8000574:	4848      	ldr	r0, [pc, #288]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 8000576:	f003 f839 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	4847      	ldr	r0, [pc, #284]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000580:	f002 f996 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	4844      	ldr	r0, [pc, #272]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800058a:	f002 f991 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4841      	ldr	r0, [pc, #260]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000596:	f002 f98b 	bl	80028b0 <HAL_GPIO_WritePin>


						break;
 800059a:	e077      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 3:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 800059c:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005a4:	fb02 f303 	mul.w	r3, r2, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4619      	mov	r1, r3
 80005b0:	4839      	ldr	r0, [pc, #228]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 80005b2:	f003 f81b 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4838      	ldr	r0, [pc, #224]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80005bc:	f002 f978 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4835      	ldr	r0, [pc, #212]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80005c6:	f002 f973 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4832      	ldr	r0, [pc, #200]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80005d2:	f002 f96d 	bl	80028b0 <HAL_GPIO_WritePin>


						break;
 80005d6:	e059      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 2:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4619      	mov	r1, r3
 80005ec:	482a      	ldr	r0, [pc, #168]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 80005ee:	f002 fffd 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	4829      	ldr	r0, [pc, #164]	; (800069c <Send_BUF_IN_SCR+0x244>)
 80005f8:	f002 f95a 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4826      	ldr	r0, [pc, #152]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000602:	f002 f955 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	4823      	ldr	r0, [pc, #140]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800060e:	f002 f94f 	bl	80028b0 <HAL_GPIO_WritePin>


						break;
 8000612:	e03b      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 1:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	4619      	mov	r1, r3
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 800062a:	f002 ffdf 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000634:	f002 f93c 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4817      	ldr	r0, [pc, #92]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800063e:	f002 f937 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800064a:	f002 f931 	bl	80028b0 <HAL_GPIO_WritePin>
						break;
 800064e:	e01d      	b.n	800068c <Send_BUF_IN_SCR+0x234>
					case 0:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <Send_BUF_IN_SCR+0x23c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <Send_BUF_IN_SCR+0x240>)
 8000666:	f002 ffc1 	bl	80035ec <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000670:	f002 f91e 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <Send_BUF_IN_SCR+0x244>)
 800067a:	f002 f919 	bl	80028b0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <Send_BUF_IN_SCR+0x244>)
 8000686:	f002 f913 	bl	80028b0 <HAL_GPIO_WritePin>
						break;
 800068a:	bf00      	nop
					}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000a24 	.word	0x24000a24
 8000698:	24004878 	.word	0x24004878
 800069c:	58020800 	.word	0x58020800

080006a0 <View256ColorBitMap>:

void View256ColorBitMap(uint8_t *BMP)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	HUB75_DescStruct.Mode256ColorFlag = true;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <View256ColorBitMap+0x24>)
 80006aa:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 80006ae:	4413      	add	r3, r2
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
	PrepareFull256Color_Buffer(BMP);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f807 	bl	80006c8 <PrepareFull256Color_Buffer>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000a74 	.word	0x24000a74

080006c8 <PrepareFull256Color_Buffer>:
PrepareRow(BMP,OUT_B+(6*300),1);
PrepareRow(BMP,OUT_B+(7*300),0);
}

static void PrepareFull256Color_Buffer(uint8_t *BMP)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2500; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e016      	b.n	8000704 <PrepareFull256Color_Buffer+0x3c>
	{
		HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1[i]=0x00;
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <PrepareFull256Color_Buffer+0x170>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
		HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2[i]=0x00;
 80006e0:	4a55      	ldr	r2, [pc, #340]	; (8000838 <PrepareFull256Color_Buffer+0x170>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	f603 13f6 	addw	r3, r3, #2550	; 0x9f6
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
		HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3[i]=0x00;
 80006ee:	4a52      	ldr	r2, [pc, #328]	; (8000838 <PrepareFull256Color_Buffer+0x170>)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	441a      	add	r2, r3
 80006f4:	f241 33ec 	movw	r3, #5100	; 0x13ec
 80006f8:	4413      	add	r3, r2
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<2500; i++)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800070a:	4293      	cmp	r3, r2
 800070c:	dde3      	ble.n	80006d6 <PrepareFull256Color_Buffer+0xe>
	}
	/*BitColorBrightnessMask minimum*/
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(0*300),7,0x25);
 800070e:	2325      	movs	r3, #37	; 0x25
 8000710:	2207      	movs	r2, #7
 8000712:	4949      	ldr	r1, [pc, #292]	; (8000838 <PrepareFull256Color_Buffer+0x170>)
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f9ac 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(1*300),6,0x25);
 800071a:	4948      	ldr	r1, [pc, #288]	; (800083c <PrepareFull256Color_Buffer+0x174>)
 800071c:	2325      	movs	r3, #37	; 0x25
 800071e:	2206      	movs	r2, #6
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f9a6 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(2*300),5,0x25);
 8000726:	4946      	ldr	r1, [pc, #280]	; (8000840 <PrepareFull256Color_Buffer+0x178>)
 8000728:	2325      	movs	r3, #37	; 0x25
 800072a:	2205      	movs	r2, #5
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f9a0 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(3*300),4,0x25);
 8000732:	4944      	ldr	r1, [pc, #272]	; (8000844 <PrepareFull256Color_Buffer+0x17c>)
 8000734:	2325      	movs	r3, #37	; 0x25
 8000736:	2204      	movs	r2, #4
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f99a 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(4*300),3,0x25);
 800073e:	4942      	ldr	r1, [pc, #264]	; (8000848 <PrepareFull256Color_Buffer+0x180>)
 8000740:	2325      	movs	r3, #37	; 0x25
 8000742:	2203      	movs	r2, #3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f994 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(5*300),2,0x25);
 800074a:	4940      	ldr	r1, [pc, #256]	; (800084c <PrepareFull256Color_Buffer+0x184>)
 800074c:	2325      	movs	r3, #37	; 0x25
 800074e:	2202      	movs	r2, #2
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f98e 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(6*300),1,0x25);
 8000756:	493e      	ldr	r1, [pc, #248]	; (8000850 <PrepareFull256Color_Buffer+0x188>)
 8000758:	2325      	movs	r3, #37	; 0x25
 800075a:	2201      	movs	r2, #1
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f988 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit1+(7*300),0,0x25);
 8000762:	493c      	ldr	r1, [pc, #240]	; (8000854 <PrepareFull256Color_Buffer+0x18c>)
 8000764:	2325      	movs	r3, #37	; 0x25
 8000766:	2200      	movs	r2, #0
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f982 	bl	8000a72 <Prepare256Color_Row>
//	/*BitColorBrightnessMask aver*/
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(0*300),7,0x4A);
 800076e:	234a      	movs	r3, #74	; 0x4a
 8000770:	2207      	movs	r2, #7
 8000772:	4939      	ldr	r1, [pc, #228]	; (8000858 <PrepareFull256Color_Buffer+0x190>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f97c 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(1*300),6,0x4A);
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <PrepareFull256Color_Buffer+0x194>)
 800077c:	234a      	movs	r3, #74	; 0x4a
 800077e:	2206      	movs	r2, #6
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f976 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(2*300),5,0x4A);
 8000786:	4936      	ldr	r1, [pc, #216]	; (8000860 <PrepareFull256Color_Buffer+0x198>)
 8000788:	234a      	movs	r3, #74	; 0x4a
 800078a:	2205      	movs	r2, #5
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f970 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(3*300),4,0x4A);
 8000792:	4934      	ldr	r1, [pc, #208]	; (8000864 <PrepareFull256Color_Buffer+0x19c>)
 8000794:	234a      	movs	r3, #74	; 0x4a
 8000796:	2204      	movs	r2, #4
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f96a 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(4*300),3,0x4A);
 800079e:	4932      	ldr	r1, [pc, #200]	; (8000868 <PrepareFull256Color_Buffer+0x1a0>)
 80007a0:	234a      	movs	r3, #74	; 0x4a
 80007a2:	2203      	movs	r2, #3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f964 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(5*300),2,0x4A);
 80007aa:	4930      	ldr	r1, [pc, #192]	; (800086c <PrepareFull256Color_Buffer+0x1a4>)
 80007ac:	234a      	movs	r3, #74	; 0x4a
 80007ae:	2202      	movs	r2, #2
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f95e 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(6*300),1,0x4A);
 80007b6:	492e      	ldr	r1, [pc, #184]	; (8000870 <PrepareFull256Color_Buffer+0x1a8>)
 80007b8:	234a      	movs	r3, #74	; 0x4a
 80007ba:	2201      	movs	r2, #1
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f958 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit2+(7*300),0,0x4A);
 80007c2:	492c      	ldr	r1, [pc, #176]	; (8000874 <PrepareFull256Color_Buffer+0x1ac>)
 80007c4:	234a      	movs	r3, #74	; 0x4a
 80007c6:	2200      	movs	r2, #0
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f952 	bl	8000a72 <Prepare256Color_Row>
	/*BitColorBrightnessMask high*/
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(0*300),7,0x92);
 80007ce:	2392      	movs	r3, #146	; 0x92
 80007d0:	2207      	movs	r2, #7
 80007d2:	4929      	ldr	r1, [pc, #164]	; (8000878 <PrepareFull256Color_Buffer+0x1b0>)
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 f94c 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(1*300),6,0x92);
 80007da:	4928      	ldr	r1, [pc, #160]	; (800087c <PrepareFull256Color_Buffer+0x1b4>)
 80007dc:	2392      	movs	r3, #146	; 0x92
 80007de:	2206      	movs	r2, #6
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f946 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(2*300),5,0x92);
 80007e6:	4926      	ldr	r1, [pc, #152]	; (8000880 <PrepareFull256Color_Buffer+0x1b8>)
 80007e8:	2392      	movs	r3, #146	; 0x92
 80007ea:	2205      	movs	r2, #5
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f940 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(3*300),4,0x92);
 80007f2:	4924      	ldr	r1, [pc, #144]	; (8000884 <PrepareFull256Color_Buffer+0x1bc>)
 80007f4:	2392      	movs	r3, #146	; 0x92
 80007f6:	2204      	movs	r2, #4
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f93a 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(4*300),3,0x92);
 80007fe:	4922      	ldr	r1, [pc, #136]	; (8000888 <PrepareFull256Color_Buffer+0x1c0>)
 8000800:	2392      	movs	r3, #146	; 0x92
 8000802:	2203      	movs	r2, #3
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f934 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(5*300),2,0x92);
 800080a:	4920      	ldr	r1, [pc, #128]	; (800088c <PrepareFull256Color_Buffer+0x1c4>)
 800080c:	2392      	movs	r3, #146	; 0x92
 800080e:	2202      	movs	r2, #2
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f92e 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(6*300),1,0x92);
 8000816:	491e      	ldr	r1, [pc, #120]	; (8000890 <PrepareFull256Color_Buffer+0x1c8>)
 8000818:	2392      	movs	r3, #146	; 0x92
 800081a:	2201      	movs	r2, #1
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f928 	bl	8000a72 <Prepare256Color_Row>
	Prepare256Color_Row(BMP,HUB75_DescStruct.HUB75_Buffors[0].OUT_Bit3+(7*300),0,0x92);
 8000822:	491c      	ldr	r1, [pc, #112]	; (8000894 <PrepareFull256Color_Buffer+0x1cc>)
 8000824:	2392      	movs	r3, #146	; 0x92
 8000826:	2200      	movs	r2, #0
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 f922 	bl	8000a72 <Prepare256Color_Row>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000a74 	.word	0x24000a74
 800083c:	24000ba0 	.word	0x24000ba0
 8000840:	24000ccc 	.word	0x24000ccc
 8000844:	24000df8 	.word	0x24000df8
 8000848:	24000f24 	.word	0x24000f24
 800084c:	24001050 	.word	0x24001050
 8000850:	2400117c 	.word	0x2400117c
 8000854:	240012a8 	.word	0x240012a8
 8000858:	2400146a 	.word	0x2400146a
 800085c:	24001596 	.word	0x24001596
 8000860:	240016c2 	.word	0x240016c2
 8000864:	240017ee 	.word	0x240017ee
 8000868:	2400191a 	.word	0x2400191a
 800086c:	24001a46 	.word	0x24001a46
 8000870:	24001b72 	.word	0x24001b72
 8000874:	24001c9e 	.word	0x24001c9e
 8000878:	24001e60 	.word	0x24001e60
 800087c:	24001f8c 	.word	0x24001f8c
 8000880:	240020b8 	.word	0x240020b8
 8000884:	240021e4 	.word	0x240021e4
 8000888:	24002310 	.word	0x24002310
 800088c:	2400243c 	.word	0x2400243c
 8000890:	24002568 	.word	0x24002568
 8000894:	24002694 	.word	0x24002694

08000898 <PrepareAndGetWithBritnessRowPart255Color>:
 * 0b00100101 ( 3 colors set minimum brightness) - 0x25
 * 0b01001010 average brihtnes (all colors) - 0x4A
 * 0b10010010 maximum brihtnes (all colors) - 0x92
 * */
static void PrepareAndGetWithBritnessRowPart255Color(uint8_t *BMP, uint8_t *OUT_B, uint8_t BitColorBrightnessMask)
{
 8000898:	b480      	push	{r7}
 800089a:	b08d      	sub	sp, #52	; 0x34
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	71fb      	strb	r3, [r7, #7]
//
//		}
//	}
//#endif

	int HIGHER_BIT=0,LOWER_BIT=0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28

	uint8_t NR_PIXLA=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int adr_ink=16;
 80008b4:	2310      	movs	r3, #16
 80008b6:	623b      	str	r3, [r7, #32]

	for(int i=0; i<4; i++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	e0ce      	b.n	8000a5c <PrepareAndGetWithBritnessRowPart255Color+0x1c4>
	{
		for(int NR_BIT=0; NR_BIT<8; NR_BIT++) //ten Numer bit sie plusuje i w tym forze
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	e0c4      	b.n	8000a4e <PrepareAndGetWithBritnessRowPart255Color+0x1b6>
			//wiec 2x petla sie powtarza 4x wpisuje lacznie 64 pixle w tej funkcji od  +16 do -48 wzgledem przek adresu
		{
			if(BitColorBrightnessMask != 0)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d01d      	beq.n	8000906 <PrepareAndGetWithBritnessRowPart255Color+0x6e>
			{
				LOWER_BIT=0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
				HIGHER_BIT=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
				HIGHER_BIT=(BMP[NR_PIXLA + 1]);
 80008d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008d6:	3301      	adds	r3, #1
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
				LOWER_BIT= (BMP[NR_PIXLA]);
 80008e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
//								HIGHER_BIT=0xA0;
//								LOWER_BIT= 0x03;
				NR_PIXLA++;
 80008ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f0:	3301      	adds	r3, #1
 80008f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				NR_PIXLA++;
 80008f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008fa:	3301      	adds	r3, #1
 80008fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				adr_ink--;
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	3b01      	subs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
				//Higer
			}

			uint8_t redColorSetMask = HIGHER_BIT & ( 0xE0 & BitColorBrightnessMask );
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	f023 031f 	bic.w	r3, r3, #31
 800090e:	b25a      	sxtb	r2, r3
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	b25b      	sxtb	r3, r3
 8000914:	4013      	ands	r3, r2
 8000916:	b25b      	sxtb	r3, r3
 8000918:	75fb      	strb	r3, [r7, #23]
			uint8_t GreenColorSetMask = HIGHER_BIT & ( 0x1C & BitColorBrightnessMask );
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	f003 031c 	and.w	r3, r3, #28
 8000922:	b25a      	sxtb	r2, r3
 8000924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000926:	b25b      	sxtb	r3, r3
 8000928:	4013      	ands	r3, r2
 800092a:	b25b      	sxtb	r3, r3
 800092c:	75bb      	strb	r3, [r7, #22]
			uint8_t BlueColorSetMask = HIGHER_BIT & ( (0x3)  & BitColorBrightnessMask ); /*shift one left or not here?!?!*/
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	b25a      	sxtb	r2, r3
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	b25b      	sxtb	r3, r3
 800093c:	4013      	ands	r3, r2
 800093e:	b25b      	sxtb	r3, r3
 8000940:	757b      	strb	r3, [r7, #21]

			if(HIGHER_BIT==0) goto Lower;
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	2b00      	cmp	r3, #0
 8000946:	d02a      	beq.n	800099e <PrepareAndGetWithBritnessRowPart255Color+0x106>

			if( redColorSetMask )
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00a      	beq.n	8000964 <PrepareAndGetWithBritnessRowPart255Color+0xcc>
			{
				OUT_B[adr_ink ] |=1 << (0); /*OUT_B[adr_ink ] */
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	4413      	add	r3, r2
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	440b      	add	r3, r1
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]
			}
			if( GreenColorSetMask )
 8000964:	7dbb      	ldrb	r3, [r7, #22]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00a      	beq.n	8000980 <PrepareAndGetWithBritnessRowPart255Color+0xe8>
			{
				OUT_B[adr_ink ] |=1 << (1); /*OUT_B[adr_ink ] */
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	4413      	add	r3, r2
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	6a3b      	ldr	r3, [r7, #32]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	440b      	add	r3, r1
 8000978:	f042 0202 	orr.w	r2, r2, #2
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	701a      	strb	r2, [r3, #0]
			}
			if( BlueColorSetMask )
 8000980:	7d7b      	ldrb	r3, [r7, #21]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00d      	beq.n	80009a2 <PrepareAndGetWithBritnessRowPart255Color+0x10a>
			{
				OUT_B[adr_ink ] |=1 << (2); /*OUT_B[adr_ink ] */
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	440b      	add	r3, r1
 8000994:	f042 0204 	orr.w	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e002      	b.n	80009a4 <PrepareAndGetWithBritnessRowPart255Color+0x10c>
			if(HIGHER_BIT==0) goto Lower;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <PrepareAndGetWithBritnessRowPart255Color+0x10c>
			}

			Lower:
 80009a2:	bf00      	nop

			NR_BIT++;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]

			redColorSetMask = LOWER_BIT & ( 0xE0 & BitColorBrightnessMask );
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	f023 031f 	bic.w	r3, r3, #31
 80009b2:	b25a      	sxtb	r2, r3
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	4013      	ands	r3, r2
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	75fb      	strb	r3, [r7, #23]
			GreenColorSetMask = LOWER_BIT & ( 0x1C & BitColorBrightnessMask );
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	f003 031c 	and.w	r3, r3, #28
 80009c6:	b25a      	sxtb	r2, r3
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	75bb      	strb	r3, [r7, #22]
			BlueColorSetMask = LOWER_BIT & ( (0x3)  & BitColorBrightnessMask ); /*shift one left or not here?!?!*/
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	4013      	ands	r3, r2
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	757b      	strb	r3, [r7, #21]

			if(LOWER_BIT==0) goto END_LOOP;
 80009e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02a      	beq.n	8000a42 <PrepareAndGetWithBritnessRowPart255Color+0x1aa>

			if( redColorSetMask )
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00a      	beq.n	8000a08 <PrepareAndGetWithBritnessRowPart255Color+0x170>
			{
				OUT_B[adr_ink ] |=1 << (4);
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	4413      	add	r3, r2
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	440b      	add	r3, r1
 8000a00:	f042 0210 	orr.w	r2, r2, #16
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
			}
			if( GreenColorSetMask )
 8000a08:	7dbb      	ldrb	r3, [r7, #22]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00a      	beq.n	8000a24 <PrepareAndGetWithBritnessRowPart255Color+0x18c>
			{
				OUT_B[adr_ink ] |=1 << (5);
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	4413      	add	r3, r2
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f042 0220 	orr.w	r2, r2, #32
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	701a      	strb	r2, [r3, #0]
			}
			if( BlueColorSetMask )
 8000a24:	7d7b      	ldrb	r3, [r7, #21]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00d      	beq.n	8000a46 <PrepareAndGetWithBritnessRowPart255Color+0x1ae>
			{
				OUT_B[adr_ink ] |=1 << (6);
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	440b      	add	r3, r1
 8000a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e002      	b.n	8000a48 <PrepareAndGetWithBritnessRowPart255Color+0x1b0>
			if(LOWER_BIT==0) goto END_LOOP;
 8000a42:	bf00      	nop
 8000a44:	e000      	b.n	8000a48 <PrepareAndGetWithBritnessRowPart255Color+0x1b0>
			}

		END_LOOP:;
 8000a46:	bf00      	nop
		for(int NR_BIT=0; NR_BIT<8; NR_BIT++) //ten Numer bit sie plusuje i w tym forze
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	f77f af37 	ble.w	80008c4 <PrepareAndGetWithBritnessRowPart255Color+0x2c>
	for(int i=0; i<4; i++)
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	f77f af2d 	ble.w	80008be <PrepareAndGetWithBritnessRowPart255Color+0x26>

		}
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3734      	adds	r7, #52	; 0x34
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <Prepare256Color_Row>:
	PrepareRowPart ( BMP+ (24*64) +(ROW*64), ( OUT_B+(15*16)) );  //najstarszy
																						//kurde gdyby algorytm na to znalezc :/
}

static void Prepare256Color_Row(uint8_t *BMP, uint8_t *OUT_B, uint8_t ROW, uint8_t BitColorBrightnessMask)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	461a      	mov	r2, r3
 8000a80:	460b      	mov	r3, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(32*2)+ (0*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(2*16)) , BitColorBrightnessMask );
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	01db      	lsls	r3, r3, #7
 8000a8c:	3340      	adds	r3, #64	; 0x40
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	18d0      	adds	r0, r2, r3
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	3320      	adds	r3, #32
 8000a96:	79ba      	ldrb	r2, [r7, #6]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff fefd 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(32*2)+ (8*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(3*16)) , BitColorBrightnessMask  );
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	01db      	lsls	r3, r3, #7
 8000aa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	18d0      	adds	r0, r2, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3330      	adds	r3, #48	; 0x30
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f7ff fef1 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>

	PrepareAndGetWithBritnessRowPart255Color ( BMP+(32*2)+ (16*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(10*16)) , BitColorBrightnessMask  );
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	01db      	lsls	r3, r3, #7
 8000aba:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	18d0      	adds	r0, r2, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	33a0      	adds	r3, #160	; 0xa0
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f7ff fee5 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(32*2)+ (24*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(11*16))  , BitColorBrightnessMask ); // srodek mlodszy
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	01db      	lsls	r3, r3, #7
 8000ad2:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	18d0      	adds	r0, r2, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	33b0      	adds	r3, #176	; 0xb0
 8000ade:	79ba      	ldrb	r2, [r7, #6]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff fed9 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>

	PrepareAndGetWithBritnessRowPart255Color ( BMP+(16*2)+ (0*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(4*16)) , BitColorBrightnessMask  );
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	3320      	adds	r3, #32
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	18d0      	adds	r0, r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3340      	adds	r3, #64	; 0x40
 8000af4:	79ba      	ldrb	r2, [r7, #6]
 8000af6:	4619      	mov	r1, r3
 8000af8:	f7ff fece 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(16*2)+ (8*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(5*16)) , BitColorBrightnessMask  );
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	01db      	lsls	r3, r3, #7
 8000b00:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	18d0      	adds	r0, r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3350      	adds	r3, #80	; 0x50
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f7ff fec2 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>

	PrepareAndGetWithBritnessRowPart255Color ( BMP+(16*2)+ (16*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(12*16)) , BitColorBrightnessMask  );
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	01db      	lsls	r3, r3, #7
 8000b18:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	18d0      	adds	r0, r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	33c0      	adds	r3, #192	; 0xc0
 8000b24:	79ba      	ldrb	r2, [r7, #6]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff feb6 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(16*2)+ (24*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(13*16)) , BitColorBrightnessMask  ); // srodek starszy
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	18d0      	adds	r0, r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	33d0      	adds	r3, #208	; 0xd0
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f7ff feaa 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>


	PrepareAndGetWithBritnessRowPart255Color ( BMP+(48*2)+ (0*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(0*16)) , BitColorBrightnessMask  );
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	01db      	lsls	r3, r3, #7
 8000b48:	3360      	adds	r3, #96	; 0x60
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fea0 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(48*2)+ (8*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(1*16)) , BitColorBrightnessMask  );
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	18d0      	adds	r0, r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3310      	adds	r3, #16
 8000b68:	79ba      	ldrb	r2, [r7, #6]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f7ff fe94 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>

	PrepareAndGetWithBritnessRowPart255Color ( BMP+(48*2)+ (16*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(8*16)) , BitColorBrightnessMask  );
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	01db      	lsls	r3, r3, #7
 8000b74:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	18d0      	adds	r0, r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	79ba      	ldrb	r2, [r7, #6]
 8000b82:	4619      	mov	r1, r3
 8000b84:	f7ff fe88 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+(48*2)+ (24*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(9*16)) , BitColorBrightnessMask  ); // najmlodszy
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	18d0      	adds	r0, r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3390      	adds	r3, #144	; 0x90
 8000b98:	79ba      	ldrb	r2, [r7, #6]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f7ff fe7c 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>


	PrepareAndGetWithBritnessRowPart255Color ( BMP+ (0*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(6*16)) , BitColorBrightnessMask  );
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	01db      	lsls	r3, r3, #7
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	1898      	adds	r0, r3, r2
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3360      	adds	r3, #96	; 0x60
 8000bae:	79ba      	ldrb	r2, [r7, #6]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fe71 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+ (8*(64 *2))  +(ROW*(64 *2)), ( OUT_B+(7*16)) , BitColorBrightnessMask  );
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	01db      	lsls	r3, r3, #7
 8000bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	18d0      	adds	r0, r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3370      	adds	r3, #112	; 0x70
 8000bc6:	79ba      	ldrb	r2, [r7, #6]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f7ff fe65 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>

	PrepareAndGetWithBritnessRowPart255Color ( BMP+ (16*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(14*16)) , BitColorBrightnessMask  );
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	01db      	lsls	r3, r3, #7
 8000bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	18d0      	adds	r0, r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	33e0      	adds	r3, #224	; 0xe0
 8000bde:	79ba      	ldrb	r2, [r7, #6]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fe59 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
	PrepareAndGetWithBritnessRowPart255Color ( BMP+ (24*(64 *2)) +(ROW*(64 *2)), ( OUT_B+(15*16)) , BitColorBrightnessMask  );  //najstarszy
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	01db      	lsls	r3, r3, #7
 8000bea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	18d0      	adds	r0, r2, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	33f0      	adds	r3, #240	; 0xf0
 8000bf6:	79ba      	ldrb	r2, [r7, #6]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff fe4d 	bl	8000898 <PrepareAndGetWithBritnessRowPart255Color>
																						//kurde gdyby algorytm na to znalezc :/
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_QSPI_TxCpltCallback>:
}

}

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<4; i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e003      	b.n	8000c1e <HAL_QSPI_TxCpltCallback+0x16>
	{
		asm("NOP");
 8000c16:	bf00      	nop
	for(int i=0; i<4; i++)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	ddf8      	ble.n	8000c16 <HAL_QSPI_TxCpltCallback+0xe>
	}
 HAL_GPIO_TogglePin(LATCH_GPIO_Port, LATCH_Pin);
 8000c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_QSPI_TxCpltCallback+0x54>)
 8000c2a:	f001 fe5a 	bl	80028e2 <HAL_GPIO_TogglePin>
for(int i=0; i<4; i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	e003      	b.n	8000c3c <HAL_QSPI_TxCpltCallback+0x34>
{
	asm("NOP");
 8000c34:	bf00      	nop
for(int i=0; i<4; i++)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	ddf8      	ble.n	8000c34 <HAL_QSPI_TxCpltCallback+0x2c>
}
 HAL_GPIO_TogglePin(LATCH_GPIO_Port, LATCH_Pin);
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_QSPI_TxCpltCallback+0x54>)
 8000c48:	f001 fe4b 	bl	80028e2 <HAL_GPIO_TogglePin>

 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100-scr_brightness);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_QSPI_TxCpltCallback+0x58>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2255      	movs	r2, #85	; 0x55
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58020c00 	.word	0x58020c00
 8000c60:	2400494c 	.word	0x2400494c

08000c64 <HUB_75_INIT>:

void HUB_75_INIT()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_CC1(TIM5);
 8000c68:	481d      	ldr	r0, [pc, #116]	; (8000ce0 <HUB_75_INIT+0x7c>)
 8000c6a:	f7ff fb45 	bl	80002f8 <LL_TIM_EnableIT_CC1>
	LL_TIM_EnableCounter(TIM5);
 8000c6e:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <HUB_75_INIT+0x7c>)
 8000c70:	f7ff fb32 	bl	80002d8 <LL_TIM_EnableCounter>

	  LL_TIM_EnableIT_CC1(TIM2);
 8000c74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c78:	f7ff fb3e 	bl	80002f8 <LL_TIM_EnableIT_CC1>
	  LL_TIM_EnableCounter(TIM2);
 8000c7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c80:	f7ff fb2a 	bl	80002d8 <LL_TIM_EnableCounter>

	HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <HUB_75_INIT+0x80>)
 8000c8a:	f001 fe11 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <HUB_75_INIT+0x80>)
 8000c94:	f001 fe0c 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <HUB_75_INIT+0x80>)
 8000ca0:	f001 fe06 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port,LATCH_Pin,GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000caa:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <HUB_75_INIT+0x84>)
 8000cac:	f001 fe00 	bl	80028b0 <HAL_GPIO_WritePin>


	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <HUB_75_INIT+0x88>)
 8000cb4:	f005 fa1a 	bl	80060ec <HAL_TIM_PWM_Start>


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,97);
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HUB_75_INIT+0x88>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2261      	movs	r2, #97	; 0x61
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34

	sCommand.DataMode    = QSPI_DATA_4_LINES;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HUB_75_INIT+0x8c>)
 8000cc2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
	  sCommand.NbData      = 256; //Here define long of data 1 ROW
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HUB_75_INIT+0x8c>)
 8000cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28

	  HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <HUB_75_INIT+0x8c>)
 8000cd6:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <HUB_75_INIT+0x90>)
 8000cd8:	f002 fc2a 	bl	8003530 <HAL_QSPI_Command>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40000c00 	.word	0x40000c00
 8000ce4:	58020800 	.word	0x58020800
 8000ce8:	58020c00 	.word	0x58020c00
 8000cec:	2400494c 	.word	0x2400494c
 8000cf0:	24000a3c 	.word	0x24000a3c
 8000cf4:	24004878 	.word	0x24004878

08000cf8 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	f003 0320 	and.w	r3, r3, #32
 8000d08:	2b20      	cmp	r3, #32
 8000d0a:	d101      	bne.n	8000d10 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	2b40      	cmp	r3, #64	; 0x40
 8000d30:	d101      	bne.n	8000d36 <LL_USART_IsActiveFlag_TC+0x18>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <LL_USART_IsActiveFlag_TC+0x1a>
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d54:	2b80      	cmp	r3, #128	; 0x80
 8000d56:	d101      	bne.n	8000d5c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	621a      	str	r2, [r3, #32]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	2b20      	cmp	r3, #32
 8000dd6:	d101      	bne.n	8000ddc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	2b40      	cmp	r3, #64	; 0x40
 8000dfc:	d101      	bne.n	8000e02 <LL_USART_IsEnabledIT_TC+0x18>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <LL_USART_IsEnabledIT_TC+0x1a>
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	2b80      	cmp	r3, #128	; 0x80
 8000e22:	d101      	bne.n	8000e28 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	b2db      	uxtb	r3, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <USART_CharReception_Callback>:
			 Print_Data(USARTx);
	}
}

void USART_CharReception_Callback(UART_Handle_Td *USARTx)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	USARTx->pRxBuffPtr[USARTx->RxXferCount++] = LL_USART_ReceiveData8(USARTx->Instance);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	8adb      	ldrh	r3, [r3, #22]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	1c59      	adds	r1, r3, #1
 8000e86:	b28c      	uxth	r4, r1
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	82cc      	strh	r4, [r1, #22]
 8000e8c:	18d4      	adds	r4, r2, r3
 8000e8e:	f7ff ffd2 	bl	8000e36 <LL_USART_ReceiveData8>
 8000e92:	4603      	mov	r3, r0
 8000e94:	7023      	strb	r3, [r4, #0]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}

08000e9e <USART_TXEmpty_Callback>:

        LL_USART_EnableIT_TXE(USARTx->Instance);
    	LL_USART_EnableIT_TC(USARTx->Instance);
}
void USART_TXEmpty_Callback(UART_Handle_Td *USARTx)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  if( USARTx->TxXSendCount == ( USARTx->TxXferCount - 1))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	899b      	ldrh	r3, [r3, #12]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	895b      	ldrh	r3, [r3, #10]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d109      	bne.n	8000ece <USART_TXEmpty_Callback+0x30>
  {

    LL_USART_DisableIT_TXE(USARTx->Instance);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff70 	bl	8000da4 <LL_USART_DisableIT_TXE_TXFNF>

    LL_USART_EnableIT_TC(USARTx->Instance);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5b 	bl	8000d84 <LL_USART_EnableIT_TC>
  }
  LL_USART_TransmitData8(USARTx->Instance, USARTx->pTxBuffPtr[ USARTx->TxXSendCount++ ]);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	899b      	ldrh	r3, [r3, #12]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	1c59      	adds	r1, r3, #1
 8000ede:	b28c      	uxth	r4, r1
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	818c      	strh	r4, [r1, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff ffb1 	bl	8000e50 <LL_USART_TransmitData8>
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}

08000ef6 <USART_CharTransmitComplete_Callback>:

void USART_CharTransmitComplete_Callback(UART_Handle_Td *USARTx)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  if(USARTx->TxXSendCount == USARTx->TxXferCount)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	899b      	ldrh	r3, [r3, #12]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	895b      	ldrh	r3, [r3, #10]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d102      	bne.n	8000f14 <USART_CharTransmitComplete_Callback+0x1e>
  {
	  USARTx->TxXSendCount=0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	819a      	strh	r2, [r3, #12]
  }
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <TUART_CallBack_IRQ>:

void TUART_CallBack_IRQ(UART_Handle_Td *USARTx)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	 if(LL_USART_IsActiveFlag_RXNE(USARTx->Instance) && LL_USART_IsEnabledIT_RXNE(USARTx->Instance))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fee3 	bl	8000cf8 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00a      	beq.n	8000f4e <TUART_CallBack_IRQ+0x2e>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff41 	bl	8000dc4 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <TUART_CallBack_IRQ+0x2e>
		  {
		    USART_CharReception_Callback(USARTx);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff90 	bl	8000e6e <USART_CharReception_Callback>
		  }

		  if(LL_USART_IsEnabledIT_TXE(USARTx->Instance) && LL_USART_IsActiveFlag_TXE(USARTx->Instance))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff5c 	bl	8000e10 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00a      	beq.n	8000f74 <TUART_CallBack_IRQ+0x54>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff feee 	bl	8000d44 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <TUART_CallBack_IRQ+0x54>
		  {
		    USART_TXEmpty_Callback(USARTx);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff95 	bl	8000e9e <USART_TXEmpty_Callback>
		  }
		  if(LL_USART_IsEnabledIT_TC(USARTx->Instance) && LL_USART_IsActiveFlag_TC(USARTx->Instance))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff36 	bl	8000dea <LL_USART_IsEnabledIT_TC>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00f      	beq.n	8000fa4 <TUART_CallBack_IRQ+0x84>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fec8 	bl	8000d1e <LL_USART_IsActiveFlag_TC>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <TUART_CallBack_IRQ+0x84>
		  {
		    LL_USART_ClearFlag_TC(USARTx->Instance);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fee6 	bl	8000d6a <LL_USART_ClearFlag_TC>
		    USART_CharTransmitComplete_Callback(USARTx);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa9 	bl	8000ef6 <USART_CharTransmitComplete_Callback>
		  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <MX_GPIO_Init+0x174>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a55      	ldr	r2, [pc, #340]	; (8001120 <MX_GPIO_Init+0x174>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b53      	ldr	r3, [pc, #332]	; (8001120 <MX_GPIO_Init+0x174>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <MX_GPIO_Init+0x174>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <MX_GPIO_Init+0x174>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff0:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <MX_GPIO_Init+0x174>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffe:	4b48      	ldr	r3, [pc, #288]	; (8001120 <MX_GPIO_Init+0x174>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a46      	ldr	r2, [pc, #280]	; (8001120 <MX_GPIO_Init+0x174>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <MX_GPIO_Init+0x174>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <MX_GPIO_Init+0x174>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <MX_GPIO_Init+0x174>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <MX_GPIO_Init+0x174>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <MX_GPIO_Init+0x174>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4a37      	ldr	r2, [pc, #220]	; (8001120 <MX_GPIO_Init+0x174>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_GPIO_Init+0x174>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LATCH_Pin|U_LED4_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f244 0108 	movw	r1, #16392	; 0x4008
 800105e:	4831      	ldr	r0, [pc, #196]	; (8001124 <MX_GPIO_Init+0x178>)
 8001060:	f001 fc26 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LINE_A_Pin|LINE_B_Pin|LINE_C_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800106a:	482f      	ldr	r0, [pc, #188]	; (8001128 <MX_GPIO_Init+0x17c>)
 800106c:	f001 fc20 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINE_D_GPIO_Port, LINE_D_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001076:	482c      	ldr	r0, [pc, #176]	; (8001128 <MX_GPIO_Init+0x17c>)
 8001078:	f001 fc1a 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_RENUMn_GPIO_Port, USB_RENUMn_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001082:	482a      	ldr	r0, [pc, #168]	; (800112c <MX_GPIO_Init+0x180>)
 8001084:	f001 fc14 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LATCH_Pin|U_LED4_Pin;
 8001088:	f244 0308 	movw	r3, #16392	; 0x4008
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4820      	ldr	r0, [pc, #128]	; (8001124 <MX_GPIO_Init+0x178>)
 80010a2:	f001 fa55 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LINE_A_Pin|LINE_B_Pin|LINE_C_Pin;
 80010a6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	481a      	ldr	r0, [pc, #104]	; (8001128 <MX_GPIO_Init+0x17c>)
 80010c0:	f001 fa46 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LINE_D_Pin;
 80010c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LINE_D_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0x17c>)
 80010de:	f001 fa37 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_RENUMn_Pin;
 80010e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RENUMn_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_GPIO_Init+0x180>)
 80010fc:	f001 fa28 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001100:	2310      	movs	r3, #16
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_GPIO_Init+0x178>)
 8001114:	f001 fa1c 	bl	8002550 <HAL_GPIO_Init>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400
 8001124:	58020c00 	.word	0x58020c00
 8001128:	58020800 	.word	0x58020800
 800112c:	58020000 	.word	0x58020000

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f001 f85e 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f824 	bl	8001184 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800113c:	f000 f8aa 	bl	8001294 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f7ff ff34 	bl	8000fac <MX_GPIO_Init>
  MX_MDMA_Init();
 8001144:	f000 f8de 	bl	8001304 <MX_MDMA_Init>
  MX_TIM2_Init();
 8001148:	f000 fcb4 	bl	8001ab4 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 800114c:	f000 f8fa 	bl	8001344 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8001150:	f000 fcf2 	bl	8001b38 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001154:	f000 fda4 	bl	8001ca0 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001158:	f000 ff86 	bl	8002068 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800115c:	f000 fd2a 	bl	8001bb4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8001160:	f000 f9fc 	bl	800155c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

HUB_75_INIT();
 8001164:	f7ff fd7e 	bl	8000c64 <HUB_75_INIT>


SedingBufor_Adr=OUT_B1;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <main+0x48>)
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <main+0x4c>)
 800116c:	601a      	str	r2, [r3, #0]
View256ColorBitMap(Palette256color);
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <main+0x50>)
 8001170:	f7ff fa96 	bl	80006a0 <View256ColorBitMap>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0x44>
 8001176:	bf00      	nop
 8001178:	24000a28 	.word	0x24000a28
 800117c:	2400002c 	.word	0x2400002c
 8001180:	080084dc 	.word	0x080084dc

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09c      	sub	sp, #112	; 0x70
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	224c      	movs	r2, #76	; 0x4c
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 f98e 	bl	80084b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2220      	movs	r2, #32
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 f988 	bl	80084b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f001 ff5b 	bl	8003060 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <SystemClock_Config+0x104>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a35      	ldr	r2, [pc, #212]	; (8001288 <SystemClock_Config+0x104>)
 80011b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <SystemClock_Config+0x104>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <SystemClock_Config+0x108>)
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	4a30      	ldr	r2, [pc, #192]	; (800128c <SystemClock_Config+0x108>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <SystemClock_Config+0x108>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011dc:	bf00      	nop
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <SystemClock_Config+0x104>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ea:	d1f8      	bne.n	80011de <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemClock_Config+0x10c>)
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	f023 0303 	bic.w	r3, r3, #3
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <SystemClock_Config+0x10c>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_LSI;
 80011fc:	2318      	movs	r3, #24
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001208:	2320      	movs	r3, #32
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001210:	2301      	movs	r3, #1
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001214:	2301      	movs	r3, #1
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001218:	23f0      	movs	r3, #240	; 0xf0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 120;
 8001220:	2378      	movs	r3, #120	; 0x78
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001228:	2308      	movs	r3, #8
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800122c:	2300      	movs	r3, #0
 800122e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fd9d 	bl	8003d78 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001244:	f000 f856 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	233f      	movs	r3, #63	; 0x3f
 800124a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2303      	movs	r3, #3
 800124e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001254:	2308      	movs	r3, #8
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001264:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001266:	2340      	movs	r3, #64	; 0x40
 8001268:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f003 f992 	bl	8004598 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800127a:	f000 f83b 	bl	80012f4 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3770      	adds	r7, #112	; 0x70
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	58024800 	.word	0x58024800
 800128c:	58000400 	.word	0x58000400
 8001290:	58024400 	.word	0x58024400

08001294 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0b0      	sub	sp, #192	; 0xc0
 8001298:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	22bc      	movs	r2, #188	; 0xbc
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 f907 	bl	80084b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_SPI2;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <PeriphCommonClock_Config+0x5c>)
 80012a8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 80012ae:	233c      	movs	r3, #60	; 0x3c
 80012b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 120;
 80012b2:	2378      	movs	r3, #120	; 0x78
 80012b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 120;
 80012b6:	2378      	movs	r3, #120	; 0x78
 80012b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 5;
 80012ba:	2305      	movs	r3, #5
 80012bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80012ca:	2320      	movs	r3, #32
 80012cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fc8e 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80012e2:	f000 f807 	bl	80012f4 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	37c0      	adds	r7, #192	; 0xc0
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	02001000 	.word	0x02001000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
void MX_MDMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_MDMA_Init+0x3c>)
 800130c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <MX_MDMA_Init+0x3c>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_MDMA_Init+0x3c>)
 800131c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 2, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2102      	movs	r1, #2
 800132c:	207a      	movs	r0, #122	; 0x7a
 800132e:	f001 f8da 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001332:	207a      	movs	r0, #122	; 0x7a
 8001334:	f001 f8f1 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58024400 	.word	0x58024400

08001344 <MX_QUADSPI_Init>:
QSPI_HandleTypeDef hqspi;
MDMA_HandleTypeDef hmdma_quadspi_fifo_th;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_QUADSPI_Init+0x54>)
 800134c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001350:	2204      	movs	r2, #4
 8001352:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001356:	2204      	movs	r2, #4
 8001358:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001362:	2219      	movs	r2, #25
 8001364:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001380:	f001 fea8 	bl	80030d4 <HAL_QSPI_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800138a:	f7ff ffb3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	24004878 	.word	0x24004878
 8001398:	52005000 	.word	0x52005000

0800139c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a61      	ldr	r2, [pc, #388]	; (8001540 <HAL_QSPI_MspInit+0x1a4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	f040 80bc 	bne.w	8001538 <HAL_QSPI_MspInit+0x19c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013c0:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013c6:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013d0:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	4a57      	ldr	r2, [pc, #348]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ee:	4b55      	ldr	r3, [pc, #340]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_QSPI_MspInit+0x1a8>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001438:	2304      	movs	r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001448:	2309      	movs	r3, #9
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	483d      	ldr	r0, [pc, #244]	; (8001548 <HAL_QSPI_MspInit+0x1ac>)
 8001454:	f001 f87c 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001458:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800146a:	230a      	movs	r3, #10
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4835      	ldr	r0, [pc, #212]	; (800154c <HAL_QSPI_MspInit+0x1b0>)
 8001476:	f001 f86b 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800147a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800148c:	2309      	movs	r3, #9
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	482e      	ldr	r0, [pc, #184]	; (8001550 <HAL_QSPI_MspInit+0x1b4>)
 8001498:	f001 f85a 	bl	8002550 <HAL_GPIO_Init>

    /* QUADSPI MDMA Init */
    /* QUADSPI_FIFO_TH Init */
    hmdma_quadspi_fifo_th.Instance = MDMA_Channel0;
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 800149e:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_QSPI_MspInit+0x1bc>)
 80014a0:	601a      	str	r2, [r3, #0]
    hmdma_quadspi_fifo_th.Init.Request = MDMA_REQUEST_QUADSPI_FIFO_TH;
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014a4:	2216      	movs	r2, #22
 80014a6:	605a      	str	r2, [r3, #4]
    hmdma_quadspi_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
    hmdma_quadspi_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hmdma_quadspi_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
    hmdma_quadspi_fifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014bc:	2202      	movs	r2, #2
 80014be:	615a      	str	r2, [r3, #20]
    hmdma_quadspi_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
    hmdma_quadspi_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
    hmdma_quadspi_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
    hmdma_quadspi_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_quadspi_fifo_th.Init.BufferTransferLength = 4;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014dc:	2204      	movs	r2, #4
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_quadspi_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_quadspi_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_quadspi_fifo_th.Init.SourceBlockAddressOffset = 0;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_quadspi_fifo_th.Init.DestBlockAddressOffset = 0;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_quadspi_fifo_th) != HAL_OK)
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 80014fa:	f001 fa0c 	bl	8002916 <HAL_MDMA_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_QSPI_MspInit+0x16c>
    {
      Error_Handler();
 8001504:	f7ff fef6 	bl	80012f4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_quadspi_fifo_th, 0, 0) != HAL_OK)
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	4811      	ldr	r0, [pc, #68]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 800150e:	f001 fa4e 	bl	80029ae <HAL_MDMA_ConfigPostRequestMask>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_QSPI_MspInit+0x180>
    {
      Error_Handler();
 8001518:	f7ff feec 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hmdma,hmdma_quadspi_fifo_th);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 8001520:	63da      	str	r2, [r3, #60]	; 0x3c
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_QSPI_MspInit+0x1b8>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6413      	str	r3, [r2, #64]	; 0x40

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 2, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	205c      	movs	r0, #92	; 0x5c
 800152e:	f000 ffda 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001532:	205c      	movs	r0, #92	; 0x5c
 8001534:	f000 fff1 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	52005000 	.word	0x52005000
 8001544:	58024400 	.word	0x58024400
 8001548:	58020400 	.word	0x58020400
 800154c:	58021000 	.word	0x58021000
 8001550:	58020800 	.word	0x58020800
 8001554:	2400480c 	.word	0x2400480c
 8001558:	52000040 	.word	0x52000040

0800155c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <MX_SPI2_Init+0xa8>)
 8001564:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001568:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800156c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001576:	2203      	movs	r2, #3
 8001578:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_SPI2_Init+0xa4>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001588:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800158c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_SPI2_Init+0xa4>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_SPI2_Init+0xa4>)
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_SPI2_Init+0xa4>)
 80015ec:	f004 fba8 	bl	8005d40 <HAL_SPI_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80015f6:	f7ff fe7d 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	240048c4 	.word	0x240048c4
 8001604:	40003800 	.word	0x40003800

08001608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a2a      	ldr	r2, [pc, #168]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d14d      	bne.n	80016c6 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 800162c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001630:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 8001632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001636:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001684:	2306      	movs	r3, #6
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001694:	2305      	movs	r3, #5
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <HAL_SPI_MspInit+0xd0>)
 80016a0:	f000 ff56 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b6:	2305      	movs	r3, #5
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <HAL_SPI_MspInit+0xd4>)
 80016c2:	f000 ff45 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40003800 	.word	0x40003800
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020800 	.word	0x58020800
 80016dc:	58020400 	.word	0x58020400

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_MspInit+0x30>)
 80016e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x30>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x30>)
 80016f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	58024400 	.word	0x58024400

08001714 <LL_TIM_ClearFlag_CC1>:
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f06f 0202 	mvn.w	r2, #2
 8001722:	611a      	str	r2, [r3, #16]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 fda8 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	++t2;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <TIM2_IRQHandler+0x1c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <TIM2_IRQHandler+0x1c>)
 8001798:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	LL_TIM_ClearFlag_CC1(TIM2);
 800179a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800179e:	f7ff ffb9 	bl	8001714 <LL_TIM_ClearFlag_CC1>
  /* USER CODE END TIM2_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000a30 	.word	0x24000a30

080017ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	TUART_CallBack_IRQ(&Thuart3);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART3_IRQHandler+0x10>)
 80017c2:	f7ff fbad 	bl	8000f20 <TUART_CallBack_IRQ>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24004640 	.word	0x24004640

080017d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	TIM5_CallBack();
 80017d4:	f7fe fda0 	bl	8000318 <TIM5_CallBack>
	LL_TIM_ClearFlag_CC1(TIM5);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM5_IRQHandler+0x14>)
 80017da:	f7ff ff9b 	bl	8001714 <LL_TIM_ClearFlag_CC1>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40000c00 	.word	0x40000c00

080017e8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <QUADSPI_IRQHandler+0x10>)
 80017ee:	f001 fce5 	bl	80031bc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24004878 	.word	0x24004878

080017fc <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_quadspi_fifo_th);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <MDMA_IRQHandler+0x10>)
 8001802:	f001 f9cf 	bl	8002ba4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2400480c 	.word	0x2400480c

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <SystemInit+0xac>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a28      	ldr	r2, [pc, #160]	; (80018bc <SystemInit+0xac>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <SystemInit+0xb0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <SystemInit+0xb0>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <SystemInit+0xb0>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <SystemInit+0xb0>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4921      	ldr	r1, [pc, #132]	; (80018c0 <SystemInit+0xb0>)
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <SystemInit+0xb4>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <SystemInit+0xb0>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <SystemInit+0xb0>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <SystemInit+0xb0>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <SystemInit+0xb0>)
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <SystemInit+0xb0>)
 800185c:	2200      	movs	r2, #0
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <SystemInit+0xb0>)
 8001862:	2200      	movs	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <SystemInit+0xb0>)
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <SystemInit+0xb0>)
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <SystemInit+0xb0>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <SystemInit+0xb0>)
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <SystemInit+0xb0>)
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <SystemInit+0xb0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <SystemInit+0xb0>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <SystemInit+0xb0>)
 8001892:	2200      	movs	r2, #0
 8001894:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <SystemInit+0xb8>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <SystemInit+0xbc>)
 800189c:	4013      	ands	r3, r2
 800189e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018a2:	d202      	bcs.n	80018aa <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <SystemInit+0xc0>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SystemInit+0xac>)
 80018ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	58024400 	.word	0x58024400
 80018c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018c8:	5c001000 	.word	0x5c001000
 80018cc:	ffff0000 	.word	0xffff0000
 80018d0:	51008108 	.word	0x51008108

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_TIM_DisableARRPreload>:
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <LL_TIM_SetClockSource>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <LL_TIM_SetClockSource+0x28>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	fffebff8 	.word	0xfffebff8

08001a34 <LL_TIM_SetTriggerOutput>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	605a      	str	r2, [r3, #4]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_TIM_DisableMasterSlaveMode>:
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <LL_APB1_GRP1_EnableClock+0x34>)
 8001a86:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a8a:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <LL_APB1_GRP1_EnableClock+0x34>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <LL_APB1_GRP1_EnableClock+0x34>)
 8001a96:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	58024400 	.word	0x58024400

08001ab4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff ffd7 	bl	8001a7c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8001ace:	f7ff ff01 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff51 	bl	8001980 <NVIC_EncodePriority>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f7ff ff22 	bl	800192c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f7ff ff01 	bl	80018f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8001aee:	23ef      	movs	r3, #239	; 0xef
 8001af0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 99;
 8001af6:	2363      	movs	r3, #99	; 0x63
 8001af8:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b06:	f006 fad5 	bl	80080b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001b0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b0e:	f7ff ff6a 	bl	80019e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b12:	2100      	movs	r1, #0
 8001b14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b18:	f7ff ff76 	bl	8001a08 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b22:	f7ff ff87 	bl	8001a34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001b26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b2a:	f7ff ff96 	bl	8001a5a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7ff ff95 	bl	8001a7c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8001b52:	f7ff febf 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff0f 	bl	8001980 <NVIC_EncodePriority>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	201d      	movs	r0, #29
 8001b68:	f7ff fee0 	bl	800192c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001b6c:	201d      	movs	r0, #29
 8001b6e:	f7ff febf 	bl	80018f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8001b72:	23ef      	movs	r3, #239	; 0xef
 8001b74:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9;
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <MX_TIM3_Init+0x78>)
 8001b88:	f006 fa94 	bl	80080b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <MX_TIM3_Init+0x78>)
 8001b8e:	f7ff ff2a 	bl	80019e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b92:	2100      	movs	r1, #0
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <MX_TIM3_Init+0x78>)
 8001b96:	f7ff ff37 	bl	8001a08 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_TIM3_Init+0x78>)
 8001b9e:	f7ff ff49 	bl	8001a34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <MX_TIM3_Init+0x78>)
 8001ba4:	f7ff ff59 	bl	8001a5a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001be8:	4a2c      	ldr	r2, [pc, #176]	; (8001c9c <MX_TIM4_Init+0xe8>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001bfa:	2264      	movs	r2, #100	; 0x64
 8001bfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c0a:	4823      	ldr	r0, [pc, #140]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c0c:	f004 f9b5 	bl	8005f7a <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001c16:	f7ff fb6d 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c24:	4619      	mov	r1, r3
 8001c26:	481c      	ldr	r0, [pc, #112]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c28:	f004 fc78 	bl	800651c <HAL_TIM_ConfigClockSource>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c32:	f7ff fb5f 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c36:	4818      	ldr	r0, [pc, #96]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c38:	f004 f9f6 	bl	8006028 <HAL_TIM_PWM_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c42:	f7ff fb57 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4810      	ldr	r0, [pc, #64]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c56:	f005 f981 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c60:	f7ff fb48 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c7c:	f004 fb3e 	bl	80062fc <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c86:	f7ff fb35 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM4_Init+0xe4>)
 8001c8c:	f000 f868 	bl	8001d60 <HAL_TIM_MspPostInit>

}
 8001c90:	bf00      	nop
 8001c92:	3738      	adds	r7, #56	; 0x38
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2400494c 	.word	0x2400494c
 8001c9c:	40000800 	.word	0x40000800

08001ca0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8001cb4:	2008      	movs	r0, #8
 8001cb6:	f7ff fee1 	bl	8001a7c <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8001cba:	f7ff fe0b 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fe5b 	bl	8001980 <NVIC_EncodePriority>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	2032      	movs	r0, #50	; 0x32
 8001cd0:	f7ff fe2c 	bl	800192c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8001cd4:	2032      	movs	r0, #50	; 0x32
 8001cd6:	f7ff fe0b 	bl	80018f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8001cda:	23ef      	movs	r3, #239	; 0xef
 8001cdc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 200;
 8001ce2:	23c8      	movs	r3, #200	; 0xc8
 8001ce4:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	480a      	ldr	r0, [pc, #40]	; (8001d18 <MX_TIM5_Init+0x78>)
 8001cf0:	f006 f9e0 	bl	80080b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <MX_TIM5_Init+0x78>)
 8001cf6:	f7ff fe76 	bl	80019e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM5_Init+0x78>)
 8001cfe:	f7ff fe83 	bl	8001a08 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8001d02:	2100      	movs	r1, #0
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_TIM5_Init+0x78>)
 8001d06:	f7ff fe95 	bl	8001a34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <MX_TIM5_Init+0x78>)
 8001d0c:	f7ff fea5 	bl	8001a5a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40000c00 	.word	0x40000c00

08001d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <HAL_TIM_Base_MspInit+0x3c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10e      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_TIM_Base_MspInit+0x40>)
 8001d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_TIM_Base_MspInit+0x40>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_TIM_Base_MspInit+0x40>)
 8001d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	58024400 	.word	0x58024400

08001d60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <HAL_TIM_MspPostInit+0x6c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d11f      	bne.n	8001dc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_TIM_MspPostInit+0x70>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_TIM_MspPostInit+0x70>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_TIM_MspPostInit+0x70>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_TIM_MspPostInit+0x74>)
 8001dbe:	f000 fbc7 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58020c00 	.word	0x58020c00

08001dd8 <__NVIC_GetPriorityGrouping>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	; (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_USART_Enable>:
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_USART_DisableFIFO>:
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_USART_SetTXFIFOThreshold>:
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	075b      	lsls	r3, r3, #29
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	609a      	str	r2, [r3, #8]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_USART_SetRXFIFOThreshold>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	065b      	lsls	r3, r3, #25
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_USART_ConfigAsyncMode>:
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_USART_IsActiveFlag_TEACK>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fba:	d101      	bne.n	8001fc0 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_USART_IsActiveFlag_REACK>:
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe2:	d101      	bne.n	8001fe8 <LL_USART_IsActiveFlag_REACK+0x1a>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <LL_USART_IsActiveFlag_REACK+0x1c>
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <LL_AHB4_GRP1_EnableClock>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <LL_AHB4_GRP1_EnableClock+0x34>)
 8002002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002006:	4909      	ldr	r1, [pc, #36]	; (800202c <LL_AHB4_GRP1_EnableClock+0x34>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <LL_AHB4_GRP1_EnableClock+0x34>)
 8002012:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	58024400 	.word	0x58024400

08002030 <LL_APB1_GRP1_EnableClock>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <LL_APB1_GRP1_EnableClock+0x34>)
 800203a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800203e:	4909      	ldr	r1, [pc, #36]	; (8002064 <LL_APB1_GRP1_EnableClock+0x34>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <LL_APB1_GRP1_EnableClock+0x34>)
 800204a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	58024400 	.word	0x58024400

08002068 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0be      	sub	sp, #248	; 0xf8
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800206e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002072:	2220      	movs	r2, #32
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f006 fa1c 	bl	80084b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	22bc      	movs	r2, #188	; 0xbc
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f006 fa0d 	bl	80084b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800209a:	2302      	movs	r3, #2
 800209c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800209e:	2300      	movs	r3, #0
 80020a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fda7 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 80020b0:	f7ff f920 	bl	80012f4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80020b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80020b8:	f7ff ffba 	bl	8002030 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 80020bc:	2008      	movs	r0, #8
 80020be:	f7ff ff9b 	bl	8001ff8 <LL_AHB4_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80020c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020e2:	2307      	movs	r3, #7
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020ec:	4619      	mov	r1, r3
 80020ee:	482a      	ldr	r0, [pc, #168]	; (8002198 <MX_USART3_UART_Init+0x130>)
 80020f0:	f005 f896 	bl	8007220 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020f4:	f7ff fe70 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fec0 	bl	8001e84 <NVIC_EncodePriority>
 8002104:	4603      	mov	r3, r0
 8002106:	4619      	mov	r1, r3
 8002108:	2027      	movs	r0, #39	; 0x27
 800210a:	f7ff fe91 	bl	8001e30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800210e:	2027      	movs	r0, #39	; 0x27
 8002110:	f7ff fe70 	bl	8001df4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  USART_InitStruct.BaudRate = 9600;
 800211a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800211e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002134:	230c      	movs	r3, #12
 8002136:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  LL_USART_Init(USART3, &USART_InitStruct);
 8002146:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800214a:	4619      	mov	r1, r3
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <MX_USART3_UART_Init+0x134>)
 800214e:	f006 f8e3 	bl	8008318 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8002152:	2100      	movs	r1, #0
 8002154:	4811      	ldr	r0, [pc, #68]	; (800219c <MX_USART3_UART_Init+0x134>)
 8002156:	f7ff fee8 	bl	8001f2a <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 800215a:	2100      	movs	r1, #0
 800215c:	480f      	ldr	r0, [pc, #60]	; (800219c <MX_USART3_UART_Init+0x134>)
 800215e:	f7ff fef8 	bl	8001f52 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8002162:	480e      	ldr	r0, [pc, #56]	; (800219c <MX_USART3_UART_Init+0x134>)
 8002164:	f7ff fed1 	bl	8001f0a <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <MX_USART3_UART_Init+0x134>)
 800216a:	f7ff ff06 	bl	8001f7a <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 800216e:	480b      	ldr	r0, [pc, #44]	; (800219c <MX_USART3_UART_Init+0x134>)
 8002170:	f7ff febb 	bl	8001eea <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8002174:	bf00      	nop
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <MX_USART3_UART_Init+0x134>)
 8002178:	f7ff ff15 	bl	8001fa6 <LL_USART_IsActiveFlag_TEACK>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f9      	beq.n	8002176 <MX_USART3_UART_Init+0x10e>
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <MX_USART3_UART_Init+0x134>)
 8002184:	f7ff ff23 	bl	8001fce <LL_USART_IsActiveFlag_REACK>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f3      	beq.n	8002176 <MX_USART3_UART_Init+0x10e>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	37f8      	adds	r7, #248	; 0xf8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58020c00 	.word	0x58020c00
 800219c:	40004800 	.word	0x40004800

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021a4:	f7ff fb34 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021aa:	e003      	b.n	80021b4 <LoopCopyDataInit>

080021ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80021ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021b2:	3104      	adds	r1, #4

080021b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021b4:	480a      	ldr	r0, [pc, #40]	; (80021e0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80021b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021bc:	d3f6      	bcc.n	80021ac <CopyDataInit>
  ldr  r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80021c0:	e002      	b.n	80021c8 <LoopFillZerobss>

080021c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021c4:	f842 3b04 	str.w	r3, [r2], #4

080021c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80021ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021cc:	d3f9      	bcc.n	80021c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ce:	f006 f94d 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7fe ffad 	bl	8001130 <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80021dc:	08009534 	.word	0x08009534
  ldr  r0, =_sdata
 80021e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80021e4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80021e8:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80021ec:	2400499c 	.word	0x2400499c

080021f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC3_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fa:	2003      	movs	r0, #3
 80021fc:	f000 f968 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002200:	f002 fb80 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_Init+0x68>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	4913      	ldr	r1, [pc, #76]	; (8002260 <HAL_Init+0x6c>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_Init+0x68>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_Init+0x6c>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_Init+0x70>)
 8002236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <HAL_Init+0x74>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800223e:	2000      	movs	r0, #0
 8002240:	f000 f814 	bl	800226c <HAL_InitTick>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e002      	b.n	8002254 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800224e:	f7ff fa47 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	58024400 	.word	0x58024400
 8002260:	080094dc 	.word	0x080094dc
 8002264:	24000004 	.word	0x24000004
 8002268:	24000000 	.word	0x24000000

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_InitTick+0x60>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e021      	b.n	80022c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_InitTick+0x64>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_InitTick+0x60>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f94d 	bl	8002536 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f917 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x68>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2400000c 	.word	0x2400000c
 80022d0:	24000000 	.word	0x24000000
 80022d4:	24000008 	.word	0x24000008

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2400000c 	.word	0x2400000c
 80022fc:	24004998 	.word	0x24004998

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	24004998 	.word	0x24004998

08002318 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_GetREVID+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0c1b      	lsrs	r3, r3, #16
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	5c001000 	.word	0x5c001000

08002330 <__NVIC_SetPriorityGrouping>:
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <__NVIC_SetPriorityGrouping+0x40>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	4313      	orrs	r3, r2
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x40>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00
 8002374:	05fa0000 	.word	0x05fa0000

08002378 <__NVIC_GetPriorityGrouping>:
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff40 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff33 	bl	8002394 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa4 	bl	800248c <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_GPIO_Init+0x234>)
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002562:	e194      	b.n	800288e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8186 	beq.w	8002888 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00b      	beq.n	800259c <HAL_GPIO_Init+0x4c>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d007      	beq.n	800259c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002590:	2b11      	cmp	r3, #17
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b12      	cmp	r3, #18
 800259a:	d130      	bne.n	80025fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d2:	2201      	movs	r2, #1
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0201 	and.w	r2, r3, #1
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0xee>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b12      	cmp	r3, #18
 800263c:	d123      	bne.n	8002686 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	69b9      	ldr	r1, [r7, #24]
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80e0 	beq.w	8002888 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_GPIO_Init+0x238>)
 80026ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026ce:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <HAL_GPIO_Init+0x238>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_GPIO_Init+0x238>)
 80026da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a29      	ldr	r2, [pc, #164]	; (800278c <HAL_GPIO_Init+0x23c>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <HAL_GPIO_Init+0x240>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d052      	beq.n	80027b8 <HAL_GPIO_Init+0x268>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_GPIO_Init+0x244>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_GPIO_Init+0x22e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_GPIO_Init+0x248>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x22a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_GPIO_Init+0x24c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x226>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_GPIO_Init+0x250>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x222>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_GPIO_Init+0x254>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_GPIO_Init+0x258>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x21a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_GPIO_Init+0x25c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x216>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_GPIO_Init+0x260>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x212>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_GPIO_Init+0x264>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20e>
 800275a:	2309      	movs	r3, #9
 800275c:	e02d      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 800275e:	230a      	movs	r3, #10
 8002760:	e02b      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 8002762:	2308      	movs	r3, #8
 8002764:	e029      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 8002766:	2307      	movs	r3, #7
 8002768:	e027      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 800276a:	2306      	movs	r3, #6
 800276c:	e025      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 800276e:	2305      	movs	r3, #5
 8002770:	e023      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 8002772:	2304      	movs	r3, #4
 8002774:	e021      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 8002776:	2303      	movs	r3, #3
 8002778:	e01f      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 800277a:	2302      	movs	r3, #2
 800277c:	e01d      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 800277e:	2301      	movs	r3, #1
 8002780:	e01b      	b.n	80027ba <HAL_GPIO_Init+0x26a>
 8002782:	bf00      	nop
 8002784:	58000080 	.word	0x58000080
 8002788:	58024400 	.word	0x58024400
 800278c:	58000400 	.word	0x58000400
 8002790:	58020000 	.word	0x58020000
 8002794:	58020400 	.word	0x58020400
 8002798:	58020800 	.word	0x58020800
 800279c:	58020c00 	.word	0x58020c00
 80027a0:	58021000 	.word	0x58021000
 80027a4:	58021400 	.word	0x58021400
 80027a8:	58021800 	.word	0x58021800
 80027ac:	58021c00 	.word	0x58021c00
 80027b0:	58022000 	.word	0x58022000
 80027b4:	58022400 	.word	0x58022400
 80027b8:	2300      	movs	r3, #0
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	f002 0203 	and.w	r2, r2, #3
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	4093      	lsls	r3, r2
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ca:	4938      	ldr	r1, [pc, #224]	; (80028ac <HAL_GPIO_Init+0x35c>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3301      	adds	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	f47f ae63 	bne.w	8002564 <HAL_GPIO_Init+0x14>
  }
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	3724      	adds	r7, #36	; 0x24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	58000400 	.word	0x58000400

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	041a      	lsls	r2, r3, #16
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43d9      	mvns	r1, r3
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	400b      	ands	r3, r1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291e:	f7ff fcef 	bl	8002300 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e03b      	b.n	80029a6 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800294e:	e00f      	b.n	8002970 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8002950:	f7ff fcd6 	bl	8002300 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b05      	cmp	r3, #5
 800295c:	d908      	bls.n	8002970 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2203      	movs	r2, #3
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e01a      	b.n	80029a6 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e8      	bne.n	8002950 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fad6 	bl	8002f30 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e03e      	b.n	8002a46 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_MDMA_ConfigPostRequestMask+0x28>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e037      	b.n	8002a46 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d126      	bne.n	8002a38 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11c      	bne.n	8002a32 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	e00d      	b.n	8002a3c <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a2e:	611a      	str	r2, [r3, #16]
 8002a30:	e004      	b.n	8002a3c <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
 8002a36:	e001      	b.n	8002a3c <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e070      	b.n	8002b4c <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_MDMA_Start_IT+0x26>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e069      	b.n	8002b4c <HAL_MDMA_Start_IT+0xfa>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d158      	bne.n	8002b3e <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9cb 	bl	8002e50 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0206 	orr.w	r2, r2, #6
 8002ac8:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0210 	orr.w	r2, r2, #16
 8002ae0:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0208 	orr.w	r2, r2, #8
 8002af8:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d10e      	bne.n	8002b4a <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	e005      	b.n	8002b4a <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
 8002b48:	e000      	b.n	8002b4c <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e017      	b.n	8002b96 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d004      	beq.n	8002b7c <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e00c      	b.n	8002b96 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb0:	4b9a      	ldr	r3, [pc, #616]	; (8002e1c <HAL_MDMA_IRQHandler+0x278>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a9a      	ldr	r2, [pc, #616]	; (8002e20 <HAL_MDMA_IRQHandler+0x27c>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0a9b      	lsrs	r3, r3, #10
 8002bbc:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b97      	ldr	r3, [pc, #604]	; (8002e24 <HAL_MDMA_IRQHandler+0x280>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2201      	movs	r2, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8002bd6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 812e 	beq.w	8002e42 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d054      	beq.n	8002c9e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d04d      	beq.n	8002c9e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0202 	bic.w	r2, r2, #2
 8002c10:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	669a      	str	r2, [r3, #104]	; 0x68
 8002c30:	e005      	b.n	8002c3e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c36:	f043 0202 	orr.w	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c62:	f043 0208 	orr.w	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c78:	f043 0210 	orr.w	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2204      	movs	r2, #4
 8002d28:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d039      	beq.n	8002dbc <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d032      	beq.n	8002dbc <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8002d64:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d110      	bne.n	8002d94 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d05d      	beq.n	8002e46 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
        }
        return;
 8002d92:	e058      	b.n	8002e46 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d041      	beq.n	8002e48 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	3301      	adds	r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d307      	bcc.n	8002df8 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f2      	bne.n	8002ddc <HAL_MDMA_IRQHandler+0x238>
 8002df6:	e000      	b.n	8002dfa <HAL_MDMA_IRQHandler+0x256>
        break;
 8002df8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2203      	movs	r2, #3
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e18:	e00a      	b.n	8002e30 <HAL_MDMA_IRQHandler+0x28c>
 8002e1a:	bf00      	nop
 8002e1c:	24000000 	.word	0x24000000
 8002e20:	1b4e81b5 	.word	0x1b4e81b5
 8002e24:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e002      	b.n	8002e48 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8002e46:	bf00      	nop
    }
  }
}
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <MDMA_SetConfig+0xdc>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	051a      	lsls	r2, r3, #20
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	221f      	movs	r2, #31
 8002e94:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb4:	d002      	beq.n	8002ebc <MDMA_SetConfig+0x6c>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ecc:	e007      	b.n	8002ede <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d002      	beq.n	8002ef4 <MDMA_SetConfig+0xa4>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
 8002f04:	e007      	b.n	8002f16 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	fffe0000 	.word	0xfffe0000

08002f30 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68d9      	ldr	r1, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002f56:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8002f62:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002f6e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002f84:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002f86:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d107      	bne.n	8002fa2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002fa0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da11      	bge.n	8002fd6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fc0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	425b      	negs	r3, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	621a      	str	r2, [r3, #32]
 8002fd4:	e006      	b.n	8002fe4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da15      	bge.n	8003018 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002ffa:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	425b      	negs	r3, r3
 8003002:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6a19      	ldr	r1, [r3, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	621a      	str	r2, [r3, #32]
 8003016:	e009      	b.n	800302c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a19      	ldr	r1, [r3, #32]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	041a      	lsls	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d006      	beq.n	8003044 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
 8003042:	e003      	b.n	800304c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_PWREx_ConfigSupply+0x70>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d00a      	beq.n	800308a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	d001      	beq.n	8003086 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e01f      	b.n	80030c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e01d      	b.n	80030c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_PWREx_ConfigSupply+0x70>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	490f      	ldr	r1, [pc, #60]	; (80030d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4313      	orrs	r3, r2
 8003098:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800309a:	f7ff f931 	bl	8002300 <HAL_GetTick>
 800309e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030a0:	e009      	b.n	80030b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030a2:	f7ff f92d 	bl	8002300 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b0:	d901      	bls.n	80030b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e007      	b.n	80030c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_PWREx_ConfigSupply+0x70>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c2:	d1ee      	bne.n	80030a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	58024800 	.word	0x58024800

080030d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff f910 	bl	8002300 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e05f      	b.n	80031ac <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fe f94f 	bl	800139c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80030fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fc00 	bl	8003908 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	3b01      	subs	r3, #1
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	2120      	movs	r1, #32
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fc65 	bl	80039fe <QSPI_WaitFlagStateUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d135      	bne.n	80031aa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_QSPI_Init+0xe0>)
 8003146:	4013      	ands	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6852      	ldr	r2, [r2, #4]
 800314c:	0611      	lsls	r1, r2, #24
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	69d2      	ldr	r2, [r2, #28]
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a12      	ldr	r2, [r2, #32]
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_QSPI_Init+0xe4>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6912      	ldr	r2, [r2, #16]
 8003176:	0411      	lsls	r1, r2, #16
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6952      	ldr	r2, [r2, #20]
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6992      	ldr	r2, [r2, #24]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80031aa:	7afb      	ldrb	r3, [r7, #11]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	00ffff2f 	.word	0x00ffff2f
 80031b8:	ffe0f8fe 	.word	0xffe0f8fe

080031bc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d064      	beq.n	80032a8 <HAL_QSPI_IRQHandler+0xec>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05f      	beq.n	80032a8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3320      	adds	r3, #32
 80031ee:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b12      	cmp	r3, #18
 80031fa:	d125      	bne.n	8003248 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80031fc:	e01c      	b.n	8003238 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00f      	beq.n	8003226 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	1e5a      	subs	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
 8003224:	e008      	b.n	8003238 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003234:	601a      	str	r2, [r3, #0]
          break;
 8003236:	e033      	b.n	80032a0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1db      	bne.n	80031fe <HAL_QSPI_IRQHandler+0x42>
 8003246:	e02b      	b.n	80032a0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b22      	cmp	r3, #34	; 0x22
 8003252:	d125      	bne.n	80032a0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003254:	e01d      	b.n	8003292 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
 800327e:	e008      	b.n	8003292 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800328e:	601a      	str	r2, [r3, #0]
          break;
 8003290:	e006      	b.n	80032a0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1da      	bne.n	8003256 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fab7 	bl	8003814 <HAL_QSPI_FifoThresholdCallback>
 80032a6:	e13c      	b.n	8003522 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80b0 	beq.w	8003414 <HAL_QSPI_IRQHandler+0x258>
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80aa 	beq.w	8003414 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2202      	movs	r2, #2
 80032c6:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80032d6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d120      	bne.n	8003326 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d011      	beq.n	8003316 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fc72 	bl	8000c08 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003324:	e0fa      	b.n	800351c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b22      	cmp	r3, #34	; 0x22
 8003330:	d143      	bne.n	80033ba <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e021      	b.n	80033aa <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3320      	adds	r3, #32
 800336c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800336e:	e013      	b.n	8003398 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	7812      	ldrb	r2, [r2, #0]
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e4      	bne.n	8003370 <HAL_QSPI_IRQHandler+0x1b4>
 80033a6:	e000      	b.n	80033aa <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80033a8:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa24 	bl	8003800 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80033b8:	e0b0      	b.n	800351c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d107      	bne.n	80033d6 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa0c 	bl	80037ec <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80033d4:	e0a2      	b.n	800351c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b08      	cmp	r3, #8
 80033e0:	f040 809c 	bne.w	800351c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80033f2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9e7 	bl	80037d8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800340a:	e087      	b.n	800351c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f9d9 	bl	80037c4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003412:	e083      	b.n	800351c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01f      	beq.n	800345e <HAL_QSPI_IRQHandler+0x2a2>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01a      	beq.n	800345e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800344c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9e6 	bl	8003828 <HAL_QSPI_StatusMatchCallback>
 800345c:	e061      	b.n	8003522 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d047      	beq.n	80034f8 <HAL_QSPI_IRQHandler+0x33c>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d042      	beq.n	80034f8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2201      	movs	r2, #1
 8003478:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003488:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0202 	orr.w	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d021      	beq.n	80034e8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_QSPI_IRQHandler+0x370>)
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fb47 	bl	8002b54 <HAL_MDMA_Abort_IT>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d029      	beq.n	8003520 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f96f 	bl	80037c4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80034e6:	e01b      	b.n	8003520 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f967 	bl	80037c4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80034f6:	e013      	b.n	8003520 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00f      	beq.n	8003522 <HAL_QSPI_IRQHandler+0x366>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f991 	bl	800383c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800351a:	e002      	b.n	8003522 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003520:	bf00      	nop
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	08003999 	.word	0x08003999

08003530 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7fe fee0 	bl	8002300 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_QSPI_Command+0x22>
 800354e:	2302      	movs	r3, #2
 8003550:	e048      	b.n	80035e4 <HAL_QSPI_Command+0xb4>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d137      	bne.n	80035d6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2200      	movs	r2, #0
 800357c:	2120      	movs	r1, #32
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fa3d 	bl	80039fe <QSPI_WaitFlagStateUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d125      	bne.n	80035da <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800358e:	2200      	movs	r2, #0
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa6a 	bl	8003a6c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d115      	bne.n	80035cc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2201      	movs	r2, #1
 80035a8:	2102      	movs	r1, #2
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fa27 	bl	80039fe <QSPI_WaitFlagStateUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2202      	movs	r2, #2
 80035c0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ca:	e006      	b.n	80035da <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035d4:	e001      	b.n	80035da <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_QSPI_Transmit_DMA>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	3301      	adds	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_QSPI_Transmit_DMA+0x28>
 8003610:	2302      	movs	r3, #2
 8003612:	e0cb      	b.n	80037ac <HAL_QSPI_Transmit_DMA+0x1c0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 80ba 	bne.w	800379e <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80a6 	beq.w	8003784 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2212      	movs	r2, #18
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2203      	movs	r2, #3
 800364c:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800366a:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_QSPI_Transmit_DMA+0x1c8>)
 8003672:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	4a4f      	ldr	r2, [pc, #316]	; (80037b8 <HAL_QSPI_Transmit_DMA+0x1cc>)
 800367a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	2200      	movs	r2, #0
 8003682:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6919      	ldr	r1, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_QSPI_Transmit_DMA+0x1d0>)
 8003694:	400b      	ands	r3, r1
 8003696:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6113      	str	r3, [r2, #16]
 80036ba:	e02c      	b.n	8003716 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d10c      	bne.n	80036e0 <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80036dc:	6113      	str	r3, [r2, #16]
 80036de:	e01a      	b.n	8003716 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d10d      	bne.n	8003706 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4a33      	ldr	r2, [pc, #204]	; (80037c0 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	f240 2302 	movw	r3, #514	; 0x202
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
 8003704:	e007      	b.n	8003716 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3320      	adds	r3, #32
 8003722:	461c      	mov	r4, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	2201      	movs	r2, #1
 800372a:	9200      	str	r2, [sp, #0]
 800372c:	4622      	mov	r2, r4
 800372e:	f7ff f990 	bl	8002a52 <HAL_MDMA_Start_IT>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d114      	bne.n	8003762 <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800374e:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0204 	orr.w	r2, r2, #4
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e023      	b.n	80037aa <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003782:	e012      	b.n	80037aa <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	f043 0208 	orr.w	r2, r3, #8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800379c:	e005      	b.n	80037aa <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}
 80037b4:	08003925 	.word	0x08003925
 80037b8:	08003955 	.word	0x08003955
 80037bc:	fffff3f3 	.word	0xfffff3f3
 80037c0:	fffffcfc 	.word	0xfffffcfc

080037c4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d046      	beq.n	80038fa <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2208      	movs	r2, #8
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800388a:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01b      	beq.n	80038d2 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0204 	bic.w	r2, r2, #4
 80038a8:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	4a15      	ldr	r2, [pc, #84]	; (8003904 <HAL_QSPI_Abort_IT+0xb4>)
 80038b0:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f94c 	bl	8002b54 <HAL_MDMA_Abort_IT>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01b      	beq.n	80038fa <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff84 	bl	80037d8 <HAL_QSPI_AbortCpltCallback>
 80038d0:	e013      	b.n	80038fa <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2202      	movs	r2, #2
 80038d8:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038e8:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0202 	orr.w	r2, r2, #2
 80038f8:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	08003999 	.word	0x08003999

08003908 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0204 	bic.w	r2, r2, #4
 8003988:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff ff60 	bl	8003850 <HAL_QSPI_Abort_IT>

}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d114      	bne.n	80039e8 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2202      	movs	r2, #2
 80039c4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039d4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0202 	orr.w	r2, r2, #2
 80039e4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80039e6:	e006      	b.n	80039f6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fee7 	bl	80037c4 <HAL_QSPI_ErrorCallback>
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a0e:	e01a      	b.n	8003a46 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d016      	beq.n	8003a46 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7fe fc72 	bl	8002300 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2204      	movs	r2, #4
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00e      	b.n	8003a64 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d1d6      	bne.n	8003a10 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <QSPI_Config+0x28>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003a86:	d005      	beq.n	8003a94 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3a01      	subs	r2, #1
 8003a92:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80b9 	beq.w	8003c10 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d05f      	beq.n	8003b66 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d031      	beq.n	8003b1c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	049b      	lsls	r3, r3, #18
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	ea42 0103 	orr.w	r1, r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b0c:	f000 812e 	beq.w	8003d6c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	6852      	ldr	r2, [r2, #4]
 8003b18:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003b1a:	e127      	b.n	8003d6c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	049b      	lsls	r3, r3, #18
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	ea42 0103 	orr.w	r1, r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	615a      	str	r2, [r3, #20]
}
 8003b64:	e102      	b.n	8003d6c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02e      	beq.n	8003bcc <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	049b      	lsls	r3, r3, #18
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bbc:	f000 80d6 	beq.w	8003d6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	619a      	str	r2, [r3, #24]
}
 8003bca:	e0cf      	b.n	8003d6c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	049b      	lsls	r3, r3, #18
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	ea42 0103 	orr.w	r1, r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	615a      	str	r2, [r3, #20]
}
 8003c0e:	e0ad      	b.n	8003d6c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d058      	beq.n	8003cca <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02d      	beq.n	8003c86 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	431a      	orrs	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	049b      	lsls	r3, r3, #18
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	ea42 0103 	orr.w	r1, r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c78:	d078      	beq.n	8003d6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	6852      	ldr	r2, [r2, #4]
 8003c82:	619a      	str	r2, [r3, #24]
}
 8003c84:	e072      	b.n	8003d6c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c94:	431a      	orrs	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	049b      	lsls	r3, r3, #18
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	ea42 0103 	orr.w	r1, r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	615a      	str	r2, [r3, #20]
}
 8003cc8:	e050      	b.n	8003d6c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d02a      	beq.n	8003d28 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	049b      	lsls	r3, r3, #18
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	ea42 0103 	orr.w	r1, r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d1a:	d027      	beq.n	8003d6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	6852      	ldr	r2, [r2, #4]
 8003d24:	619a      	str	r2, [r3, #24]
}
 8003d26:	e021      	b.n	8003d6c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01d      	beq.n	8003d6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	049b      	lsls	r3, r3, #18
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	ea42 0103 	orr.w	r1, r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	615a      	str	r2, [r3, #20]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	; 0x30
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e3ff      	b.n	800458a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8087 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003da2:	4b97      	ldr	r3, [pc, #604]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d007      	beq.n	8003dbe <HAL_RCC_OscConfig+0x46>
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2b18      	cmp	r3, #24
 8003db2:	d110      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbe:	4b90      	ldr	r3, [pc, #576]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x12c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d168      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e3d9      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x76>
 8003de0:	4b87      	ldr	r3, [pc, #540]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a86      	ldr	r2, [pc, #536]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e02e      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x98>
 8003df6:	4b82      	ldr	r3, [pc, #520]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a81      	ldr	r2, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b7f      	ldr	r3, [pc, #508]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7e      	ldr	r2, [pc, #504]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0xbc>
 8003e1a:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a78      	ldr	r2, [pc, #480]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003e34:	4b72      	ldr	r3, [pc, #456]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a71      	ldr	r2, [pc, #452]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6e      	ldr	r2, [pc, #440]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe fa54 	bl	8002300 <HAL_GetTick>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fa50 	bl	8002300 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e38d      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e6e:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe4>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fa40 	bl	8002300 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fa3c 	bl	8002300 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e379      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e96:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x10c>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80ae 	beq.w	8004010 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb4:	4b52      	ldr	r3, [pc, #328]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ebc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ebe:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_RCC_OscConfig+0x162>
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	2b18      	cmp	r3, #24
 8003ece:	d13a      	bne.n	8003f46 <HAL_RCC_OscConfig+0x1ce>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d135      	bne.n	8003f46 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x17a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e34b      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	f7fe fa11 	bl	8002318 <HAL_GetREVID>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d817      	bhi.n	8003f30 <HAL_RCC_OscConfig+0x1b8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d108      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1a2>
 8003f08:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f10:	4a3b      	ldr	r2, [pc, #236]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f16:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f18:	e07a      	b.n	8004010 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	031b      	lsls	r3, r3, #12
 8003f28:	4935      	ldr	r1, [pc, #212]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2e:	e06f      	b.n	8004010 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b33      	ldr	r3, [pc, #204]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4930      	ldr	r1, [pc, #192]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f44:	e064      	b.n	8004010 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d045      	beq.n	8003fda <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 0219 	bic.w	r2, r3, #25
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4929      	ldr	r1, [pc, #164]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe f9ce 	bl	8002300 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f68:	f7fe f9ca 	bl	8002300 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e307      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	f7fe f9c7 	bl	8002318 <HAL_GetREVID>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d817      	bhi.n	8003fc4 <HAL_RCC_OscConfig+0x24c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d108      	bne.n	8003fae <HAL_RCC_OscConfig+0x236>
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003faa:	6053      	str	r3, [r2, #4]
 8003fac:	e030      	b.n	8004010 <HAL_RCC_OscConfig+0x298>
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	4910      	ldr	r1, [pc, #64]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
 8003fc2:	e025      	b.n	8004010 <HAL_RCC_OscConfig+0x298>
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	490b      	ldr	r1, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	e01a      	b.n	8004010 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f98b 	bl	8002300 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe f987 	bl	8002300 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d903      	bls.n	8004004 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e2c4      	b.n	800458a <HAL_RCC_OscConfig+0x812>
 8004000:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004004:	4ba4      	ldr	r3, [pc, #656]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ee      	bne.n	8003fee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a9 	beq.w	8004170 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4b9e      	ldr	r3, [pc, #632]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004026:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004028:	4b9b      	ldr	r3, [pc, #620]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x2cc>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b18      	cmp	r3, #24
 8004038:	d13a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x338>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d135      	bne.n	80040b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004044:	4b94      	ldr	r3, [pc, #592]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x2e4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e296      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405c:	f7fe f95c 	bl	8002318 <HAL_GetREVID>
 8004060:	4603      	mov	r3, r0
 8004062:	f241 0203 	movw	r2, #4099	; 0x1003
 8004066:	4293      	cmp	r3, r2
 8004068:	d817      	bhi.n	800409a <HAL_RCC_OscConfig+0x322>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	2b20      	cmp	r3, #32
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x30c>
 8004072:	4b89      	ldr	r3, [pc, #548]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800407a:	4a87      	ldr	r2, [pc, #540]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800407c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004080:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004082:	e075      	b.n	8004170 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004084:	4b84      	ldr	r3, [pc, #528]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	069b      	lsls	r3, r3, #26
 8004092:	4981      	ldr	r1, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004098:	e06a      	b.n	8004170 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409a:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	497b      	ldr	r1, [pc, #492]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ae:	e05f      	b.n	8004170 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d042      	beq.n	800413e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040b8:	4b77      	ldr	r3, [pc, #476]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a76      	ldr	r2, [pc, #472]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe f91c 	bl	8002300 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040cc:	f7fe f918 	bl	8002300 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e255      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040de:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ea:	f7fe f915 	bl	8002318 <HAL_GetREVID>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d817      	bhi.n	8004128 <HAL_RCC_OscConfig+0x3b0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d108      	bne.n	8004112 <HAL_RCC_OscConfig+0x39a>
 8004100:	4b65      	ldr	r3, [pc, #404]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004108:	4a63      	ldr	r2, [pc, #396]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800410a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410e:	6053      	str	r3, [r2, #4]
 8004110:	e02e      	b.n	8004170 <HAL_RCC_OscConfig+0x3f8>
 8004112:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	495d      	ldr	r1, [pc, #372]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e023      	b.n	8004170 <HAL_RCC_OscConfig+0x3f8>
 8004128:	4b5b      	ldr	r3, [pc, #364]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	4958      	ldr	r1, [pc, #352]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004138:	4313      	orrs	r3, r2
 800413a:	60cb      	str	r3, [r1, #12]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800413e:	4b56      	ldr	r3, [pc, #344]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a55      	ldr	r2, [pc, #340]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe f8d9 	bl	8002300 <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004152:	f7fe f8d5 	bl	8002300 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e212      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004164:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d036      	beq.n	80041ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004184:	4b44      	ldr	r3, [pc, #272]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	4a43      	ldr	r2, [pc, #268]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fe f8b6 	bl	8002300 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7fe f8b2 	bl	8002300 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1ef      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x420>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	4a36      	ldr	r2, [pc, #216]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe f89c 	bl	8002300 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe f898 	bl	8002300 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e1d5      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d036      	beq.n	8004264 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d019      	beq.n	8004232 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800420a:	f7fe f879 	bl	8002300 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004212:	f7fe f875 	bl	8002300 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1b2      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x49a>
 8004230:	e018      	b.n	8004264 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 8004238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800423c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800423e:	f7fe f85f 	bl	8002300 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004246:	f7fe f85b 	bl	8002300 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e198      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <HAL_RCC_OscConfig+0x520>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8085 	beq.w	800437c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_OscConfig+0x524>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_OscConfig+0x524>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fe f83f 	bl	8002300 <HAL_GetTick>
 8004282:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004284:	e00c      	b.n	80042a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fe f83b 	bl	8002300 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d905      	bls.n	80042a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e178      	b.n	800458a <HAL_RCC_OscConfig+0x812>
 8004298:	58024400 	.word	0x58024400
 800429c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a0:	4b96      	ldr	r3, [pc, #600]	; (80044fc <HAL_RCC_OscConfig+0x784>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ec      	beq.n	8004286 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x54a>
 80042b4:	4b92      	ldr	r3, [pc, #584]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a91      	ldr	r2, [pc, #580]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	e02d      	b.n	800431e <HAL_RCC_OscConfig+0x5a6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x56c>
 80042ca:	4b8d      	ldr	r3, [pc, #564]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a8c      	ldr	r2, [pc, #560]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
 80042d6:	4b8a      	ldr	r3, [pc, #552]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a89      	ldr	r2, [pc, #548]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
 80042e2:	e01c      	b.n	800431e <HAL_RCC_OscConfig+0x5a6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x58e>
 80042ec:	4b84      	ldr	r3, [pc, #528]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a83      	ldr	r2, [pc, #524]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
 80042f8:	4b81      	ldr	r3, [pc, #516]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a80      	ldr	r2, [pc, #512]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	e00b      	b.n	800431e <HAL_RCC_OscConfig+0x5a6>
 8004306:	4b7e      	ldr	r3, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a7d      	ldr	r2, [pc, #500]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	4b7b      	ldr	r3, [pc, #492]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a7a      	ldr	r2, [pc, #488]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d015      	beq.n	8004352 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fd ffeb 	bl	8002300 <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fd ffe7 	bl	8002300 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e122      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004344:	4b6e      	ldr	r3, [pc, #440]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ee      	beq.n	800432e <HAL_RCC_OscConfig+0x5b6>
 8004350:	e014      	b.n	800437c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fd ffd5 	bl	8002300 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fd ffd1 	bl	8002300 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e10c      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004370:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8101 	beq.w	8004588 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004386:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	2b18      	cmp	r3, #24
 8004390:	f000 80bc 	beq.w	800450c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b02      	cmp	r3, #2
 800439a:	f040 8095 	bne.w	80044c8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b58      	ldr	r3, [pc, #352]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a57      	ldr	r2, [pc, #348]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80043a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fd ffa9 	bl	8002300 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fd ffa5 	bl	8002300 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0e2      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043c4:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80043d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <HAL_RCC_OscConfig+0x78c>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	430a      	orrs	r2, r1
 80043e4:	4946      	ldr	r1, [pc, #280]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	628b      	str	r3, [r1, #40]	; 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	3b01      	subs	r3, #1
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	3b01      	subs	r3, #1
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	3b01      	subs	r3, #1
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800441a:	4939      	ldr	r1, [pc, #228]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800441c:	4313      	orrs	r3, r2
 800441e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a36      	ldr	r2, [pc, #216]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800442e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004430:	4b35      	ldr	r3, [pc, #212]	; (8004508 <HAL_RCC_OscConfig+0x790>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004438:	00d2      	lsls	r2, r2, #3
 800443a:	4931      	ldr	r1, [pc, #196]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800443c:	4313      	orrs	r3, r2
 800443e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004440:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	f023 020c 	bic.w	r2, r3, #12
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	492c      	ldr	r1, [pc, #176]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800444e:	4313      	orrs	r3, r2
 8004450:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f023 0202 	bic.w	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	4928      	ldr	r1, [pc, #160]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004460:	4313      	orrs	r3, r2
 8004462:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	4a25      	ldr	r2, [pc, #148]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd ff2e 	bl	8002300 <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fd ff2a 	bl	8002300 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e067      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x730>
 80044c6:	e05f      	b.n	8004588 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fd ff14 	bl	8002300 <HAL_GetTick>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fd ff10 	bl	8002300 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04d      	b.n	800458a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_RCC_OscConfig+0x788>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x764>
 80044fa:	e045      	b.n	8004588 <HAL_RCC_OscConfig+0x810>
 80044fc:	58024800 	.word	0x58024800
 8004500:	58024400 	.word	0x58024400
 8004504:	fffffc0c 	.word	0xfffffc0c
 8004508:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800450c:	4b21      	ldr	r3, [pc, #132]	; (8004594 <HAL_RCC_OscConfig+0x81c>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_RCC_OscConfig+0x81c>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2b01      	cmp	r3, #1
 800451e:	d031      	beq.n	8004584 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d12a      	bne.n	8004584 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d122      	bne.n	8004584 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d11a      	bne.n	8004584 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d111      	bne.n	8004584 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0e1b      	lsrs	r3, r3, #24
 8004576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400

08004598 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e19c      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	4985      	ldr	r1, [pc, #532]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b83      	ldr	r3, [pc, #524]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e184      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d908      	bls.n	800460a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045f8:	4b78      	ldr	r3, [pc, #480]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4975      	ldr	r1, [pc, #468]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004606:	4313      	orrs	r3, r2
 8004608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	4b70      	ldr	r3, [pc, #448]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004622:	429a      	cmp	r2, r3
 8004624:	d908      	bls.n	8004638 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	496a      	ldr	r1, [pc, #424]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	4b64      	ldr	r3, [pc, #400]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	495e      	ldr	r1, [pc, #376]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004662:	4313      	orrs	r3, r2
 8004664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467e:	429a      	cmp	r2, r3
 8004680:	d908      	bls.n	8004694 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4953      	ldr	r1, [pc, #332]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004690:	4313      	orrs	r3, r2
 8004692:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d010      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b4d      	ldr	r3, [pc, #308]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d908      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f023 020f 	bic.w	r2, r3, #15
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4947      	ldr	r1, [pc, #284]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d055      	beq.n	800477a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ce:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4940      	ldr	r1, [pc, #256]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e8:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d121      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0f6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004700:	4b36      	ldr	r3, [pc, #216]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0ea      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004718:	4b30      	ldr	r3, [pc, #192]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0de      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004728:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f023 0207 	bic.w	r2, r3, #7
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4925      	ldr	r1, [pc, #148]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fd fdd9 	bl	8002300 <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004750:	e00a      	b.n	8004768 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fd fdd5 	bl	8002300 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0be      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	429a      	cmp	r2, r3
 8004778:	d1eb      	bne.n	8004752 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	429a      	cmp	r2, r3
 8004794:	d208      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f023 020f 	bic.w	r2, r3, #15
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	490e      	ldr	r1, [pc, #56]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d214      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	4906      	ldr	r1, [pc, #24]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e086      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
 80047d8:	52002000 	.word	0x52002000
 80047dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d208      	bcs.n	800480e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047fc:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4939      	ldr	r1, [pc, #228]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800480a:	4313      	orrs	r3, r2
 800480c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004826:	429a      	cmp	r2, r3
 8004828:	d208      	bcs.n	800483c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	492e      	ldr	r1, [pc, #184]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004838:	4313      	orrs	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699a      	ldr	r2, [r3, #24]
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004854:	429a      	cmp	r2, r3
 8004856:	d208      	bcs.n	800486a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4922      	ldr	r1, [pc, #136]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d208      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004886:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4917      	ldr	r1, [pc, #92]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004894:	4313      	orrs	r3, r2
 8004896:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004898:	f000 f834 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4912      	ldr	r1, [pc, #72]	; (80048f4 <HAL_RCC_ClockConfig+0x35c>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_RCC_ClockConfig+0x35c>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x360>)
 80048ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x364>)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x368>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fcc6 	bl	800226c <HAL_InitTick>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	080094dc 	.word	0x080094dc
 80048f8:	24000004 	.word	0x24000004
 80048fc:	24000000 	.word	0x24000000
 8004900:	24000008 	.word	0x24000008

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490a:	4bb3      	ldr	r3, [pc, #716]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004912:	2b18      	cmp	r3, #24
 8004914:	f200 8155 	bhi.w	8004bc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <HAL_RCC_GetSysClockFreq+0x1c>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004985 	.word	0x08004985
 8004924:	08004bc3 	.word	0x08004bc3
 8004928:	08004bc3 	.word	0x08004bc3
 800492c:	08004bc3 	.word	0x08004bc3
 8004930:	08004bc3 	.word	0x08004bc3
 8004934:	08004bc3 	.word	0x08004bc3
 8004938:	08004bc3 	.word	0x08004bc3
 800493c:	08004bc3 	.word	0x08004bc3
 8004940:	080049ab 	.word	0x080049ab
 8004944:	08004bc3 	.word	0x08004bc3
 8004948:	08004bc3 	.word	0x08004bc3
 800494c:	08004bc3 	.word	0x08004bc3
 8004950:	08004bc3 	.word	0x08004bc3
 8004954:	08004bc3 	.word	0x08004bc3
 8004958:	08004bc3 	.word	0x08004bc3
 800495c:	08004bc3 	.word	0x08004bc3
 8004960:	080049b1 	.word	0x080049b1
 8004964:	08004bc3 	.word	0x08004bc3
 8004968:	08004bc3 	.word	0x08004bc3
 800496c:	08004bc3 	.word	0x08004bc3
 8004970:	08004bc3 	.word	0x08004bc3
 8004974:	08004bc3 	.word	0x08004bc3
 8004978:	08004bc3 	.word	0x08004bc3
 800497c:	08004bc3 	.word	0x08004bc3
 8004980:	080049b7 	.word	0x080049b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004984:	4b94      	ldr	r3, [pc, #592]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004990:	4b91      	ldr	r3, [pc, #580]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	08db      	lsrs	r3, r3, #3
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	4a90      	ldr	r2, [pc, #576]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049a2:	e111      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049a4:	4b8d      	ldr	r3, [pc, #564]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049a6:	61bb      	str	r3, [r7, #24]
    break;
 80049a8:	e10e      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049ac:	61bb      	str	r3, [r7, #24]
    break;
 80049ae:	e10b      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049b0:	4b8c      	ldr	r3, [pc, #560]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049b2:	61bb      	str	r3, [r7, #24]
    break;
 80049b4:	e108      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b6:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049c0:	4b85      	ldr	r3, [pc, #532]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049cc:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049d6:	4b80      	ldr	r3, [pc, #512]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80e1 	beq.w	8004bbc <HAL_RCC_GetSysClockFreq+0x2b8>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f000 8083 	beq.w	8004b08 <HAL_RCC_GetSysClockFreq+0x204>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f200 80a1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x248>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x114>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d056      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a16:	e099      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a18:	4b6f      	ldr	r3, [pc, #444]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02d      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a24:	4b6c      	ldr	r3, [pc, #432]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	4a6b      	ldr	r2, [pc, #428]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b62      	ldr	r3, [pc, #392]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a7e:	e087      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004bec <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b51      	ldr	r3, [pc, #324]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac2:	e065      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b06:	e043      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e021      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	0a5b      	lsrs	r3, r3, #9
 8004b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb4:	ee17 3a90 	vmov	r3, s15
 8004bb8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
    break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bc4:	61bb      	str	r3, [r7, #24]
    break;
 8004bc6:	bf00      	nop
  }

  return sysclockfreq;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3724      	adds	r7, #36	; 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	03d09000 	.word	0x03d09000
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	007a1200 	.word	0x007a1200
 8004be8:	46000000 	.word	0x46000000
 8004bec:	4c742400 	.word	0x4c742400
 8004bf0:	4a742400 	.word	0x4a742400
 8004bf4:	4af42400 	.word	0x4af42400

08004bf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c04:	2300      	movs	r3, #0
 8004c06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03f      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c1c:	d02a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c22:	d824      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c28:	d018      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2e:	d81e      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c38:	d007      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c3a:	e018      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3c:	4bab      	ldr	r3, [pc, #684]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4aaa      	ldr	r2, [pc, #680]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c48:	e015      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2102      	movs	r1, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 ff11 	bl	8005a78 <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c5a:	e00c      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	2102      	movs	r1, #2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ffba 	bl	8005bdc <RCCEx_PLL3_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c6c:	e003      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
      break;
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c7c:	4b9b      	ldr	r3, [pc, #620]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c88:	4998      	ldr	r1, [pc, #608]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c8e:	e001      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d03d      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d826      	bhi.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cc5 	.word	0x08004cc5
 8004cb4:	08004cd3 	.word	0x08004cd3
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	08004cfd 	.word	0x08004cfd
 8004cc0:	08004cfd 	.word	0x08004cfd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc4:	4b89      	ldr	r3, [pc, #548]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	4a88      	ldr	r2, [pc, #544]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cd0:	e015      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fecd 	bl	8005a78 <RCCEx_PLL2_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce2:	e00c      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3324      	adds	r3, #36	; 0x24
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 ff76 	bl	8005bdc <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	e000      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d04:	4b79      	ldr	r3, [pc, #484]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	f023 0207 	bic.w	r2, r3, #7
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	4976      	ldr	r1, [pc, #472]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	650b      	str	r3, [r1, #80]	; 0x50
 8004d16:	e001      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d042      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d30:	d02b      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d36:	d825      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d38:	2bc0      	cmp	r3, #192	; 0xc0
 8004d3a:	d028      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d3c:	2bc0      	cmp	r3, #192	; 0xc0
 8004d3e:	d821      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d016      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d81d      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d007      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d50:	e018      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d52:	4b66      	ldr	r3, [pc, #408]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	4a65      	ldr	r2, [pc, #404]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d5e:	e017      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fe86 	bl	8005a78 <RCCEx_PLL2_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d70:	e00e      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3324      	adds	r3, #36	; 0x24
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 ff2f 	bl	8005bdc <RCCEx_PLL3_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d82:	e005      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	75fb      	strb	r3, [r7, #23]
      break;
 8004d88:	e002      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d96:	4b55      	ldr	r3, [pc, #340]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	4952      	ldr	r1, [pc, #328]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	650b      	str	r3, [r1, #80]	; 0x50
 8004da8:	e001      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d049      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc4:	d030      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dca:	d82a      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dd0:	d02c      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004dd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dd6:	d824      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ddc:	d018      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de2:	d81e      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dec:	d007      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004dee:	e018      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df0:	4b3e      	ldr	r3, [pc, #248]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a3d      	ldr	r2, [pc, #244]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dfc:	e017      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fe37 	bl	8005a78 <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e0e:	e00e      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fee0 	bl	8005bdc <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e20:	e005      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e34:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e42:	492a      	ldr	r1, [pc, #168]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	658b      	str	r3, [r1, #88]	; 0x58
 8004e48:	e001      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04c      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e64:	d030      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6a:	d82a      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e70:	d02c      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004e72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e76:	d824      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e7c:	d018      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e82:	d81e      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e8c:	d007      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004e8e:	e018      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e90:	4b16      	ldr	r3, [pc, #88]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	4a15      	ldr	r2, [pc, #84]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e9c:	e017      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fde7 	bl	8005a78 <RCCEx_PLL2_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004eae:	e00e      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3324      	adds	r3, #36	; 0x24
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fe90 	bl	8005bdc <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ec0:	e005      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec6:	e002      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ec8:	bf00      	nop
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ee2:	4902      	ldr	r1, [pc, #8]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ee8:	e004      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d032      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f04:	2b30      	cmp	r3, #48	; 0x30
 8004f06:	d01c      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f08:	2b30      	cmp	r3, #48	; 0x30
 8004f0a:	d817      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d00c      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d813      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d016      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d10f      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4baf      	ldr	r3, [pc, #700]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	4aae      	ldr	r2, [pc, #696]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f28:	e00e      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2102      	movs	r1, #2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fda1 	bl	8005a78 <RCCEx_PLL2_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f3a:	e005      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f4e:	4ba3      	ldr	r3, [pc, #652]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	49a0      	ldr	r1, [pc, #640]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f60:	e001      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d047      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f7a:	d030      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f80:	d82a      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f86:	d02c      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004f88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f8c:	d824      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d018      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d81e      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d007      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004fa4:	e018      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa6:	4b8d      	ldr	r3, [pc, #564]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a8c      	ldr	r2, [pc, #560]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e017      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fd5c 	bl	8005a78 <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fe05 	bl	8005bdc <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fea:	4b7c      	ldr	r3, [pc, #496]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff6:	4979      	ldr	r1, [pc, #484]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	650b      	str	r3, [r1, #80]	; 0x50
 8004ffc:	e001      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d049      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005012:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005016:	d02e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800501c:	d828      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800501e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005022:	d02a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005028:	d822      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800502a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800502e:	d026      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005030:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005034:	d81c      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800503a:	d010      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800503c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005040:	d816      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01d      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504a:	d111      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd10 	bl	8005a78 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800505c:	e012      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	2101      	movs	r1, #1
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fdb9 	bl	8005bdc <RCCEx_PLL3_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800506e:	e009      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800508a:	4b54      	ldr	r3, [pc, #336]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800508c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	4951      	ldr	r1, [pc, #324]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	650b      	str	r3, [r1, #80]	; 0x50
 800509c:	e001      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d04b      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050b8:	d02e      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80050ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050be:	d828      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c4:	d02a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d822      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050d0:	d026      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80050d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050d6:	d81c      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050dc:	d010      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80050de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e2:	d816      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80050e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ec:	d111      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2101      	movs	r1, #1
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fcbf 	bl	8005a78 <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050fe:	e012      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	2101      	movs	r1, #1
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fd68 	bl	8005bdc <RCCEx_PLL3_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005110:	e009      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
      break;
 8005116:	e006      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005118:	bf00      	nop
 800511a:	e004      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800511c:	bf00      	nop
 800511e:	e002      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800513a:	4928      	ldr	r1, [pc, #160]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800513c:	4313      	orrs	r3, r2
 800513e:	658b      	str	r3, [r1, #88]	; 0x58
 8005140:	e001      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
 8005144:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02f      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515a:	d00e      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800515c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005160:	d814      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800516a:	d10f      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005178:	e00c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	2101      	movs	r1, #1
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fc79 	bl	8005a78 <RCCEx_PLL2_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800518a:	e003      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
      break;
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	650b      	str	r3, [r1, #80]	; 0x50
 80051ac:	e001      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d033      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d81c      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005207 	.word	0x08005207
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051ef 	.word	0x080051ef
 80051d8:	08005207 	.word	0x08005207
 80051dc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4bb8      	ldr	r3, [pc, #736]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4ab7      	ldr	r2, [pc, #732]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051ec:	e00c      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2102      	movs	r1, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fc3f 	bl	8005a78 <RCCEx_PLL2_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
      break;
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800520e:	4bad      	ldr	r3, [pc, #692]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	49aa      	ldr	r1, [pc, #680]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800521c:	4313      	orrs	r3, r2
 800521e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005220:	e001      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
 8005224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8086 	beq.w	8005340 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005234:	4ba4      	ldr	r3, [pc, #656]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4aa3      	ldr	r2, [pc, #652]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800523a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005240:	f7fd f85e 	bl	8002300 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005246:	e009      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005248:	f7fd f85a 	bl	8002300 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d902      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	75fb      	strb	r3, [r7, #23]
        break;
 800525a:	e005      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800525c:	4b9a      	ldr	r3, [pc, #616]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ef      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d166      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800526e:	4b95      	ldr	r3, [pc, #596]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005270:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005278:	4053      	eors	r3, r2
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	2b00      	cmp	r3, #0
 8005280:	d013      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005282:	4b90      	ldr	r3, [pc, #576]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528c:	4b8d      	ldr	r3, [pc, #564]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	4a8c      	ldr	r2, [pc, #560]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005298:	4b8a      	ldr	r3, [pc, #552]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a89      	ldr	r2, [pc, #548]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800529e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052a4:	4a87      	ldr	r2, [pc, #540]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b4:	d115      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fd f823 	bl	8002300 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052bc:	e00b      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fd f81f 	bl	8002300 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d902      	bls.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	75fb      	strb	r3, [r7, #23]
            break;
 80052d4:	e005      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052d6:	4b7b      	ldr	r3, [pc, #492]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0ed      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d126      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f6:	d10d      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80052f8:	4b72      	ldr	r3, [pc, #456]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005306:	0919      	lsrs	r1, r3, #4
 8005308:	4b70      	ldr	r3, [pc, #448]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800530a:	400b      	ands	r3, r1
 800530c:	496d      	ldr	r1, [pc, #436]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	610b      	str	r3, [r1, #16]
 8005312:	e005      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005314:	4b6b      	ldr	r3, [pc, #428]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800531a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800531e:	6113      	str	r3, [r2, #16]
 8005320:	4b68      	ldr	r3, [pc, #416]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800532a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532e:	4965      	ldr	r1, [pc, #404]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005330:	4313      	orrs	r3, r2
 8005332:	670b      	str	r3, [r1, #112]	; 0x70
 8005334:	e004      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	75bb      	strb	r3, [r7, #22]
 800533a:	e001      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d07e      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005350:	2b28      	cmp	r3, #40	; 0x28
 8005352:	d867      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	0800542b 	.word	0x0800542b
 8005360:	08005425 	.word	0x08005425
 8005364:	08005425 	.word	0x08005425
 8005368:	08005425 	.word	0x08005425
 800536c:	08005425 	.word	0x08005425
 8005370:	08005425 	.word	0x08005425
 8005374:	08005425 	.word	0x08005425
 8005378:	08005425 	.word	0x08005425
 800537c:	08005401 	.word	0x08005401
 8005380:	08005425 	.word	0x08005425
 8005384:	08005425 	.word	0x08005425
 8005388:	08005425 	.word	0x08005425
 800538c:	08005425 	.word	0x08005425
 8005390:	08005425 	.word	0x08005425
 8005394:	08005425 	.word	0x08005425
 8005398:	08005425 	.word	0x08005425
 800539c:	08005413 	.word	0x08005413
 80053a0:	08005425 	.word	0x08005425
 80053a4:	08005425 	.word	0x08005425
 80053a8:	08005425 	.word	0x08005425
 80053ac:	08005425 	.word	0x08005425
 80053b0:	08005425 	.word	0x08005425
 80053b4:	08005425 	.word	0x08005425
 80053b8:	08005425 	.word	0x08005425
 80053bc:	0800542b 	.word	0x0800542b
 80053c0:	08005425 	.word	0x08005425
 80053c4:	08005425 	.word	0x08005425
 80053c8:	08005425 	.word	0x08005425
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005425 	.word	0x08005425
 80053d4:	08005425 	.word	0x08005425
 80053d8:	08005425 	.word	0x08005425
 80053dc:	0800542b 	.word	0x0800542b
 80053e0:	08005425 	.word	0x08005425
 80053e4:	08005425 	.word	0x08005425
 80053e8:	08005425 	.word	0x08005425
 80053ec:	08005425 	.word	0x08005425
 80053f0:	08005425 	.word	0x08005425
 80053f4:	08005425 	.word	0x08005425
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800542b 	.word	0x0800542b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fb36 	bl	8005a78 <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005410:	e00c      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3324      	adds	r3, #36	; 0x24
 8005416:	2101      	movs	r1, #1
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fbdf 	bl	8005bdc <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	75fb      	strb	r3, [r7, #23]
      break;
 8005428:	e000      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800542a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800543e:	4921      	ldr	r1, [pc, #132]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	654b      	str	r3, [r1, #84]	; 0x54
 8005444:	e001      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03e      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545a:	2b05      	cmp	r3, #5
 800545c:	d820      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	080054a7 	.word	0x080054a7
 8005468:	0800547d 	.word	0x0800547d
 800546c:	0800548f 	.word	0x0800548f
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054a7 	.word	0x080054a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	2101      	movs	r1, #1
 8005482:	4618      	mov	r0, r3
 8005484:	f000 faf8 	bl	8005a78 <RCCEx_PLL2_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3324      	adds	r3, #36	; 0x24
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fba1 	bl	8005bdc <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80054a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d110      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	f023 0207 	bic.w	r2, r3, #7
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	4902      	ldr	r1, [pc, #8]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	654b      	str	r3, [r1, #84]	; 0x54
 80054c0:	e008      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80054c2:	bf00      	nop
 80054c4:	58024400 	.word	0x58024400
 80054c8:	58024800 	.word	0x58024800
 80054cc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d039      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d820      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005533 	.word	0x08005533
 80054f4:	08005509 	.word	0x08005509
 80054f8:	0800551b 	.word	0x0800551b
 80054fc:	08005533 	.word	0x08005533
 8005500:	08005533 	.word	0x08005533
 8005504:	08005533 	.word	0x08005533
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	2101      	movs	r1, #1
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fab2 	bl	8005a78 <RCCEx_PLL2_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005518:	e00c      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3324      	adds	r3, #36	; 0x24
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fb5b 	bl	8005bdc <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800552a:	e003      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800553a:	4bb7      	ldr	r3, [pc, #732]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	f023 0207 	bic.w	r2, r3, #7
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005548:	49b3      	ldr	r1, [pc, #716]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800554a:	4313      	orrs	r3, r2
 800554c:	658b      	str	r3, [r1, #88]	; 0x58
 800554e:	e001      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d04b      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800556a:	d02e      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800556c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005570:	d828      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005576:	d02a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557c:	d822      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800557e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005582:	d026      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005584:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005588:	d81c      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800558a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558e:	d010      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005594:	d816      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01d      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800559a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800559e:	d111      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fa66 	bl	8005a78 <RCCEx_PLL2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055b0:	e012      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3324      	adds	r3, #36	; 0x24
 80055b6:	2102      	movs	r1, #2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fb0f 	bl	8005bdc <RCCEx_PLL3_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055c2:	e009      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
      break;
 80055c8:	e006      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055ca:	bf00      	nop
 80055cc:	e004      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055ce:	bf00      	nop
 80055d0:	e002      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055d2:	bf00      	nop
 80055d4:	e000      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055de:	4b8e      	ldr	r3, [pc, #568]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ec:	498a      	ldr	r1, [pc, #552]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	654b      	str	r3, [r1, #84]	; 0x54
 80055f2:	e001      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d04b      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800560a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800560e:	d02e      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005610:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005614:	d828      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	d02a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	d822      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005626:	d026      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800562c:	d81c      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d010      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005638:	d816      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01d      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d111      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa14 	bl	8005a78 <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005654:	e012      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3324      	adds	r3, #36	; 0x24
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fabd 	bl	8005bdc <RCCEx_PLL3_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005666:	e009      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
      break;
 800566c:	e006      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800566e:	bf00      	nop
 8005670:	e004      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800567a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005682:	4b65      	ldr	r3, [pc, #404]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005690:	4961      	ldr	r1, [pc, #388]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005692:	4313      	orrs	r3, r2
 8005694:	658b      	str	r3, [r1, #88]	; 0x58
 8005696:	e001      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d04b      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056b2:	d02e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80056b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056b8:	d828      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056be:	d02a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	d822      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056ca:	d026      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80056cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056d0:	d81c      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d6:	d010      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80056d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056dc:	d816      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01d      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e6:	d111      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f9c2 	bl	8005a78 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056f8:	e012      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3324      	adds	r3, #36	; 0x24
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fa6b 	bl	8005bdc <RCCEx_PLL3_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800570a:	e009      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
      break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005712:	bf00      	nop
 8005714:	e004      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800571e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005726:	4b3c      	ldr	r3, [pc, #240]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005734:	4938      	ldr	r1, [pc, #224]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005736:	4313      	orrs	r3, r2
 8005738:	658b      	str	r3, [r1, #88]	; 0x58
 800573a:	e001      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005756:	d10a      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fa3c 	bl	8005bdc <RCCEx_PLL3_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800576e:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577c:	4926      	ldr	r1, [pc, #152]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800577e:	4313      	orrs	r3, r2
 8005780:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005798:	d10a      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3324      	adds	r3, #36	; 0x24
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fa1b 	bl	8005bdc <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057be:	4916      	ldr	r1, [pc, #88]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d036      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057da:	d01f      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80057dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e0:	d817      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80057e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ea:	d009      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80057ec:	e011      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f93f 	bl	8005a78 <RCCEx_PLL2_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057fe:	e00e      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	2102      	movs	r1, #2
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f9e8 	bl	8005bdc <RCCEx_PLL3_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005810:	e005      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	75fb      	strb	r3, [r7, #23]
      break;
 8005816:	e002      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005818:	58024400 	.word	0x58024400
      break;
 800581c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005824:	4b93      	ldr	r3, [pc, #588]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005832:	4990      	ldr	r1, [pc, #576]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005834:	4313      	orrs	r3, r2
 8005836:	658b      	str	r3, [r1, #88]	; 0x58
 8005838:	e001      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d033      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005854:	d01c      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800585a:	d816      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800585c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005860:	d003      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005866:	d007      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005868:	e00f      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586a:	4b82      	ldr	r3, [pc, #520]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	4a81      	ldr	r2, [pc, #516]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005874:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005876:	e00c      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3324      	adds	r3, #36	; 0x24
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f9ac 	bl	8005bdc <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
      break;
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005898:	4b76      	ldr	r3, [pc, #472]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a6:	4973      	ldr	r1, [pc, #460]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	654b      	str	r3, [r1, #84]	; 0x54
 80058ac:	e001      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d029      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80058c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ca:	d007      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80058cc:	e00f      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ce:	4b69      	ldr	r3, [pc, #420]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	4a68      	ldr	r2, [pc, #416]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058da:	e00b      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f8c8 	bl	8005a78 <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ec:	e002      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
      break;
 80058f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058fa:	4b5e      	ldr	r3, [pc, #376]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	495b      	ldr	r1, [pc, #364]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800590c:	e001      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3324      	adds	r3, #36	; 0x24
 8005922:	2102      	movs	r1, #2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f959 	bl	8005bdc <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d030      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005948:	d017      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800594a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594e:	d811      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005954:	d013      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595a:	d80b      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005964:	d106      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005966:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	4a42      	ldr	r2, [pc, #264]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800596c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005970:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005972:	e007      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]
      break;
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800598a:	4b3a      	ldr	r3, [pc, #232]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005996:	4937      	ldr	r1, [pc, #220]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005998:	4313      	orrs	r3, r2
 800599a:	654b      	str	r3, [r1, #84]	; 0x54
 800599c:	e001      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059ae:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	492e      	ldr	r1, [pc, #184]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059da:	4926      	ldr	r1, [pc, #152]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ec:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f8:	491e      	ldr	r1, [pc, #120]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a0a:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a14:	6113      	str	r3, [r2, #16]
 8005a16:	4b17      	ldr	r3, [pc, #92]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a20:	4914      	ldr	r1, [pc, #80]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	da08      	bge.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	490e      	ldr	r1, [pc, #56]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	4906      	ldr	r1, [pc, #24]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a60:	7dbb      	ldrb	r3, [r7, #22]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e000      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	58024400 	.word	0x58024400

08005a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a86:	4b53      	ldr	r3, [pc, #332]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d101      	bne.n	8005a96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e099      	b.n	8005bca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a96:	4b4f      	ldr	r3, [pc, #316]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a4e      	ldr	r2, [pc, #312]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa2:	f7fc fc2d 	bl	8002300 <HAL_GetTick>
 8005aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005aaa:	f7fc fc29 	bl	8002300 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e086      	b.n	8005bca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005abc:	4b45      	ldr	r3, [pc, #276]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ac8:	4b42      	ldr	r3, [pc, #264]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	493f      	ldr	r1, [pc, #252]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	628b      	str	r3, [r1, #40]	; 0x28
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	025b      	lsls	r3, r3, #9
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	061b      	lsls	r3, r3, #24
 8005b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b0c:	4931      	ldr	r1, [pc, #196]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b12:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	492d      	ldr	r1, [pc, #180]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	f023 0220 	bic.w	r2, r3, #32
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	4928      	ldr	r1, [pc, #160]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	f023 0310 	bic.w	r3, r3, #16
 8005b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <RCCEx_PLL2_Config+0x160>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	69d2      	ldr	r2, [r2, #28]
 8005b4e:	00d2      	lsls	r2, r2, #3
 8005b50:	4920      	ldr	r1, [pc, #128]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	4a1e      	ldr	r2, [pc, #120]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b5c:	f043 0310 	orr.w	r3, r3, #16
 8005b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b74:	e00f      	b.n	8005b96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d106      	bne.n	8005b8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a14      	ldr	r2, [pc, #80]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b88:	e005      	b.n	8005b96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	4a11      	ldr	r2, [pc, #68]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba2:	f7fc fbad 	bl	8002300 <HAL_GetTick>
 8005ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ba8:	e008      	b.n	8005bbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005baa:	f7fc fba9 	bl	8002300 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e006      	b.n	8005bca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <RCCEx_PLL2_Config+0x15c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	ffff0007 	.word	0xffff0007

08005bdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bea:	4b53      	ldr	r3, [pc, #332]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d101      	bne.n	8005bfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e099      	b.n	8005d2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bfa:	4b4f      	ldr	r3, [pc, #316]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a4e      	ldr	r2, [pc, #312]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c06:	f7fc fb7b 	bl	8002300 <HAL_GetTick>
 8005c0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c0c:	e008      	b.n	8005c20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c0e:	f7fc fb77 	bl	8002300 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e086      	b.n	8005d2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c20:	4b45      	ldr	r3, [pc, #276]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f0      	bne.n	8005c0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c2c:	4b42      	ldr	r3, [pc, #264]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	051b      	lsls	r3, r3, #20
 8005c3a:	493f      	ldr	r1, [pc, #252]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	025b      	lsls	r3, r3, #9
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	061b      	lsls	r3, r3, #24
 8005c6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c70:	4931      	ldr	r1, [pc, #196]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c76:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	492d      	ldr	r1, [pc, #180]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	4928      	ldr	r1, [pc, #160]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a26      	ldr	r2, [pc, #152]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ca6:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005caa:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <RCCEx_PLL3_Config+0x160>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	69d2      	ldr	r2, [r2, #28]
 8005cb2:	00d2      	lsls	r2, r2, #3
 8005cb4:	4920      	ldr	r1, [pc, #128]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005cba:	4b1f      	ldr	r3, [pc, #124]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cd8:	e00f      	b.n	8005cfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ce0:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005ce6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cec:	e005      	b.n	8005cfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0e      	ldr	r2, [pc, #56]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d06:	f7fc fafb 	bl	8002300 <HAL_GetTick>
 8005d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d0c:	e008      	b.n	8005d20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d0e:	f7fc faf7 	bl	8002300 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e006      	b.n	8005d2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <RCCEx_PLL3_Config+0x15c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f0      	beq.n	8005d0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	58024400 	.word	0x58024400
 8005d3c:	ffff0007 	.word	0xffff0007

08005d40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e0eb      	b.n	8005f2e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a75      	ldr	r2, [pc, #468]	; (8005f38 <HAL_SPI_Init+0x1f8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <HAL_SPI_Init+0x46>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a74      	ldr	r2, [pc, #464]	; (8005f3c <HAL_SPI_Init+0x1fc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00a      	beq.n	8005d86 <HAL_SPI_Init+0x46>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a72      	ldr	r2, [pc, #456]	; (8005f40 <HAL_SPI_Init+0x200>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d005      	beq.n	8005d86 <HAL_SPI_Init+0x46>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d901      	bls.n	8005d86 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0d3      	b.n	8005f2e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f8dc 	bl	8005f44 <SPI_GetPacketSize>
 8005d8c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a69      	ldr	r2, [pc, #420]	; (8005f38 <HAL_SPI_Init+0x1f8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00c      	beq.n	8005db2 <HAL_SPI_Init+0x72>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a67      	ldr	r2, [pc, #412]	; (8005f3c <HAL_SPI_Init+0x1fc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <HAL_SPI_Init+0x72>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a66      	ldr	r2, [pc, #408]	; (8005f40 <HAL_SPI_Init+0x200>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Init+0x72>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d811      	bhi.n	8005dd6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005db6:	4a60      	ldr	r2, [pc, #384]	; (8005f38 <HAL_SPI_Init+0x1f8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5e      	ldr	r2, [pc, #376]	; (8005f3c <HAL_SPI_Init+0x1fc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_SPI_Init+0x90>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5d      	ldr	r2, [pc, #372]	; (8005f40 <HAL_SPI_Init+0x200>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d104      	bne.n	8005dda <HAL_SPI_Init+0x9a>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d901      	bls.n	8005dda <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e0a9      	b.n	8005f2e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fb fc0a 	bl	8001608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e14:	d119      	bne.n	8005e4a <HAL_SPI_Init+0x10a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1e:	d103      	bne.n	8005e28 <HAL_SPI_Init+0xe8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e38:	d107      	bne.n	8005e4a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	431a      	orrs	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5c:	ea42 0103 	orr.w	r1, r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eaa:	ea42 0103 	orr.w	r1, r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d113      	bne.n	8005eea <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40013000 	.word	0x40013000
 8005f3c:	40003800 	.word	0x40003800
 8005f40:	40003c00 	.word	0x40003c00

08005f44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3307      	adds	r3, #7
 8005f62:	08db      	lsrs	r3, r3, #3
 8005f64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e049      	b.n	8006020 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fb febb 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 fba3 	bl	8006704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e049      	b.n	80060ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f841 	bl	80060d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f000 fb4c 	bl	8006704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <HAL_TIM_PWM_Start+0x24>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	e03c      	b.n	800618a <HAL_TIM_PWM_Start+0x9e>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b04      	cmp	r3, #4
 8006114:	d109      	bne.n	800612a <HAL_TIM_PWM_Start+0x3e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b01      	cmp	r3, #1
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e02f      	b.n	800618a <HAL_TIM_PWM_Start+0x9e>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b08      	cmp	r3, #8
 800612e:	d109      	bne.n	8006144 <HAL_TIM_PWM_Start+0x58>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e022      	b.n	800618a <HAL_TIM_PWM_Start+0x9e>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b0c      	cmp	r3, #12
 8006148:	d109      	bne.n	800615e <HAL_TIM_PWM_Start+0x72>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	bf14      	ite	ne
 8006156:	2301      	movne	r3, #1
 8006158:	2300      	moveq	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e015      	b.n	800618a <HAL_TIM_PWM_Start+0x9e>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b10      	cmp	r3, #16
 8006162:	d109      	bne.n	8006178 <HAL_TIM_PWM_Start+0x8c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e008      	b.n	800618a <HAL_TIM_PWM_Start+0x9e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e09c      	b.n	80062cc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_PWM_Start+0xb6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a0:	e023      	b.n	80061ea <HAL_TIM_PWM_Start+0xfe>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_PWM_Start+0xc6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	e01b      	b.n	80061ea <HAL_TIM_PWM_Start+0xfe>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start+0xd6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c0:	e013      	b.n	80061ea <HAL_TIM_PWM_Start+0xfe>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start+0xe6>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_PWM_Start+0xfe>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0xf6>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e0:	e003      	b.n	80061ea <HAL_TIM_PWM_Start+0xfe>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fe8c 	bl	8006f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a35      	ldr	r2, [pc, #212]	; (80062d4 <HAL_TIM_PWM_Start+0x1e8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_TIM_PWM_Start+0x13e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a34      	ldr	r2, [pc, #208]	; (80062d8 <HAL_TIM_PWM_Start+0x1ec>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <HAL_TIM_PWM_Start+0x13e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a32      	ldr	r2, [pc, #200]	; (80062dc <HAL_TIM_PWM_Start+0x1f0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_TIM_PWM_Start+0x13e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a31      	ldr	r2, [pc, #196]	; (80062e0 <HAL_TIM_PWM_Start+0x1f4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_TIM_PWM_Start+0x13e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <HAL_TIM_PWM_Start+0x1f8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_Start+0x142>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <HAL_TIM_PWM_Start+0x144>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006242:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <HAL_TIM_PWM_Start+0x1e8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01d      	beq.n	800628a <HAL_TIM_PWM_Start+0x19e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d018      	beq.n	800628a <HAL_TIM_PWM_Start+0x19e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_TIM_PWM_Start+0x1fc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_TIM_PWM_Start+0x19e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a21      	ldr	r2, [pc, #132]	; (80062ec <HAL_TIM_PWM_Start+0x200>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_TIM_PWM_Start+0x19e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <HAL_TIM_PWM_Start+0x204>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_TIM_PWM_Start+0x19e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <HAL_TIM_PWM_Start+0x1ec>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_TIM_PWM_Start+0x19e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_TIM_PWM_Start+0x208>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d115      	bne.n	80062b6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_TIM_PWM_Start+0x20c>)
 8006292:	4013      	ands	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b06      	cmp	r3, #6
 800629a:	d015      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x1dc>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a2:	d011      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b4:	e008      	b.n	80062c8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e000      	b.n	80062ca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40001800 	.word	0x40001800
 80062f8:	00010007 	.word	0x00010007

080062fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006312:	2302      	movs	r3, #2
 8006314:	e0fd      	b.n	8006512 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b14      	cmp	r3, #20
 8006322:	f200 80f0 	bhi.w	8006506 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006381 	.word	0x08006381
 8006330:	08006507 	.word	0x08006507
 8006334:	08006507 	.word	0x08006507
 8006338:	08006507 	.word	0x08006507
 800633c:	080063c1 	.word	0x080063c1
 8006340:	08006507 	.word	0x08006507
 8006344:	08006507 	.word	0x08006507
 8006348:	08006507 	.word	0x08006507
 800634c:	08006403 	.word	0x08006403
 8006350:	08006507 	.word	0x08006507
 8006354:	08006507 	.word	0x08006507
 8006358:	08006507 	.word	0x08006507
 800635c:	08006443 	.word	0x08006443
 8006360:	08006507 	.word	0x08006507
 8006364:	08006507 	.word	0x08006507
 8006368:	08006507 	.word	0x08006507
 800636c:	08006485 	.word	0x08006485
 8006370:	08006507 	.word	0x08006507
 8006374:	08006507 	.word	0x08006507
 8006378:	08006507 	.word	0x08006507
 800637c:	080064c5 	.word	0x080064c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa56 	bl	8006838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0204 	bic.w	r2, r2, #4
 80063aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6999      	ldr	r1, [r3, #24]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	619a      	str	r2, [r3, #24]
      break;
 80063be:	e0a3      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fac6 	bl	8006958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	619a      	str	r2, [r3, #24]
      break;
 8006400:	e082      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fb2f 	bl	8006a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0208 	orr.w	r2, r2, #8
 800641c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0204 	bic.w	r2, r2, #4
 800642c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	61da      	str	r2, [r3, #28]
      break;
 8006440:	e062      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fb95 	bl	8006b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800645c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	021a      	lsls	r2, r3, #8
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	61da      	str	r2, [r3, #28]
      break;
 8006482:	e041      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fbdc 	bl	8006c48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0208 	orr.w	r2, r2, #8
 800649e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0204 	bic.w	r2, r2, #4
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064c2:	e021      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fc1e 	bl	8006d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	021a      	lsls	r2, r3, #8
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006504:	e000      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006506:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop

0800651c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_TIM_ConfigClockSource+0x18>
 8006530:	2302      	movs	r3, #2
 8006532:	e0db      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x1d0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4b69      	ldr	r3, [pc, #420]	; (80066f4 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a63      	ldr	r2, [pc, #396]	; (80066f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	f000 80a9 	beq.w	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 8006570:	4a61      	ldr	r2, [pc, #388]	; (80066f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	f200 80ae 	bhi.w	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 8006578:	4a60      	ldr	r2, [pc, #384]	; (80066fc <HAL_TIM_ConfigClockSource+0x1e0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	f000 80a1 	beq.w	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 8006580:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f200 80a6 	bhi.w	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 8006588:	4a5d      	ldr	r2, [pc, #372]	; (8006700 <HAL_TIM_ConfigClockSource+0x1e4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f000 8099 	beq.w	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 8006590:	4a5b      	ldr	r2, [pc, #364]	; (8006700 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	f200 809e 	bhi.w	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 8006598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800659c:	f000 8091 	beq.w	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 80065a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065a4:	f200 8096 	bhi.w	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ac:	f000 8089 	beq.w	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 80065b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b4:	f200 808e 	bhi.w	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065bc:	d03e      	beq.n	800663c <HAL_TIM_ConfigClockSource+0x120>
 80065be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c2:	f200 8087 	bhi.w	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	f000 8085 	beq.w	80066d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d2:	d87f      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065d4:	2b70      	cmp	r3, #112	; 0x70
 80065d6:	d01a      	beq.n	800660e <HAL_TIM_ConfigClockSource+0xf2>
 80065d8:	2b70      	cmp	r3, #112	; 0x70
 80065da:	d87b      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065dc:	2b60      	cmp	r3, #96	; 0x60
 80065de:	d050      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x166>
 80065e0:	2b60      	cmp	r3, #96	; 0x60
 80065e2:	d877      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065e4:	2b50      	cmp	r3, #80	; 0x50
 80065e6:	d03c      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x146>
 80065e8:	2b50      	cmp	r3, #80	; 0x50
 80065ea:	d873      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d058      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0x186>
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d86f      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d064      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	d86b      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d060      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 8006600:	2b20      	cmp	r3, #32
 8006602:	d867      	bhi.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d05c      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
 8006608:	2b10      	cmp	r3, #16
 800660a:	d05a      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800660c:	e062      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6899      	ldr	r1, [r3, #8]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f000 fc57 	bl	8006ed0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006630:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	609a      	str	r2, [r3, #8]
      break;
 800663a:	e04e      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6899      	ldr	r1, [r3, #8]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f000 fc40 	bl	8006ed0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800665e:	609a      	str	r2, [r3, #8]
      break;
 8006660:	e03b      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6859      	ldr	r1, [r3, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	461a      	mov	r2, r3
 8006670:	f000 fbb0 	bl	8006dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2150      	movs	r1, #80	; 0x50
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fc0a 	bl	8006e94 <TIM_ITRx_SetConfig>
      break;
 8006680:	e02b      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6859      	ldr	r1, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	461a      	mov	r2, r3
 8006690:	f000 fbcf 	bl	8006e32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2160      	movs	r1, #96	; 0x60
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fbfa 	bl	8006e94 <TIM_ITRx_SetConfig>
      break;
 80066a0:	e01b      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	6859      	ldr	r1, [r3, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f000 fb90 	bl	8006dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2140      	movs	r1, #64	; 0x40
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fbea 	bl	8006e94 <TIM_ITRx_SetConfig>
      break;
 80066c0:	e00b      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f000 fbe1 	bl	8006e94 <TIM_ITRx_SetConfig>
        break;
 80066d2:	e002      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80066d4:	bf00      	nop
 80066d6:	e000      	b.n	80066da <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80066d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	ffceff88 	.word	0xffceff88
 80066f8:	00100040 	.word	0x00100040
 80066fc:	00100030 	.word	0x00100030
 8006700:	00100020 	.word	0x00100020

08006704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a40      	ldr	r2, [pc, #256]	; (8006818 <TIM_Base_SetConfig+0x114>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006722:	d00f      	beq.n	8006744 <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a3d      	ldr	r2, [pc, #244]	; (800681c <TIM_Base_SetConfig+0x118>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00b      	beq.n	8006744 <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a3c      	ldr	r2, [pc, #240]	; (8006820 <TIM_Base_SetConfig+0x11c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d007      	beq.n	8006744 <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3b      	ldr	r2, [pc, #236]	; (8006824 <TIM_Base_SetConfig+0x120>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3a      	ldr	r2, [pc, #232]	; (8006828 <TIM_Base_SetConfig+0x124>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d108      	bne.n	8006756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a2f      	ldr	r2, [pc, #188]	; (8006818 <TIM_Base_SetConfig+0x114>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d01f      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006764:	d01b      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2c      	ldr	r2, [pc, #176]	; (800681c <TIM_Base_SetConfig+0x118>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d017      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <TIM_Base_SetConfig+0x11c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <TIM_Base_SetConfig+0x120>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00f      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a29      	ldr	r2, [pc, #164]	; (8006828 <TIM_Base_SetConfig+0x124>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a28      	ldr	r2, [pc, #160]	; (800682c <TIM_Base_SetConfig+0x128>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a27      	ldr	r2, [pc, #156]	; (8006830 <TIM_Base_SetConfig+0x12c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_Base_SetConfig+0x9a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a26      	ldr	r2, [pc, #152]	; (8006834 <TIM_Base_SetConfig+0x130>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d108      	bne.n	80067b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a10      	ldr	r2, [pc, #64]	; (8006818 <TIM_Base_SetConfig+0x114>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_Base_SetConfig+0xf8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <TIM_Base_SetConfig+0x124>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_Base_SetConfig+0xf8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a11      	ldr	r2, [pc, #68]	; (800682c <TIM_Base_SetConfig+0x128>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_Base_SetConfig+0xf8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a10      	ldr	r2, [pc, #64]	; (8006830 <TIM_Base_SetConfig+0x12c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0xf8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a0f      	ldr	r2, [pc, #60]	; (8006834 <TIM_Base_SetConfig+0x130>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d103      	bne.n	8006804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	615a      	str	r2, [r3, #20]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40010000 	.word	0x40010000
 800681c:	40000400 	.word	0x40000400
 8006820:	40000800 	.word	0x40000800
 8006824:	40000c00 	.word	0x40000c00
 8006828:	40010400 	.word	0x40010400
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4b37      	ldr	r3, [pc, #220]	; (8006940 <TIM_OC1_SetConfig+0x108>)
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0302 	bic.w	r3, r3, #2
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <TIM_OC1_SetConfig+0x10c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_OC1_SetConfig+0x7c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a2c      	ldr	r2, [pc, #176]	; (8006948 <TIM_OC1_SetConfig+0x110>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_OC1_SetConfig+0x7c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a2b      	ldr	r2, [pc, #172]	; (800694c <TIM_OC1_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_OC1_SetConfig+0x7c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <TIM_OC1_SetConfig+0x118>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC1_SetConfig+0x7c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a29      	ldr	r2, [pc, #164]	; (8006954 <TIM_OC1_SetConfig+0x11c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d10c      	bne.n	80068ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f023 0308 	bic.w	r3, r3, #8
 80068ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 0304 	bic.w	r3, r3, #4
 80068cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <TIM_OC1_SetConfig+0x10c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_OC1_SetConfig+0xbe>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <TIM_OC1_SetConfig+0x110>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_OC1_SetConfig+0xbe>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <TIM_OC1_SetConfig+0x114>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_OC1_SetConfig+0xbe>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a19      	ldr	r2, [pc, #100]	; (8006950 <TIM_OC1_SetConfig+0x118>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC1_SetConfig+0xbe>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <TIM_OC1_SetConfig+0x11c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d111      	bne.n	800691a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	fffeff8f 	.word	0xfffeff8f
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f023 0210 	bic.w	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <TIM_OC2_SetConfig+0xfc>)
 8006984:	4013      	ands	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0320 	bic.w	r3, r3, #32
 80069a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a29      	ldr	r2, [pc, #164]	; (8006a58 <TIM_OC2_SetConfig+0x100>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_OC2_SetConfig+0x68>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <TIM_OC2_SetConfig+0x104>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <TIM_OC2_SetConfig+0x100>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_OC2_SetConfig+0xac>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1d      	ldr	r2, [pc, #116]	; (8006a5c <TIM_OC2_SetConfig+0x104>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_OC2_SetConfig+0xac>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1c      	ldr	r2, [pc, #112]	; (8006a60 <TIM_OC2_SetConfig+0x108>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_OC2_SetConfig+0xac>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1b      	ldr	r2, [pc, #108]	; (8006a64 <TIM_OC2_SetConfig+0x10c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_OC2_SetConfig+0xac>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1a      	ldr	r2, [pc, #104]	; (8006a68 <TIM_OC2_SetConfig+0x110>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d113      	bne.n	8006a2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	feff8fff 	.word	0xfeff8fff
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40010400 	.word	0x40010400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a27      	ldr	r2, [pc, #156]	; (8006b64 <TIM_OC3_SetConfig+0xf8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC3_SetConfig+0x66>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <TIM_OC3_SetConfig+0xfc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10d      	bne.n	8006aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <TIM_OC3_SetConfig+0xf8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00f      	beq.n	8006b16 <TIM_OC3_SetConfig+0xaa>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <TIM_OC3_SetConfig+0xfc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00b      	beq.n	8006b16 <TIM_OC3_SetConfig+0xaa>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <TIM_OC3_SetConfig+0x100>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d007      	beq.n	8006b16 <TIM_OC3_SetConfig+0xaa>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a19      	ldr	r2, [pc, #100]	; (8006b70 <TIM_OC3_SetConfig+0x104>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC3_SetConfig+0xaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a18      	ldr	r2, [pc, #96]	; (8006b74 <TIM_OC3_SetConfig+0x108>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d113      	bne.n	8006b3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400
 8006b6c:	40014000 	.word	0x40014000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800

08006b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	031b      	lsls	r3, r3, #12
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a18      	ldr	r2, [pc, #96]	; (8006c34 <TIM_OC4_SetConfig+0xbc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00f      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <TIM_OC4_SetConfig+0xc0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00b      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <TIM_OC4_SetConfig+0xc4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d007      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <TIM_OC4_SetConfig+0xc8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <TIM_OC4_SetConfig+0xcc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d109      	bne.n	8006c0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	019b      	lsls	r3, r3, #6
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800

08006c48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <TIM_OC5_SetConfig+0xb0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00f      	beq.n	8006cbe <TIM_OC5_SetConfig+0x76>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <TIM_OC5_SetConfig+0xb4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00b      	beq.n	8006cbe <TIM_OC5_SetConfig+0x76>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <TIM_OC5_SetConfig+0xb8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d007      	beq.n	8006cbe <TIM_OC5_SetConfig+0x76>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <TIM_OC5_SetConfig+0xbc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d003      	beq.n	8006cbe <TIM_OC5_SetConfig+0x76>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <TIM_OC5_SetConfig+0xc0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d109      	bne.n	8006cd2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	621a      	str	r2, [r3, #32]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800

08006d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	051b      	lsls	r3, r3, #20
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <TIM_OC6_SetConfig+0xb4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_OC6_SetConfig+0x78>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <TIM_OC6_SetConfig+0xb8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC6_SetConfig+0x78>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <TIM_OC6_SetConfig+0xbc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC6_SetConfig+0x78>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <TIM_OC6_SetConfig+0xc0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC6_SetConfig+0x78>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a14      	ldr	r2, [pc, #80]	; (8006dd0 <TIM_OC6_SetConfig+0xc4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d109      	bne.n	8006d98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40010400 	.word	0x40010400
 8006dc8:	40014000 	.word	0x40014000
 8006dcc:	40014400 	.word	0x40014400
 8006dd0:	40014800 	.word	0x40014800

08006dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0201 	bic.w	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f023 030a 	bic.w	r3, r3, #10
 8006e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b087      	sub	sp, #28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f023 0210 	bic.w	r2, r3, #16
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	031b      	lsls	r3, r3, #12
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <TIM_ITRx_SetConfig+0x38>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f043 0307 	orr.w	r3, r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	609a      	str	r2, [r3, #8]
}
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	ffcfff8f 	.word	0xffcfff8f

08006ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2201      	movs	r2, #1
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	fa01 f303 	lsl.w	r3, r1, r3
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e068      	b.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2d      	ldr	r2, [pc, #180]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d108      	bne.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01d      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe6:	d018      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a18      	ldr	r2, [pc, #96]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a13      	ldr	r2, [pc, #76]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a14      	ldr	r2, [pc, #80]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d10c      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	4313      	orrs	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40010400 	.word	0x40010400
 800705c:	40000400 	.word	0x40000400
 8007060:	40000800 	.word	0x40000800
 8007064:	40000c00 	.word	0x40000c00
 8007068:	40001800 	.word	0x40001800

0800706c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	fb03 f203 	mul.w	r2, r3, r3
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	43db      	mvns	r3, r3
 800708a:	ea01 0203 	and.w	r2, r1, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	fb03 f303 	mul.w	r3, r3, r3
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	fb01 f303 	mul.w	r3, r1, r3
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	43db      	mvns	r3, r3
 80070c0:	401a      	ands	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	431a      	orrs	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	605a      	str	r2, [r3, #4]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6899      	ldr	r1, [r3, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	fb03 f203 	mul.w	r2, r3, r3
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	43db      	mvns	r3, r3
 80070fa:	ea01 0203 	and.w	r2, r1, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	fb03 f303 	mul.w	r3, r3, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	431a      	orrs	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68d9      	ldr	r1, [r3, #12]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	fb03 f203 	mul.w	r2, r3, r3
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	43db      	mvns	r3, r3
 800713a:	ea01 0203 	and.w	r2, r1, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	fb03 f303 	mul.w	r3, r3, r3
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	431a      	orrs	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	60da      	str	r2, [r3, #12]
}
 8007150:	bf00      	nop
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a19      	ldr	r1, [r3, #32]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	fb03 f303 	mul.w	r3, r3, r3
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	fb02 f203 	mul.w	r2, r2, r3
 800717e:	4613      	mov	r3, r2
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	43db      	mvns	r3, r3
 8007186:	ea01 0203 	and.w	r2, r1, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	fb03 f303 	mul.w	r3, r3, r3
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	fb01 f303 	mul.w	r3, r1, r3
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	fb01 f303 	mul.w	r3, r1, r3
 80071a2:	431a      	orrs	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80071a8:	bf00      	nop
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	0a1b      	lsrs	r3, r3, #8
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	0a12      	lsrs	r2, r2, #8
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	0a12      	lsrs	r2, r2, #8
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	0a12      	lsrs	r2, r2, #8
 80071dc:	fb02 f203 	mul.w	r2, r2, r3
 80071e0:	4613      	mov	r3, r2
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	43db      	mvns	r3, r3
 80071e8:	ea01 0203 	and.w	r2, r1, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	0a09      	lsrs	r1, r1, #8
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	0a09      	lsrs	r1, r1, #8
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	0a09      	lsrs	r1, r1, #8
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	fb01 f303 	mul.w	r3, r1, r3
 800720e:	431a      	orrs	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	fa93 f3a3 	rbit	r3, r3
 8007236:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <LL_GPIO_Init+0x26>
  {
    return 32U;
 8007242:	2320      	movs	r3, #32
 8007244:	e003      	b.n	800724e <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	fab3 f383 	clz	r3, r3
 800724c:	b2db      	uxtb	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007250:	e048      	b.n	80072e4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	2101      	movs	r1, #1
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	fa01 f303 	lsl.w	r3, r1, r3
 800725e:	4013      	ands	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d03a      	beq.n	80072de <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d003      	beq.n	8007278 <LL_GPIO_Init+0x58>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d10e      	bne.n	8007296 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	461a      	mov	r2, r3
 800727e:	69b9      	ldr	r1, [r7, #24]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ff2b 	bl	80070dc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	461a      	mov	r2, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ff0b 	bl	80070ac <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	461a      	mov	r2, r3
 800729c:	69b9      	ldr	r1, [r7, #24]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff ff3c 	bl	800711c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d111      	bne.n	80072d0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2bff      	cmp	r3, #255	; 0xff
 80072b0:	d807      	bhi.n	80072c2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	461a      	mov	r2, r3
 80072b8:	69b9      	ldr	r1, [r7, #24]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ff4e 	bl	800715c <LL_GPIO_SetAFPin_0_7>
 80072c0:	e006      	b.n	80072d0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	461a      	mov	r2, r3
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff ff72 	bl	80071b4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	461a      	mov	r2, r3
 80072d6:	69b9      	ldr	r1, [r7, #24]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fec7 	bl	800706c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	3301      	adds	r3, #1
 80072e2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	fa22 f303 	lsr.w	r3, r2, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1af      	bne.n	8007252 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <LL_RCC_HSE_IsReady+0x24>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800730c:	d101      	bne.n	8007312 <LL_RCC_HSE_IsReady+0x16>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <LL_RCC_HSE_IsReady+0x18>
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400

08007324 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <LL_RCC_HSI_IsReady+0x20>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d101      	bne.n	8007338 <LL_RCC_HSI_IsReady+0x14>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <LL_RCC_HSI_IsReady+0x16>
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	58024400 	.word	0x58024400

08007348 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800734c:	4b04      	ldr	r3, [pc, #16]	; (8007360 <LL_RCC_HSI_GetDivider+0x18>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0318 	and.w	r3, r3, #24
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400

08007364 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <LL_RCC_CSI_IsReady+0x24>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	d101      	bne.n	800737a <LL_RCC_CSI_IsReady+0x16>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <LL_RCC_CSI_IsReady+0x18>
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400

0800738c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY))?1UL:0UL);
 8007390:	4b06      	ldr	r3, [pc, #24]	; (80073ac <LL_RCC_LSE_IsReady+0x20>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d101      	bne.n	80073a0 <LL_RCC_LSE_IsReady+0x14>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <LL_RCC_LSE_IsReady+0x16>
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	58024400 	.word	0x58024400

080073b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <LL_RCC_GetSysClkSource+0x18>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 80073bc:	4618      	mov	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	58024400 	.word	0x58024400

080073cc <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <LL_RCC_GetSysPrescaler+0x18>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	58024400 	.word	0x58024400

080073e8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <LL_RCC_GetAHBPrescaler+0x18>)
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	58024400 	.word	0x58024400

08007404 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <LL_RCC_GetAPB1Prescaler+0x18>)
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	f003 0370 	and.w	r3, r3, #112	; 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	58024400 	.word	0x58024400

08007420 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800742c:	4618      	mov	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400

0800743c <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	b2da      	uxtb	r2, r3
 8007448:	4b0e      	ldr	r3, [pc, #56]	; (8007484 <LL_RCC_GetClockSource+0x48>)
 800744a:	4413      	add	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t) (Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT) );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	0e19      	lsrs	r1, r3, #24
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0a1b      	lsrs	r3, r3, #8
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	fa01 f303 	lsl.w	r3, r1, r3
 8007462:	401a      	ands	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	f003 031f 	and.w	r3, r3, #31
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	041a      	lsls	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4313      	orrs	r3, r2
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	5802444c 	.word	0x5802444c

08007488 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ffd3 	bl	800743c <LL_RCC_GetClockSource>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <LL_RCC_PLL_GetSource+0x18>)
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	f003 0303 	and.w	r3, r3, #3
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	58024400 	.word	0x58024400

080074bc <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <LL_RCC_PLL1P_IsEnabled+0x24>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d101      	bne.n	80074d2 <LL_RCC_PLL1P_IsEnabled+0x16>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <LL_RCC_PLL1P_IsEnabled+0x18>
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400

080074e4 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f4:	d101      	bne.n	80074fa <LL_RCC_PLL1Q_IsEnabled+0x16>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <LL_RCC_PLL1Q_IsEnabled+0x18>
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	58024400 	.word	0x58024400

0800750c <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800751c:	d101      	bne.n	8007522 <LL_RCC_PLL1R_IsEnabled+0x16>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <LL_RCC_PLL1R_IsEnabled+0x18>
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	58024400 	.word	0x58024400

08007534 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	58024400 	.word	0x58024400

08007558 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <LL_RCC_PLL1_GetN+0x18>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007564:	3301      	adds	r3, #1
}
 8007566:	4618      	mov	r0, r3
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	58024400 	.word	0x58024400

08007574 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <LL_RCC_PLL1_GetM+0x18>)
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007582:	4618      	mov	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	58024400 	.word	0x58024400

08007590 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <LL_RCC_PLL1_GetP+0x1c>)
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	0a5b      	lsrs	r3, r3, #9
 800759a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759e:	3301      	adds	r3, #1
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	58024400 	.word	0x58024400

080075b0 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <LL_RCC_PLL1_GetQ+0x1c>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	0c1b      	lsrs	r3, r3, #16
 80075ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075be:	3301      	adds	r3, #1
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400

080075d0 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <LL_RCC_PLL1_GetR+0x1c>)
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	0e1b      	lsrs	r3, r3, #24
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	3301      	adds	r3, #1
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400

080075f0 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <LL_RCC_PLL1_GetFRACN+0x18>)
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	08db      	lsrs	r3, r3, #3
 80075fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80075fe:	4618      	mov	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	58024400 	.word	0x58024400

0800760c <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <LL_RCC_PLL2_IsReady+0x24>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800761c:	d101      	bne.n	8007622 <LL_RCC_PLL2_IsReady+0x16>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <LL_RCC_PLL2_IsReady+0x18>
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400

08007634 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN)?1UL:0UL);
 8007638:	4b07      	ldr	r3, [pc, #28]	; (8007658 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007640:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007644:	d101      	bne.n	800764a <LL_RCC_PLL2P_IsEnabled+0x16>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <LL_RCC_PLL2P_IsEnabled+0x18>
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400

0800765c <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN)?1UL:0UL);
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800766c:	d101      	bne.n	8007672 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	58024400 	.word	0x58024400

08007684 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN)?1UL:0UL);
 8007688:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007694:	d101      	bne.n	800769a <LL_RCC_PLL2R_IsEnabled+0x16>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <LL_RCC_PLL2R_IsEnabled+0x18>
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	58024400 	.word	0x58024400

080076ac <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d101      	bne.n	80076c0 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	58024400 	.word	0x58024400

080076d0 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <LL_RCC_PLL2_GetN+0x18>)
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	3301      	adds	r3, #1
}
 80076de:	4618      	mov	r0, r3
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	58024400 	.word	0x58024400

080076ec <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <LL_RCC_PLL2_GetM+0x18>)
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	0b1b      	lsrs	r3, r3, #12
 80076f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	58024400 	.word	0x58024400

08007708 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <LL_RCC_PLL2_GetP+0x1c>)
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	0a5b      	lsrs	r3, r3, #9
 8007712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007716:	3301      	adds	r3, #1
}
 8007718:	4618      	mov	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	58024400 	.word	0x58024400

08007728 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <LL_RCC_PLL2_GetQ+0x1c>)
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	0c1b      	lsrs	r3, r3, #16
 8007732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007736:	3301      	adds	r3, #1
}
 8007738:	4618      	mov	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400

08007748 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <LL_RCC_PLL2_GetR+0x1c>)
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	0e1b      	lsrs	r3, r3, #24
 8007752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007756:	3301      	adds	r3, #1
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	58024400 	.word	0x58024400

08007768 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <LL_RCC_PLL2_GetFRACN+0x18>)
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	08db      	lsrs	r3, r3, #3
 8007772:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8007776:	4618      	mov	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	58024400 	.word	0x58024400

08007784 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <LL_RCC_PLL3_IsReady+0x24>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007794:	d101      	bne.n	800779a <LL_RCC_PLL3_IsReady+0x16>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <LL_RCC_PLL3_IsReady+0x18>
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400

080077ac <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <LL_RCC_PLL3P_IsEnabled+0x24>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077bc:	d101      	bne.n	80077c2 <LL_RCC_PLL3P_IsEnabled+0x16>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <LL_RCC_PLL3P_IsEnabled+0x18>
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	58024400 	.word	0x58024400

080077d4 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN)?1UL:0UL);
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077e4:	d101      	bne.n	80077ea <LL_RCC_PLL3Q_IsEnabled+0x16>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <LL_RCC_PLL3Q_IsEnabled+0x18>
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	58024400 	.word	0x58024400

080077fc <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN)?1UL:0UL);
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800780c:	d101      	bne.n	8007812 <LL_RCC_PLL3R_IsEnabled+0x16>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <LL_RCC_PLL3R_IsEnabled+0x18>
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	58024400 	.word	0x58024400

08007824 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8007828:	4b07      	ldr	r3, [pc, #28]	; (8007848 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007834:	d101      	bne.n	800783a <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	58024400 	.word	0x58024400

0800784c <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <LL_RCC_PLL3_GetN+0x18>)
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007858:	3301      	adds	r3, #1
}
 800785a:	4618      	mov	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	58024400 	.word	0x58024400

08007868 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <LL_RCC_PLL3_GetM+0x18>)
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	0d1b      	lsrs	r3, r3, #20
 8007872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007876:	4618      	mov	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	58024400 	.word	0x58024400

08007884 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <LL_RCC_PLL3_GetP+0x1c>)
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	0a5b      	lsrs	r3, r3, #9
 800788e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007892:	3301      	adds	r3, #1
}
 8007894:	4618      	mov	r0, r3
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400

080078a4 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <LL_RCC_PLL3_GetQ+0x1c>)
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	3301      	adds	r3, #1
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	58024400 	.word	0x58024400

080078c4 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <LL_RCC_PLL3_GetR+0x1c>)
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	0e1b      	lsrs	r3, r3, #24
 80078ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d2:	3301      	adds	r3, #1
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	58024400 	.word	0x58024400

080078e4 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <LL_RCC_PLL3_GetFRACN+0x18>)
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	08db      	lsrs	r3, r3, #3
 80078ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	58024400 	.word	0x58024400

08007900 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af02      	add	r7, sp, #8
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8007910:	f7ff fdc6 	bl	80074a0 <LL_RCC_PLL_GetSource>
 8007914:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d01f      	beq.n	800795c <LL_RCC_GetPLL1ClockFreq+0x5c>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d824      	bhi.n	800796c <LL_RCC_GetPLL1ClockFreq+0x6c>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <LL_RCC_GetPLL1ClockFreq+0x30>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d00e      	beq.n	800794c <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800792e:	e01d      	b.n	800796c <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8007930:	f7ff fcf8 	bl	8007324 <LL_RCC_HSI_IsReady>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01a      	beq.n	8007970 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800793a:	f7ff fd05 	bl	8007348 <LL_RCC_HSI_GetDivider>
 800793e:	4603      	mov	r3, r0
 8007940:	08db      	lsrs	r3, r3, #3
 8007942:	4a38      	ldr	r2, [pc, #224]	; (8007a24 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
 8007948:	61fb      	str	r3, [r7, #28]
      break;
 800794a:	e011      	b.n	8007970 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800794c:	f7ff fd0a 	bl	8007364 <LL_RCC_CSI_IsReady>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00e      	beq.n	8007974 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8007958:	61fb      	str	r3, [r7, #28]
      break;
 800795a:	e00b      	b.n	8007974 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800795c:	f7ff fcce 	bl	80072fc <LL_RCC_HSE_IsReady>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8007966:	4b31      	ldr	r3, [pc, #196]	; (8007a2c <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8007968:	61fb      	str	r3, [r7, #28]
      break;
 800796a:	e005      	b.n	8007978 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800796c:	bf00      	nop
 800796e:	e004      	b.n	800797a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8007970:	bf00      	nop
 8007972:	e002      	b.n	800797a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8007974:	bf00      	nop
 8007976:	e000      	b.n	800797a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8007978:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800798c:	f7ff fdf2 	bl	8007574 <LL_RCC_PLL1_GetM>
 8007990:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8007992:	f7ff fde1 	bl	8007558 <LL_RCC_PLL1_GetN>
 8007996:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8007998:	f7ff fdcc 	bl	8007534 <LL_RCC_PLL1FRACN_IsEnabled>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 80079a2:	f7ff fe25 	bl	80075f0 <LL_RCC_PLL1_GetFRACN>
 80079a6:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d035      	beq.n	8007a1a <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 80079ae:	f7ff fd85 	bl	80074bc <LL_RCC_PLL1P_IsEnabled>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00c      	beq.n	80079d2 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 80079b8:	f7ff fdea 	bl	8007590 <LL_RCC_PLL1_GetP>
 80079bc:	4603      	mov	r3, r0
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	6939      	ldr	r1, [r7, #16]
 80079c6:	69f8      	ldr	r0, [r7, #28]
 80079c8:	f000 f964 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80079d2:	f7ff fd87 	bl	80074e4 <LL_RCC_PLL1Q_IsEnabled>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00c      	beq.n	80079f6 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 80079dc:	f7ff fde8 	bl	80075b0 <LL_RCC_PLL1_GetQ>
 80079e0:	4603      	mov	r3, r0
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	6939      	ldr	r1, [r7, #16]
 80079ea:	69f8      	ldr	r0, [r7, #28]
 80079ec:	f000 f952 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80079f6:	f7ff fd89 	bl	800750c <LL_RCC_PLL1R_IsEnabled>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00c      	beq.n	8007a1a <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8007a00:	f7ff fde6 	bl	80075d0 <LL_RCC_PLL1_GetR>
 8007a04:	4603      	mov	r3, r0
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	6939      	ldr	r1, [r7, #16]
 8007a0e:	69f8      	ldr	r0, [r7, #28]
 8007a10:	f000 f940 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007a14:	4602      	mov	r2, r0
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	609a      	str	r2, [r3, #8]
    }
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	03d09000 	.word	0x03d09000
 8007a28:	003d0900 	.word	0x003d0900
 8007a2c:	007a1200 	.word	0x007a1200

08007a30 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8007a40:	f7ff fd2e 	bl	80074a0 <LL_RCC_PLL_GetSource>
 8007a44:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d01f      	beq.n	8007a8c <LL_RCC_GetPLL2ClockFreq+0x5c>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d824      	bhi.n	8007a9c <LL_RCC_GetPLL2ClockFreq+0x6c>
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <LL_RCC_GetPLL2ClockFreq+0x30>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00e      	beq.n	8007a7c <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8007a5e:	e01d      	b.n	8007a9c <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8007a60:	f7ff fc60 	bl	8007324 <LL_RCC_HSI_IsReady>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d01a      	beq.n	8007aa0 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8007a6a:	f7ff fc6d 	bl	8007348 <LL_RCC_HSI_GetDivider>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	08db      	lsrs	r3, r3, #3
 8007a72:	4a38      	ldr	r2, [pc, #224]	; (8007b54 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8007a74:	fa22 f303 	lsr.w	r3, r2, r3
 8007a78:	61fb      	str	r3, [r7, #28]
      break;
 8007a7a:	e011      	b.n	8007aa0 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8007a7c:	f7ff fc72 	bl	8007364 <LL_RCC_CSI_IsReady>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8007a86:	4b34      	ldr	r3, [pc, #208]	; (8007b58 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8007a88:	61fb      	str	r3, [r7, #28]
      break;
 8007a8a:	e00b      	b.n	8007aa4 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8007a8c:	f7ff fc36 	bl	80072fc <LL_RCC_HSE_IsReady>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d008      	beq.n	8007aa8 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8007a96:	4b31      	ldr	r3, [pc, #196]	; (8007b5c <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8007a98:	61fb      	str	r3, [r7, #28]
      break;
 8007a9a:	e005      	b.n	8007aa8 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e004      	b.n	8007aaa <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e002      	b.n	8007aaa <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8007aa8:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8007abc:	f7ff fe16 	bl	80076ec <LL_RCC_PLL2_GetM>
 8007ac0:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8007ac2:	f7ff fe05 	bl	80076d0 <LL_RCC_PLL2_GetN>
 8007ac6:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8007ac8:	f7ff fdf0 	bl	80076ac <LL_RCC_PLL2FRACN_IsEnabled>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8007ad2:	f7ff fe49 	bl	8007768 <LL_RCC_PLL2_GetFRACN>
 8007ad6:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d035      	beq.n	8007b4a <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8007ade:	f7ff fda9 	bl	8007634 <LL_RCC_PLL2P_IsEnabled>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8007ae8:	f7ff fe0e 	bl	8007708 <LL_RCC_PLL2_GetP>
 8007aec:	4603      	mov	r3, r0
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	6939      	ldr	r1, [r7, #16]
 8007af6:	69f8      	ldr	r0, [r7, #28]
 8007af8:	f000 f8cc 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007afc:	4602      	mov	r2, r0
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8007b02:	f7ff fdab 	bl	800765c <LL_RCC_PLL2Q_IsEnabled>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8007b0c:	f7ff fe0c 	bl	8007728 <LL_RCC_PLL2_GetQ>
 8007b10:	4603      	mov	r3, r0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	6939      	ldr	r1, [r7, #16]
 8007b1a:	69f8      	ldr	r0, [r7, #28]
 8007b1c:	f000 f8ba 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007b20:	4602      	mov	r2, r0
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8007b26:	f7ff fdad 	bl	8007684 <LL_RCC_PLL2R_IsEnabled>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8007b30:	f7ff fe0a 	bl	8007748 <LL_RCC_PLL2_GetR>
 8007b34:	4603      	mov	r3, r0
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	6939      	ldr	r1, [r7, #16]
 8007b3e:	69f8      	ldr	r0, [r7, #28]
 8007b40:	f000 f8a8 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007b44:	4602      	mov	r2, r0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	609a      	str	r2, [r3, #8]
    }
  }
}
 8007b4a:	bf00      	nop
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	03d09000 	.word	0x03d09000
 8007b58:	003d0900 	.word	0x003d0900
 8007b5c:	007a1200 	.word	0x007a1200

08007b60 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	; 0x28
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8007b70:	f7ff fc96 	bl	80074a0 <LL_RCC_PLL_GetSource>
 8007b74:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d01f      	beq.n	8007bbc <LL_RCC_GetPLL3ClockFreq+0x5c>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d824      	bhi.n	8007bcc <LL_RCC_GetPLL3ClockFreq+0x6c>
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <LL_RCC_GetPLL3ClockFreq+0x30>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d00e      	beq.n	8007bac <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8007b8e:	e01d      	b.n	8007bcc <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8007b90:	f7ff fbc8 	bl	8007324 <LL_RCC_HSI_IsReady>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01a      	beq.n	8007bd0 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8007b9a:	f7ff fbd5 	bl	8007348 <LL_RCC_HSI_GetDivider>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	61fb      	str	r3, [r7, #28]
      break;
 8007baa:	e011      	b.n	8007bd0 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8007bac:	f7ff fbda 	bl	8007364 <LL_RCC_CSI_IsReady>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00e      	beq.n	8007bd4 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8007bb6:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8007bb8:	61fb      	str	r3, [r7, #28]
      break;
 8007bba:	e00b      	b.n	8007bd4 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8007bbc:	f7ff fb9e 	bl	80072fc <LL_RCC_HSE_IsReady>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8007bc6:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <LL_RCC_GetPLL3ClockFreq+0x130>)
 8007bc8:	61fb      	str	r3, [r7, #28]
      break;
 8007bca:	e005      	b.n	8007bd8 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e004      	b.n	8007bda <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e002      	b.n	8007bda <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8007bd8:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8007bec:	f7ff fe3c 	bl	8007868 <LL_RCC_PLL3_GetM>
 8007bf0:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8007bf2:	f7ff fe2b 	bl	800784c <LL_RCC_PLL3_GetN>
 8007bf6:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8007bf8:	f7ff fe14 	bl	8007824 <LL_RCC_PLL3FRACN_IsEnabled>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8007c02:	f7ff fe6f 	bl	80078e4 <LL_RCC_PLL3_GetFRACN>
 8007c06:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d038      	beq.n	8007c80 <LL_RCC_GetPLL3ClockFreq+0x120>
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d035      	beq.n	8007c80 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8007c14:	f7ff fdca 	bl	80077ac <LL_RCC_PLL3P_IsEnabled>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8007c1e:	f7ff fe31 	bl	8007884 <LL_RCC_PLL3_GetP>
 8007c22:	4603      	mov	r3, r0
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	6939      	ldr	r1, [r7, #16]
 8007c2c:	69f8      	ldr	r0, [r7, #28]
 8007c2e:	f000 f831 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007c32:	4602      	mov	r2, r0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8007c38:	f7ff fdcc 	bl	80077d4 <LL_RCC_PLL3Q_IsEnabled>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00c      	beq.n	8007c5c <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8007c42:	f7ff fe2f 	bl	80078a4 <LL_RCC_PLL3_GetQ>
 8007c46:	4603      	mov	r3, r0
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	6939      	ldr	r1, [r7, #16]
 8007c50:	69f8      	ldr	r0, [r7, #28]
 8007c52:	f000 f81f 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007c56:	4602      	mov	r2, r0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8007c5c:	f7ff fdce 	bl	80077fc <LL_RCC_PLL3R_IsEnabled>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00c      	beq.n	8007c80 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8007c66:	f7ff fe2d 	bl	80078c4 <LL_RCC_PLL3_GetR>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	6939      	ldr	r1, [r7, #16]
 8007c74:	69f8      	ldr	r0, [r7, #28]
 8007c76:	f000 f80d 	bl	8007c94 <LL_RCC_CalcPLLClockFreq>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
    }
  }
}
 8007c80:	bf00      	nop
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	03d09000 	.word	0x03d09000
 8007c8c:	003d0900 	.word	0x003d0900
 8007c90:	007a1200 	.word	0x007a1200

08007c94 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8007cce:	eddf 5a10 	vldr	s11, [pc, #64]	; 8007d10 <LL_RCC_CalcPLLClockFreq+0x7c>
 8007cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cde:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq/(float_t)PQR;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007cec:	edd7 6a05 	vldr	s13, [r7, #20]
 8007cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf4:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8007cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8007cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d00:	ee17 3a90 	vmov	r3, s15
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	46000000 	.word	0x46000000

08007d14 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fbb1 	bl	8007488 <LL_RCC_GetUSARTClockSource>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4a62      	ldr	r2, [pc, #392]	; (8007eb4 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f000 80a9 	beq.w	8007e82 <LL_RCC_GetUSARTClockFreq+0x16e>
 8007d30:	4a60      	ldr	r2, [pc, #384]	; (8007eb4 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f200 80ae 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d38:	4a5f      	ldr	r2, [pc, #380]	; (8007eb8 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f000 80a1 	beq.w	8007e82 <LL_RCC_GetUSARTClockFreq+0x16e>
 8007d40:	4a5d      	ldr	r2, [pc, #372]	; (8007eb8 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	f200 80a6 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d48:	4a5c      	ldr	r2, [pc, #368]	; (8007ebc <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	f000 8091 	beq.w	8007e72 <LL_RCC_GetUSARTClockFreq+0x15e>
 8007d50:	4a5a      	ldr	r2, [pc, #360]	; (8007ebc <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	f200 809e 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d58:	4a59      	ldr	r2, [pc, #356]	; (8007ec0 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	f000 8089 	beq.w	8007e72 <LL_RCC_GetUSARTClockFreq+0x15e>
 8007d60:	4a57      	ldr	r2, [pc, #348]	; (8007ec0 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	f200 8096 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d68:	4a56      	ldr	r2, [pc, #344]	; (8007ec4 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d073      	beq.n	8007e56 <LL_RCC_GetUSARTClockFreq+0x142>
 8007d6e:	4a55      	ldr	r2, [pc, #340]	; (8007ec4 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	f200 808f 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d76:	4a54      	ldr	r2, [pc, #336]	; (8007ec8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d06c      	beq.n	8007e56 <LL_RCC_GetUSARTClockFreq+0x142>
 8007d7c:	4a52      	ldr	r2, [pc, #328]	; (8007ec8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	f200 8088 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d84:	4a51      	ldr	r2, [pc, #324]	; (8007ecc <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d058      	beq.n	8007e3c <LL_RCC_GetUSARTClockFreq+0x128>
 8007d8a:	4a50      	ldr	r2, [pc, #320]	; (8007ecc <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f200 8081 	bhi.w	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d92:	4a4f      	ldr	r2, [pc, #316]	; (8007ed0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d051      	beq.n	8007e3c <LL_RCC_GetUSARTClockFreq+0x128>
 8007d98:	4a4d      	ldr	r2, [pc, #308]	; (8007ed0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d87a      	bhi.n	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007d9e:	4a4d      	ldr	r2, [pc, #308]	; (8007ed4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d03e      	beq.n	8007e22 <LL_RCC_GetUSARTClockFreq+0x10e>
 8007da4:	4a4b      	ldr	r2, [pc, #300]	; (8007ed4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d874      	bhi.n	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007daa:	4a4b      	ldr	r2, [pc, #300]	; (8007ed8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d038      	beq.n	8007e22 <LL_RCC_GetUSARTClockFreq+0x10e>
 8007db0:	4a49      	ldr	r2, [pc, #292]	; (8007ed8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d86e      	bhi.n	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
 8007db6:	4a49      	ldr	r2, [pc, #292]	; (8007edc <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d01a      	beq.n	8007df2 <LL_RCC_GetUSARTClockFreq+0xde>
 8007dbc:	4a48      	ldr	r2, [pc, #288]	; (8007ee0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d168      	bne.n	8007e94 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8007dc2:	f000 f895 	bl	8007ef0 <RCC_GetSystemClockFreq>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	f7ff fb00 	bl	80073cc <LL_RCC_GetSysPrescaler>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	0a1b      	lsrs	r3, r3, #8
 8007dd0:	f003 030f 	and.w	r3, r3, #15
 8007dd4:	4a43      	ldr	r2, [pc, #268]	; (8007ee4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8007dd6:	5cd3      	ldrb	r3, [r2, r3]
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	fa24 f303 	lsr.w	r3, r4, r3
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 f8e7 	bl	8007fb4 <RCC_GetHCLKClockFreq>
 8007de6:	4603      	mov	r3, r0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f911 	bl	8008010 <RCC_GetPCLK2ClockFreq>
 8007dee:	6178      	str	r0, [r7, #20]
      break;
 8007df0:	e05b      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8007df2:	f000 f87d 	bl	8007ef0 <RCC_GetSystemClockFreq>
 8007df6:	4604      	mov	r4, r0
 8007df8:	f7ff fae8 	bl	80073cc <LL_RCC_GetSysPrescaler>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	4a37      	ldr	r2, [pc, #220]	; (8007ee4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8007e06:	5cd3      	ldrb	r3, [r2, r3]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f8cf 	bl	8007fb4 <RCC_GetHCLKClockFreq>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f8e1 	bl	8007fe0 <RCC_GetPCLK1ClockFreq>
 8007e1e:	6178      	str	r0, [r7, #20]
      break;
 8007e20:	e043      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8007e22:	f7ff fbf3 	bl	800760c <LL_RCC_PLL2_IsReady>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d035      	beq.n	8007e98 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8007e2c:	f107 0308 	add.w	r3, r7, #8
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff fdfd 	bl	8007a30 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	617b      	str	r3, [r7, #20]
      }
      break;
 8007e3a:	e02d      	b.n	8007e98 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8007e3c:	f7ff fca2 	bl	8007784 <LL_RCC_PLL3_IsReady>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d02a      	beq.n	8007e9c <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8007e46:	f107 0308 	add.w	r3, r7, #8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fe88 	bl	8007b60 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	617b      	str	r3, [r7, #20]
      }
      break;
 8007e54:	e022      	b.n	8007e9c <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8007e56:	f7ff fa65 	bl	8007324 <LL_RCC_HSI_IsReady>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01f      	beq.n	8007ea0 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8007e60:	f7ff fa72 	bl	8007348 <LL_RCC_HSI_GetDivider>
 8007e64:	4603      	mov	r3, r0
 8007e66:	08db      	lsrs	r3, r3, #3
 8007e68:	4a1f      	ldr	r2, [pc, #124]	; (8007ee8 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8007e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007e70:	e016      	b.n	8007ea0 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8007e72:	f7ff fa77 	bl	8007364 <LL_RCC_CSI_IsReady>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d013      	beq.n	8007ea4 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8007e7c:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8007e7e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007e80:	e010      	b.n	8007ea4 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8007e82:	f7ff fa83 	bl	800738c <LL_RCC_LSE_IsReady>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00d      	beq.n	8007ea8 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8007e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e90:	617b      	str	r3, [r7, #20]
      }
      break;
 8007e92:	e009      	b.n	8007ea8 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8007e94:	bf00      	nop
 8007e96:	e008      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e006      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e004      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8007ea0:	bf00      	nop
 8007ea2:	e002      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e000      	b.n	8007eaa <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8007ea8:	bf00      	nop
  }

  return usart_frequency;
 8007eaa:	697b      	ldr	r3, [r7, #20]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	371c      	adds	r7, #28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd90      	pop	{r4, r7, pc}
 8007eb4:	07050308 	.word	0x07050308
 8007eb8:	07050008 	.word	0x07050008
 8007ebc:	07040308 	.word	0x07040308
 8007ec0:	07040008 	.word	0x07040008
 8007ec4:	07030308 	.word	0x07030308
 8007ec8:	07030008 	.word	0x07030008
 8007ecc:	07020308 	.word	0x07020308
 8007ed0:	07020008 	.word	0x07020008
 8007ed4:	07010308 	.word	0x07010308
 8007ed8:	07010008 	.word	0x07010008
 8007edc:	07000008 	.word	0x07000008
 8007ee0:	07000308 	.word	0x07000308
 8007ee4:	080094ec 	.word	0x080094ec
 8007ee8:	03d09000 	.word	0x03d09000
 8007eec:	003d0900 	.word	0x003d0900

08007ef0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007efa:	f7ff fa59 	bl	80073b0 <LL_RCC_GetSysClkSource>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b18      	cmp	r3, #24
 8007f02:	d84b      	bhi.n	8007f9c <RCC_GetSystemClockFreq+0xac>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <RCC_GetSystemClockFreq+0x1c>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f71 	.word	0x08007f71
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007f9d 	.word	0x08007f9d
 8007f1c:	08007f9d 	.word	0x08007f9d
 8007f20:	08007f9d 	.word	0x08007f9d
 8007f24:	08007f9d 	.word	0x08007f9d
 8007f28:	08007f9d 	.word	0x08007f9d
 8007f2c:	08007f83 	.word	0x08007f83
 8007f30:	08007f9d 	.word	0x08007f9d
 8007f34:	08007f9d 	.word	0x08007f9d
 8007f38:	08007f9d 	.word	0x08007f9d
 8007f3c:	08007f9d 	.word	0x08007f9d
 8007f40:	08007f9d 	.word	0x08007f9d
 8007f44:	08007f9d 	.word	0x08007f9d
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f9d 	.word	0x08007f9d
 8007f54:	08007f9d 	.word	0x08007f9d
 8007f58:	08007f9d 	.word	0x08007f9d
 8007f5c:	08007f9d 	.word	0x08007f9d
 8007f60:	08007f9d 	.word	0x08007f9d
 8007f64:	08007f9d 	.word	0x08007f9d
 8007f68:	08007f9d 	.word	0x08007f9d
 8007f6c:	08007f8f 	.word	0x08007f8f
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8007f70:	f7ff f9ea 	bl	8007348 <LL_RCC_HSI_GetDivider>
 8007f74:	4603      	mov	r3, r0
 8007f76:	08db      	lsrs	r3, r3, #3
 8007f78:	4a0b      	ldr	r2, [pc, #44]	; (8007fa8 <RCC_GetSystemClockFreq+0xb8>)
 8007f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7e:	60fb      	str	r3, [r7, #12]
      break;
 8007f80:	e00d      	b.n	8007f9e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <RCC_GetSystemClockFreq+0xbc>)
 8007f84:	60fb      	str	r3, [r7, #12]
      break;
 8007f86:	e00a      	b.n	8007f9e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <RCC_GetSystemClockFreq+0xc0>)
 8007f8a:	60fb      	str	r3, [r7, #12]
      break;
 8007f8c:	e007      	b.n	8007f9e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8007f8e:	463b      	mov	r3, r7
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fcb5 	bl	8007900 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	60fb      	str	r3, [r7, #12]
      break;
 8007f9a:	e000      	b.n	8007f9e <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8007f9c:	bf00      	nop
  }

  return frequency;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	03d09000 	.word	0x03d09000
 8007fac:	003d0900 	.word	0x003d0900
 8007fb0:	007a1200 	.word	0x007a1200

08007fb4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007fbc:	f7ff fa14 	bl	80073e8 <LL_RCC_GetAHBPrescaler>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	4a05      	ldr	r2, [pc, #20]	; (8007fdc <RCC_GetHCLKClockFreq+0x28>)
 8007fc8:	5cd3      	ldrb	r3, [r2, r3]
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	080094ec 	.word	0x080094ec

08007fe0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007fe8:	f7ff fa0c 	bl	8007404 <LL_RCC_GetAPB1Prescaler>
 8007fec:	4603      	mov	r3, r0
 8007fee:	091b      	lsrs	r3, r3, #4
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	4a05      	ldr	r2, [pc, #20]	; (800800c <RCC_GetPCLK1ClockFreq+0x2c>)
 8007ff6:	5cd3      	ldrb	r3, [r2, r3]
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	080094ec 	.word	0x080094ec

08008010 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008018:	f7ff fa02 	bl	8007420 <LL_RCC_GetAPB2Prescaler>
 800801c:	4603      	mov	r3, r0
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	4a05      	ldr	r2, [pc, #20]	; (800803c <RCC_GetPCLK2ClockFreq+0x2c>)
 8008026:	5cd3      	ldrb	r3, [r2, r3]
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	080094ec 	.word	0x080094ec

08008040 <LL_TIM_SetPrescaler>:
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <LL_TIM_SetAutoReload>:
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <LL_TIM_SetRepetitionCounter>:
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f043 0201 	orr.w	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	615a      	str	r2, [r3, #20]
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a3d      	ldr	r2, [pc, #244]	; (80081bc <LL_TIM_Init+0x108>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <LL_TIM_Init+0x40>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d2:	d00f      	beq.n	80080f4 <LL_TIM_Init+0x40>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a3a      	ldr	r2, [pc, #232]	; (80081c0 <LL_TIM_Init+0x10c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00b      	beq.n	80080f4 <LL_TIM_Init+0x40>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a39      	ldr	r2, [pc, #228]	; (80081c4 <LL_TIM_Init+0x110>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d007      	beq.n	80080f4 <LL_TIM_Init+0x40>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a38      	ldr	r2, [pc, #224]	; (80081c8 <LL_TIM_Init+0x114>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d003      	beq.n	80080f4 <LL_TIM_Init+0x40>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a37      	ldr	r2, [pc, #220]	; (80081cc <LL_TIM_Init+0x118>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d106      	bne.n	8008102 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a2d      	ldr	r2, [pc, #180]	; (80081bc <LL_TIM_Init+0x108>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01f      	beq.n	800814a <LL_TIM_Init+0x96>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008110:	d01b      	beq.n	800814a <LL_TIM_Init+0x96>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <LL_TIM_Init+0x10c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d017      	beq.n	800814a <LL_TIM_Init+0x96>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <LL_TIM_Init+0x110>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <LL_TIM_Init+0x96>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <LL_TIM_Init+0x114>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00f      	beq.n	800814a <LL_TIM_Init+0x96>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a27      	ldr	r2, [pc, #156]	; (80081cc <LL_TIM_Init+0x118>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00b      	beq.n	800814a <LL_TIM_Init+0x96>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <LL_TIM_Init+0x11c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <LL_TIM_Init+0x96>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a25      	ldr	r2, [pc, #148]	; (80081d4 <LL_TIM_Init+0x120>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d003      	beq.n	800814a <LL_TIM_Init+0x96>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a24      	ldr	r2, [pc, #144]	; (80081d8 <LL_TIM_Init+0x124>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d106      	bne.n	8008158 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff ff79 	bl	800805c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff65 	bl	8008040 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a10      	ldr	r2, [pc, #64]	; (80081bc <LL_TIM_Init+0x108>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00f      	beq.n	800819e <LL_TIM_Init+0xea>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a12      	ldr	r2, [pc, #72]	; (80081cc <LL_TIM_Init+0x118>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00b      	beq.n	800819e <LL_TIM_Init+0xea>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <LL_TIM_Init+0x11c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d007      	beq.n	800819e <LL_TIM_Init+0xea>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <LL_TIM_Init+0x120>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d003      	beq.n	800819e <LL_TIM_Init+0xea>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a0f      	ldr	r2, [pc, #60]	; (80081d8 <LL_TIM_Init+0x124>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d105      	bne.n	80081aa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff ff67 	bl	8008078 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff ff72 	bl	8008094 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40010000 	.word	0x40010000
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800
 80081c8:	40000c00 	.word	0x40000c00
 80081cc:	40010400 	.word	0x40010400
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400
 80081d8:	40014800 	.word	0x40014800

080081dc <LL_USART_IsEnabled>:
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <LL_USART_IsEnabled+0x18>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <LL_USART_IsEnabled+0x1a>
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <LL_USART_SetPrescaler>:
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	f023 030f 	bic.w	r3, r3, #15
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	b292      	uxth	r2, r2
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <LL_USART_SetStopBitsLength>:
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	605a      	str	r2, [r3, #4]
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <LL_USART_SetHWFlowCtrl>:
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	609a      	str	r2, [r3, #8]
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <LL_USART_SetBaudRate>:
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b0b      	cmp	r3, #11
 800828a:	d83c      	bhi.n	8008306 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d039      	beq.n	8008306 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008298:	d122      	bne.n	80082e0 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <LL_USART_SetBaudRate+0x9c>)
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ac:	005a      	lsls	r2, r3, #1
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	085b      	lsrs	r3, r3, #1
 80082b2:	441a      	add	r2, r3
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80082c4:	4013      	ands	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	60da      	str	r2, [r3, #12]
}
 80082de:	e012      	b.n	8008306 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <LL_USART_SetBaudRate+0x9c>)
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	441a      	add	r2, r3
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fe:	b29b      	uxth	r3, r3
 8008300:	461a      	mov	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	60da      	str	r2, [r3, #12]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	080094fc 	.word	0x080094fc

08008318 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af02      	add	r7, sp, #8
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff ff56 	bl	80081dc <LL_USART_IsEnabled>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d17f      	bne.n	8008436 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4b41      	ldr	r3, [pc, #260]	; (8008440 <LL_USART_Init+0x128>)
 800833c:	4013      	ands	r3, r2
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	6891      	ldr	r1, [r2, #8]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	6912      	ldr	r2, [r2, #16]
 8008346:	4311      	orrs	r1, r2
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	6952      	ldr	r2, [r2, #20]
 800834c:	4311      	orrs	r1, r2
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	69d2      	ldr	r2, [r2, #28]
 8008352:	430a      	orrs	r2, r1
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ff62 	bl	800822a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff ff6f 	bl	8008250 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a33      	ldr	r2, [pc, #204]	; (8008444 <LL_USART_Init+0x12c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d104      	bne.n	8008384 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800837a:	4833      	ldr	r0, [pc, #204]	; (8008448 <LL_USART_Init+0x130>)
 800837c:	f7ff fcca 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 8008380:	60b8      	str	r0, [r7, #8]
 8008382:	e03d      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a31      	ldr	r2, [pc, #196]	; (800844c <LL_USART_Init+0x134>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d104      	bne.n	8008396 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800838c:	4830      	ldr	r0, [pc, #192]	; (8008450 <LL_USART_Init+0x138>)
 800838e:	f7ff fcc1 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 8008392:	60b8      	str	r0, [r7, #8]
 8008394:	e034      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a2e      	ldr	r2, [pc, #184]	; (8008454 <LL_USART_Init+0x13c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d104      	bne.n	80083a8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800839e:	482c      	ldr	r0, [pc, #176]	; (8008450 <LL_USART_Init+0x138>)
 80083a0:	f7ff fcb8 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 80083a4:	60b8      	str	r0, [r7, #8]
 80083a6:	e02b      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a2b      	ldr	r2, [pc, #172]	; (8008458 <LL_USART_Init+0x140>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d104      	bne.n	80083ba <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80083b0:	4827      	ldr	r0, [pc, #156]	; (8008450 <LL_USART_Init+0x138>)
 80083b2:	f7ff fcaf 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 80083b6:	60b8      	str	r0, [r7, #8]
 80083b8:	e022      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a27      	ldr	r2, [pc, #156]	; (800845c <LL_USART_Init+0x144>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d104      	bne.n	80083cc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80083c2:	4823      	ldr	r0, [pc, #140]	; (8008450 <LL_USART_Init+0x138>)
 80083c4:	f7ff fca6 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 80083c8:	60b8      	str	r0, [r7, #8]
 80083ca:	e019      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a24      	ldr	r2, [pc, #144]	; (8008460 <LL_USART_Init+0x148>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d104      	bne.n	80083de <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 80083d4:	481c      	ldr	r0, [pc, #112]	; (8008448 <LL_USART_Init+0x130>)
 80083d6:	f7ff fc9d 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 80083da:	60b8      	str	r0, [r7, #8]
 80083dc:	e010      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a20      	ldr	r2, [pc, #128]	; (8008464 <LL_USART_Init+0x14c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d104      	bne.n	80083f0 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80083e6:	481a      	ldr	r0, [pc, #104]	; (8008450 <LL_USART_Init+0x138>)
 80083e8:	f7ff fc94 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 80083ec:	60b8      	str	r0, [r7, #8]
 80083ee:	e007      	b.n	8008400 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <LL_USART_Init+0x150>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d103      	bne.n	8008400 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80083f8:	4815      	ldr	r0, [pc, #84]	; (8008450 <LL_USART_Init+0x138>)
 80083fa:	f7ff fc8b 	bl	8007d14 <LL_RCC_GetUSARTClockFreq>
 80083fe:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d011      	beq.n	800842a <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00d      	beq.n	800842a <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	69d9      	ldr	r1, [r3, #28]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	460b      	mov	r3, r1
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff ff27 	bl	8008278 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fee6 	bl	8008202 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	efff69f3 	.word	0xefff69f3
 8008444:	40011000 	.word	0x40011000
 8008448:	07000308 	.word	0x07000308
 800844c:	40004400 	.word	0x40004400
 8008450:	07000008 	.word	0x07000008
 8008454:	40004800 	.word	0x40004800
 8008458:	40004c00 	.word	0x40004c00
 800845c:	40005000 	.word	0x40005000
 8008460:	40011400 	.word	0x40011400
 8008464:	40007800 	.word	0x40007800
 8008468:	40007c00 	.word	0x40007c00

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	4d0d      	ldr	r5, [pc, #52]	; (80084a4 <__libc_init_array+0x38>)
 8008470:	4c0d      	ldr	r4, [pc, #52]	; (80084a8 <__libc_init_array+0x3c>)
 8008472:	1b64      	subs	r4, r4, r5
 8008474:	10a4      	asrs	r4, r4, #2
 8008476:	2600      	movs	r6, #0
 8008478:	42a6      	cmp	r6, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	4d0b      	ldr	r5, [pc, #44]	; (80084ac <__libc_init_array+0x40>)
 800847e:	4c0c      	ldr	r4, [pc, #48]	; (80084b0 <__libc_init_array+0x44>)
 8008480:	f000 f820 	bl	80084c4 <_init>
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	2600      	movs	r6, #0
 800848a:	42a6      	cmp	r6, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	f855 3b04 	ldr.w	r3, [r5], #4
 8008494:	4798      	blx	r3
 8008496:	3601      	adds	r6, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	f855 3b04 	ldr.w	r3, [r5], #4
 800849e:	4798      	blx	r3
 80084a0:	3601      	adds	r6, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	0800952c 	.word	0x0800952c
 80084a8:	0800952c 	.word	0x0800952c
 80084ac:	0800952c 	.word	0x0800952c
 80084b0:	08009530 	.word	0x08009530

080084b4 <memset>:
 80084b4:	4402      	add	r2, r0
 80084b6:	4603      	mov	r3, r0
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d100      	bne.n	80084be <memset+0xa>
 80084bc:	4770      	bx	lr
 80084be:	f803 1b01 	strb.w	r1, [r3], #1
 80084c2:	e7f9      	b.n	80084b8 <memset+0x4>

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
