
WYSWTLACZ_HUB75a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e674  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800e914  0800e914  0001e914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea9c  0800ea9c  000291bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea9c  0800ea9c  000291bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea9c  0800ea9c  000291bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea9c  0800ea9c  0001ea9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eaa0  0800eaa0  0001eaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000091bc  24000000  0800eaa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b68c  240091bc  08017c60  000291bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24014848  08017c60  00034848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000291bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000347e1  00000000  00000000  000291ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a5b  00000000  00000000  0005d9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  00063428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a8  00000000  00000000  00064de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fc15  00000000  00000000  00066590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002338a  00000000  00000000  000a61a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017db27  00000000  00000000  000c952f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00247056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  002470ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240091bc 	.word	0x240091bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e8fc 	.word	0x0800e8fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240091c0 	.word	0x240091c0
 80002dc:	0800e8fc 	.word	0x0800e8fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f043 0201 	orr.w	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	f043 0202 	orr.w	r2, r3, #2
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	60da      	str	r2, [r3, #12]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <TIM5_CallBack>:
SCR_PROCES SCR_PROCESS;
uint8_t *SedingBufor_Adr=0;
uint8_t Bufor_Send_Picker=BUFOR1;

void TIM5_CallBack()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <TIM5_CallBack+0x1c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2264      	movs	r2, #100	; 0x64
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34
	Send_BUF_IN_SCR( SedingBufor_Adr );
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <TIM5_CallBack+0x20>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f807 	bl	80003e4 <Send_BUF_IN_SCR>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	240147e8 	.word	0x240147e8
 80003e0:	2400ccec 	.word	0x2400ccec

080003e4 <Send_BUF_IN_SCR>:
void Send_BUF_IN_SCR(uint8_t *SendBuffer)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

	 if(LINIA>7)
 80003ec:	4b8c      	ldr	r3, [pc, #560]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b07      	cmp	r3, #7
 80003f2:	dd03      	ble.n	80003fc <Send_BUF_IN_SCR+0x18>
	 {
		  LINIA=-1;
 80003f4:	4b8a      	ldr	r3, [pc, #552]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80003f6:	f04f 32ff 	mov.w	r2, #4294967295
 80003fa:	601a      	str	r2, [r3, #0]
	 }
	 LINIA++;
 80003fc:	4b88      	ldr	r3, [pc, #544]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a87      	ldr	r2, [pc, #540]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 8000404:	6013      	str	r3, [r2, #0]

		switch(LINIA) {
 8000406:	4b86      	ldr	r3, [pc, #536]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b07      	cmp	r3, #7
 800040c:	f200 8104 	bhi.w	8000618 <Send_BUF_IN_SCR+0x234>
 8000410:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <Send_BUF_IN_SCR+0x34>)
 8000412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000416:	bf00      	nop
 8000418:	080005dd 	.word	0x080005dd
 800041c:	080005a1 	.word	0x080005a1
 8000420:	08000565 	.word	0x08000565
 8000424:	08000529 	.word	0x08000529
 8000428:	080004ed 	.word	0x080004ed
 800042c:	080004b1 	.word	0x080004b1
 8000430:	08000475 	.word	0x08000475
 8000434:	08000439 	.word	0x08000439
					case 7: //7
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+(  LINIA *300  ));
 8000438:	4b79      	ldr	r3, [pc, #484]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000440:	fb02 f303 	mul.w	r3, r2, r3
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	4619      	mov	r1, r3
 800044c:	4875      	ldr	r0, [pc, #468]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 800044e:	f008 feb5 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4874      	ldr	r0, [pc, #464]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000458:	f007 ffb4 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	4871      	ldr	r0, [pc, #452]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000462:	f007 ffaf 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	486e      	ldr	r0, [pc, #440]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 800046e:	f007 ffa9 	bl	80083c4 <HAL_GPIO_WritePin>

						break;
 8000472:	e0d1      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 6: //6
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300 ));
 8000474:	4b6a      	ldr	r3, [pc, #424]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800047c:	fb02 f303 	mul.w	r3, r2, r3
 8000480:	461a      	mov	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4619      	mov	r1, r3
 8000488:	4866      	ldr	r0, [pc, #408]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 800048a:	f008 fe97 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	4865      	ldr	r0, [pc, #404]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000494:	f007 ff96 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4862      	ldr	r0, [pc, #392]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 800049e:	f007 ff91 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	485f      	ldr	r0, [pc, #380]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80004aa:	f007 ff8b 	bl	80083c4 <HAL_GPIO_WritePin>

						break;
 80004ae:	e0b3      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 5: //5
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80004b0:	4b5b      	ldr	r3, [pc, #364]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004b8:	fb02 f303 	mul.w	r3, r2, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	4619      	mov	r1, r3
 80004c4:	4857      	ldr	r0, [pc, #348]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 80004c6:	f008 fe79 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2140      	movs	r1, #64	; 0x40
 80004ce:	4856      	ldr	r0, [pc, #344]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80004d0:	f007 ff78 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	4853      	ldr	r0, [pc, #332]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80004da:	f007 ff73 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e4:	4850      	ldr	r0, [pc, #320]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80004e6:	f007 ff6d 	bl	80083c4 <HAL_GPIO_WritePin>

						break;
 80004ea:	e095      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 4:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80004ec:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f4:	fb02 f303 	mul.w	r3, r2, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	4619      	mov	r1, r3
 8000500:	4848      	ldr	r0, [pc, #288]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 8000502:	f008 fe5b 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	4847      	ldr	r0, [pc, #284]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 800050c:	f007 ff5a 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	4844      	ldr	r0, [pc, #272]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000516:	f007 ff55 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	4841      	ldr	r0, [pc, #260]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000522:	f007 ff4f 	bl	80083c4 <HAL_GPIO_WritePin>


						break;
 8000526:	e077      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 3:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000528:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000530:	fb02 f303 	mul.w	r3, r2, r3
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	4619      	mov	r1, r3
 800053c:	4839      	ldr	r0, [pc, #228]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 800053e:	f008 fe3d 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2140      	movs	r1, #64	; 0x40
 8000546:	4838      	ldr	r0, [pc, #224]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000548:	f007 ff3c 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	4835      	ldr	r0, [pc, #212]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000552:	f007 ff37 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055c:	4832      	ldr	r0, [pc, #200]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 800055e:	f007 ff31 	bl	80083c4 <HAL_GPIO_WritePin>


						break;
 8000562:	e059      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 2:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 8000564:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4619      	mov	r1, r3
 8000578:	482a      	ldr	r0, [pc, #168]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 800057a:	f008 fe1f 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	4829      	ldr	r0, [pc, #164]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000584:	f007 ff1e 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	4826      	ldr	r0, [pc, #152]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 800058e:	f007 ff19 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	4823      	ldr	r0, [pc, #140]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 800059a:	f007 ff13 	bl	80083c4 <HAL_GPIO_WritePin>


						break;
 800059e:	e03b      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 1:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	4619      	mov	r1, r3
 80005b4:	481b      	ldr	r0, [pc, #108]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 80005b6:	f008 fe01 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80005c0:	f007 ff00 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80005ca:	f007 fefb 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	4814      	ldr	r0, [pc, #80]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80005d6:	f007 fef5 	bl	80083c4 <HAL_GPIO_WritePin>
						break;
 80005da:	e01d      	b.n	8000618 <Send_BUF_IN_SCR+0x234>
					case 0:
						HAL_QSPI_Transmit_DMA(&hqspi, SendBuffer+( LINIA *300  ));
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <Send_BUF_IN_SCR+0x23c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005e4:	fb02 f303 	mul.w	r3, r2, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <Send_BUF_IN_SCR+0x240>)
 80005f2:	f008 fde3 	bl	80091bc <HAL_QSPI_Transmit_DMA>

						HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 80005fc:	f007 fee2 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000606:	f007 fedd 	bl	80083c4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <Send_BUF_IN_SCR+0x244>)
 8000612:	f007 fed7 	bl	80083c4 <HAL_GPIO_WritePin>
						break;
 8000616:	bf00      	nop
					}
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2400cce0 	.word	0x2400cce0
 8000624:	24014714 	.word	0x24014714
 8000628:	58020800 	.word	0x58020800

0800062c <PrepareFullBuffer>:
void PrepareFullBuffer(uint8_t *BMP,uint8_t *OUT_B)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
for(int i=0; i<2500; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e007      	b.n	800064c <PrepareFullBuffer+0x20>
{
	OUT_B[i]=0;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	4413      	add	r3, r2
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
for(int i=0; i<2500; i++)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000652:	4293      	cmp	r3, r2
 8000654:	ddf2      	ble.n	800063c <PrepareFullBuffer+0x10>
}
PrepareRow(BMP,OUT_B+(0*300),7);
 8000656:	2207      	movs	r2, #7
 8000658:	6839      	ldr	r1, [r7, #0]
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f83c 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(1*300),6);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000666:	2206      	movs	r2, #6
 8000668:	4619      	mov	r1, r3
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f834 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(2*300),5);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000676:	2205      	movs	r2, #5
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f82c 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(3*300),4);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000686:	2204      	movs	r2, #4
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f824 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(4*300),3);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8000696:	2203      	movs	r2, #3
 8000698:	4619      	mov	r1, r3
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 f81c 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(5*300),2);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80006a6:	2202      	movs	r2, #2
 80006a8:	4619      	mov	r1, r3
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f814 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(6*300),1);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f80c 	bl	80006d8 <PrepareRow>
PrepareRow(BMP,OUT_B+(7*300),0);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	f603 0334 	addw	r3, r3, #2100	; 0x834
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f804 	bl	80006d8 <PrepareRow>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <PrepareRow>:
void PrepareRow(uint8_t *BMP, uint8_t *OUT_B, uint8_t ROW)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	4613      	mov	r3, r2
 80006e4:	71fb      	strb	r3, [r7, #7]

	PrepareRowPart ( BMP+32+ (0*64) +(ROW*64), ( OUT_B+(2*16)) );
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	019b      	lsls	r3, r3, #6
 80006ea:	3320      	adds	r3, #32
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	441a      	add	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3320      	adds	r3, #32
 80006f4:	4619      	mov	r1, r3
 80006f6:	4610      	mov	r0, r2
 80006f8:	f000 f8b3 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+32+ (8*64) +(ROW*64), ( OUT_B+(3*16)) );
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	019b      	lsls	r3, r3, #6
 8000700:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	441a      	add	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	3330      	adds	r3, #48	; 0x30
 800070c:	4619      	mov	r1, r3
 800070e:	4610      	mov	r0, r2
 8000710:	f000 f8a7 	bl	8000862 <PrepareRowPart>

	PrepareRowPart ( BMP+32+ (16*64) +(ROW*64), ( OUT_B+(10*16)) );
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	441a      	add	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	33a0      	adds	r3, #160	; 0xa0
 8000724:	4619      	mov	r1, r3
 8000726:	4610      	mov	r0, r2
 8000728:	f000 f89b 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+32+ (24*64) +(ROW*64), ( OUT_B+(11*16)) ); // srodek mlodszy
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	019b      	lsls	r3, r3, #6
 8000730:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	441a      	add	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	33b0      	adds	r3, #176	; 0xb0
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f000 f88f 	bl	8000862 <PrepareRowPart>

	PrepareRowPart ( BMP+16+ (0*64) +(ROW*64), ( OUT_B+(4*16)) );
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	019b      	lsls	r3, r3, #6
 8000748:	3310      	adds	r3, #16
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	441a      	add	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	3340      	adds	r3, #64	; 0x40
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f000 f884 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+16+ (8*64) +(ROW*64), ( OUT_B+(5*16)) );
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	441a      	add	r2, r3
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	3350      	adds	r3, #80	; 0x50
 800076a:	4619      	mov	r1, r3
 800076c:	4610      	mov	r0, r2
 800076e:	f000 f878 	bl	8000862 <PrepareRowPart>

	PrepareRowPart ( BMP+16+ (16*64) +(ROW*64), ( OUT_B+(12*16)) );
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	441a      	add	r2, r3
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	33c0      	adds	r3, #192	; 0xc0
 8000782:	4619      	mov	r1, r3
 8000784:	4610      	mov	r0, r2
 8000786:	f000 f86c 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+16+ (24*64) +(ROW*64), ( OUT_B+(13*16)) ); // srodek starszy
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	019b      	lsls	r3, r3, #6
 800078e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	441a      	add	r2, r3
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	33d0      	adds	r3, #208	; 0xd0
 800079a:	4619      	mov	r1, r3
 800079c:	4610      	mov	r0, r2
 800079e:	f000 f860 	bl	8000862 <PrepareRowPart>


	PrepareRowPart ( BMP+48+ (0*64) +(ROW*64), ( OUT_B+(0*16)) );
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	019b      	lsls	r3, r3, #6
 80007a6:	3330      	adds	r3, #48	; 0x30
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f857 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+48+ (8*64) +(ROW*64), ( OUT_B+(1*16)) );
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	441a      	add	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3310      	adds	r3, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f000 f84b 	bl	8000862 <PrepareRowPart>

	PrepareRowPart ( BMP+48+ (16*64) +(ROW*64), ( OUT_B+(8*16)) );
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	019b      	lsls	r3, r3, #6
 80007d0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	441a      	add	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3380      	adds	r3, #128	; 0x80
 80007dc:	4619      	mov	r1, r3
 80007de:	4610      	mov	r0, r2
 80007e0:	f000 f83f 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+48+ (24*64) +(ROW*64), ( OUT_B+(9*16)) ); // najmlodszy
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	019b      	lsls	r3, r3, #6
 80007e8:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	441a      	add	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3390      	adds	r3, #144	; 0x90
 80007f4:	4619      	mov	r1, r3
 80007f6:	4610      	mov	r0, r2
 80007f8:	f000 f833 	bl	8000862 <PrepareRowPart>


	PrepareRowPart ( BMP+ (0*64) +(ROW*64), ( OUT_B+(6*16)) );
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	019b      	lsls	r3, r3, #6
 8000800:	461a      	mov	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	441a      	add	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3360      	adds	r3, #96	; 0x60
 800080a:	4619      	mov	r1, r3
 800080c:	4610      	mov	r0, r2
 800080e:	f000 f828 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+ (8*64)  +(ROW*64), ( OUT_B+(7*16)) );
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	019b      	lsls	r3, r3, #6
 8000816:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	441a      	add	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3370      	adds	r3, #112	; 0x70
 8000822:	4619      	mov	r1, r3
 8000824:	4610      	mov	r0, r2
 8000826:	f000 f81c 	bl	8000862 <PrepareRowPart>

	PrepareRowPart ( BMP+ (16*64) +(ROW*64), ( OUT_B+(14*16)) );
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	441a      	add	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	33e0      	adds	r3, #224	; 0xe0
 800083a:	4619      	mov	r1, r3
 800083c:	4610      	mov	r0, r2
 800083e:	f000 f810 	bl	8000862 <PrepareRowPart>
	PrepareRowPart ( BMP+ (24*64) +(ROW*64), ( OUT_B+(15*16)) );  //najstarszy
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	019b      	lsls	r3, r3, #6
 8000846:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	441a      	add	r2, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	33f0      	adds	r3, #240	; 0xf0
 8000852:	4619      	mov	r1, r3
 8000854:	4610      	mov	r0, r2
 8000856:	f000 f804 	bl	8000862 <PrepareRowPart>
																						//kurde gdyby algorytm na to znalezc :/
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <PrepareRowPart>:
void PrepareRowPart(uint8_t *BMP,uint8_t *OUT_B)
{
 8000862:	b480      	push	{r7}
 8000864:	b089      	sub	sp, #36	; 0x24
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
int HIGHER_BIT=0,LOWER_BIT=0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]

uint8_t NR_PIXLA=0;
 8000874:	2300      	movs	r3, #0
 8000876:	77fb      	strb	r3, [r7, #31]
int adr_ink=16;
 8000878:	2310      	movs	r3, #16
 800087a:	61bb      	str	r3, [r7, #24]

for(int i=0; i<4; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e267      	b.n	8000d52 <PrepareRowPart+0x4f0>
{
	for(int NR_BIT=0; NR_BIT<8; NR_BIT++) //ten Numer bit sie plusuje i w tym forze wiec 2x
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	e25d      	b.n	8000d44 <PrepareRowPart+0x4e2>
	{
		LOWER_BIT=0;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
		HIGHER_BIT=0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
		HIGHER_BIT=(BMP[NR_PIXLA] & 0xF0)>>4;
 8000890:	7ffb      	ldrb	r3, [r7, #31]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	091b      	lsrs	r3, r3, #4
 800089a:	b2db      	uxtb	r3, r3
 800089c:	60fb      	str	r3, [r7, #12]
		LOWER_BIT= (BMP[NR_PIXLA]  & 0x0F);
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	60bb      	str	r3, [r7, #8]
		NR_PIXLA++;
 80008ac:	7ffb      	ldrb	r3, [r7, #31]
 80008ae:	3301      	adds	r3, #1
 80008b0:	77fb      	strb	r3, [r7, #31]
		adr_ink--;
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
		//Higer
		if(HIGHER_BIT==0) goto Lower;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 8119 	beq.w	8000af2 <PrepareRowPart+0x290>

		if( HIGHER_BIT==  White || HIGHER_BIT== White2)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d002      	beq.n	80008cc <PrepareRowPart+0x6a>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d121      	bne.n	8000910 <PrepareRowPart+0xae>
		{
			OUT_B[adr_ink ]|=1 << (0);
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	6839      	ldr	r1, [r7, #0]
 80008d8:	440b      	add	r3, r1
 80008da:	f042 0201 	orr.w	r2, r2, #1
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	f042 0202 	orr.w	r2, r2, #2
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	440b      	add	r3, r1
 8000906:	f042 0204 	orr.w	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	701a      	strb	r2, [r3, #0]
			goto Lower;
 800090e:	e0f3      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Black || HIGHER_BIT== Black2 )
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <PrepareRowPart+0xba>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d118      	bne.n	800094e <PrepareRowPart+0xec>
		{
			OUT_B[adr_ink ]|=0 << (0);
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	441a      	add	r2, r3
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	6839      	ldr	r1, [r7, #0]
 8000926:	440b      	add	r3, r1
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	441a      	add	r2, r3
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	440b      	add	r3, r1
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	441a      	add	r2, r3
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	440b      	add	r3, r1
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	701a      	strb	r2, [r3, #0]
			goto Lower;
 800094c:	e0d4      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Green || HIGHER_BIT== Green2 || HIGHER_BIT== Green3)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b0a      	cmp	r3, #10
 8000952:	d005      	beq.n	8000960 <PrepareRowPart+0xfe>
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d002      	beq.n	8000960 <PrepareRowPart+0xfe>
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b06      	cmp	r3, #6
 800095e:	d11b      	bne.n	8000998 <PrepareRowPart+0x136>
		{
			OUT_B[adr_ink ]|=0 << (0);
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	441a      	add	r2, r3
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	440b      	add	r3, r1
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	6839      	ldr	r1, [r7, #0]
 800097c:	440b      	add	r3, r1
 800097e:	f042 0202 	orr.w	r2, r2, #2
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	441a      	add	r2, r3
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	440b      	add	r3, r1
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000996:	e0af      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Red)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b09      	cmp	r3, #9
 800099c:	d11b      	bne.n	80009d6 <PrepareRowPart+0x174>
		{
			OUT_B[adr_ink ]|=1 << (0);
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	440b      	add	r3, r1
 80009ac:	f042 0201 	orr.w	r2, r2, #1
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	6839      	ldr	r1, [r7, #0]
 80009be:	440b      	add	r3, r1
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	441a      	add	r2, r3
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	6839      	ldr	r1, [r7, #0]
 80009ce:	440b      	add	r3, r1
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	701a      	strb	r2, [r3, #0]
			goto Lower;
 80009d4:	e090      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Blue  || HIGHER_BIT==Blue3)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b0c      	cmp	r3, #12
 80009da:	d002      	beq.n	80009e2 <PrepareRowPart+0x180>
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d11b      	bne.n	8000a1a <PrepareRowPart+0x1b8>
		{
			OUT_B[adr_ink ]|=0 << (0);
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	441a      	add	r2, r3
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	6839      	ldr	r1, [r7, #0]
 80009ec:	440b      	add	r3, r1
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	441a      	add	r2, r3
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	6839      	ldr	r1, [r7, #0]
 80009fc:	440b      	add	r3, r1
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	6839      	ldr	r1, [r7, #0]
 8000a0e:	440b      	add	r3, r1
 8000a10:	f042 0204 	orr.w	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000a18:	e06e      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if( HIGHER_BIT == Purple || HIGHER_BIT==Purple2 || HIGHER_BIT==Purple3 )
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d005      	beq.n	8000a2c <PrepareRowPart+0x1ca>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b05      	cmp	r3, #5
 8000a24:	d002      	beq.n	8000a2c <PrepareRowPart+0x1ca>
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b0d      	cmp	r3, #13
 8000a2a:	d11e      	bne.n	8000a6a <PrepareRowPart+0x208>
		{
			OUT_B[adr_ink ]|=1 << (0);
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	440b      	add	r3, r1
 8000a3a:	f042 0201 	orr.w	r2, r2, #1
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (1);
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	441a      	add	r2, r3
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	440b      	add	r3, r1
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	440b      	add	r3, r1
 8000a60:	f042 0204 	orr.w	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000a68:	e046      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== Yellow /*|| HIGHER_BIT== Yellow2*/ )
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b0b      	cmp	r3, #11
 8000a6e:	d11e      	bne.n	8000aae <PrepareRowPart+0x24c>
		{
			OUT_B[adr_ink ]|=1 << (0);
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6839      	ldr	r1, [r7, #0]
 8000a7c:	440b      	add	r3, r1
 8000a7e:	f042 0201 	orr.w	r2, r2, #1
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6839      	ldr	r1, [r7, #0]
 8000a92:	440b      	add	r3, r1
 8000a94:	f042 0202 	orr.w	r2, r2, #2
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (2);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	6839      	ldr	r1, [r7, #0]
 8000aa6:	440b      	add	r3, r1
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000aac:	e024      	b.n	8000af8 <PrepareRowPart+0x296>
		}
		if(HIGHER_BIT== (Azure ) )
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b0e      	cmp	r3, #14
 8000ab2:	d120      	bne.n	8000af6 <PrepareRowPart+0x294>
		{
			OUT_B[adr_ink ]|=0 << (0);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	441a      	add	r2, r3
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	6839      	ldr	r1, [r7, #0]
 8000abe:	440b      	add	r3, r1
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (1);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6839      	ldr	r1, [r7, #0]
 8000ad0:	440b      	add	r3, r1
 8000ad2:	f042 0202 	orr.w	r2, r2, #2
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (2);
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	6839      	ldr	r1, [r7, #0]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f042 0204 	orr.w	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	701a      	strb	r2, [r3, #0]
			goto Lower;
 8000af0:	e002      	b.n	8000af8 <PrepareRowPart+0x296>
		if(HIGHER_BIT==0) goto Lower;
 8000af2:	bf00      	nop
 8000af4:	e000      	b.n	8000af8 <PrepareRowPart+0x296>
		}

		//Lower
		Lower:
 8000af6:	bf00      	nop

		NR_BIT++;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	3301      	adds	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
		if(LOWER_BIT==0) goto END_LOOP;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	f000 8119 	beq.w	8000d38 <PrepareRowPart+0x4d6>

		if( LOWER_BIT==  White || LOWER_BIT==  White2  )
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d002      	beq.n	8000b12 <PrepareRowPart+0x2b0>
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d121      	bne.n	8000b56 <PrepareRowPart+0x2f4>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	440b      	add	r3, r1
 8000b20:	f042 0210 	orr.w	r2, r2, #16
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	440b      	add	r3, r1
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000b54:	e0f3      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Black || LOWER_BIT==Black2)
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <PrepareRowPart+0x300>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d118      	bne.n	8000b94 <PrepareRowPart+0x332>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	441a      	add	r2, r3
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	6839      	ldr	r1, [r7, #0]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	441a      	add	r2, r3
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	441a      	add	r2, r3
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	6839      	ldr	r1, [r7, #0]
 8000b8c:	440b      	add	r3, r1
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000b92:	e0d4      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Green || LOWER_BIT==Green2 || LOWER_BIT==Green3)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2b0a      	cmp	r3, #10
 8000b98:	d005      	beq.n	8000ba6 <PrepareRowPart+0x344>
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d002      	beq.n	8000ba6 <PrepareRowPart+0x344>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d11b      	bne.n	8000bde <PrepareRowPart+0x37c>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	441a      	add	r2, r3
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f042 0220 	orr.w	r2, r2, #32
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	440b      	add	r3, r1
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000bdc:	e0af      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Red)
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d11b      	bne.n	8000c1c <PrepareRowPart+0x3ba>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	440b      	add	r3, r1
 8000bf2:	f042 0210 	orr.w	r2, r2, #16
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	441a      	add	r2, r3
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	440b      	add	r3, r1
 8000c06:	7812      	ldrb	r2, [r2, #0]
 8000c08:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	441a      	add	r2, r3
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	440b      	add	r3, r1
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000c1a:	e090      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Blue ||  LOWER_BIT==Blue3)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	2b0c      	cmp	r3, #12
 8000c20:	d002      	beq.n	8000c28 <PrepareRowPart+0x3c6>
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d11b      	bne.n	8000c60 <PrepareRowPart+0x3fe>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	441a      	add	r2, r3
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	440b      	add	r3, r1
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	441a      	add	r2, r3
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	6839      	ldr	r1, [r7, #0]
 8000c42:	440b      	add	r3, r1
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	440b      	add	r3, r1
 8000c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000c5e:	e06e      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Purple || LOWER_BIT==Purple2 || LOWER_BIT==Purple3)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d005      	beq.n	8000c72 <PrepareRowPart+0x410>
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d002      	beq.n	8000c72 <PrepareRowPart+0x410>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b0d      	cmp	r3, #13
 8000c70:	d11e      	bne.n	8000cb0 <PrepareRowPart+0x44e>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	6839      	ldr	r1, [r7, #0]
 8000c7e:	440b      	add	r3, r1
 8000c80:	f042 0210 	orr.w	r2, r2, #16
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (5);
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	440b      	add	r3, r1
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	6839      	ldr	r1, [r7, #0]
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000cae:	e046      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Yellow /*|| LOWER_BIT==Yellow2*/)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b0b      	cmp	r3, #11
 8000cb4:	d11e      	bne.n	8000cf4 <PrepareRowPart+0x492>
		{
			OUT_B[adr_ink ]|=1 << (4);
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f042 0210 	orr.w	r2, r2, #16
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	6839      	ldr	r1, [r7, #0]
 8000cd8:	440b      	add	r3, r1
 8000cda:	f042 0220 	orr.w	r2, r2, #32
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=0 << (6);
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	441a      	add	r2, r3
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	440b      	add	r3, r1
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000cf2:	e024      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}
		if(LOWER_BIT==Azure)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b0e      	cmp	r3, #14
 8000cf8:	d120      	bne.n	8000d3c <PrepareRowPart+0x4da>
		{
			OUT_B[adr_ink ]|=0 << (4);
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	441a      	add	r2, r3
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	440b      	add	r3, r1
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (5);
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	440b      	add	r3, r1
 8000d18:	f042 0220 	orr.w	r2, r2, #32
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
			OUT_B[adr_ink ]|=1 << (6);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	4413      	add	r3, r2
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	440b      	add	r3, r1
 8000d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
			goto END_LOOP;
 8000d36:	e002      	b.n	8000d3e <PrepareRowPart+0x4dc>
		if(LOWER_BIT==0) goto END_LOOP;
 8000d38:	bf00      	nop
 8000d3a:	e000      	b.n	8000d3e <PrepareRowPart+0x4dc>
		}

	END_LOOP:;
 8000d3c:	bf00      	nop
	for(int NR_BIT=0; NR_BIT<8; NR_BIT++) //ten Numer bit sie plusuje i w tym forze wiec 2x
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	f77f ad9e 	ble.w	8000888 <PrepareRowPart+0x26>
for(int i=0; i<4; i++)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	f77f ad94 	ble.w	8000882 <PrepareRowPart+0x20>

	}
}

}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3724      	adds	r7, #36	; 0x24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_QSPI_TxCpltCallback>:
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<4; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e003      	b.n	8000d7e <HAL_QSPI_TxCpltCallback+0x16>
	{
		asm("NOP");
 8000d76:	bf00      	nop
	for(int i=0; i<4; i++)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	ddf8      	ble.n	8000d76 <HAL_QSPI_TxCpltCallback+0xe>
	}
 HAL_GPIO_TogglePin(LATCH_GPIO_Port, LATCH_Pin);
 8000d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_QSPI_TxCpltCallback+0x54>)
 8000d8a:	f007 fb34 	bl	80083f6 <HAL_GPIO_TogglePin>
for(int i=0; i<4; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	e003      	b.n	8000d9c <HAL_QSPI_TxCpltCallback+0x34>
{
	asm("NOP");
 8000d94:	bf00      	nop
for(int i=0; i<4; i++)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	ddf8      	ble.n	8000d94 <HAL_QSPI_TxCpltCallback+0x2c>
}
 HAL_GPIO_TogglePin(LATCH_GPIO_Port, LATCH_Pin);
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_QSPI_TxCpltCallback+0x54>)
 8000da8:	f007 fb25 	bl	80083f6 <HAL_GPIO_TogglePin>

 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100-scr_brightness);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_QSPI_TxCpltCallback+0x58>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	224b      	movs	r2, #75	; 0x4b
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58020c00 	.word	0x58020c00
 8000dc0:	240147e8 	.word	0x240147e8

08000dc4 <HUB_75_INIT>:
void HUB_75_INIT()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_CC1(TIM5);
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <HUB_75_INIT+0x7c>)
 8000dca:	f7ff fae9 	bl	80003a0 <LL_TIM_EnableIT_CC1>
	LL_TIM_EnableCounter(TIM5);
 8000dce:	481c      	ldr	r0, [pc, #112]	; (8000e40 <HUB_75_INIT+0x7c>)
 8000dd0:	f7ff fad6 	bl	8000380 <LL_TIM_EnableCounter>

	  LL_TIM_EnableIT_CC1(TIM2);
 8000dd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dd8:	f7ff fae2 	bl	80003a0 <LL_TIM_EnableIT_CC1>
	  LL_TIM_EnableCounter(TIM2);
 8000ddc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000de0:	f7ff face 	bl	8000380 <LL_TIM_EnableCounter>

	HAL_GPIO_WritePin(LINE_A_GPIO_Port, LINE_A_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4816      	ldr	r0, [pc, #88]	; (8000e44 <HUB_75_INIT+0x80>)
 8000dea:	f007 faeb 	bl	80083c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_B_GPIO_Port, LINE_B_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <HUB_75_INIT+0x80>)
 8000df4:	f007 fae6 	bl	80083c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_C_GPIO_Port, LINE_C_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <HUB_75_INIT+0x80>)
 8000e00:	f007 fae0 	bl	80083c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port,LATCH_Pin,GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0a:	480f      	ldr	r0, [pc, #60]	; (8000e48 <HUB_75_INIT+0x84>)
 8000e0c:	f007 fada 	bl	80083c4 <HAL_GPIO_WritePin>


	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <HUB_75_INIT+0x88>)
 8000e14:	f00a ff52 	bl	800bcbc <HAL_TIM_PWM_Start>


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,97);
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HUB_75_INIT+0x88>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2261      	movs	r2, #97	; 0x61
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34

	sCommand.DataMode    = QSPI_DATA_4_LINES;
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HUB_75_INIT+0x8c>)
 8000e22:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
	  sCommand.NbData      = 256; //Here define long of data 1 ROW
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HUB_75_INIT+0x8c>)
 8000e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28

	  HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <HUB_75_INIT+0x8c>)
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <HUB_75_INIT+0x90>)
 8000e38:	f008 f962 	bl	8009100 <HAL_QSPI_Command>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40000c00 	.word	0x40000c00
 8000e44:	58020800 	.word	0x58020800
 8000e48:	58020c00 	.word	0x58020c00
 8000e4c:	240147e8 	.word	0x240147e8
 8000e50:	2400f430 	.word	0x2400f430
 8000e54:	24014714 	.word	0x24014714

08000e58 <Select_Send_Buf>:
void Select_Send_Buf(uint8_t *BITMAP)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	   if(Bufor_Send_Picker==BUFOR1)
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <Select_Send_Buf+0x4c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <Select_Send_Buf+0x26>
	   {
		   PrepareFullBuffer(BITMAP,OUT_B1);
 8000e68:	490f      	ldr	r1, [pc, #60]	; (8000ea8 <Select_Send_Buf+0x50>)
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fbde 	bl	800062c <PrepareFullBuffer>
		  			   SedingBufor_Adr=OUT_B1;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <Select_Send_Buf+0x54>)
 8000e72:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <Select_Send_Buf+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
		  			   Bufor_Send_Picker=BUFOR2;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <Select_Send_Buf+0x4c>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
		   return;
 8000e7c:	e00e      	b.n	8000e9c <Select_Send_Buf+0x44>
	   }
	   if(Bufor_Send_Picker==BUFOR2)
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <Select_Send_Buf+0x4c>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10a      	bne.n	8000e9c <Select_Send_Buf+0x44>
	   {
		   PrepareFullBuffer(BITMAP,OUT_B2);
 8000e86:	490a      	ldr	r1, [pc, #40]	; (8000eb0 <Select_Send_Buf+0x58>)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fbcf 	bl	800062c <PrepareFullBuffer>
		   SedingBufor_Adr=OUT_B2;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <Select_Send_Buf+0x54>)
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <Select_Send_Buf+0x58>)
 8000e92:	601a      	str	r2, [r3, #0]
		   Bufor_Send_Picker=BUFOR1;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <Select_Send_Buf+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
		   return;
 8000e9a:	bf00      	nop
	   }
}
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2400ccf0 	.word	0x2400ccf0
 8000ea8:	2400b8e8 	.word	0x2400b8e8
 8000eac:	2400ccec 	.word	0x2400ccec
 8000eb0:	2400c2e0 	.word	0x2400c2e0

08000eb4 <Verical_Scroll_Flow_withHOLD>:
uint8_t* Verical_Scroll_Flow_withHOLD(uint8_t *BIT_MAP, uint8_t Row_Count, uint32_t Czas_P, uint32_t Time_hold_Start,uint32_t Time_hold_Stop, uint8_t HALF)//przesuwanie w pionie z zatrzymywaniem
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	72fb      	strb	r3, [r7, #11]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 8000ec4:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <Verical_Scroll_Flow_withHOLD+0x120>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]


	if(f_start_view==1)
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d12d      	bne.n	8000f2e <Verical_Scroll_Flow_withHOLD+0x7a>
	{
		zT_View =HAL_GetTick();
 8000ed2:	f006 ff9f 	bl	8007e14 <HAL_GetTick>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a40      	ldr	r2, [pc, #256]	; (8000fdc <Verical_Scroll_Flow_withHOLD+0x128>)
 8000eda:	6013      	str	r3, [r2, #0]
		f_start_view=2;
 8000edc:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000ede:	2202      	movs	r2, #2
 8000ee0:	601a      	str	r2, [r3, #0]

		   for(int i=0; i<32; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e01c      	b.n	8000f22 <Verical_Scroll_Flow_withHOLD+0x6e>
		  	{
		  		  for(int j=0; j<64; j++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	e013      	b.n	8000f16 <Verical_Scroll_Flow_withHOLD+0x62>
		  		  {
		  			Conv_BP[j+(i*64)]=BIT_MAP[ (k*64) +j+ (i*64) ];
 8000eee:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <Verical_Scroll_Flow_withHOLD+0x12c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	019b      	lsls	r3, r3, #6
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	0192      	lsls	r2, r2, #6
 8000ef8:	441a      	add	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	441a      	add	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	0199      	lsls	r1, r3, #6
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	440b      	add	r3, r1
 8000f0a:	7811      	ldrb	r1, [r2, #0]
 8000f0c:	4a35      	ldr	r2, [pc, #212]	; (8000fe4 <Verical_Scroll_Flow_withHOLD+0x130>)
 8000f0e:	54d1      	strb	r1, [r2, r3]
		  		  for(int j=0; j<64; j++)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	3301      	adds	r3, #1
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1a:	dde8      	ble.n	8000eee <Verical_Scroll_Flow_withHOLD+0x3a>
		   for(int i=0; i<32; i++)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b1f      	cmp	r3, #31
 8000f26:	dddf      	ble.n	8000ee8 <Verical_Scroll_Flow_withHOLD+0x34>
		  		  }
		  	}
		   Select_Send_Buf(Conv_BP);
 8000f28:	482e      	ldr	r0, [pc, #184]	; (8000fe4 <Verical_Scroll_Flow_withHOLD+0x130>)
 8000f2a:	f7ff ff95 	bl	8000e58 <Select_Send_Buf>
	}
	if(zT_View+Time_hold_Start <HAL_GetTick() && f_start_view==2)
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <Verical_Scroll_Flow_withHOLD+0x128>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	18d4      	adds	r4, r2, r3
 8000f36:	f006 ff6d 	bl	8007e14 <HAL_GetTick>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	d20b      	bcs.n	8000f58 <Verical_Scroll_Flow_withHOLD+0xa4>
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d107      	bne.n	8000f58 <Verical_Scroll_Flow_withHOLD+0xa4>
			{
		zT_View =HAL_GetTick();
 8000f48:	f006 ff64 	bl	8007e14 <HAL_GetTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <Verical_Scroll_Flow_withHOLD+0x128>)
 8000f50:	6013      	str	r3, [r2, #0]
		f_start_view=3;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	601a      	str	r2, [r3, #0]
			}

	if(f_start_view==3)
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d118      	bne.n	8000f92 <Verical_Scroll_Flow_withHOLD+0xde>
	{

		Vertical_Scroll_Flow(BIT_MAP,Row_Count,Czas_P, HALF);
 8000f60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f64:	7af9      	ldrb	r1, [r7, #11]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f83d 	bl	8000fe8 <Vertical_Scroll_Flow>
		 if( SCR_PROCESS==SCR_VIEWING_PROCESS_DONE) { SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY; f_start_view=4; }
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <Verical_Scroll_Flow_withHOLD+0x120>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d106      	bne.n	8000f84 <Verical_Scroll_Flow_withHOLD+0xd0>
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <Verical_Scroll_Flow_withHOLD+0x120>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e006      	b.n	8000f92 <Verical_Scroll_Flow_withHOLD+0xde>

		 else{
			 zT_View =HAL_GetTick();
 8000f84:	f006 ff46 	bl	8007e14 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <Verical_Scroll_Flow_withHOLD+0x128>)
 8000f8c:	6013      	str	r3, [r2, #0]

			 return Conv_BP;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <Verical_Scroll_Flow_withHOLD+0x130>)
 8000f90:	e01b      	b.n	8000fca <Verical_Scroll_Flow_withHOLD+0x116>
		 }
	}

if(zT_View+Time_hold_Stop <HAL_GetTick() && f_start_view==4 )
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <Verical_Scroll_Flow_withHOLD+0x128>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	18d4      	adds	r4, r2, r3
 8000f9a:	f006 ff3b 	bl	8007e14 <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	429c      	cmp	r4, r3
 8000fa2:	d211      	bcs.n	8000fc8 <Verical_Scroll_Flow_withHOLD+0x114>
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d10d      	bne.n	8000fc8 <Verical_Scroll_Flow_withHOLD+0x114>
			{
		zT_View =HAL_GetTick();
 8000fac:	f006 ff32 	bl	8007e14 <HAL_GetTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <Verical_Scroll_Flow_withHOLD+0x128>)
 8000fb4:	6013      	str	r3, [r2, #0]
		f_start_view=1;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <Verical_Scroll_Flow_withHOLD+0x124>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
		Select_Send_Buf(Conv_BP);
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <Verical_Scroll_Flow_withHOLD+0x130>)
 8000fbe:	f7ff ff4b 	bl	8000e58 <Select_Send_Buf>
		SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <Verical_Scroll_Flow_withHOLD+0x120>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
			}
return Conv_BP;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <Verical_Scroll_Flow_withHOLD+0x130>)
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2400f428 	.word	0x2400f428
 8000fd8:	24000000 	.word	0x24000000
 8000fdc:	2400cce8 	.word	0x2400cce8
 8000fe0:	2400ccd8 	.word	0x2400ccd8
 8000fe4:	240091d8 	.word	0x240091d8

08000fe8 <Vertical_Scroll_Flow>:
uint8_t* Vertical_Scroll_Flow(uint8_t *BIT_MAP, uint8_t Row_Count, uint32_t Czas_P, uint8_t HALF) //plynne przesuwanie w pionie
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	72fb      	strb	r3, [r7, #11]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	72bb      	strb	r3, [r7, #10]
	//this function execution maks 350us
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <Vertical_Scroll_Flow+0x13c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]

 if(zT_SCROLL+Czas_P < HAL_GetTick())
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <Vertical_Scroll_Flow+0x140>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	18d4      	adds	r4, r2, r3
 800100a:	f006 ff03 	bl	8007e14 <HAL_GetTick>
 800100e:	4603      	mov	r3, r0
 8001010:	429c      	cmp	r4, r3
 8001012:	f080 8082 	bcs.w	800111a <Vertical_Scroll_Flow+0x132>
 {

	   for(int i=0; i<32; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e01c      	b.n	8001056 <Vertical_Scroll_Flow+0x6e>
	  	{
	  		  for(int j=0; j<64; j++)
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	e013      	b.n	800104a <Vertical_Scroll_Flow+0x62>
	  		  {
	  			 Conv_BP[j+(i*64)]=BIT_MAP[ (k*64) +j+ (i*64) ];
 8001022:	4b42      	ldr	r3, [pc, #264]	; (800112c <Vertical_Scroll_Flow+0x144>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	0192      	lsls	r2, r2, #6
 800102c:	441a      	add	r2, r3
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4413      	add	r3, r2
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	441a      	add	r2, r3
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	0199      	lsls	r1, r3, #6
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	440b      	add	r3, r1
 800103e:	7811      	ldrb	r1, [r2, #0]
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <Vertical_Scroll_Flow+0x148>)
 8001042:	54d1      	strb	r1, [r2, r3]
	  		  for(int j=0; j<64; j++)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	3301      	adds	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b3f      	cmp	r3, #63	; 0x3f
 800104e:	dde8      	ble.n	8001022 <Vertical_Scroll_Flow+0x3a>
	   for(int i=0; i<32; i++)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	3301      	adds	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	2b1f      	cmp	r3, #31
 800105a:	dddf      	ble.n	800101c <Vertical_Scroll_Flow+0x34>
	  		  }
	  	}
	   k++;
 800105c:	4b33      	ldr	r3, [pc, #204]	; (800112c <Vertical_Scroll_Flow+0x144>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <Vertical_Scroll_Flow+0x144>)
 8001064:	6013      	str	r3, [r2, #0]

	   if(k> (Row_Count/2) )
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <Vertical_Scroll_Flow+0x144>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d22f      	bcs.n	80010d6 <Vertical_Scroll_Flow+0xee>
	   {
		   for(int f=0; f<l; f++)
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e022      	b.n	80010c2 <Vertical_Scroll_Flow+0xda>
		  	{
		  		  for(int d=0; d<64; d++)
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e019      	b.n	80010b6 <Vertical_Scroll_Flow+0xce>
		  		  {
		  			 Conv_BP[ (( (Row_Count/2) -l) *64 ) + d+(f*64)]=BIT_MAP[ d+(f*64) ];
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	019a      	lsls	r2, r3, #6
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	441a      	add	r2, r3
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <Vertical_Scroll_Flow+0x14c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1acb      	subs	r3, r1, r3
 800109e:	019b      	lsls	r3, r3, #6
 80010a0:	6979      	ldr	r1, [r7, #20]
 80010a2:	0189      	lsls	r1, r1, #6
 80010a4:	4419      	add	r1, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	440b      	add	r3, r1
 80010aa:	7811      	ldrb	r1, [r2, #0]
 80010ac:	4a20      	ldr	r2, [pc, #128]	; (8001130 <Vertical_Scroll_Flow+0x148>)
 80010ae:	54d1      	strb	r1, [r2, r3]
		  		  for(int d=0; d<64; d++)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	3301      	adds	r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b3f      	cmp	r3, #63	; 0x3f
 80010ba:	dde2      	ble.n	8001082 <Vertical_Scroll_Flow+0x9a>
		   for(int f=0; f<l; f++)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <Vertical_Scroll_Flow+0x14c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3d7      	bcc.n	800107c <Vertical_Scroll_Flow+0x94>
		  		  }
		  	}

		   l++;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <Vertical_Scroll_Flow+0x14c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <Vertical_Scroll_Flow+0x14c>)
 80010d4:	6013      	str	r3, [r2, #0]
	   }

	   if( k== (Row_Count+1) || (HALF &&   k==( Row_Count/2) + 1 ) )
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <Vertical_Scroll_Flow+0x144>)
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00a      	beq.n	80010f8 <Vertical_Scroll_Flow+0x110>
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d010      	beq.n	800110a <Vertical_Scroll_Flow+0x122>
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <Vertical_Scroll_Flow+0x144>)
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d108      	bne.n	800110a <Vertical_Scroll_Flow+0x122>
	   {
		   k=0; l=0;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <Vertical_Scroll_Flow+0x144>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <Vertical_Scroll_Flow+0x14c>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
		   SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <Vertical_Scroll_Flow+0x13c>)
 8001106:	2202      	movs	r2, #2
 8001108:	701a      	strb	r2, [r3, #0]
	   }

	   Select_Send_Buf(Conv_BP);
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <Vertical_Scroll_Flow+0x148>)
 800110c:	f7ff fea4 	bl	8000e58 <Select_Send_Buf>

	   zT_SCROLL=HAL_GetTick();
 8001110:	f006 fe80 	bl	8007e14 <HAL_GetTick>
 8001114:	4603      	mov	r3, r0
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <Vertical_Scroll_Flow+0x140>)
 8001118:	6013      	str	r3, [r2, #0]
}
 return Conv_BP;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <Vertical_Scroll_Flow+0x148>)
}
 800111c:	4618      	mov	r0, r3
 800111e:	3724      	adds	r7, #36	; 0x24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	2400f428 	.word	0x2400f428
 8001128:	2400cce4 	.word	0x2400cce4
 800112c:	2400ccd8 	.word	0x2400ccd8
 8001130:	240091d8 	.word	0x240091d8
 8001134:	2400ccdc 	.word	0x2400ccdc

08001138 <Viewing_BitMapBy_Time>:
uint8_t* Viewing_BitMapBy_Time(uint8_t *BIT_MAP, uint32_t Time)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <Viewing_BitMapBy_Time+0x60>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
if(start_view_by_time==1)
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <Viewing_BitMapBy_Time+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <Viewing_BitMapBy_Time+0x2e>
{
	zT_View =HAL_GetTick();
 8001150:	f006 fe60 	bl	8007e14 <HAL_GetTick>
 8001154:	4603      	mov	r3, r0
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <Viewing_BitMapBy_Time+0x68>)
 8001158:	6013      	str	r3, [r2, #0]
	start_view_by_time=0;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <Viewing_BitMapBy_Time+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
	Select_Send_Buf(BIT_MAP);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fe79 	bl	8000e58 <Select_Send_Buf>
}

if(zT_View+Time <HAL_GetTick() )
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <Viewing_BitMapBy_Time+0x68>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	18d4      	adds	r4, r2, r3
 800116e:	f006 fe51 	bl	8007e14 <HAL_GetTick>
 8001172:	4603      	mov	r3, r0
 8001174:	429c      	cmp	r4, r3
 8001176:	d20a      	bcs.n	800118e <Viewing_BitMapBy_Time+0x56>
		{
	zT_View =HAL_GetTick();
 8001178:	f006 fe4c 	bl	8007e14 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <Viewing_BitMapBy_Time+0x68>)
 8001180:	6013      	str	r3, [r2, #0]
	start_view_by_time=1;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <Viewing_BitMapBy_Time+0x64>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
	SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <Viewing_BitMapBy_Time+0x60>)
 800118a:	2202      	movs	r2, #2
 800118c:	701a      	strb	r2, [r3, #0]
		}

return BIT_MAP;
 800118e:	687b      	ldr	r3, [r7, #4]
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	2400f428 	.word	0x2400f428
 800119c:	2400f42c 	.word	0x2400f42c
 80011a0:	2400cce8 	.word	0x2400cce8

080011a4 <Horizontal_SCROLL>:
uint8_t* Horizontal_SCROLL(uint8_t *BIT_MAP, uint16_t Hor_Pixel_Count,uint32_t Time_hold, uint32_t Czas_P)
{																   //^^ czas postoju na poczatku  //Co ile przesuniecie o jeden pixel
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	817b      	strh	r3, [r7, #10]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <Horizontal_SCROLL+0x120>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
if(f_start_view==1)
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <Horizontal_SCROLL+0x124>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12f      	bne.n	8001222 <Horizontal_SCROLL+0x7e>
{
	zT_View =HAL_GetTick();
 80011c2:	f006 fe27 	bl	8007e14 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a40      	ldr	r2, [pc, #256]	; (80012cc <Horizontal_SCROLL+0x128>)
 80011ca:	6013      	str	r3, [r2, #0]
	   for(int i=0; i<32; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e01e      	b.n	8001210 <Horizontal_SCROLL+0x6c>
	  	{
	  		  for(int j=0; j<64; j++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	e015      	b.n	8001204 <Horizontal_SCROLL+0x60>
	  		  {
	  			 Conv_BP[j+(i*64)]= BIT_MAP[ j+(i*(Hor_Pixel_Count/2)) ];
 80011d8:	897b      	ldrh	r3, [r7, #10]
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fb03 f202 	mul.w	r2, r3, r2
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	441a      	add	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	0199      	lsls	r1, r3, #6
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	440b      	add	r3, r1
 80011f8:	7811      	ldrb	r1, [r2, #0]
 80011fa:	4a35      	ldr	r2, [pc, #212]	; (80012d0 <Horizontal_SCROLL+0x12c>)
 80011fc:	54d1      	strb	r1, [r2, r3]
	  		  for(int j=0; j<64; j++)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	3301      	adds	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b3f      	cmp	r3, #63	; 0x3f
 8001208:	dde6      	ble.n	80011d8 <Horizontal_SCROLL+0x34>
	   for(int i=0; i<32; i++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b1f      	cmp	r3, #31
 8001214:	dddd      	ble.n	80011d2 <Horizontal_SCROLL+0x2e>
	  		  }
	  	}
	   Select_Send_Buf(Conv_BP);
 8001216:	482e      	ldr	r0, [pc, #184]	; (80012d0 <Horizontal_SCROLL+0x12c>)
 8001218:	f7ff fe1e 	bl	8000e58 <Select_Send_Buf>
	f_start_view=2;
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <Horizontal_SCROLL+0x124>)
 800121e:	2202      	movs	r2, #2
 8001220:	601a      	str	r2, [r3, #0]
}
if(zT_View+Time_hold <HAL_GetTick() && f_start_view==2)
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <Horizontal_SCROLL+0x128>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	18d4      	adds	r4, r2, r3
 800122a:	f006 fdf3 	bl	8007e14 <HAL_GetTick>
 800122e:	4603      	mov	r3, r0
 8001230:	429c      	cmp	r4, r3
 8001232:	d20b      	bcs.n	800124c <Horizontal_SCROLL+0xa8>
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <Horizontal_SCROLL+0x124>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d107      	bne.n	800124c <Horizontal_SCROLL+0xa8>
		{
	zT_View =HAL_GetTick();
 800123c:	f006 fdea 	bl	8007e14 <HAL_GetTick>
 8001240:	4603      	mov	r3, r0
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <Horizontal_SCROLL+0x128>)
 8001244:	6013      	str	r3, [r2, #0]
	f_start_view=3;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <Horizontal_SCROLL+0x124>)
 8001248:	2203      	movs	r2, #3
 800124a:	601a      	str	r2, [r3, #0]
		}
if(f_start_view==3)
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <Horizontal_SCROLL+0x124>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d117      	bne.n	8001284 <Horizontal_SCROLL+0xe0>
	{
	 HOR_SCROLL_PROCES(BIT_MAP, Czas_P,Hor_Pixel_Count);
 8001254:	897b      	ldrh	r3, [r7, #10]
 8001256:	461a      	mov	r2, r3
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f83a 	bl	80012d4 <HOR_SCROLL_PROCES>
	 if( SCR_PROCESS==SCR_VIEWING_PROCESS_DONE) { SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY; f_start_view=4; }
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <Horizontal_SCROLL+0x120>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d106      	bne.n	8001276 <Horizontal_SCROLL+0xd2>
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <Horizontal_SCROLL+0x120>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <Horizontal_SCROLL+0x124>)
 8001270:	2204      	movs	r2, #4
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e006      	b.n	8001284 <Horizontal_SCROLL+0xe0>
	 else{
		 zT_View =HAL_GetTick();
 8001276:	f006 fdcd 	bl	8007e14 <HAL_GetTick>
 800127a:	4603      	mov	r3, r0
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <Horizontal_SCROLL+0x128>)
 800127e:	6013      	str	r3, [r2, #0]
		 return Conv_BP;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <Horizontal_SCROLL+0x12c>)
 8001282:	e01b      	b.n	80012bc <Horizontal_SCROLL+0x118>
	 }
	}
if(zT_View+Time_hold <HAL_GetTick() && f_start_view==4 )
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <Horizontal_SCROLL+0x128>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	18d4      	adds	r4, r2, r3
 800128c:	f006 fdc2 	bl	8007e14 <HAL_GetTick>
 8001290:	4603      	mov	r3, r0
 8001292:	429c      	cmp	r4, r3
 8001294:	d211      	bcs.n	80012ba <Horizontal_SCROLL+0x116>
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <Horizontal_SCROLL+0x124>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b04      	cmp	r3, #4
 800129c:	d10d      	bne.n	80012ba <Horizontal_SCROLL+0x116>
		{
	zT_View =HAL_GetTick();
 800129e:	f006 fdb9 	bl	8007e14 <HAL_GetTick>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <Horizontal_SCROLL+0x128>)
 80012a6:	6013      	str	r3, [r2, #0]
	f_start_view=1;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <Horizontal_SCROLL+0x124>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
	 Select_Send_Buf(Conv_BP);
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <Horizontal_SCROLL+0x12c>)
 80012b0:	f7ff fdd2 	bl	8000e58 <Select_Send_Buf>
	SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <Horizontal_SCROLL+0x120>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
		}
 return Conv_BP;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <Horizontal_SCROLL+0x12c>)
}
 80012bc:	4618      	mov	r0, r3
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	2400f428 	.word	0x2400f428
 80012c8:	24000000 	.word	0x24000000
 80012cc:	2400cce8 	.word	0x2400cce8
 80012d0:	240091d8 	.word	0x240091d8

080012d4 <HOR_SCROLL_PROCES>:

uint8_t Wpr_Od_Wyzszej_cz_Bajtu=1;

uint8_t* HOR_SCROLL_PROCES(uint8_t *BIT_MAP, uint32_t Time_Pr, uint16_t Hor_Pixel_Count)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
	SCR_PROCESS=SCR_VIEWING_PROCESS_BUSY;
 80012e2:	4b59      	ldr	r3, [pc, #356]	; (8001448 <HOR_SCROLL_PROCES+0x174>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]

	 if(zT_SCROLL+Time_Pr < HAL_GetTick())
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HOR_SCROLL_PROCES+0x178>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	18d4      	adds	r4, r2, r3
 80012f0:	f006 fd90 	bl	8007e14 <HAL_GetTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	429c      	cmp	r4, r3
 80012f8:	f080 80a0 	bcs.w	800143c <HOR_SCROLL_PROCES+0x168>
	 {
		   for(int i=0; i<32; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e06d      	b.n	80013de <HOR_SCROLL_PROCES+0x10a>
		  	{

		  		  for(int j=0; j<65; j++)
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	e064      	b.n	80013d2 <HOR_SCROLL_PROCES+0xfe>
		  		  {
		  			  if(Wpr_Od_Wyzszej_cz_Bajtu)
 8001308:	4b51      	ldr	r3, [pc, #324]	; (8001450 <HOR_SCROLL_PROCES+0x17c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d048      	beq.n	80013a2 <HOR_SCROLL_PROCES+0xce>
		  			  {
		  				Conv_BP[j+(i*64)] =0;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	019a      	lsls	r2, r3, #6
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4413      	add	r3, r2
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 800131a:	2100      	movs	r1, #0
 800131c:	54d1      	strb	r1, [r2, r3]
		  				Conv_BP[j+(i*64) ]        |= (BIT_MAP[ k+ j+(i* (Hor_Pixel_Count/2))    ] & 0x0F) << 4 ;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	019a      	lsls	r2, r3, #6
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4413      	add	r3, r2
 8001326:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	b25a      	sxtb	r2, r3
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	440b      	add	r3, r1
 8001334:	88f9      	ldrh	r1, [r7, #6]
 8001336:	0849      	lsrs	r1, r1, #1
 8001338:	b289      	uxth	r1, r1
 800133a:	4608      	mov	r0, r1
 800133c:	6979      	ldr	r1, [r7, #20]
 800133e:	fb01 f100 	mul.w	r1, r1, r0
 8001342:	440b      	add	r3, r1
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	440b      	add	r3, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b259      	sxtb	r1, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	019a      	lsls	r2, r3, #6
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4413      	add	r3, r2
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4a3d      	ldr	r2, [pc, #244]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 800135e:	54d1      	strb	r1, [r2, r3]
		  				Conv_BP[j+(i*64) ]        |= (BIT_MAP[ k+ j+(i* (Hor_Pixel_Count/2)) +1 ] & 0xF0) >> 4 ;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	019a      	lsls	r2, r3, #6
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4413      	add	r3, r2
 8001368:	4a3a      	ldr	r2, [pc, #232]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 800136a:	5cd1      	ldrb	r1, [r2, r3]
 800136c:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4413      	add	r3, r2
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	0852      	lsrs	r2, r2, #1
 8001378:	b292      	uxth	r2, r2
 800137a:	4610      	mov	r0, r2
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	fb02 f200 	mul.w	r2, r2, r0
 8001382:	4413      	add	r3, r2
 8001384:	3301      	adds	r3, #1
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	b2da      	uxtb	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	0198      	lsls	r0, r3, #6
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4403      	add	r3, r0
 8001398:	430a      	orrs	r2, r1
 800139a:	b2d1      	uxtb	r1, r2
 800139c:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 800139e:	54d1      	strb	r1, [r2, r3]
 80013a0:	e014      	b.n	80013cc <HOR_SCROLL_PROCES+0xf8>
		  			  }
		  			  else
		  			  {
		  				Conv_BP[j+(i*64)]= BIT_MAP[ k+ j+(i* (Hor_Pixel_Count/2)) ];
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4413      	add	r3, r2
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	0852      	lsrs	r2, r2, #1
 80013ae:	b292      	uxth	r2, r2
 80013b0:	4611      	mov	r1, r2
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	fb02 f201 	mul.w	r2, r2, r1
 80013b8:	4413      	add	r3, r2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	441a      	add	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	0199      	lsls	r1, r3, #6
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	440b      	add	r3, r1
 80013c6:	7811      	ldrb	r1, [r2, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 80013ca:	54d1      	strb	r1, [r2, r3]
		  		  for(int j=0; j<65; j++)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	3301      	adds	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	2b40      	cmp	r3, #64	; 0x40
 80013d6:	dd97      	ble.n	8001308 <HOR_SCROLL_PROCES+0x34>
		   for(int i=0; i<32; i++)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b1f      	cmp	r3, #31
 80013e2:	dd8e      	ble.n	8001302 <HOR_SCROLL_PROCES+0x2e>
		  			  }
		  		  }
		  	}
			 if(Wpr_Od_Wyzszej_cz_Bajtu)
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HOR_SCROLL_PROCES+0x17c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HOR_SCROLL_PROCES+0x12a>
			 {
				Wpr_Od_Wyzszej_cz_Bajtu=0;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HOR_SCROLL_PROCES+0x17c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
				  k++;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e002      	b.n	8001404 <HOR_SCROLL_PROCES+0x130>
			 }
			 else
			 {
				 Wpr_Od_Wyzszej_cz_Bajtu=1;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HOR_SCROLL_PROCES+0x17c>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
			 }

		   if( k== ( (Hor_Pixel_Count-128) /2 )+1   )
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	3b80      	subs	r3, #128	; 0x80
 8001408:	2b00      	cmp	r3, #0
 800140a:	da00      	bge.n	800140e <HOR_SCROLL_PROCES+0x13a>
 800140c:	3301      	adds	r3, #1
 800140e:	105b      	asrs	r3, r3, #1
 8001410:	3301      	adds	r3, #1
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4293      	cmp	r3, r2
 8001418:	d108      	bne.n	800142c <HOR_SCROLL_PROCES+0x158>
		   {
			   k=0; l=0;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HOR_SCROLL_PROCES+0x184>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HOR_SCROLL_PROCES+0x188>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
			   SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HOR_SCROLL_PROCES+0x174>)
 8001428:	2202      	movs	r2, #2
 800142a:	701a      	strb	r2, [r3, #0]
		   }
		   zT_SCROLL=HAL_GetTick();
 800142c:	f006 fcf2 	bl	8007e14 <HAL_GetTick>
 8001430:	4603      	mov	r3, r0
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <HOR_SCROLL_PROCES+0x178>)
 8001434:	6013      	str	r3, [r2, #0]
		   Select_Send_Buf(Conv_BP);
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
 8001438:	f7ff fd0e 	bl	8000e58 <Select_Send_Buf>



	}

	 return Conv_BP;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HOR_SCROLL_PROCES+0x180>)
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	2400f428 	.word	0x2400f428
 800144c:	2400cce4 	.word	0x2400cce4
 8001450:	24000004 	.word	0x24000004
 8001454:	240091d8 	.word	0x240091d8
 8001458:	2400ccd8 	.word	0x2400ccd8
 800145c:	2400ccdc 	.word	0x2400ccdc

08001460 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b20      	cmp	r3, #32
 8001472:	d101      	bne.n	8001478 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	2b40      	cmp	r3, #64	; 0x40
 8001498:	d101      	bne.n	800149e <LL_USART_IsActiveFlag_TC+0x18>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_USART_IsActiveFlag_TC+0x1a>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	2b80      	cmp	r3, #128	; 0x80
 80014be:	d101      	bne.n	80014c4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2208      	movs	r2, #8
 80014de:	621a      	str	r2, [r3, #32]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	621a      	str	r2, [r3, #32]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f043 0220 	orr.w	r2, r3, #32
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	d101      	bne.n	80015be <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015dc:	2b40      	cmp	r3, #64	; 0x40
 80015de:	d101      	bne.n	80015e4 <LL_USART_IsEnabledIT_TC+0x18>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <LL_USART_IsEnabledIT_TC+0x1a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	2b80      	cmp	r3, #128	; 0x80
 8001604:	d101      	bne.n	800160a <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <INIT_UART3>:

uint8_t Rx_USART3[RX_BUFFER_SIZE];
uint8_t Tx_USART3[TX_BUFFER_SIZE];

void INIT_UART3()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	  Thuart3.Instance=USART3;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <INIT_UART3+0x54>)
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <INIT_UART3+0x58>)
 8001658:	601a      	str	r2, [r3, #0]
	  Thuart3.pTxBuffPtr=Tx_USART3;
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <INIT_UART3+0x54>)
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <INIT_UART3+0x5c>)
 800165e:	605a      	str	r2, [r3, #4]
	  Thuart3.TxXferSize=sizeof(Tx_USART3);
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <INIT_UART3+0x54>)
 8001662:	22dc      	movs	r2, #220	; 0xdc
 8001664:	811a      	strh	r2, [r3, #8]
	  Thuart3.TxXferCount=0;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <INIT_UART3+0x54>)
 8001668:	2200      	movs	r2, #0
 800166a:	815a      	strh	r2, [r3, #10]
	  Thuart3.TxXSendCount=0;
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <INIT_UART3+0x54>)
 800166e:	2200      	movs	r2, #0
 8001670:	819a      	strh	r2, [r3, #12]
	  Thuart3.pRxBuffPtr=Rx_USART3;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <INIT_UART3+0x54>)
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <INIT_UART3+0x60>)
 8001676:	611a      	str	r2, [r3, #16]
	  Thuart3.RxXferSize=sizeof(Rx_USART3);
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <INIT_UART3+0x54>)
 800167a:	22c8      	movs	r2, #200	; 0xc8
 800167c:	829a      	strh	r2, [r3, #20]
	  Thuart3.RxXPrevferCount=0;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <INIT_UART3+0x54>)
 8001680:	2200      	movs	r2, #0
 8001682:	831a      	strh	r2, [r3, #24]
	  Thuart3.RecTimeout=ReceiveTimeout;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <INIT_UART3+0x54>)
 8001686:	221e      	movs	r2, #30
 8001688:	621a      	str	r2, [r3, #32]
	  Thuart3.zT=0;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <INIT_UART3+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
	  Thuart3.RecSomething=false;
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <INIT_UART3+0x54>)
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	  InitEcho(&Thuart3);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <INIT_UART3+0x54>)
 800169a:	f000 f80b 	bl	80016b4 <InitEcho>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2400f468 	.word	0x2400f468
 80016a8:	40004800 	.word	0x40004800
 80016ac:	2400f490 	.word	0x2400f490
 80016b0:	2400f56c 	.word	0x2400f56c

080016b4 <InitEcho>:

void InitEcho(UART_Handle_Td *USARTx)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  LL_USART_ClearFlag_ORE(USARTx->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff06 	bl	80014d2 <LL_USART_ClearFlag_ORE>
  LL_USART_EnableIT_RXNE(USARTx->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff1b 	bl	8001506 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USARTx->Instance);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff46 	bl	8001566 <LL_USART_EnableIT_ERROR>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HandleEcho>:

void HandleEcho(UART_Handle_Td *USARTx)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if(USARTx->RxXferCount!=0)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8adb      	ldrh	r3, [r3, #22]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HandleEcho+0x1a>
	{
		USARTx->RecSomething=true;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if(USARTx->RxXferCount!=USARTx->RxXPrevferCount)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8adb      	ldrh	r3, [r3, #22]
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8b1b      	ldrh	r3, [r3, #24]
 8001708:	b29b      	uxth	r3, r3
 800170a:	429a      	cmp	r2, r3
 800170c:	d009      	beq.n	8001722 <HandleEcho+0x3e>
	{
		USARTx->RxXPrevferCount= USARTx->RxXferCount ;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	8adb      	ldrh	r3, [r3, #22]
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	831a      	strh	r2, [r3, #24]
		USARTx->zT=HAL_GetTick();
 8001718:	f006 fb7c 	bl	8007e14 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	61da      	str	r2, [r3, #28]
	}
	if( (USARTx->zT + USARTx->RecTimeout  < HAL_GetTick() )  && USARTx->RecSomething )
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	18d4      	adds	r4, r2, r3
 800172c:	f006 fb72 	bl	8007e14 <HAL_GetTick>
 8001730:	4603      	mov	r3, r0
 8001732:	429c      	cmp	r4, r3
 8001734:	d268      	bcs.n	8001808 <HandleEcho+0x124>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d063      	beq.n	8001808 <HandleEcho+0x124>
	{
		USARTx->RecSomething=false;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		USARTx->zT=HAL_GetTick();
 8001748:	f006 fb64 	bl	8007e14 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	61da      	str	r2, [r3, #28]


		int status=Conv_String_From_UART_BMP( USARTx->pRxBuffPtr ,  USARTx->RxXferCount) ;   // musi byc wywolana znim z zeruje ten RxXferCount!
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	8adb      	ldrh	r3, [r3, #22]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f004 fdc0 	bl	80062e4 <Conv_String_From_UART_BMP>
 8001764:	60f8      	str	r0, [r7, #12]

		 USARTx->RxXferCount=0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	82da      	strh	r2, [r3, #22]

		for(int i=0; i<USARTx->TxXferSize; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e008      	b.n	8001784 <HandleEcho+0xa0>
					 {
						 USARTx->pTxBuffPtr[i]=0;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4413      	add	r3, r2
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<USARTx->TxXferSize; i++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	891b      	ldrh	r3, [r3, #8]
 8001788:	461a      	mov	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4293      	cmp	r3, r2
 800178e:	dbf0      	blt.n	8001772 <HandleEcho+0x8e>
					 }




		if(status==20)  //status==0 non error
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b14      	cmp	r3, #20
 8001794:	d10a      	bne.n	80017ac <HandleEcho+0xc8>
		{
			USARTx->TxXferCount=sprintf(  (char*)  USARTx->pTxBuffPtr ,"Przyjołem, 2 linie powinny być wyśw. poprawnie\r");
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	491d      	ldr	r1, [pc, #116]	; (8001810 <HandleEcho+0x12c>)
 800179c:	4618      	mov	r0, r3
 800179e:	f00c fc7f 	bl	800e0a0 <siprintf>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	815a      	strh	r2, [r3, #10]
 80017aa:	e018      	b.n	80017de <HandleEcho+0xfa>
		}
		else if(status==40)  //status==0 non error
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b28      	cmp	r3, #40	; 0x28
 80017b0:	d10a      	bne.n	80017c8 <HandleEcho+0xe4>
		{
			USARTx->TxXferCount=sprintf(  (char*)  USARTx->pTxBuffPtr ,"Przyjołem, 4 linie powinny być wyśw. poprawnie\r");
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4917      	ldr	r1, [pc, #92]	; (8001814 <HandleEcho+0x130>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00c fc71 	bl	800e0a0 <siprintf>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	815a      	strh	r2, [r3, #10]
 80017c6:	e00a      	b.n	80017de <HandleEcho+0xfa>
		}
		else
		{
			USARTx->TxXferCount=sprintf(  (char*)  USARTx->pTxBuffPtr ,"Linia %i jest za długa lub wystąpił inny błąd \r", status);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4912      	ldr	r1, [pc, #72]	; (8001818 <HandleEcho+0x134>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00c fc65 	bl	800e0a0 <siprintf>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	815a      	strh	r2, [r3, #10]
		}



		 for(int i=0; i< (USARTx->RxXferSize) ; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	e008      	b.n	80017f6 <HandleEcho+0x112>
		 {
			 USARTx->pRxBuffPtr[i]=0;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4413      	add	r3, r2
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i< (USARTx->RxXferSize) ; i++)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	3301      	adds	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	8a9b      	ldrh	r3, [r3, #20]
 80017fa:	461a      	mov	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4293      	cmp	r3, r2
 8001800:	dbf0      	blt.n	80017e4 <HandleEcho+0x100>
		 }
			 Print_Data(USARTx);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f822 	bl	800184c <Print_Data>
	}
}
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	0800e914 	.word	0x0800e914
 8001814:	0800e948 	.word	0x0800e948
 8001818:	0800e97c 	.word	0x0800e97c

0800181c <USART_CharReception_Callback>:

void USART_CharReception_Callback(UART_Handle_Td *USARTx)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	USARTx->pRxBuffPtr[USARTx->RxXferCount++] = LL_USART_ReceiveData8(USARTx->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8adb      	ldrh	r3, [r3, #22]
 8001830:	b29b      	uxth	r3, r3
 8001832:	1c59      	adds	r1, r3, #1
 8001834:	b28c      	uxth	r4, r1
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	82cc      	strh	r4, [r1, #22]
 800183a:	18d4      	adds	r4, r2, r3
 800183c:	f7ff feec 	bl	8001618 <LL_USART_ReceiveData8>
 8001840:	4603      	mov	r3, r0
 8001842:	7023      	strb	r3, [r4, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}

0800184c <Print_Data>:

void Print_Data(UART_Handle_Td *USARTx)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    LL_USART_TransmitData8(USARTx->Instance, USARTx->pTxBuffPtr[ USARTx->TxXSendCount++ ]);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	899b      	ldrh	r3, [r3, #12]
 8001860:	b29b      	uxth	r3, r3
 8001862:	1c59      	adds	r1, r3, #1
 8001864:	b28c      	uxth	r4, r1
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	818c      	strh	r4, [r1, #12]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff fedf 	bl	8001632 <LL_USART_TransmitData8>

        LL_USART_EnableIT_TXE(USARTx->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe64 	bl	8001546 <LL_USART_EnableIT_TXE_TXFNF>
    	LL_USART_EnableIT_TC(USARTx->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe4f 	bl	8001526 <LL_USART_EnableIT_TC>
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <USART_TXEmpty_Callback>:
void USART_TXEmpty_Callback(UART_Handle_Td *USARTx)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if( USARTx->TxXSendCount == ( USARTx->TxXferCount - 1))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	899b      	ldrh	r3, [r3, #12]
 800189c:	b29b      	uxth	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	895b      	ldrh	r3, [r3, #10]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d109      	bne.n	80018c0 <USART_TXEmpty_Callback+0x30>
  {

    LL_USART_DisableIT_TXE(USARTx->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe68 	bl	8001586 <LL_USART_DisableIT_TXE_TXFNF>

    LL_USART_EnableIT_TC(USARTx->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe33 	bl	8001526 <LL_USART_EnableIT_TC>
  }
  LL_USART_TransmitData8(USARTx->Instance, USARTx->pTxBuffPtr[ USARTx->TxXSendCount++ ]);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	899b      	ldrh	r3, [r3, #12]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	b28c      	uxth	r4, r1
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	818c      	strh	r4, [r1, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff fea9 	bl	8001632 <LL_USART_TransmitData8>
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <USART_CharTransmitComplete_Callback>:

void USART_CharTransmitComplete_Callback(UART_Handle_Td *USARTx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(USARTx->TxXSendCount == USARTx->TxXferCount)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	899b      	ldrh	r3, [r3, #12]
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	895b      	ldrh	r3, [r3, #10]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d102      	bne.n	8001906 <USART_CharTransmitComplete_Callback+0x1e>
  {
	  USARTx->TxXSendCount=0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	819a      	strh	r2, [r3, #12]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <TUART_CallBack_IRQ>:

void TUART_CallBack_IRQ(UART_Handle_Td *USARTx)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	 if(LL_USART_IsActiveFlag_RXNE(USARTx->Instance) && LL_USART_IsEnabledIT_RXNE(USARTx->Instance))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fd9e 	bl	8001460 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <TUART_CallBack_IRQ+0x2e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe39 	bl	80015a6 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <TUART_CallBack_IRQ+0x2e>
		  {
		    USART_CharReception_Callback(USARTx);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff6e 	bl	800181c <USART_CharReception_Callback>
		  }

		  if(LL_USART_IsEnabledIT_TXE(USARTx->Instance) && LL_USART_IsActiveFlag_TXE(USARTx->Instance))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe54 	bl	80015f2 <LL_USART_IsEnabledIT_TXE_TXFNF>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00a      	beq.n	8001966 <TUART_CallBack_IRQ+0x54>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fda9 	bl	80014ac <LL_USART_IsActiveFlag_TXE_TXFNF>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <TUART_CallBack_IRQ+0x54>
		  {
		    USART_TXEmpty_Callback(USARTx);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff95 	bl	8001890 <USART_TXEmpty_Callback>
		  }
		  if(LL_USART_IsEnabledIT_TC(USARTx->Instance) && LL_USART_IsActiveFlag_TC(USARTx->Instance))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fe2e 	bl	80015cc <LL_USART_IsEnabledIT_TC>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00f      	beq.n	8001996 <TUART_CallBack_IRQ+0x84>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fd83 	bl	8001486 <LL_USART_IsActiveFlag_TC>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <TUART_CallBack_IRQ+0x84>
		  {
		    LL_USART_ClearFlag_TC(USARTx->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fdae 	bl	80014ec <LL_USART_ClearFlag_TC>
		    USART_CharTransmitComplete_Callback(USARTx);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffa9 	bl	80018e8 <USART_CharTransmitComplete_Callback>
		  }
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <Create_String_buffer>:
		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		};

int Create_String_buffer (uint8_t *Word, uint8_t Size, uint8_t Rzad, uint8_t *Cr_String_Buf, uint8_t Color) //Umieszcza w buforze poziomo kolejne napisy
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	72fb      	strb	r3, [r7, #11]
 80019ae:	4613      	mov	r3, r2
 80019b0:	72bb      	strb	r3, [r7, #10]
	uint16_t char_val=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	83fb      	strh	r3, [r7, #30]
	miejsce_znaku=0;
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <Create_String_buffer+0xcc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

	for(int N_l=0; N_l<Size; N_l++ )
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e04a      	b.n	8001a58 <Create_String_buffer+0xb8>
	{
		//UCF-8 Decode (2 bytes)
		char_val=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	83fb      	strh	r3, [r7, #30]
		if( *(Word+N_l) < 127) //1 byte
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b7e      	cmp	r3, #126	; 0x7e
 80019d0:	d804      	bhi.n	80019dc <Create_String_buffer+0x3c>
		{
			char_val= *(Word+N_l);
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	83fb      	strh	r3, [r7, #30]
		}

		if(*(Word+N_l) > 127) //2 byte
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da1f      	bge.n	8001a2a <Create_String_buffer+0x8a>
		{
			uint16_t MaskH=0b00111111 & *(Word+N_l) ;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f8:	82fb      	strh	r3, [r7, #22]
			uint16_t MaskL=0b01111111 & (*(Word+N_l +1)) ;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	3301      	adds	r3, #1
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0a:	82bb      	strh	r3, [r7, #20]

			char_val|= (MaskH <<6);
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	83fb      	strh	r3, [r7, #30]
			char_val|= (MaskL);
 8001a1c:	8bfa      	ldrh	r2, [r7, #30]
 8001a1e:	8abb      	ldrh	r3, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	83fb      	strh	r3, [r7, #30]

			N_l++;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
		}


		Insert_Font_in_BUF(char_val,Rzad,Cr_String_Buf,Color);
 8001a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a2e:	7ab9      	ldrb	r1, [r7, #10]
 8001a30:	8bf8      	ldrh	r0, [r7, #30]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	f000 f81e 	bl	8001a74 <Insert_Font_in_BUF>

		//miejsce_znaku=miejsce_znaku+ (xadvance/2) + (xadvance%2);
		miejsce_znaku=miejsce_znaku+ (xadvance);
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <Create_String_buffer+0xcc>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <Create_String_buffer+0xd0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <Create_String_buffer+0xcc>)
 8001a44:	6013      	str	r3, [r2, #0]


		if(miejsce_znaku>128)
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <Create_String_buffer+0xcc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b80      	cmp	r3, #128	; 0x80
 8001a4c:	dd01      	ble.n	8001a52 <Create_String_buffer+0xb2>
		{
			return 1; //error
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e007      	b.n	8001a62 <Create_String_buffer+0xc2>
	for(int N_l=0; N_l<Size; N_l++ )
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbb0      	blt.n	80019c2 <Create_String_buffer+0x22>
		}
	}
return 0; //non eror
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2400ccf4 	.word	0x2400ccf4
 8001a70:	24014690 	.word	0x24014690

08001a74 <Insert_Font_in_BUF>:
uint8_t* Insert_Font_in_BUF(uint16_t char_num,uint8_t Row_num ,uint8_t *Cr_String_Buf, uint8_t Color)  //Umieszcza Litere w Buforze
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	603a      	str	r2, [r7, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
 8001a82:	460b      	mov	r3, r1
 8001a84:	717b      	strb	r3, [r7, #5]
 8001a86:	4613      	mov	r3, r2
 8001a88:	713b      	strb	r3, [r7, #4]
/*
 *Kazdy bajt bitmapy napisow zawiera pixel natomaist w mojej libce z hub75
 * mam ze w bajcie sa 2 pixle.. (16 kolorwa ) uzyta do napisow jest monochromatyczna czyli w bajcie jest 8 pixli
 */
	uint8_t BIT=0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]

	if(char_num==32) //-- Znak Spacji
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d104      	bne.n	8001a9e <Insert_Font_in_BUF+0x2a>
	{
		xadvance=7;
 8001a94:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <Insert_Font_in_BUF+0x190>)
 8001a96:	2207      	movs	r2, #7
 8001a98:	601a      	str	r2, [r3, #0]
		return 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e0ad      	b.n	8001bfa <Insert_Font_in_BUF+0x186>
	}

	get_font(char_num);   //Grafika  pojedynczegoznaku jest zapisywana w globalnym buforze Font
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f8d5 	bl	8001c50 <get_font>

			change_font_color(Color);
 8001aa6:	793b      	ldrb	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f9e1 	bl	8001e70 <change_font_color>

	  if( (miejsce_znaku)%2==1)
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <Insert_Font_in_BUF+0x194>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	bfb8      	it	lt
 8001aba:	425b      	neglt	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d103      	bne.n	8001ac8 <Insert_Font_in_BUF+0x54>
	  {
		  Zacznij_Wpr_Od=1;  //Wyzszej czesci bajtu
 8001ac0:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e002      	b.n	8001ace <Insert_Font_in_BUF+0x5a>
	  }
	  else
	  {
		  Zacznij_Wpr_Od=0;  //Nizszej czesci bajtu
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
	  }
	  int Z_P_Wpr_Cz_Bajtu=Zacznij_Wpr_Od;
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60bb      	str	r3, [r7, #8]


	  for(int V=0; V<(height+yoffset); V++)    //V - Vertical
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e085      	b.n	8001be6 <Insert_Font_in_BUF+0x172>
	  {
		  p_mark=0;
 8001ada:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
		  Zacznij_Wpr_Od=Z_P_Wpr_Cz_Bajtu;
 8001ae0:	4a4a      	ldr	r2, [pc, #296]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6013      	str	r3, [r2, #0]

		  for(int H=0; H< (width) ; H++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e074      	b.n	8001bd6 <Insert_Font_in_BUF+0x162>
		  	{
		  		BIT= 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
	  			BIT = Font[ (V*(width) +  H ) ] & 0xFF;
 8001af0:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <Insert_Font_in_BUF+0x1a0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	fb02 f203 	mul.w	r2, r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a46      	ldr	r2, [pc, #280]	; (8001c18 <Insert_Font_in_BUF+0x1a4>)
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	73fb      	strb	r3, [r7, #15]
	  					if(Zacznij_Wpr_Od==0)
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12d      	bne.n	8001b68 <Insert_Font_in_BUF+0xf4>
	  						{
	  							if( BIT!=0)  { Cr_String_Buf[ (miejsce_znaku/2) +(Row_num* (128/2) *16 ) + ( (V) * (128/2) )   +p_mark ] |= (BIT<<4) ; }
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d026      	beq.n	8001b60 <Insert_Font_in_BUF+0xec>
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <Insert_Font_in_BUF+0x194>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da00      	bge.n	8001b1c <Insert_Font_in_BUF+0xa8>
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	105b      	asrs	r3, r3, #1
 8001b1e:	797a      	ldrb	r2, [r7, #5]
 8001b20:	0292      	lsls	r2, r2, #10
 8001b22:	1899      	adds	r1, r3, r2
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	0192      	lsls	r2, r2, #6
 8001b28:	4411      	add	r1, r2
 8001b2a:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	440a      	add	r2, r1
 8001b30:	4611      	mov	r1, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	440a      	add	r2, r1
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	b251      	sxtb	r1, r2
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b252      	sxtb	r2, r2
 8001b40:	430a      	orrs	r2, r1
 8001b42:	b251      	sxtb	r1, r2
 8001b44:	797a      	ldrb	r2, [r7, #5]
 8001b46:	0292      	lsls	r2, r2, #10
 8001b48:	441a      	add	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	441a      	add	r2, r3
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
	  							Zacznij_Wpr_Od=1;
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
							goto END_IT;
 8001b66:	e033      	b.n	8001bd0 <Insert_Font_in_BUF+0x15c>
	  						}
	  					if(Zacznij_Wpr_Od==1)
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d12e      	bne.n	8001bce <Insert_Font_in_BUF+0x15a>
	  					{
	  						if( BIT !=0 )  { Cr_String_Buf[ (miejsce_znaku/2) +(Row_num*(128/2)*16 ) + ( (V) * (128/2) )   +p_mark ] |=  BIT; }
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d022      	beq.n	8001bbc <Insert_Font_in_BUF+0x148>
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <Insert_Font_in_BUF+0x194>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da00      	bge.n	8001b80 <Insert_Font_in_BUF+0x10c>
 8001b7e:	3301      	adds	r3, #1
 8001b80:	105b      	asrs	r3, r3, #1
 8001b82:	797a      	ldrb	r2, [r7, #5]
 8001b84:	0292      	lsls	r2, r2, #10
 8001b86:	1899      	adds	r1, r3, r2
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	0192      	lsls	r2, r2, #6
 8001b8c:	4411      	add	r1, r2
 8001b8e:	4a20      	ldr	r2, [pc, #128]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	440a      	add	r2, r1
 8001b94:	4611      	mov	r1, r2
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	440a      	add	r2, r1
 8001b9a:	7811      	ldrb	r1, [r2, #0]
 8001b9c:	797a      	ldrb	r2, [r7, #5]
 8001b9e:	0292      	lsls	r2, r2, #10
 8001ba0:	441a      	add	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	019b      	lsls	r3, r3, #6
 8001ba6:	441a      	add	r2, r3
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]

	  				  		p_mark++;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <Insert_Font_in_BUF+0x19c>)
 8001bc4:	6013      	str	r3, [r2, #0]
	  				  		Zacznij_Wpr_Od=0;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <Insert_Font_in_BUF+0x198>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e000      	b.n	8001bd0 <Insert_Font_in_BUF+0x15c>
	  					}
	  				END_IT:;
 8001bce:	bf00      	nop
		  for(int H=0; H< (width) ; H++)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <Insert_Font_in_BUF+0x1a0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	db85      	blt.n	8001aec <Insert_Font_in_BUF+0x78>
	  for(int V=0; V<(height+yoffset); V++)    //V - Vertical
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <Insert_Font_in_BUF+0x1a8>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Insert_Font_in_BUF+0x1ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	f6ff af71 	blt.w	8001ada <Insert_Font_in_BUF+0x66>
		  	}
		}
	  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	24014690 	.word	0x24014690
 8001c08:	2400ccf4 	.word	0x2400ccf4
 8001c0c:	2400ccfc 	.word	0x2400ccfc
 8001c10:	2400ccf8 	.word	0x2400ccf8
 8001c14:	24014694 	.word	0x24014694
 8001c18:	24014468 	.word	0x24014468
 8001c1c:	24014464 	.word	0x24014464
 8001c20:	2400f63c 	.word	0x2400f63c

08001c24 <get_bit>:
uint8_t get_bit(uint8_t value,uint8_t nr_bit)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71bb      	strb	r3, [r7, #6]
	return (value >> nr_bit) & 1;
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	fa42 f303 	asr.w	r3, r2, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <get_font>:
uint8_t get_font(uint16_t char_num)   //z bit mapy monochromatycznej
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
	//Wyjmuje pojedynczy znak z bitmapy i
	//rozbijam go tak zeby kazdy pixel mial przypisany swoj bajt --- latwiej manewrowac danymi dalej

	for(int i=0; i<256; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	e007      	b.n	8001c70 <get_font+0x20>
	{
		Font[i]=0;
 8001c60:	4a3f      	ldr	r2, [pc, #252]	; (8001d60 <get_font+0x110>)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	4413      	add	r3, r2
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<256; i++)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	ddf4      	ble.n	8001c60 <get_font+0x10>
	}

	Odczytaj_znak_S16_uc8(char_num);
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f91d 	bl	8001eb8 <Odczytaj_znak_S16_uc8>

	int x_base=0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
	int r_x=0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
	int next_x=0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]

	int bit_val_xybit=0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]

				x_base=x/8;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <get_font+0x114>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da00      	bge.n	8001c98 <get_font+0x48>
 8001c96:	3307      	adds	r3, #7
 8001c98:	10db      	asrs	r3, r3, #3
 8001c9a:	613b      	str	r3, [r7, #16]
				r_x=x%8;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <get_font+0x114>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	425a      	negs	r2, r3
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	f002 0207 	and.w	r2, r2, #7
 8001caa:	bf58      	it	pl
 8001cac:	4253      	negpl	r3, r2
 8001cae:	623b      	str	r3, [r7, #32]

					for(int i=0; i<height; i++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	e048      	b.n	8001d48 <get_font+0xf8>
					{
						next_x=0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
						r_x=x%8;
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <get_font+0x114>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	425a      	negs	r2, r3
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	f002 0207 	and.w	r2, r2, #7
 8001cc8:	bf58      	it	pl
 8001cca:	4253      	negpl	r3, r2
 8001ccc:	623b      	str	r3, [r7, #32]
						r_x=7-r_x;
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f1c3 0307 	rsb	r3, r3, #7
 8001cd4:	623b      	str	r3, [r7, #32]

						for(int j=0; j<width; j++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e02d      	b.n	8001d38 <get_font+0xe8>
						{
															//linia 			rzad
							bit_val_xybit=get_bit(Fonts_16[x_base+next_x+   (y*64) + (i*64)  ],r_x);
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	441a      	add	r2, r3
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <get_font+0x118>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	019b      	lsls	r3, r3, #6
 8001ce8:	441a      	add	r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <get_font+0x11c>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff92 	bl	8001c24 <get_bit>
 8001d00:	4603      	mov	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]

							Font[ j+ (i*width) ]=bit_val_xybit;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <get_font+0x120>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	fb02 f203 	mul.w	r2, r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	b2d1      	uxtb	r1, r2
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <get_font+0x110>)
 8001d18:	54d1      	strb	r1, [r2, r3]

							r_x--;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	623b      	str	r3, [r7, #32]
							if(r_x==-1)
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d104      	bne.n	8001d32 <get_font+0xe2>
							{
								r_x=7;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	623b      	str	r3, [r7, #32]
								next_x++;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
						for(int j=0; j<width; j++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <get_font+0x120>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbcc      	blt.n	8001cdc <get_font+0x8c>
					for(int i=0; i<height; i++)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <get_font+0x124>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbb1      	blt.n	8001cb6 <get_font+0x66>
						}


					}

	siding_font();
 8001d52:	f000 f811 	bl	8001d78 <siding_font>
	return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	24014468 	.word	0x24014468
 8001d64:	2400f638 	.word	0x2400f638
 8001d68:	24014460 	.word	0x24014460
 8001d6c:	24000008 	.word	0x24000008
 8001d70:	24014694 	.word	0x24014694
 8001d74:	24014464 	.word	0x24014464

08001d78 <siding_font>:
uint8_t siding_font()   // przesuwanie odpowiednio litery
{
 8001d78:	b480      	push	{r7}
 8001d7a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001d7e:	af00      	add	r7, sp, #0
	uint8_t Siding_Font[550];  //musi byc wiekszy aby dane sie nie nadpisaly przy przesuwaniu, co moze wykrzaczyc nawet i calego procka
	for(int i=0; i<256; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001d86:	e00a      	b.n	8001d9e <siding_font+0x26>
	{
		Siding_Font[i]=0;
 8001d88:	463a      	mov	r2, r7
 8001d8a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001d8e:	4413      	add	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<256; i++)
 8001d94:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001d9e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	ddf0      	ble.n	8001d88 <siding_font+0x10>
	}

	for(int i=0; i<(18) ; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001dac:	e033      	b.n	8001e16 <siding_font+0x9e>
	{
		for(int j=0; j<(width); j++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001db4:	e024      	b.n	8001e00 <siding_font+0x88>
		{

			Siding_Font[ j+ xoffset +     ( (yoffset)*width) + (i*width)  ] =   Font[ j+ (i*width)];
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <siding_font+0xe8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8001dbe:	fb02 f203 	mul.w	r2, r2, r3
 8001dc2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001dc6:	441a      	add	r2, r3
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <siding_font+0xec>)
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001dd0:	4419      	add	r1, r3
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <siding_font+0xf0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4822      	ldr	r0, [pc, #136]	; (8001e60 <siding_font+0xe8>)
 8001dd8:	6800      	ldr	r0, [r0, #0]
 8001dda:	fb00 f303 	mul.w	r3, r0, r3
 8001dde:	4419      	add	r1, r3
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <siding_font+0xe8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8001de8:	fb00 f303 	mul.w	r3, r0, r3
 8001dec:	440b      	add	r3, r1
 8001dee:	491f      	ldr	r1, [pc, #124]	; (8001e6c <siding_font+0xf4>)
 8001df0:	5c89      	ldrb	r1, [r1, r2]
 8001df2:	463a      	mov	r2, r7
 8001df4:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<(width); j++)
 8001df6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <siding_font+0xe8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbd4      	blt.n	8001db6 <siding_font+0x3e>
	for(int i=0; i<(18) ; i++)
 8001e0c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001e10:	3301      	adds	r3, #1
 8001e12:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001e16:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	ddc7      	ble.n	8001dae <siding_font+0x36>
		}
	}
	for(int i=0; i<255; i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001e24:	e00f      	b.n	8001e46 <siding_font+0xce>
	{
		Font[i]=Siding_Font[i];
 8001e26:	463a      	mov	r2, r7
 8001e28:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e2c:	4413      	add	r3, r2
 8001e2e:	7819      	ldrb	r1, [r3, #0]
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <siding_font+0xf4>)
 8001e32:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e36:	4413      	add	r3, r2
 8001e38:	460a      	mov	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<255; i++)
 8001e3c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e40:	3301      	adds	r3, #1
 8001e42:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001e46:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8001e4c:	ddeb      	ble.n	8001e26 <siding_font+0xae>
	}
	return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	24014694 	.word	0x24014694
 8001e64:	2400f634 	.word	0x2400f634
 8001e68:	2400f63c 	.word	0x2400f63c
 8001e6c:	24014468 	.word	0x24014468

08001e70 <change_font_color>:
void change_font_color(uint8_t Color)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<300; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e00d      	b.n	8001e9c <change_font_color+0x2c>
	{

		if(Font[i]!=0)
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <change_font_color+0x44>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <change_font_color+0x26>
		{
			Font[i]=Color;
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <change_font_color+0x44>)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<300; i++)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ea2:	dbed      	blt.n	8001e80 <change_font_color+0x10>
		}
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24014468 	.word	0x24014468

08001eb8 <Odczytaj_znak_S16_uc8>:
void Odczytaj_znak_S16_uc8 (uint16_t  char_num)   //tabela wygenerowana za pomoca runnable-hiero.jar
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]

	switch(char_num)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f240 127f 	movw	r2, #383	; 0x17f
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	f204 81e1 	bhi.w	8006290 <Odczytaj_znak_S16_uc8+0x43d8>
 8001ece:	a101      	add	r1, pc, #4	; (adr r1, 8001ed4 <Odczytaj_znak_S16_uc8+0x1c>)
 8001ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ed4:	080024d5 	.word	0x080024d5
 8001ed8:	08006291 	.word	0x08006291
 8001edc:	08006291 	.word	0x08006291
 8001ee0:	08006291 	.word	0x08006291
 8001ee4:	08006291 	.word	0x08006291
 8001ee8:	08006291 	.word	0x08006291
 8001eec:	08006291 	.word	0x08006291
 8001ef0:	08006291 	.word	0x08006291
 8001ef4:	08006291 	.word	0x08006291
 8001ef8:	08006291 	.word	0x08006291
 8001efc:	08006291 	.word	0x08006291
 8001f00:	08006291 	.word	0x08006291
 8001f04:	08006291 	.word	0x08006291
 8001f08:	08002505 	.word	0x08002505
 8001f0c:	08006291 	.word	0x08006291
 8001f10:	08006291 	.word	0x08006291
 8001f14:	08006291 	.word	0x08006291
 8001f18:	08006291 	.word	0x08006291
 8001f1c:	08006291 	.word	0x08006291
 8001f20:	08006291 	.word	0x08006291
 8001f24:	08006291 	.word	0x08006291
 8001f28:	08006291 	.word	0x08006291
 8001f2c:	08006291 	.word	0x08006291
 8001f30:	08006291 	.word	0x08006291
 8001f34:	08006291 	.word	0x08006291
 8001f38:	08006291 	.word	0x08006291
 8001f3c:	08006291 	.word	0x08006291
 8001f40:	08006291 	.word	0x08006291
 8001f44:	08006291 	.word	0x08006291
 8001f48:	08006291 	.word	0x08006291
 8001f4c:	08006291 	.word	0x08006291
 8001f50:	08006291 	.word	0x08006291
 8001f54:	08006291 	.word	0x08006291
 8001f58:	08002535 	.word	0x08002535
 8001f5c:	08002565 	.word	0x08002565
 8001f60:	08002593 	.word	0x08002593
 8001f64:	080025c3 	.word	0x080025c3
 8001f68:	080025f3 	.word	0x080025f3
 8001f6c:	08002623 	.word	0x08002623
 8001f70:	08002653 	.word	0x08002653
 8001f74:	08002681 	.word	0x08002681
 8001f78:	080026b1 	.word	0x080026b1
 8001f7c:	080026e3 	.word	0x080026e3
 8001f80:	08002713 	.word	0x08002713
 8001f84:	08002761 	.word	0x08002761
 8001f88:	08002791 	.word	0x08002791
 8001f8c:	080027bf 	.word	0x080027bf
 8001f90:	080027ed 	.word	0x080027ed
 8001f94:	0800281f 	.word	0x0800281f
 8001f98:	0800284f 	.word	0x0800284f
 8001f9c:	0800287d 	.word	0x0800287d
 8001fa0:	080028ab 	.word	0x080028ab
 8001fa4:	080028db 	.word	0x080028db
 8001fa8:	08002909 	.word	0x08002909
 8001fac:	08002937 	.word	0x08002937
 8001fb0:	08002965 	.word	0x08002965
 8001fb4:	08002993 	.word	0x08002993
 8001fb8:	080029dd 	.word	0x080029dd
 8001fbc:	08002a0b 	.word	0x08002a0b
 8001fc0:	08002a3b 	.word	0x08002a3b
 8001fc4:	08002a69 	.word	0x08002a69
 8001fc8:	08002a99 	.word	0x08002a99
 8001fcc:	08002ac7 	.word	0x08002ac7
 8001fd0:	08002af7 	.word	0x08002af7
 8001fd4:	08002b25 	.word	0x08002b25
 8001fd8:	08002b55 	.word	0x08002b55
 8001fdc:	08002b85 	.word	0x08002b85
 8001fe0:	08002bb3 	.word	0x08002bb3
 8001fe4:	08002be1 	.word	0x08002be1
 8001fe8:	08002c0f 	.word	0x08002c0f
 8001fec:	08002c59 	.word	0x08002c59
 8001ff0:	08002c87 	.word	0x08002c87
 8001ff4:	08002cb5 	.word	0x08002cb5
 8001ff8:	08002ce3 	.word	0x08002ce3
 8001ffc:	08002d11 	.word	0x08002d11
 8002000:	08002d3f 	.word	0x08002d3f
 8002004:	08002d6d 	.word	0x08002d6d
 8002008:	08002d9b 	.word	0x08002d9b
 800200c:	08002dc9 	.word	0x08002dc9
 8002010:	08002df7 	.word	0x08002df7
 8002014:	08002e25 	.word	0x08002e25
 8002018:	08002e55 	.word	0x08002e55
 800201c:	08002e85 	.word	0x08002e85
 8002020:	08002ed1 	.word	0x08002ed1
 8002024:	08002f01 	.word	0x08002f01
 8002028:	08002f31 	.word	0x08002f31
 800202c:	08002f61 	.word	0x08002f61
 8002030:	08002f93 	.word	0x08002f93
 8002034:	08002fc5 	.word	0x08002fc5
 8002038:	08002ff7 	.word	0x08002ff7
 800203c:	08003029 	.word	0x08003029
 8002040:	08003059 	.word	0x08003059
 8002044:	08003089 	.word	0x08003089
 8002048:	080030bb 	.word	0x080030bb
 800204c:	080030eb 	.word	0x080030eb
 8002050:	08003119 	.word	0x08003119
 8002054:	08003165 	.word	0x08003165
 8002058:	08003195 	.word	0x08003195
 800205c:	080031c5 	.word	0x080031c5
 8002060:	080031f5 	.word	0x080031f5
 8002064:	08003225 	.word	0x08003225
 8002068:	08003255 	.word	0x08003255
 800206c:	08003285 	.word	0x08003285
 8002070:	080032b5 	.word	0x080032b5
 8002074:	080032e5 	.word	0x080032e5
 8002078:	08003315 	.word	0x08003315
 800207c:	08003345 	.word	0x08003345
 8002080:	08003377 	.word	0x08003377
 8002084:	080033a7 	.word	0x080033a7
 8002088:	080033f1 	.word	0x080033f1
 800208c:	08003421 	.word	0x08003421
 8002090:	0800344f 	.word	0x0800344f
 8002094:	0800347d 	.word	0x0800347d
 8002098:	080034ad 	.word	0x080034ad
 800209c:	080034dd 	.word	0x080034dd
 80020a0:	0800350b 	.word	0x0800350b
 80020a4:	08003539 	.word	0x08003539
 80020a8:	08003569 	.word	0x08003569
 80020ac:	08003597 	.word	0x08003597
 80020b0:	080035c7 	.word	0x080035c7
 80020b4:	080035f7 	.word	0x080035f7
 80020b8:	08003627 	.word	0x08003627
 80020bc:	08003675 	.word	0x08003675
 80020c0:	080036a3 	.word	0x080036a3
 80020c4:	080036d3 	.word	0x080036d3
 80020c8:	08003703 	.word	0x08003703
 80020cc:	08003733 	.word	0x08003733
 80020d0:	08006291 	.word	0x08006291
 80020d4:	08006291 	.word	0x08006291
 80020d8:	08006291 	.word	0x08006291
 80020dc:	08006291 	.word	0x08006291
 80020e0:	08006291 	.word	0x08006291
 80020e4:	08006291 	.word	0x08006291
 80020e8:	08006291 	.word	0x08006291
 80020ec:	08006291 	.word	0x08006291
 80020f0:	08006291 	.word	0x08006291
 80020f4:	08006291 	.word	0x08006291
 80020f8:	08006291 	.word	0x08006291
 80020fc:	08006291 	.word	0x08006291
 8002100:	08006291 	.word	0x08006291
 8002104:	08006291 	.word	0x08006291
 8002108:	08006291 	.word	0x08006291
 800210c:	08006291 	.word	0x08006291
 8002110:	08006291 	.word	0x08006291
 8002114:	08006291 	.word	0x08006291
 8002118:	08006291 	.word	0x08006291
 800211c:	08006291 	.word	0x08006291
 8002120:	08006291 	.word	0x08006291
 8002124:	08006291 	.word	0x08006291
 8002128:	08006291 	.word	0x08006291
 800212c:	08006291 	.word	0x08006291
 8002130:	08006291 	.word	0x08006291
 8002134:	08006291 	.word	0x08006291
 8002138:	08006291 	.word	0x08006291
 800213c:	08006291 	.word	0x08006291
 8002140:	08006291 	.word	0x08006291
 8002144:	08006291 	.word	0x08006291
 8002148:	08006291 	.word	0x08006291
 800214c:	08006291 	.word	0x08006291
 8002150:	08006291 	.word	0x08006291
 8002154:	08003761 	.word	0x08003761
 8002158:	08003791 	.word	0x08003791
 800215c:	080037c1 	.word	0x080037c1
 8002160:	080037ef 	.word	0x080037ef
 8002164:	0800381f 	.word	0x0800381f
 8002168:	0800384f 	.word	0x0800384f
 800216c:	0800387f 	.word	0x0800387f
 8002170:	080038ad 	.word	0x080038ad
 8002174:	080038f9 	.word	0x080038f9
 8002178:	08003927 	.word	0x08003927
 800217c:	08003957 	.word	0x08003957
 8002180:	08003985 	.word	0x08003985
 8002184:	080039b5 	.word	0x080039b5
 8002188:	08006291 	.word	0x08006291
 800218c:	080039e3 	.word	0x080039e3
 8002190:	08003a15 	.word	0x08003a15
 8002194:	08003a47 	.word	0x08003a47
 8002198:	08003a75 	.word	0x08003a75
 800219c:	08003aa3 	.word	0x08003aa3
 80021a0:	08003ad3 	.word	0x08003ad3
 80021a4:	08003b03 	.word	0x08003b03
 80021a8:	08003b31 	.word	0x08003b31
 80021ac:	08003b7d 	.word	0x08003b7d
 80021b0:	08003bad 	.word	0x08003bad
 80021b4:	08003bdb 	.word	0x08003bdb
 80021b8:	08003c09 	.word	0x08003c09
 80021bc:	08003c39 	.word	0x08003c39
 80021c0:	08003c67 	.word	0x08003c67
 80021c4:	08003c97 	.word	0x08003c97
 80021c8:	08003cc7 	.word	0x08003cc7
 80021cc:	08003cf7 	.word	0x08003cf7
 80021d0:	08003d29 	.word	0x08003d29
 80021d4:	08003d57 	.word	0x08003d57
 80021d8:	08003d89 	.word	0x08003d89
 80021dc:	08003dbb 	.word	0x08003dbb
 80021e0:	08003e09 	.word	0x08003e09
 80021e4:	08003e3b 	.word	0x08003e3b
 80021e8:	08003e6d 	.word	0x08003e6d
 80021ec:	08003e9f 	.word	0x08003e9f
 80021f0:	08003ecf 	.word	0x08003ecf
 80021f4:	08003efd 	.word	0x08003efd
 80021f8:	08003f2d 	.word	0x08003f2d
 80021fc:	08003f5d 	.word	0x08003f5d
 8002200:	08003f8d 	.word	0x08003f8d
 8002204:	08003fbd 	.word	0x08003fbd
 8002208:	08003fef 	.word	0x08003fef
 800220c:	0800401f 	.word	0x0800401f
 8002210:	08004051 	.word	0x08004051
 8002214:	080040a1 	.word	0x080040a1
 8002218:	080040d1 	.word	0x080040d1
 800221c:	08004101 	.word	0x08004101
 8002220:	08004131 	.word	0x08004131
 8002224:	08004161 	.word	0x08004161
 8002228:	08004191 	.word	0x08004191
 800222c:	080041c1 	.word	0x080041c1
 8002230:	080041f3 	.word	0x080041f3
 8002234:	08004223 	.word	0x08004223
 8002238:	08004251 	.word	0x08004251
 800223c:	08004283 	.word	0x08004283
 8002240:	080042b5 	.word	0x080042b5
 8002244:	080042e7 	.word	0x080042e7
 8002248:	08004335 	.word	0x08004335
 800224c:	08004369 	.word	0x08004369
 8002250:	08004397 	.word	0x08004397
 8002254:	080043c5 	.word	0x080043c5
 8002258:	080043f3 	.word	0x080043f3
 800225c:	08004421 	.word	0x08004421
 8002260:	0800444f 	.word	0x0800444f
 8002264:	0800447d 	.word	0x0800447d
 8002268:	080044ab 	.word	0x080044ab
 800226c:	080044d9 	.word	0x080044d9
 8002270:	08004507 	.word	0x08004507
 8002274:	08004535 	.word	0x08004535
 8002278:	08004563 	.word	0x08004563
 800227c:	080045ad 	.word	0x080045ad
 8002280:	080045db 	.word	0x080045db
 8002284:	08004609 	.word	0x08004609
 8002288:	08004639 	.word	0x08004639
 800228c:	08004667 	.word	0x08004667
 8002290:	08004697 	.word	0x08004697
 8002294:	080046c7 	.word	0x080046c7
 8002298:	080046f5 	.word	0x080046f5
 800229c:	08004723 	.word	0x08004723
 80022a0:	08004751 	.word	0x08004751
 80022a4:	08004781 	.word	0x08004781
 80022a8:	080047b1 	.word	0x080047b1
 80022ac:	080047e1 	.word	0x080047e1
 80022b0:	0800482d 	.word	0x0800482d
 80022b4:	0800485b 	.word	0x0800485b
 80022b8:	08004889 	.word	0x08004889
 80022bc:	080048b9 	.word	0x080048b9
 80022c0:	080048e9 	.word	0x080048e9
 80022c4:	08004919 	.word	0x08004919
 80022c8:	08004949 	.word	0x08004949
 80022cc:	0800497b 	.word	0x0800497b
 80022d0:	080049ab 	.word	0x080049ab
 80022d4:	080049dd 	.word	0x080049dd
 80022d8:	08004a11 	.word	0x08004a11
 80022dc:	08004a41 	.word	0x08004a41
 80022e0:	08004a75 	.word	0x08004a75
 80022e4:	08004ac1 	.word	0x08004ac1
 80022e8:	08004af3 	.word	0x08004af3
 80022ec:	08004b23 	.word	0x08004b23
 80022f0:	08004b55 	.word	0x08004b55
 80022f4:	08004b85 	.word	0x08004b85
 80022f8:	08004bb5 	.word	0x08004bb5
 80022fc:	08004be5 	.word	0x08004be5
 8002300:	08004c15 	.word	0x08004c15
 8002304:	08004c45 	.word	0x08004c45
 8002308:	08004c77 	.word	0x08004c77
 800230c:	08004ca7 	.word	0x08004ca7
 8002310:	08004cd9 	.word	0x08004cd9
 8002314:	08004d09 	.word	0x08004d09
 8002318:	08004d55 	.word	0x08004d55
 800231c:	08004d85 	.word	0x08004d85
 8002320:	08004db7 	.word	0x08004db7
 8002324:	08004de7 	.word	0x08004de7
 8002328:	08004e17 	.word	0x08004e17
 800232c:	08004e47 	.word	0x08004e47
 8002330:	08004e79 	.word	0x08004e79
 8002334:	08004ea9 	.word	0x08004ea9
 8002338:	08004ed9 	.word	0x08004ed9
 800233c:	08004f09 	.word	0x08004f09
 8002340:	08004f3b 	.word	0x08004f3b
 8002344:	08004f6b 	.word	0x08004f6b
 8002348:	08004f9b 	.word	0x08004f9b
 800234c:	08004fe9 	.word	0x08004fe9
 8002350:	08005019 	.word	0x08005019
 8002354:	08005049 	.word	0x08005049
 8002358:	08005079 	.word	0x08005079
 800235c:	080050a9 	.word	0x080050a9
 8002360:	080050d7 	.word	0x080050d7
 8002364:	08005105 	.word	0x08005105
 8002368:	08005135 	.word	0x08005135
 800236c:	08005165 	.word	0x08005165
 8002370:	08005195 	.word	0x08005195
 8002374:	080051c5 	.word	0x080051c5
 8002378:	080051f7 	.word	0x080051f7
 800237c:	08005227 	.word	0x08005227
 8002380:	08005275 	.word	0x08005275
 8002384:	080052a5 	.word	0x080052a5
 8002388:	080052d7 	.word	0x080052d7
 800238c:	08005307 	.word	0x08005307
 8002390:	08005335 	.word	0x08005335
 8002394:	08005363 	.word	0x08005363
 8002398:	08005393 	.word	0x08005393
 800239c:	080053c1 	.word	0x080053c1
 80023a0:	080053ef 	.word	0x080053ef
 80023a4:	0800541d 	.word	0x0800541d
 80023a8:	0800544d 	.word	0x0800544d
 80023ac:	0800547d 	.word	0x0800547d
 80023b0:	080054ab 	.word	0x080054ab
 80023b4:	080054f5 	.word	0x080054f5
 80023b8:	08005523 	.word	0x08005523
 80023bc:	08005553 	.word	0x08005553
 80023c0:	08005583 	.word	0x08005583
 80023c4:	080055b1 	.word	0x080055b1
 80023c8:	080055df 	.word	0x080055df
 80023cc:	0800560d 	.word	0x0800560d
 80023d0:	0800563b 	.word	0x0800563b
 80023d4:	08005669 	.word	0x08005669
 80023d8:	08005697 	.word	0x08005697
 80023dc:	080056c5 	.word	0x080056c5
 80023e0:	080056f5 	.word	0x080056f5
 80023e4:	08005725 	.word	0x08005725
 80023e8:	08005771 	.word	0x08005771
 80023ec:	0800579f 	.word	0x0800579f
 80023f0:	080057cd 	.word	0x080057cd
 80023f4:	080057fd 	.word	0x080057fd
 80023f8:	0800582b 	.word	0x0800582b
 80023fc:	0800585b 	.word	0x0800585b
 8002400:	08005889 	.word	0x08005889
 8002404:	080058b7 	.word	0x080058b7
 8002408:	080058e7 	.word	0x080058e7
 800240c:	08005915 	.word	0x08005915
 8002410:	08005947 	.word	0x08005947
 8002414:	08005975 	.word	0x08005975
 8002418:	080059a5 	.word	0x080059a5
 800241c:	080059f1 	.word	0x080059f1
 8002420:	08005a1f 	.word	0x08005a1f
 8002424:	08005a4d 	.word	0x08005a4d
 8002428:	08005a7d 	.word	0x08005a7d
 800242c:	08005aab 	.word	0x08005aab
 8002430:	08005ad7 	.word	0x08005ad7
 8002434:	08005b05 	.word	0x08005b05
 8002438:	08005b33 	.word	0x08005b33
 800243c:	08005b5f 	.word	0x08005b5f
 8002440:	08005b8d 	.word	0x08005b8d
 8002444:	08005bb9 	.word	0x08005bb9
 8002448:	08005be9 	.word	0x08005be9
 800244c:	08005c15 	.word	0x08005c15
 8002450:	08005c5d 	.word	0x08005c5d
 8002454:	08005c89 	.word	0x08005c89
 8002458:	08005cb7 	.word	0x08005cb7
 800245c:	08005ce3 	.word	0x08005ce3
 8002460:	08005d0f 	.word	0x08005d0f
 8002464:	08005d3b 	.word	0x08005d3b
 8002468:	08005d69 	.word	0x08005d69
 800246c:	08005d95 	.word	0x08005d95
 8002470:	08005dc1 	.word	0x08005dc1
 8002474:	08005ded 	.word	0x08005ded
 8002478:	08005e1d 	.word	0x08005e1d
 800247c:	08005e4b 	.word	0x08005e4b
 8002480:	08005e79 	.word	0x08005e79
 8002484:	08005ec5 	.word	0x08005ec5
 8002488:	08005ef5 	.word	0x08005ef5
 800248c:	08005f23 	.word	0x08005f23
 8002490:	08005f53 	.word	0x08005f53
 8002494:	08005f81 	.word	0x08005f81
 8002498:	08005faf 	.word	0x08005faf
 800249c:	08005fdd 	.word	0x08005fdd
 80024a0:	08006009 	.word	0x08006009
 80024a4:	08006037 	.word	0x08006037
 80024a8:	08006067 	.word	0x08006067
 80024ac:	08006097 	.word	0x08006097
 80024b0:	080060c9 	.word	0x080060c9
 80024b4:	080060f9 	.word	0x080060f9
 80024b8:	08006149 	.word	0x08006149
 80024bc:	08006179 	.word	0x08006179
 80024c0:	080061a7 	.word	0x080061a7
 80024c4:	080061d7 	.word	0x080061d7
 80024c8:	08006205 	.word	0x08006205
 80024cc:	08006235 	.word	0x08006235
 80024d0:	08006263 	.word	0x08006263
		{
	case  0   :    x=402 ;  y=187  ;  width=11  ;  height=12   ;  xoffset=1    ;  yoffset=4    ;  xadvance=12   ;
 80024d4:	4b9b      	ldr	r3, [pc, #620]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 80024d6:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4b9a      	ldr	r3, [pc, #616]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 80024de:	22bb      	movs	r2, #187	; 0xbb
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	4b9a      	ldr	r3, [pc, #616]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 80024e4:	220b      	movs	r2, #11
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	4b99      	ldr	r3, [pc, #612]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	4b99      	ldr	r3, [pc, #612]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4b98      	ldr	r3, [pc, #608]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 80024f6:	2204      	movs	r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	4b98      	ldr	r3, [pc, #608]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 80024fc:	220c      	movs	r2, #12
 80024fe:	601a      	str	r2, [r3, #0]
	 break;
 8002500:	f003 bedc 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  13  :    x=402 ;  y=187  ;  width=11  ;  height=12   ;  xoffset=1    ;  yoffset=4    ;  xadvance=12   ;
 8002504:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002506:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	4b8e      	ldr	r3, [pc, #568]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800250e:	22bb      	movs	r2, #187	; 0xbb
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	4b8e      	ldr	r3, [pc, #568]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002514:	220b      	movs	r2, #11
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 800251a:	220c      	movs	r2, #12
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002526:	2204      	movs	r2, #4
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	4b8c      	ldr	r3, [pc, #560]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800252c:	220c      	movs	r2, #12
 800252e:	601a      	str	r2, [r3, #0]
	 break;
 8002530:	f003 bec4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  33  :    x=451 ;  y=72   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8002534:	4b83      	ldr	r3, [pc, #524]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002536:	f240 12c3 	movw	r2, #451	; 0x1c3
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	4b82      	ldr	r3, [pc, #520]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800253e:	2248      	movs	r2, #72	; 0x48
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	4b82      	ldr	r3, [pc, #520]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002544:	2204      	movs	r2, #4
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 800254a:	220e      	movs	r2, #14
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	4b81      	ldr	r3, [pc, #516]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4b80      	ldr	r3, [pc, #512]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800255c:	2205      	movs	r2, #5
 800255e:	601a      	str	r2, [r3, #0]
	 break;
 8002560:	f003 beac 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  34  :    x=136 ;  y=223  ;  width=8   ;  height=6    ;  xoffset=0    ;  yoffset=1    ;  xadvance=8    ;
 8002564:	4b77      	ldr	r3, [pc, #476]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002566:	2288      	movs	r2, #136	; 0x88
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4b77      	ldr	r3, [pc, #476]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800256c:	22df      	movs	r2, #223	; 0xdf
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	4b76      	ldr	r3, [pc, #472]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002572:	2208      	movs	r2, #8
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	4b76      	ldr	r3, [pc, #472]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 8002578:	2206      	movs	r2, #6
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	4b75      	ldr	r3, [pc, #468]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4b75      	ldr	r3, [pc, #468]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4b74      	ldr	r3, [pc, #464]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800258a:	2208      	movs	r2, #8
 800258c:	601a      	str	r2, [r3, #0]
	 break;
 800258e:	f003 be95 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  35  :    x=455 ;  y=72   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002592:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002594:	f240 12c7 	movw	r2, #455	; 0x1c7
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800259c:	2248      	movs	r2, #72	; 0x48
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 80025a2:	220b      	movs	r2, #11
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 80025a8:	220e      	movs	r2, #14
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b69      	ldr	r3, [pc, #420]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4b69      	ldr	r3, [pc, #420]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 80025ba:	220b      	movs	r2, #11
 80025bc:	601a      	str	r2, [r3, #0]
	 break;
 80025be:	f003 be7d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  36  :    x=438 ;  y=0    ;  width=9   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80025c2:	4b60      	ldr	r3, [pc, #384]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 80025c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 80025d2:	2209      	movs	r2, #9
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 80025d8:	2211      	movs	r2, #17
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	4b5d      	ldr	r3, [pc, #372]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	4b5c      	ldr	r3, [pc, #368]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 80025ea:	2209      	movs	r2, #9
 80025ec:	601a      	str	r2, [r3, #0]
	 break;
 80025ee:	f003 be65 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  37  :    x=466 ;  y=72   ;  width=15  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=15   ;
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 80025f4:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 80025fc:	2248      	movs	r2, #72	; 0x48
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	4b52      	ldr	r3, [pc, #328]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002602:	220f      	movs	r2, #15
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	4b52      	ldr	r3, [pc, #328]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 8002608:	220e      	movs	r2, #14
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	4b51      	ldr	r3, [pc, #324]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	4b51      	ldr	r3, [pc, #324]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800261a:	220f      	movs	r2, #15
 800261c:	601a      	str	r2, [r3, #0]
	 break;
 800261e:	f003 be4d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  38  :    x=481 ;  y=72   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8002622:	4b48      	ldr	r3, [pc, #288]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002624:	f240 12e1 	movw	r2, #481	; 0x1e1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800262c:	2248      	movs	r2, #72	; 0x48
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002632:	220d      	movs	r2, #13
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 8002638:	220e      	movs	r2, #14
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	4b45      	ldr	r3, [pc, #276]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
	 break;
 800264e:	f003 be35 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  39  :    x=144 ;  y=223  ;  width=4   ;  height=6    ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002654:	2290      	movs	r2, #144	; 0x90
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800265a:	22df      	movs	r2, #223	; 0xdf
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002660:	2204      	movs	r2, #4
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 8002666:	2206      	movs	r2, #6
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 8002678:	2204      	movs	r2, #4
 800267a:	601a      	str	r2, [r3, #0]
	 break;
 800267c:	f003 be1e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  40  :    x=447 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002682:	f240 12bf 	movw	r2, #447	; 0x1bf
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002690:	2206      	movs	r2, #6
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 8002696:	2211      	movs	r2, #17
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 80026a8:	2206      	movs	r2, #6
 80026aa:	601a      	str	r2, [r3, #0]
	 break;
 80026ac:	f003 be06 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  41  :    x=453 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 80026b2:	f240 12c5 	movw	r2, #453	; 0x1c5
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 80026c0:	2206      	movs	r2, #6
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 80026c6:	2211      	movs	r2, #17
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 80026da:	2205      	movs	r2, #5
 80026dc:	601a      	str	r2, [r3, #0]
	 break;
 80026de:	f003 bded 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  42  :    x=9   ;  y=223  ;  width=7   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=6    ;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 80026e4:	2209      	movs	r2, #9
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 80026ea:	22df      	movs	r2, #223	; 0xdf
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 80026f6:	2208      	movs	r2, #8
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800270a:	2206      	movs	r2, #6
 800270c:	601a      	str	r2, [r3, #0]
	 break;
 800270e:	f003 bdd5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  43  :    x=453 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <Odczytaj_znak_S16_uc8+0x88c>)
 8002714:	f240 12c5 	movw	r2, #453	; 0x1c5
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <Odczytaj_znak_S16_uc8+0x890>)
 800271c:	22bb      	movs	r2, #187	; 0xbb
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <Odczytaj_znak_S16_uc8+0x894>)
 8002722:	220a      	movs	r2, #10
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <Odczytaj_znak_S16_uc8+0x898>)
 8002728:	220b      	movs	r2, #11
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <Odczytaj_znak_S16_uc8+0x89c>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <Odczytaj_znak_S16_uc8+0x8a0>)
 8002734:	2203      	movs	r2, #3
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <Odczytaj_znak_S16_uc8+0x8a4>)
 800273a:	220a      	movs	r2, #10
 800273c:	601a      	str	r2, [r3, #0]
	 break;
 800273e:	f003 bdbd 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8002742:	bf00      	nop
 8002744:	2400f638 	.word	0x2400f638
 8002748:	24014460 	.word	0x24014460
 800274c:	24014694 	.word	0x24014694
 8002750:	24014464 	.word	0x24014464
 8002754:	2400f634 	.word	0x2400f634
 8002758:	2400f63c 	.word	0x2400f63c
 800275c:	24014690 	.word	0x24014690
	case  44  :    x=507 ;  y=201  ;  width=4   ;  height=7    ;  xoffset=0    ;  yoffset=12   ;  xadvance=4    ;
 8002760:	4b97      	ldr	r3, [pc, #604]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002762:	f240 12fb 	movw	r2, #507	; 0x1fb
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 800276a:	22c9      	movs	r2, #201	; 0xc9
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 8002770:	2204      	movs	r2, #4
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	4b95      	ldr	r3, [pc, #596]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 8002776:	2207      	movs	r2, #7
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4b95      	ldr	r3, [pc, #596]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b94      	ldr	r3, [pc, #592]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 8002788:	2204      	movs	r2, #4
 800278a:	601a      	str	r2, [r3, #0]
	 break;
 800278c:	f003 bd96 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  45  :    x=216 ;  y=223  ;  width=6   ;  height=4    ;  xoffset=0    ;  yoffset=9    ;  xadvance=6    ;
 8002790:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002792:	22d8      	movs	r2, #216	; 0xd8
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002798:	22df      	movs	r2, #223	; 0xdf
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	4b8a      	ldr	r3, [pc, #552]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 800279e:	2206      	movs	r2, #6
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 80027a4:	2204      	movs	r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 80027b0:	2209      	movs	r2, #9
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 80027b6:	2206      	movs	r2, #6
 80027b8:	601a      	str	r2, [r3, #0]
	 break;
 80027ba:	f003 bd7f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  46  :    x=222 ;  y=223  ;  width=4   ;  height=4    ;  xoffset=0    ;  yoffset=12   ;  xadvance=4    ;
 80027be:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 80027c0:	22de      	movs	r2, #222	; 0xde
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 80027c6:	22df      	movs	r2, #223	; 0xdf
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	4b7f      	ldr	r3, [pc, #508]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 80027cc:	2204      	movs	r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 80027d2:	2204      	movs	r2, #4
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4b7e      	ldr	r3, [pc, #504]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b7d      	ldr	r3, [pc, #500]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	4b7d      	ldr	r3, [pc, #500]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 80027e4:	2204      	movs	r2, #4
 80027e6:	601a      	str	r2, [r3, #0]
	 break;
 80027e8:	f003 bd68 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  47  :    x=494 ;  y=72   ;  width=6   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 80027ec:	4b74      	ldr	r3, [pc, #464]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 80027ee:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 80027f6:	2248      	movs	r2, #72	; 0x48
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 80027fc:	2206      	movs	r2, #6
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4b72      	ldr	r3, [pc, #456]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 8002802:	220e      	movs	r2, #14
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b71      	ldr	r3, [pc, #452]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 8002816:	2204      	movs	r2, #4
 8002818:	601a      	str	r2, [r3, #0]
	 break;
 800281a:	f003 bd4f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  48  :    x=500 ;  y=72   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800281e:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002820:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002828:	2248      	movs	r2, #72	; 0x48
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	4b66      	ldr	r3, [pc, #408]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 800282e:	2209      	movs	r2, #9
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4b66      	ldr	r3, [pc, #408]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 8002834:	220e      	movs	r2, #14
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 8002846:	2209      	movs	r2, #9
 8002848:	601a      	str	r2, [r3, #0]
	 break;
 800284a:	f003 bd37 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  49  :    x=0   ;  y=89   ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002856:	2259      	movs	r2, #89	; 0x59
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 8002862:	220e      	movs	r2, #14
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 8002874:	2209      	movs	r2, #9
 8002876:	601a      	str	r2, [r3, #0]
	 break;
 8002878:	f003 bd20 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  50  :    x=7   ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 800287e:	2207      	movs	r2, #7
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002884:	2259      	movs	r2, #89	; 0x59
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 800288a:	2209      	movs	r2, #9
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 8002890:	220e      	movs	r2, #14
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b4d      	ldr	r3, [pc, #308]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 80028a2:	2209      	movs	r2, #9
 80028a4:	601a      	str	r2, [r3, #0]
	 break;
 80028a6:	f003 bd09 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  51  :    x=16  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 80028aa:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 80028ac:	2210      	movs	r2, #16
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 80028b2:	2259      	movs	r2, #89	; 0x59
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 80028b8:	220a      	movs	r2, #10
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 80028be:	220e      	movs	r2, #14
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 80028d2:	2209      	movs	r2, #9
 80028d4:	601a      	str	r2, [r3, #0]
	 break;
 80028d6:	f003 bcf1 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  52  :    x=26  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 80028dc:	221a      	movs	r2, #26
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 80028e2:	2259      	movs	r2, #89	; 0x59
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 80028e8:	220a      	movs	r2, #10
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 80028ee:	220e      	movs	r2, #14
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 8002900:	220a      	movs	r2, #10
 8002902:	601a      	str	r2, [r3, #0]
	 break;
 8002904:	f003 bcda 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  53  :    x=36  ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8002908:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 8002910:	2259      	movs	r2, #89	; 0x59
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 8002916:	2209      	movs	r2, #9
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 800291c:	220e      	movs	r2, #14
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 800292e:	2209      	movs	r2, #9
 8002930:	601a      	str	r2, [r3, #0]
	 break;
 8002932:	f003 bcc3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  54  :    x=45  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002938:	222d      	movs	r2, #45	; 0x2d
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 800293e:	2259      	movs	r2, #89	; 0x59
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 8002944:	220a      	movs	r2, #10
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 800294a:	220e      	movs	r2, #14
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 800295c:	220a      	movs	r2, #10
 800295e:	601a      	str	r2, [r3, #0]
	 break;
 8002960:	f003 bcac 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  55  :    x=55  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002966:	2237      	movs	r2, #55	; 0x37
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 800296c:	2259      	movs	r2, #89	; 0x59
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 8002972:	220a      	movs	r2, #10
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 8002978:	220e      	movs	r2, #14
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 800298a:	220a      	movs	r2, #10
 800298c:	601a      	str	r2, [r3, #0]
	 break;
 800298e:	f003 bc95 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  56  :    x=65  ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <Odczytaj_znak_S16_uc8+0xb08>)
 8002994:	2241      	movs	r2, #65	; 0x41
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <Odczytaj_znak_S16_uc8+0xb0c>)
 800299a:	2259      	movs	r2, #89	; 0x59
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <Odczytaj_znak_S16_uc8+0xb10>)
 80029a0:	2209      	movs	r2, #9
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <Odczytaj_znak_S16_uc8+0xb14>)
 80029a6:	220e      	movs	r2, #14
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <Odczytaj_znak_S16_uc8+0xb18>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <Odczytaj_znak_S16_uc8+0xb1c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <Odczytaj_znak_S16_uc8+0xb20>)
 80029b8:	2209      	movs	r2, #9
 80029ba:	601a      	str	r2, [r3, #0]
	 break;
 80029bc:	f003 bc7e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 80029c0:	2400f638 	.word	0x2400f638
 80029c4:	24014460 	.word	0x24014460
 80029c8:	24014694 	.word	0x24014694
 80029cc:	24014464 	.word	0x24014464
 80029d0:	2400f634 	.word	0x2400f634
 80029d4:	2400f63c 	.word	0x2400f63c
 80029d8:	24014690 	.word	0x24014690
	case  57  :    x=74  ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80029dc:	4b97      	ldr	r3, [pc, #604]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 80029de:	224a      	movs	r2, #74	; 0x4a
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	4b97      	ldr	r3, [pc, #604]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 80029e4:	2259      	movs	r2, #89	; 0x59
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	4b96      	ldr	r3, [pc, #600]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 80029ea:	2209      	movs	r2, #9
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 80029f0:	220e      	movs	r2, #14
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	4b95      	ldr	r3, [pc, #596]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4b95      	ldr	r3, [pc, #596]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	4b94      	ldr	r3, [pc, #592]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002a02:	2209      	movs	r2, #9
 8002a04:	601a      	str	r2, [r3, #0]
	 break;
 8002a06:	f003 bc59 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  58  :    x=463 ;  y=187  ;  width=4   ;  height=11   ;  xoffset=1    ;  yoffset=5    ;  xadvance=6    ;
 8002a0a:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002a0c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002a14:	22bb      	movs	r2, #187	; 0xbb
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	4b8a      	ldr	r3, [pc, #552]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	4b8a      	ldr	r3, [pc, #552]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002a20:	220b      	movs	r2, #11
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4b89      	ldr	r3, [pc, #548]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002a32:	2206      	movs	r2, #6
 8002a34:	601a      	str	r2, [r3, #0]
	 break;
 8002a36:	f003 bc41 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  59  :    x=83  ;  y=89   ;  width=4   ;  height=14   ;  xoffset=1    ;  yoffset=5    ;  xadvance=6    ;
 8002a3a:	4b80      	ldr	r3, [pc, #512]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002a3c:	2253      	movs	r2, #83	; 0x53
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002a42:	2259      	movs	r2, #89	; 0x59
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	4b7f      	ldr	r3, [pc, #508]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002a48:	2204      	movs	r2, #4
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002a4e:	220e      	movs	r2, #14
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	4b7e      	ldr	r3, [pc, #504]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002a60:	2206      	movs	r2, #6
 8002a62:	601a      	str	r2, [r3, #0]
	 break;
 8002a64:	f003 bc2a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  60  :    x=413 ;  y=187  ;  width=10  ;  height=12   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8002a68:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002a6a:	f240 129d 	movw	r2, #413	; 0x19d
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002a72:	22bb      	movs	r2, #187	; 0xbb
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002a78:	220a      	movs	r2, #10
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4b72      	ldr	r3, [pc, #456]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	4b71      	ldr	r3, [pc, #452]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4b71      	ldr	r3, [pc, #452]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002a90:	220a      	movs	r2, #10
 8002a92:	601a      	str	r2, [r3, #0]
	 break;
 8002a94:	f003 bc12 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  61  :    x=58  ;  y=223  ;  width=10  ;  height=7    ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002a9a:	223a      	movs	r2, #58	; 0x3a
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002aa0:	22df      	movs	r2, #223	; 0xdf
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002aa6:	220a      	movs	r2, #10
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002ab8:	2205      	movs	r2, #5
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002abe:	220a      	movs	r2, #10
 8002ac0:	601a      	str	r2, [r3, #0]
	 break;
 8002ac2:	f003 bbfb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  62  :    x=423 ;  y=187  ;  width=10  ;  height=12   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002ac8:	f240 12a7 	movw	r2, #423	; 0x1a7
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002ad0:	22bb      	movs	r2, #187	; 0xbb
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002ad6:	220a      	movs	r2, #10
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002adc:	220c      	movs	r2, #12
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002ae8:	2203      	movs	r2, #3
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002aee:	220a      	movs	r2, #10
 8002af0:	601a      	str	r2, [r3, #0]
	 break;
 8002af2:	f003 bbe3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  63  :    x=87  ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002af8:	2257      	movs	r2, #87	; 0x57
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002afe:	2259      	movs	r2, #89	; 0x59
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b04:	220a      	movs	r2, #10
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b0a:	220e      	movs	r2, #14
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002b1c:	220a      	movs	r2, #10
 8002b1e:	601a      	str	r2, [r3, #0]
	 break;
 8002b20:	f003 bbcc 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  64  :    x=459 ;  y=0    ;  width=16  ;  height=17   ;  xoffset=0    ;  yoffset=0    ;  xadvance=15   ;
 8002b24:	4b45      	ldr	r3, [pc, #276]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002b26:	f240 12cb 	movw	r2, #459	; 0x1cb
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b34:	2210      	movs	r2, #16
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b3a:	2211      	movs	r2, #17
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	601a      	str	r2, [r3, #0]
	 break;
 8002b50:	f003 bbb4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  65  :    x=97  ;  y=89   ;  width=14  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8002b54:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002b56:	2261      	movs	r2, #97	; 0x61
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002b5c:	2259      	movs	r2, #89	; 0x59
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b62:	220e      	movs	r2, #14
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b68:	220e      	movs	r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002b7c:	220c      	movs	r2, #12
 8002b7e:	601a      	str	r2, [r3, #0]
	 break;
 8002b80:	f003 bb9c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  66  :    x=111 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002b86:	226f      	movs	r2, #111	; 0x6f
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002b8c:	2259      	movs	r2, #89	; 0x59
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002b92:	220b      	movs	r2, #11
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002b98:	220e      	movs	r2, #14
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002baa:	220b      	movs	r2, #11
 8002bac:	601a      	str	r2, [r3, #0]
	 break;
 8002bae:	f003 bb85 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  67  :    x=122 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002bb4:	227a      	movs	r2, #122	; 0x7a
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002bba:	2259      	movs	r2, #89	; 0x59
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002bc6:	220e      	movs	r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002bd8:	220c      	movs	r2, #12
 8002bda:	601a      	str	r2, [r3, #0]
	 break;
 8002bdc:	f003 bb6e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  68  :    x=134 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002be2:	2286      	movs	r2, #134	; 0x86
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002be8:	2259      	movs	r2, #89	; 0x59
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002bee:	220b      	movs	r2, #11
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002bf4:	220e      	movs	r2, #14
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002c06:	220b      	movs	r2, #11
 8002c08:	601a      	str	r2, [r3, #0]
	 break;
 8002c0a:	f003 bb57 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  69  :    x=145 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <Odczytaj_znak_S16_uc8+0xd84>)
 8002c10:	2291      	movs	r2, #145	; 0x91
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <Odczytaj_znak_S16_uc8+0xd88>)
 8002c16:	2259      	movs	r2, #89	; 0x59
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <Odczytaj_znak_S16_uc8+0xd8c>)
 8002c1c:	220b      	movs	r2, #11
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <Odczytaj_znak_S16_uc8+0xd90>)
 8002c22:	220e      	movs	r2, #14
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <Odczytaj_znak_S16_uc8+0xd94>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <Odczytaj_znak_S16_uc8+0xd98>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <Odczytaj_znak_S16_uc8+0xd9c>)
 8002c34:	220b      	movs	r2, #11
 8002c36:	601a      	str	r2, [r3, #0]
	 break;
 8002c38:	f003 bb40 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8002c3c:	2400f638 	.word	0x2400f638
 8002c40:	24014460 	.word	0x24014460
 8002c44:	24014694 	.word	0x24014694
 8002c48:	24014464 	.word	0x24014464
 8002c4c:	2400f634 	.word	0x2400f634
 8002c50:	2400f63c 	.word	0x2400f63c
 8002c54:	24014690 	.word	0x24014690
	case  70  :    x=156 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002c58:	4b96      	ldr	r3, [pc, #600]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002c5a:	229c      	movs	r2, #156	; 0x9c
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	4b96      	ldr	r3, [pc, #600]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002c60:	2259      	movs	r2, #89	; 0x59
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b95      	ldr	r3, [pc, #596]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002c66:	220a      	movs	r2, #10
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	4b95      	ldr	r3, [pc, #596]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002c6c:	220e      	movs	r2, #14
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b94      	ldr	r3, [pc, #592]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	4b94      	ldr	r3, [pc, #592]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002c7e:	220a      	movs	r2, #10
 8002c80:	601a      	str	r2, [r3, #0]
	 break;
 8002c82:	f003 bb1b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  71  :    x=166 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002c88:	22a6      	movs	r2, #166	; 0xa6
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	4b8a      	ldr	r3, [pc, #552]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002c8e:	2259      	movs	r2, #89	; 0x59
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002c94:	220d      	movs	r2, #13
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002c9a:	220e      	movs	r2, #14
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002cac:	220d      	movs	r2, #13
 8002cae:	601a      	str	r2, [r3, #0]
	 break;
 8002cb0:	f003 bb04 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  72  :    x=179 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002cb4:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002cb6:	22b3      	movs	r2, #179	; 0xb3
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002cbc:	2259      	movs	r2, #89	; 0x59
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	4b7e      	ldr	r3, [pc, #504]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002cc2:	220b      	movs	r2, #11
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002cc8:	220e      	movs	r2, #14
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	4b7d      	ldr	r3, [pc, #500]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4b7c      	ldr	r3, [pc, #496]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002cda:	220b      	movs	r2, #11
 8002cdc:	601a      	str	r2, [r3, #0]
	 break;
 8002cde:	f003 baed 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  73  :    x=190 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8002ce2:	4b74      	ldr	r3, [pc, #464]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002ce4:	22be      	movs	r2, #190	; 0xbe
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002cea:	2259      	movs	r2, #89	; 0x59
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002cf6:	220e      	movs	r2, #14
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	4b72      	ldr	r3, [pc, #456]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002d08:	2204      	movs	r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
	 break;
 8002d0c:	f003 bad6 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  74  :    x=194 ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002d12:	22c2      	movs	r2, #194	; 0xc2
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002d18:	2259      	movs	r2, #89	; 0x59
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002d1e:	2209      	movs	r2, #9
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002d24:	220e      	movs	r2, #14
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002d36:	220a      	movs	r2, #10
 8002d38:	601a      	str	r2, [r3, #0]
	 break;
 8002d3a:	f003 babf 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  75  :    x=203 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002d40:	22cb      	movs	r2, #203	; 0xcb
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002d46:	2259      	movs	r2, #89	; 0x59
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002d52:	220e      	movs	r2, #14
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002d64:	220b      	movs	r2, #11
 8002d66:	601a      	str	r2, [r3, #0]
	 break;
 8002d68:	f003 baa8 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  76  :    x=215 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8002d6c:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002d6e:	22d7      	movs	r2, #215	; 0xd7
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002d74:	2259      	movs	r2, #89	; 0x59
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002d7a:	220a      	movs	r2, #10
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002d80:	220e      	movs	r2, #14
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002d92:	220a      	movs	r2, #10
 8002d94:	601a      	str	r2, [r3, #0]
	 break;
 8002d96:	f003 ba91 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  77  :    x=225 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002d9c:	22e1      	movs	r2, #225	; 0xe1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002da2:	2259      	movs	r2, #89	; 0x59
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002da8:	220d      	movs	r2, #13
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002dae:	220e      	movs	r2, #14
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	4b44      	ldr	r3, [pc, #272]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002dc0:	220d      	movs	r2, #13
 8002dc2:	601a      	str	r2, [r3, #0]
	 break;
 8002dc4:	f003 ba7a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  78  :    x=238 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002dca:	22ee      	movs	r2, #238	; 0xee
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002dd0:	2259      	movs	r2, #89	; 0x59
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002dd6:	220b      	movs	r2, #11
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002ddc:	220e      	movs	r2, #14
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
	 break;
 8002df2:	f003 ba63 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  79  :    x=249 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002df8:	22f9      	movs	r2, #249	; 0xf9
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002dfe:	2259      	movs	r2, #89	; 0x59
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002e04:	220d      	movs	r2, #13
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002e0a:	220e      	movs	r2, #14
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002e1c:	220d      	movs	r2, #13
 8002e1e:	601a      	str	r2, [r3, #0]
	 break;
 8002e20:	f003 ba4c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  80  :    x=262 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e26:	f44f 7283 	mov.w	r2, #262	; 0x106
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e2e:	2259      	movs	r2, #89	; 0x59
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002e34:	220b      	movs	r2, #11
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002e3a:	220e      	movs	r2, #14
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002e4c:	220b      	movs	r2, #11
 8002e4e:	601a      	str	r2, [r3, #0]
	 break;
 8002e50:	f003 ba34 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  81  :    x=363 ;  y=72   ;  width=13  ;  height=15   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e56:	f240 126b 	movw	r2, #363	; 0x16b
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e5e:	2248      	movs	r2, #72	; 0x48
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002e64:	220d      	movs	r2, #13
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002e7c:	220d      	movs	r2, #13
 8002e7e:	601a      	str	r2, [r3, #0]
	 break;
 8002e80:	f003 ba1c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  82  :    x=273 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <Odczytaj_znak_S16_uc8+0xffc>)
 8002e86:	f240 1211 	movw	r2, #273	; 0x111
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <Odczytaj_znak_S16_uc8+0x1000>)
 8002e8e:	2259      	movs	r2, #89	; 0x59
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <Odczytaj_znak_S16_uc8+0x1004>)
 8002e94:	220c      	movs	r2, #12
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <Odczytaj_znak_S16_uc8+0x1008>)
 8002e9a:	220e      	movs	r2, #14
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <Odczytaj_znak_S16_uc8+0x100c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <Odczytaj_znak_S16_uc8+0x1010>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <Odczytaj_znak_S16_uc8+0x1014>)
 8002eac:	220b      	movs	r2, #11
 8002eae:	601a      	str	r2, [r3, #0]
	 break;
 8002eb0:	f003 ba04 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8002eb4:	2400f638 	.word	0x2400f638
 8002eb8:	24014460 	.word	0x24014460
 8002ebc:	24014694 	.word	0x24014694
 8002ec0:	24014464 	.word	0x24014464
 8002ec4:	2400f634 	.word	0x2400f634
 8002ec8:	2400f63c 	.word	0x2400f63c
 8002ecc:	24014690 	.word	0x24014690
	case  83  :    x=285 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002ed0:	4b9d      	ldr	r3, [pc, #628]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002ed2:	f240 121d 	movw	r2, #285	; 0x11d
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	4b9c      	ldr	r3, [pc, #624]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8002eda:	2259      	movs	r2, #89	; 0x59
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	4b9c      	ldr	r3, [pc, #624]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8002ee0:	220b      	movs	r2, #11
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	4b9b      	ldr	r3, [pc, #620]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 8002ee6:	220e      	movs	r2, #14
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4b9b      	ldr	r3, [pc, #620]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	4b9a      	ldr	r3, [pc, #616]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	4b9a      	ldr	r3, [pc, #616]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8002ef8:	220b      	movs	r2, #11
 8002efa:	601a      	str	r2, [r3, #0]
	 break;
 8002efc:	f003 b9de 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  84  :    x=296 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002f00:	4b91      	ldr	r3, [pc, #580]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002f02:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b90      	ldr	r3, [pc, #576]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8002f0a:	2259      	movs	r2, #89	; 0x59
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4b90      	ldr	r3, [pc, #576]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8002f10:	220b      	movs	r2, #11
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 8002f16:	220e      	movs	r2, #14
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b8e      	ldr	r3, [pc, #568]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4b8e      	ldr	r3, [pc, #568]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8002f28:	220b      	movs	r2, #11
 8002f2a:	601a      	str	r2, [r3, #0]
	 break;
 8002f2c:	f003 b9c6 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  85  :    x=307 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8002f30:	4b85      	ldr	r3, [pc, #532]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002f32:	f240 1233 	movw	r2, #307	; 0x133
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	4b84      	ldr	r3, [pc, #528]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8002f3a:	2259      	movs	r2, #89	; 0x59
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	4b84      	ldr	r3, [pc, #528]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8002f40:	220b      	movs	r2, #11
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	4b83      	ldr	r3, [pc, #524]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 8002f46:	220e      	movs	r2, #14
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	4b83      	ldr	r3, [pc, #524]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	4b82      	ldr	r3, [pc, #520]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	4b82      	ldr	r3, [pc, #520]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8002f58:	220b      	movs	r2, #11
 8002f5a:	601a      	str	r2, [r3, #0]
	 break;
 8002f5c:	f003 b9ae 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  86  :    x=318 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 8002f60:	4b79      	ldr	r3, [pc, #484]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002f62:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4b78      	ldr	r3, [pc, #480]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8002f6a:	2259      	movs	r2, #89	; 0x59
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	4b78      	ldr	r3, [pc, #480]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8002f70:	220d      	movs	r2, #13
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	4b77      	ldr	r3, [pc, #476]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 8002f76:	220e      	movs	r2, #14
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	4b77      	ldr	r3, [pc, #476]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	4b75      	ldr	r3, [pc, #468]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8002f8a:	220b      	movs	r2, #11
 8002f8c:	601a      	str	r2, [r3, #0]
	 break;
 8002f8e:	f003 b995 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  87  :    x=331 ;  y=89   ;  width=17  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=15   ;
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002f94:	f240 124b 	movw	r2, #331	; 0x14b
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	4b6c      	ldr	r3, [pc, #432]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8002f9c:	2259      	movs	r2, #89	; 0x59
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8002fa2:	2211      	movs	r2, #17
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 8002fa8:	220e      	movs	r2, #14
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8002fae:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4b69      	ldr	r3, [pc, #420]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	4b69      	ldr	r3, [pc, #420]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	601a      	str	r2, [r3, #0]
	 break;
 8002fc0:	f003 b97c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  88  :    x=348 ;  y=89   ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 8002fc4:	4b60      	ldr	r3, [pc, #384]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002fc6:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4b5f      	ldr	r3, [pc, #380]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8002fce:	2259      	movs	r2, #89	; 0x59
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8002fd4:	220d      	movs	r2, #13
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 8002fda:	220e      	movs	r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4b5e      	ldr	r3, [pc, #376]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8002fee:	220b      	movs	r2, #11
 8002ff0:	601a      	str	r2, [r3, #0]
	 break;
 8002ff2:	f003 b963 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  89  :    x=361 ;  y=89   ;  width=12  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=10   ;
 8002ff6:	4b54      	ldr	r3, [pc, #336]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 8002ff8:	f240 1269 	movw	r2, #361	; 0x169
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8003000:	2259      	movs	r2, #89	; 0x59
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4b52      	ldr	r3, [pc, #328]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8003006:	220c      	movs	r2, #12
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4b52      	ldr	r3, [pc, #328]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 800300c:	220e      	movs	r2, #14
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	4b51      	ldr	r3, [pc, #324]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003012:	f04f 32ff 	mov.w	r2, #4294967295
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	4b50      	ldr	r3, [pc, #320]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8003020:	220a      	movs	r2, #10
 8003022:	601a      	str	r2, [r3, #0]
	 break;
 8003024:	f003 b94a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  90  :    x=373 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8003028:	4b47      	ldr	r3, [pc, #284]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 800302a:	f240 1275 	movw	r2, #373	; 0x175
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b46      	ldr	r3, [pc, #280]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8003032:	2259      	movs	r2, #89	; 0x59
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8003038:	220b      	movs	r2, #11
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	4b45      	ldr	r3, [pc, #276]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 800303e:	220e      	movs	r2, #14
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	4b45      	ldr	r3, [pc, #276]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	4b44      	ldr	r3, [pc, #272]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	4b44      	ldr	r3, [pc, #272]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8003050:	220b      	movs	r2, #11
 8003052:	601a      	str	r2, [r3, #0]
	 break;
 8003054:	f003 b932 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  91  :    x=475 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8003058:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 800305a:	f240 12db 	movw	r2, #475	; 0x1db
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	4b3a      	ldr	r3, [pc, #232]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8003068:	2206      	movs	r2, #6
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 800306e:	2211      	movs	r2, #17
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	4b38      	ldr	r3, [pc, #224]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4b38      	ldr	r3, [pc, #224]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8003080:	2206      	movs	r2, #6
 8003082:	601a      	str	r2, [r3, #0]
	 break;
 8003084:	f003 b91a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  92  :    x=384 ;  y=89   ;  width=6   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 8003088:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 800308a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8003092:	2259      	movs	r2, #89	; 0x59
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8003098:	2206      	movs	r2, #6
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 800309e:	220e      	movs	r2, #14
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 80030b2:	2204      	movs	r2, #4
 80030b4:	601a      	str	r2, [r3, #0]
	 break;
 80030b6:	f003 b901 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  93  :    x=481 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 80030bc:	f240 12e1 	movw	r2, #481	; 0x1e1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	4b22      	ldr	r3, [pc, #136]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 80030ca:	2206      	movs	r2, #6
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 80030d0:	2211      	movs	r2, #17
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	4b20      	ldr	r3, [pc, #128]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 80030e2:	2206      	movs	r2, #6
 80030e4:	601a      	str	r2, [r3, #0]
	 break;
 80030e6:	f003 b8e9 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  94  :    x=0   ;  y=223  ;  width=9   ;  height=9    ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 80030f2:	22df      	movs	r2, #223	; 0xdf
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 80030f8:	2209      	movs	r2, #9
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 80030fe:	2209      	movs	r2, #9
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8003110:	2209      	movs	r2, #9
 8003112:	601a      	str	r2, [r3, #0]
	 break;
 8003114:	f003 b8d2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  95  :    x=226 ;  y=223  ;  width=11  ;  height=4    ;  xoffset=-1   ;  yoffset=15   ;  xadvance=9    ;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <Odczytaj_znak_S16_uc8+0x1290>)
 800311a:	22e2      	movs	r2, #226	; 0xe2
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <Odczytaj_znak_S16_uc8+0x1294>)
 8003120:	22df      	movs	r2, #223	; 0xdf
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <Odczytaj_znak_S16_uc8+0x1298>)
 8003126:	220b      	movs	r2, #11
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <Odczytaj_znak_S16_uc8+0x129c>)
 800312c:	2204      	movs	r2, #4
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <Odczytaj_znak_S16_uc8+0x12a0>)
 8003132:	f04f 32ff 	mov.w	r2, #4294967295
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <Odczytaj_znak_S16_uc8+0x12a4>)
 800313a:	220f      	movs	r2, #15
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <Odczytaj_znak_S16_uc8+0x12a8>)
 8003140:	2209      	movs	r2, #9
 8003142:	601a      	str	r2, [r3, #0]
	 break;
 8003144:	f003 b8ba 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8003148:	2400f638 	.word	0x2400f638
 800314c:	24014460 	.word	0x24014460
 8003150:	24014694 	.word	0x24014694
 8003154:	24014464 	.word	0x24014464
 8003158:	2400f634 	.word	0x2400f634
 800315c:	2400f63c 	.word	0x2400f63c
 8003160:	24014690 	.word	0x24014690
	case  96  :    x=237 ;  y=223  ;  width=6   ;  height=4    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003164:	4b9b      	ldr	r3, [pc, #620]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003166:	22ed      	movs	r2, #237	; 0xed
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	4b9b      	ldr	r3, [pc, #620]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800316c:	22df      	movs	r2, #223	; 0xdf
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b9a      	ldr	r3, [pc, #616]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003172:	2206      	movs	r2, #6
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	4b9a      	ldr	r3, [pc, #616]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 8003178:	2204      	movs	r2, #4
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	4b99      	ldr	r3, [pc, #612]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 800317e:	f04f 32ff 	mov.w	r2, #4294967295
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b98      	ldr	r3, [pc, #608]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4b98      	ldr	r3, [pc, #608]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800318c:	2205      	movs	r2, #5
 800318e:	601a      	str	r2, [r3, #0]
	 break;
 8003190:	f003 b894 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  97  :    x=467 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003194:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003196:	f240 12d3 	movw	r2, #467	; 0x1d3
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800319e:	22bb      	movs	r2, #187	; 0xbb
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 80031a4:	220a      	movs	r2, #10
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	4b8d      	ldr	r3, [pc, #564]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 80031aa:	220b      	movs	r2, #11
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	4b8d      	ldr	r3, [pc, #564]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 80031b6:	2205      	movs	r2, #5
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 80031bc:	2209      	movs	r2, #9
 80031be:	601a      	str	r2, [r3, #0]
	 break;
 80031c0:	f003 b87c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  98  :    x=390 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80031c4:	4b83      	ldr	r3, [pc, #524]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 80031c6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 80031ce:	2259      	movs	r2, #89	; 0x59
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	4b82      	ldr	r3, [pc, #520]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 80031d4:	220a      	movs	r2, #10
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 80031da:	220e      	movs	r2, #14
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	4b80      	ldr	r3, [pc, #512]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 80031ec:	220a      	movs	r2, #10
 80031ee:	601a      	str	r2, [r3, #0]
	 break;
 80031f0:	f003 b864 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  99  :    x=477 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 80031f4:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 80031f6:	f240 12dd 	movw	r2, #477	; 0x1dd
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 80031fe:	22bb      	movs	r2, #187	; 0xbb
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003204:	220a      	movs	r2, #10
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	4b75      	ldr	r3, [pc, #468]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800320a:	220b      	movs	r2, #11
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003216:	2205      	movs	r2, #5
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	4b74      	ldr	r3, [pc, #464]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800321c:	2209      	movs	r2, #9
 800321e:	601a      	str	r2, [r3, #0]
	 break;
 8003220:	f003 b84c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  100 :    x=400 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8003224:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003226:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800322e:	2259      	movs	r2, #89	; 0x59
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003234:	220a      	movs	r2, #10
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800323a:	220e      	movs	r2, #14
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	4b69      	ldr	r3, [pc, #420]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	4b68      	ldr	r3, [pc, #416]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800324c:	220a      	movs	r2, #10
 800324e:	601a      	str	r2, [r3, #0]
	 break;
 8003250:	f003 b834 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  101 :    x=487 ;  y=187  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8003254:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003256:	f240 12e7 	movw	r2, #487	; 0x1e7
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800325e:	22bb      	movs	r2, #187	; 0xbb
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4b5e      	ldr	r3, [pc, #376]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003264:	220a      	movs	r2, #10
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800326a:	220b      	movs	r2, #11
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	4b5c      	ldr	r3, [pc, #368]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003276:	2205      	movs	r2, #5
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800327c:	220a      	movs	r2, #10
 800327e:	601a      	str	r2, [r3, #0]
	 break;
 8003280:	f003 b81c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  102 :    x=410 ;  y=89   ;  width=8   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003286:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	4b52      	ldr	r3, [pc, #328]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800328e:	2259      	movs	r2, #89	; 0x59
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	4b52      	ldr	r3, [pc, #328]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003294:	2208      	movs	r2, #8
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800329a:	220e      	movs	r2, #14
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	4b50      	ldr	r3, [pc, #320]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	601a      	str	r2, [r3, #0]
	 break;
 80032b0:	f003 b804 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  103 :    x=418 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 80032b6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 80032be:	2259      	movs	r2, #89	; 0x59
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 80032c4:	220a      	movs	r2, #10
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	4b45      	ldr	r3, [pc, #276]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 80032ca:	220e      	movs	r2, #14
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	4b45      	ldr	r3, [pc, #276]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 80032d6:	2205      	movs	r2, #5
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 80032dc:	220a      	movs	r2, #10
 80032de:	601a      	str	r2, [r3, #0]
	 break;
 80032e0:	f002 bfec 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  104 :    x=428 ;  y=89   ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 80032e6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 80032ee:	2259      	movs	r2, #89	; 0x59
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 80032f4:	2209      	movs	r2, #9
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 80032fa:	220e      	movs	r2, #14
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800330c:	2209      	movs	r2, #9
 800330e:	601a      	str	r2, [r3, #0]
	 break;
 8003310:	f002 bfd4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  105 :    x=437 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8003314:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003316:	f240 12b5 	movw	r2, #437	; 0x1b5
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800331e:	2259      	movs	r2, #89	; 0x59
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003324:	2204      	movs	r2, #4
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800332a:	220e      	movs	r2, #14
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800333c:	2204      	movs	r2, #4
 800333e:	601a      	str	r2, [r3, #0]
	 break;
 8003340:	f002 bfbc 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  106 :    x=487 ;  y=0    ;  width=6   ;  height=17   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=4    ;
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003346:	f240 12e7 	movw	r2, #487	; 0x1e7
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003354:	2206      	movs	r2, #6
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800335a:	2211      	movs	r2, #17
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003360:	f06f 0201 	mvn.w	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800336e:	2204      	movs	r2, #4
 8003370:	601a      	str	r2, [r3, #0]
	 break;
 8003372:	f002 bfa3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  107 :    x=441 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 8003378:	f240 12b9 	movw	r2, #441	; 0x1b9
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 8003380:	2259      	movs	r2, #89	; 0x59
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 8003386:	220a      	movs	r2, #10
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 800338c:	220e      	movs	r2, #14
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 800339e:	2209      	movs	r2, #9
 80033a0:	601a      	str	r2, [r3, #0]
	 break;
 80033a2:	f002 bf8b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  108 :    x=190 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <Odczytaj_znak_S16_uc8+0x151c>)
 80033a8:	22be      	movs	r2, #190	; 0xbe
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <Odczytaj_znak_S16_uc8+0x1520>)
 80033ae:	2259      	movs	r2, #89	; 0x59
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <Odczytaj_znak_S16_uc8+0x1524>)
 80033b4:	2204      	movs	r2, #4
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <Odczytaj_znak_S16_uc8+0x1528>)
 80033ba:	220e      	movs	r2, #14
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <Odczytaj_znak_S16_uc8+0x152c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <Odczytaj_znak_S16_uc8+0x1530>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <Odczytaj_znak_S16_uc8+0x1534>)
 80033cc:	2204      	movs	r2, #4
 80033ce:	601a      	str	r2, [r3, #0]
	 break;
 80033d0:	f002 bf74 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 80033d4:	2400f638 	.word	0x2400f638
 80033d8:	24014460 	.word	0x24014460
 80033dc:	24014694 	.word	0x24014694
 80033e0:	24014464 	.word	0x24014464
 80033e4:	2400f634 	.word	0x2400f634
 80033e8:	2400f63c 	.word	0x2400f63c
 80033ec:	24014690 	.word	0x24014690
	case  109 :    x=497 ;  y=187  ;  width=14  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=14   ;
 80033f0:	4b99      	ldr	r3, [pc, #612]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 80033f2:	f240 12f1 	movw	r2, #497	; 0x1f1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b98      	ldr	r3, [pc, #608]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 80033fa:	22bb      	movs	r2, #187	; 0xbb
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	4b98      	ldr	r3, [pc, #608]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 8003400:	220e      	movs	r2, #14
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	4b97      	ldr	r3, [pc, #604]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003406:	220b      	movs	r2, #11
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	4b97      	ldr	r3, [pc, #604]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	4b96      	ldr	r3, [pc, #600]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 8003412:	2205      	movs	r2, #5
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	4b96      	ldr	r3, [pc, #600]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003418:	220e      	movs	r2, #14
 800341a:	601a      	str	r2, [r3, #0]
	 break;
 800341c:	f002 bf4e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  110 :    x=0   ;  y=201  ;  width=9   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003420:	4b8d      	ldr	r3, [pc, #564]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	4b8d      	ldr	r3, [pc, #564]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003428:	22c9      	movs	r2, #201	; 0xc9
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 800342e:	2209      	movs	r2, #9
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	4b8c      	ldr	r3, [pc, #560]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003434:	220b      	movs	r2, #11
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	4b8b      	ldr	r3, [pc, #556]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 8003440:	2205      	movs	r2, #5
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4b8a      	ldr	r3, [pc, #552]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003446:	2209      	movs	r2, #9
 8003448:	601a      	str	r2, [r3, #0]
	 break;
 800344a:	f002 bf37 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  111 :    x=9   ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 800344e:	4b82      	ldr	r3, [pc, #520]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003450:	2209      	movs	r2, #9
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003456:	22c9      	movs	r2, #201	; 0xc9
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b81      	ldr	r3, [pc, #516]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 800345c:	220a      	movs	r2, #10
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4b80      	ldr	r3, [pc, #512]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003462:	220b      	movs	r2, #11
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4b80      	ldr	r3, [pc, #512]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	4b7f      	ldr	r3, [pc, #508]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 800346e:	2205      	movs	r2, #5
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003474:	220a      	movs	r2, #10
 8003476:	601a      	str	r2, [r3, #0]
	 break;
 8003478:	f002 bf20 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  112 :    x=451 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 800347e:	f240 12c3 	movw	r2, #451	; 0x1c3
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	4b75      	ldr	r3, [pc, #468]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003486:	2259      	movs	r2, #89	; 0x59
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	4b75      	ldr	r3, [pc, #468]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 800348c:	220a      	movs	r2, #10
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	4b74      	ldr	r3, [pc, #464]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 8003492:	220e      	movs	r2, #14
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	4b74      	ldr	r3, [pc, #464]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	4b73      	ldr	r3, [pc, #460]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 800349e:	2205      	movs	r2, #5
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 80034a4:	220a      	movs	r2, #10
 80034a6:	601a      	str	r2, [r3, #0]
	 break;
 80034a8:	f002 bf08 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  113 :    x=461 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 80034ae:	f240 12cd 	movw	r2, #461	; 0x1cd
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	4b69      	ldr	r3, [pc, #420]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 80034b6:	2259      	movs	r2, #89	; 0x59
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	4b69      	ldr	r3, [pc, #420]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 80034bc:	220a      	movs	r2, #10
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 80034c2:	220e      	movs	r2, #14
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	4b68      	ldr	r3, [pc, #416]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	4b67      	ldr	r3, [pc, #412]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 80034ce:	2205      	movs	r2, #5
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 80034d4:	220a      	movs	r2, #10
 80034d6:	601a      	str	r2, [r3, #0]
	 break;
 80034d8:	f002 bef0 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  114 :    x=19  ;  y=201  ;  width=7   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=6    ;
 80034dc:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 80034de:	2213      	movs	r2, #19
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	4b5e      	ldr	r3, [pc, #376]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 80034e4:	22c9      	movs	r2, #201	; 0xc9
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4b5d      	ldr	r3, [pc, #372]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 80034ea:	2207      	movs	r2, #7
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 80034f0:	220b      	movs	r2, #11
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	4b5c      	ldr	r3, [pc, #368]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 80034fc:	2205      	movs	r2, #5
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003502:	2206      	movs	r2, #6
 8003504:	601a      	str	r2, [r3, #0]
	 break;
 8003506:	f002 bed9 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  115 :    x=26  ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 800350a:	4b53      	ldr	r3, [pc, #332]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 800350c:	221a      	movs	r2, #26
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	4b52      	ldr	r3, [pc, #328]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003512:	22c9      	movs	r2, #201	; 0xc9
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 8003518:	220a      	movs	r2, #10
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 800351e:	220b      	movs	r2, #11
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 800352a:	2205      	movs	r2, #5
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	4b50      	ldr	r3, [pc, #320]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003530:	2209      	movs	r2, #9
 8003532:	601a      	str	r2, [r3, #0]
	 break;
 8003534:	f002 bec2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  116 :    x=471 ;  y=89   ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003538:	4b47      	ldr	r3, [pc, #284]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 800353a:	f240 12d7 	movw	r2, #471	; 0x1d7
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003542:	2259      	movs	r2, #89	; 0x59
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	4b46      	ldr	r3, [pc, #280]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 8003548:	2207      	movs	r2, #7
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	4b45      	ldr	r3, [pc, #276]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 800354e:	220e      	movs	r2, #14
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	4b45      	ldr	r3, [pc, #276]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	4b44      	ldr	r3, [pc, #272]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003560:	2207      	movs	r2, #7
 8003562:	601a      	str	r2, [r3, #0]
	 break;
 8003564:	f002 beaa 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  117 :    x=36  ;  y=201  ;  width=9   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003570:	22c9      	movs	r2, #201	; 0xc9
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 8003576:	2209      	movs	r2, #9
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 800357c:	220b      	movs	r2, #11
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 8003588:	2205      	movs	r2, #5
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 800358e:	2209      	movs	r2, #9
 8003590:	601a      	str	r2, [r3, #0]
	 break;
 8003592:	f002 be93 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  118 :    x=45  ;  y=201  ;  width=11  ;  height=11   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=9    ;
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003598:	222d      	movs	r2, #45	; 0x2d
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 800359e:	22c9      	movs	r2, #201	; 0xc9
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 80035a4:	220b      	movs	r2, #11
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 80035aa:	220b      	movs	r2, #11
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 80035b8:	2205      	movs	r2, #5
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 80035be:	2209      	movs	r2, #9
 80035c0:	601a      	str	r2, [r3, #0]
	 break;
 80035c2:	f002 be7b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  119 :    x=56  ;  y=201  ;  width=14  ;  height=11   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=12   ;
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 80035c8:	2238      	movs	r2, #56	; 0x38
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 80035ce:	22c9      	movs	r2, #201	; 0xc9
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 80035d4:	220e      	movs	r2, #14
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 80035da:	220b      	movs	r2, #11
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 80035ee:	220c      	movs	r2, #12
 80035f0:	601a      	str	r2, [r3, #0]
	 break;
 80035f2:	f002 be63 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  120 :    x=70  ;  y=201  ;  width=11  ;  height=11   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=9    ;
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 80035f8:	2246      	movs	r2, #70	; 0x46
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 80035fe:	22c9      	movs	r2, #201	; 0xc9
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b17      	ldr	r3, [pc, #92]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 8003604:	220b      	movs	r2, #11
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 800360a:	220b      	movs	r2, #11
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 8003618:	2205      	movs	r2, #5
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 800361e:	2209      	movs	r2, #9
 8003620:	601a      	str	r2, [r3, #0]
	 break;
 8003622:	f002 be4b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  121 :    x=478 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=-1   ;  yoffset=5    ;  xadvance=9    ;
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <Odczytaj_znak_S16_uc8+0x17a0>)
 8003628:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <Odczytaj_znak_S16_uc8+0x17a4>)
 8003630:	2259      	movs	r2, #89	; 0x59
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <Odczytaj_znak_S16_uc8+0x17a8>)
 8003636:	220b      	movs	r2, #11
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <Odczytaj_znak_S16_uc8+0x17ac>)
 800363c:	220e      	movs	r2, #14
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <Odczytaj_znak_S16_uc8+0x17b0>)
 8003642:	f04f 32ff 	mov.w	r2, #4294967295
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <Odczytaj_znak_S16_uc8+0x17b4>)
 800364a:	2205      	movs	r2, #5
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <Odczytaj_znak_S16_uc8+0x17b8>)
 8003650:	2209      	movs	r2, #9
 8003652:	601a      	str	r2, [r3, #0]
	 break;
 8003654:	f002 be32 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8003658:	2400f638 	.word	0x2400f638
 800365c:	24014460 	.word	0x24014460
 8003660:	24014694 	.word	0x24014694
 8003664:	24014464 	.word	0x24014464
 8003668:	2400f634 	.word	0x2400f634
 800366c:	2400f63c 	.word	0x2400f63c
 8003670:	24014690 	.word	0x24014690
	case  122 :    x=81  ;  y=201  ;  width=9   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003674:	4b99      	ldr	r3, [pc, #612]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003676:	2251      	movs	r2, #81	; 0x51
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	4b99      	ldr	r3, [pc, #612]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 800367c:	22c9      	movs	r2, #201	; 0xc9
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	4b98      	ldr	r3, [pc, #608]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 8003682:	2209      	movs	r2, #9
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	4b98      	ldr	r3, [pc, #608]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003688:	220b      	movs	r2, #11
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	4b97      	ldr	r3, [pc, #604]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	4b97      	ldr	r3, [pc, #604]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003694:	2205      	movs	r2, #5
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4b96      	ldr	r3, [pc, #600]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 800369a:	2209      	movs	r2, #9
 800369c:	601a      	str	r2, [r3, #0]
	 break;
 800369e:	f002 be0d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  123 :    x=493 ;  y=0    ;  width=7   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 80036a2:	4b8e      	ldr	r3, [pc, #568]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 80036a4:	f240 12ed 	movw	r2, #493	; 0x1ed
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b8d      	ldr	r3, [pc, #564]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80036b2:	2207      	movs	r2, #7
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 80036b8:	2211      	movs	r2, #17
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	4b8b      	ldr	r3, [pc, #556]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	4b8a      	ldr	r3, [pc, #552]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80036ca:	2206      	movs	r2, #6
 80036cc:	601a      	str	r2, [r3, #0]
	 break;
 80036ce:	f002 bdf5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  124 :    x=500 ;  y=0    ;  width=4   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 80036d2:	4b82      	ldr	r3, [pc, #520]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 80036d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80036e2:	2204      	movs	r2, #4
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 80036e8:	2211      	movs	r2, #17
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	4b7f      	ldr	r3, [pc, #508]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	4b7f      	ldr	r3, [pc, #508]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4b7e      	ldr	r3, [pc, #504]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80036fa:	2205      	movs	r2, #5
 80036fc:	601a      	str	r2, [r3, #0]
	 break;
 80036fe:	f002 bddd 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  125 :    x=504 ;  y=0    ;  width=7   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8003702:	4b76      	ldr	r3, [pc, #472]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003704:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 8003712:	2207      	movs	r2, #7
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	4b74      	ldr	r3, [pc, #464]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003718:	2211      	movs	r2, #17
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	4b73      	ldr	r3, [pc, #460]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	4b72      	ldr	r3, [pc, #456]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 800372a:	2206      	movs	r2, #6
 800372c:	601a      	str	r2, [r3, #0]
	 break;
 800372e:	f002 bdc5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  126 :    x=180 ;  y=223  ;  width=10  ;  height=5    ;  xoffset=0    ;  yoffset=7    ;  xadvance=10   ;
 8003732:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003734:	22b4      	movs	r2, #180	; 0xb4
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 800373a:	22df      	movs	r2, #223	; 0xdf
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 8003740:	220a      	movs	r2, #10
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003746:	2205      	movs	r2, #5
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	4b68      	ldr	r3, [pc, #416]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003752:	2207      	movs	r2, #7
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003758:	220a      	movs	r2, #10
 800375a:	601a      	str	r2, [r3, #0]
	 break;
 800375c:	f002 bdae 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  160 :    x=0   ;  y=0    ;  width=0   ;  height=0    ;  xoffset=-1   ;  yoffset=14   ;  xadvance=4    ;
 8003760:	4b5e      	ldr	r3, [pc, #376]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003782:	220e      	movs	r2, #14
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	4b5b      	ldr	r3, [pc, #364]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003788:	2204      	movs	r2, #4
 800378a:	601a      	str	r2, [r3, #0]
	 break;
 800378c:	f002 bd96 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  161 :    x=437 ;  y=89   ;  width=4   ;  height=14   ;  xoffset=1    ;  yoffset=5    ;  xadvance=6    ;
 8003790:	4b52      	ldr	r3, [pc, #328]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003792:	f240 12b5 	movw	r2, #437	; 0x1b5
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 800379a:	2259      	movs	r2, #89	; 0x59
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80037a0:	2204      	movs	r2, #4
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 80037a6:	220e      	movs	r2, #14
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	4b50      	ldr	r3, [pc, #320]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 80037b2:	2205      	movs	r2, #5
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80037b8:	2206      	movs	r2, #6
 80037ba:	601a      	str	r2, [r3, #0]
	 break;
 80037bc:	f002 bd7e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  162 :    x=0   ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80037c0:	4b46      	ldr	r3, [pc, #280]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	4b46      	ldr	r3, [pc, #280]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 80037c8:	2215      	movs	r2, #21
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80037ce:	220a      	movs	r2, #10
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 80037d4:	2211      	movs	r2, #17
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	4b44      	ldr	r3, [pc, #272]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80037e6:	2209      	movs	r2, #9
 80037e8:	601a      	str	r2, [r3, #0]
	 break;
 80037ea:	f002 bd67 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  163 :    x=489 ;  y=89   ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 80037f0:	f240 12e9 	movw	r2, #489	; 0x1e9
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 80037f8:	2259      	movs	r2, #89	; 0x59
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80037fe:	220b      	movs	r2, #11
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003804:	220e      	movs	r2, #14
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b38      	ldr	r3, [pc, #224]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003816:	220a      	movs	r2, #10
 8003818:	601a      	str	r2, [r3, #0]
	 break;
 800381a:	f002 bd4f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  164 :    x=90  ;  y=201  ;  width=11  ;  height=11   ;  xoffset=-1   ;  yoffset=4    ;  xadvance=9    ;
 800381e:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003820:	225a      	movs	r2, #90	; 0x5a
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 8003826:	22c9      	movs	r2, #201	; 0xc9
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800382c:	220b      	movs	r2, #11
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003832:	220b      	movs	r2, #11
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003840:	2204      	movs	r2, #4
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003846:	2209      	movs	r2, #9
 8003848:	601a      	str	r2, [r3, #0]
	 break;
 800384a:	f002 bd37 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  165 :    x=500 ;  y=89   ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003850:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 8003858:	2259      	movs	r2, #89	; 0x59
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800385e:	220a      	movs	r2, #10
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003864:	220e      	movs	r2, #14
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 8003876:	220a      	movs	r2, #10
 8003878:	601a      	str	r2, [r3, #0]
	 break;
 800387a:	f002 bd1f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  166 :    x=10  ;  y=21   ;  width=4   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 8003880:	220a      	movs	r2, #10
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 8003886:	2215      	movs	r2, #21
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 800388c:	2204      	movs	r2, #4
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 8003892:	2211      	movs	r2, #17
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80038a4:	2205      	movs	r2, #5
 80038a6:	601a      	str	r2, [r3, #0]
	 break;
 80038a8:	f002 bd08 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  167 :    x=14  ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <Odczytaj_znak_S16_uc8+0x1a24>)
 80038ae:	220e      	movs	r2, #14
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <Odczytaj_znak_S16_uc8+0x1a28>)
 80038b4:	2215      	movs	r2, #21
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <Odczytaj_znak_S16_uc8+0x1a2c>)
 80038ba:	220a      	movs	r2, #10
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <Odczytaj_znak_S16_uc8+0x1a30>)
 80038c0:	2211      	movs	r2, #17
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <Odczytaj_znak_S16_uc8+0x1a34>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <Odczytaj_znak_S16_uc8+0x1a38>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <Odczytaj_znak_S16_uc8+0x1a3c>)
 80038d2:	220a      	movs	r2, #10
 80038d4:	601a      	str	r2, [r3, #0]
	 break;
 80038d6:	f002 bcf1 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 80038da:	bf00      	nop
 80038dc:	2400f638 	.word	0x2400f638
 80038e0:	24014460 	.word	0x24014460
 80038e4:	24014694 	.word	0x24014694
 80038e8:	24014464 	.word	0x24014464
 80038ec:	2400f634 	.word	0x2400f634
 80038f0:	2400f63c 	.word	0x2400f63c
 80038f4:	24014690 	.word	0x24014690
	case  168 :    x=243 ;  y=223  ;  width=7   ;  height=4    ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 80038f8:	4b99      	ldr	r3, [pc, #612]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 80038fa:	22f3      	movs	r2, #243	; 0xf3
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	4b99      	ldr	r3, [pc, #612]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003900:	22df      	movs	r2, #223	; 0xdf
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	4b98      	ldr	r3, [pc, #608]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003906:	2207      	movs	r2, #7
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	4b98      	ldr	r3, [pc, #608]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 800390c:	2204      	movs	r2, #4
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	4b97      	ldr	r3, [pc, #604]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4b97      	ldr	r3, [pc, #604]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	4b96      	ldr	r3, [pc, #600]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 800391e:	2207      	movs	r2, #7
 8003920:	601a      	str	r2, [r3, #0]
	 break;
 8003922:	f002 bccb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  169 :    x=0   ;  y=103  ;  width=14  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8003926:	4b8e      	ldr	r3, [pc, #568]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 800392e:	2267      	movs	r2, #103	; 0x67
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	4b8d      	ldr	r3, [pc, #564]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003934:	220e      	movs	r2, #14
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	4b8c      	ldr	r3, [pc, #560]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 800393a:	220e      	movs	r2, #14
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	4b8c      	ldr	r3, [pc, #560]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	4b8b      	ldr	r3, [pc, #556]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 800394e:	220c      	movs	r2, #12
 8003950:	601a      	str	r2, [r3, #0]
	 break;
 8003952:	f002 bcb3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  170 :    x=16  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8003956:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003958:	2210      	movs	r2, #16
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 800395e:	22df      	movs	r2, #223	; 0xdf
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	4b81      	ldr	r3, [pc, #516]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003964:	2207      	movs	r2, #7
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b80      	ldr	r3, [pc, #512]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 800396a:	2208      	movs	r2, #8
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	4b7f      	ldr	r3, [pc, #508]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 800397c:	2206      	movs	r2, #6
 800397e:	601a      	str	r2, [r3, #0]
	 break;
 8003980:	f002 bc9c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  171 :    x=468 ;  y=212  ;  width=9   ;  height=10   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003984:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003986:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	4b75      	ldr	r3, [pc, #468]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 800398e:	22d4      	movs	r2, #212	; 0xd4
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003994:	2209      	movs	r2, #9
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	4b74      	ldr	r3, [pc, #464]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 800399a:	220a      	movs	r2, #10
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 80039a6:	2205      	movs	r2, #5
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	4b73      	ldr	r3, [pc, #460]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 80039ac:	2209      	movs	r2, #9
 80039ae:	601a      	str	r2, [r3, #0]
	 break;
 80039b0:	f002 bc84 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  172 :    x=68  ;  y=223  ;  width=10  ;  height=7    ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 80039b6:	2244      	movs	r2, #68	; 0x44
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 80039bc:	22df      	movs	r2, #223	; 0xdf
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 80039c2:	220a      	movs	r2, #10
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	4b69      	ldr	r3, [pc, #420]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	4b68      	ldr	r3, [pc, #416]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 80039d4:	2205      	movs	r2, #5
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 80039da:	220a      	movs	r2, #10
 80039dc:	601a      	str	r2, [r3, #0]
	 break;
 80039de:	f002 bc6d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  174 :    x=376 ;  y=72   ;  width=14  ;  height=15   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 80039e2:	4b5f      	ldr	r3, [pc, #380]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 80039e4:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 80039ec:	2248      	movs	r2, #72	; 0x48
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 80039f2:	220e      	movs	r2, #14
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 80039f8:	220f      	movs	r2, #15
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	4b5c      	ldr	r3, [pc, #368]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 80039fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a0c:	220c      	movs	r2, #12
 8003a0e:	601a      	str	r2, [r3, #0]
	 break;
 8003a10:	f002 bc54 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  175 :    x=226 ;  y=223  ;  width=11  ;  height=4    ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=9    ;
 8003a14:	4b52      	ldr	r3, [pc, #328]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003a16:	22e2      	movs	r2, #226	; 0xe2
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003a1c:	22df      	movs	r2, #223	; 0xdf
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003a22:	220b      	movs	r2, #11
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	4b51      	ldr	r3, [pc, #324]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003a28:	2204      	movs	r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	4b4e      	ldr	r3, [pc, #312]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a3e:	2209      	movs	r2, #9
 8003a40:	601a      	str	r2, [r3, #0]
	 break;
 8003a42:	f002 bc3b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  176 :    x=23  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003a46:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003a48:	2217      	movs	r2, #23
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003a4e:	22df      	movs	r2, #223	; 0xdf
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	4b45      	ldr	r3, [pc, #276]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
	 break;
 8003a70:	f002 bc24 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  177 :    x=134 ;  y=187  ;  width=10  ;  height=13   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 8003a74:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003a76:	2286      	movs	r2, #134	; 0x86
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003a7c:	22bb      	movs	r2, #187	; 0xbb
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003a82:	220a      	movs	r2, #10
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003a88:	220d      	movs	r2, #13
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003a94:	2203      	movs	r2, #3
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	601a      	str	r2, [r3, #0]
	 break;
 8003a9e:	f002 bc0d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  178 :    x=30  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003aa4:	221e      	movs	r2, #30
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003aaa:	22df      	movs	r2, #223	; 0xdf
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003aca:	2205      	movs	r2, #5
 8003acc:	601a      	str	r2, [r3, #0]
	 break;
 8003ace:	f002 bbf5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  179 :    x=37  ;  y=223  ;  width=7   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003ad4:	2225      	movs	r2, #37	; 0x25
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003ada:	22df      	movs	r2, #223	; 0xdf
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003afa:	2205      	movs	r2, #5
 8003afc:	601a      	str	r2, [r3, #0]
	 break;
 8003afe:	f002 bbdd 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  180 :    x=250 ;  y=223  ;  width=6   ;  height=4    ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003b04:	22fa      	movs	r2, #250	; 0xfa
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003b0a:	22df      	movs	r2, #223	; 0xdf
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003b10:	2206      	movs	r2, #6
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003b16:	2204      	movs	r2, #4
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003b28:	2205      	movs	r2, #5
 8003b2a:	601a      	str	r2, [r3, #0]
	 break;
 8003b2c:	f002 bbc6 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  181 :    x=14  ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <Odczytaj_znak_S16_uc8+0x1ca8>)
 8003b32:	220e      	movs	r2, #14
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <Odczytaj_znak_S16_uc8+0x1cac>)
 8003b38:	2267      	movs	r2, #103	; 0x67
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <Odczytaj_znak_S16_uc8+0x1cb0>)
 8003b3e:	2209      	movs	r2, #9
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <Odczytaj_znak_S16_uc8+0x1cb4>)
 8003b44:	220e      	movs	r2, #14
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <Odczytaj_znak_S16_uc8+0x1cb8>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <Odczytaj_znak_S16_uc8+0x1cbc>)
 8003b50:	2205      	movs	r2, #5
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <Odczytaj_znak_S16_uc8+0x1cc0>)
 8003b56:	2209      	movs	r2, #9
 8003b58:	601a      	str	r2, [r3, #0]
	 break;
 8003b5a:	f002 bbaf 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8003b5e:	bf00      	nop
 8003b60:	2400f638 	.word	0x2400f638
 8003b64:	24014460 	.word	0x24014460
 8003b68:	24014694 	.word	0x24014694
 8003b6c:	24014464 	.word	0x24014464
 8003b70:	2400f634 	.word	0x2400f634
 8003b74:	2400f63c 	.word	0x2400f63c
 8003b78:	24014690 	.word	0x24014690
	case  182 :    x=24  ;  y=21   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=10   ;
 8003b7c:	4b9b      	ldr	r3, [pc, #620]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003b7e:	2218      	movs	r2, #24
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	4b9b      	ldr	r3, [pc, #620]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003b84:	2215      	movs	r2, #21
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4b9a      	ldr	r3, [pc, #616]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003b8a:	220b      	movs	r2, #11
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	4b9a      	ldr	r3, [pc, #616]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003b90:	2211      	movs	r2, #17
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	4b99      	ldr	r3, [pc, #612]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	4b98      	ldr	r3, [pc, #608]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	4b98      	ldr	r3, [pc, #608]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003ba4:	220a      	movs	r2, #10
 8003ba6:	601a      	str	r2, [r3, #0]
	 break;
 8003ba8:	f002 bb88 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  183 :    x=222 ;  y=223  ;  width=4   ;  height=4    ;  xoffset=1    ;  yoffset=7    ;  xadvance=6    ;
 8003bac:	4b8f      	ldr	r3, [pc, #572]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003bae:	22de      	movs	r2, #222	; 0xde
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	4b8f      	ldr	r3, [pc, #572]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003bb4:	22df      	movs	r2, #223	; 0xdf
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	4b8e      	ldr	r3, [pc, #568]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	4b8d      	ldr	r3, [pc, #564]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003bcc:	2207      	movs	r2, #7
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	4b8c      	ldr	r3, [pc, #560]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003bd2:	2206      	movs	r2, #6
 8003bd4:	601a      	str	r2, [r3, #0]
	 break;
 8003bd6:	f002 bb71 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  184 :    x=190 ;  y=223  ;  width=7   ;  height=5    ;  xoffset=0    ;  yoffset=14   ;  xadvance=6    ;
 8003bda:	4b84      	ldr	r3, [pc, #528]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003bdc:	22be      	movs	r2, #190	; 0xbe
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	4b83      	ldr	r3, [pc, #524]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003be2:	22df      	movs	r2, #223	; 0xdf
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	4b83      	ldr	r3, [pc, #524]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003be8:	2207      	movs	r2, #7
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	4b82      	ldr	r3, [pc, #520]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003bee:	2205      	movs	r2, #5
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	4b82      	ldr	r3, [pc, #520]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003bfa:	220e      	movs	r2, #14
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003c00:	2206      	movs	r2, #6
 8003c02:	601a      	str	r2, [r3, #0]
	 break;
 8003c04:	f002 bb5a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  185 :    x=44  ;  y=223  ;  width=6   ;  height=8    ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003c0a:	222c      	movs	r2, #44	; 0x2c
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	4b78      	ldr	r3, [pc, #480]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003c10:	22df      	movs	r2, #223	; 0xdf
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	4b77      	ldr	r3, [pc, #476]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003c16:	2206      	movs	r2, #6
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	4b77      	ldr	r3, [pc, #476]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	4b75      	ldr	r3, [pc, #468]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003c30:	2205      	movs	r2, #5
 8003c32:	601a      	str	r2, [r3, #0]
	 break;
 8003c34:	f002 bb42 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  186 :    x=50  ;  y=223  ;  width=8   ;  height=8    ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003c3a:	2232      	movs	r2, #50	; 0x32
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	4b6c      	ldr	r3, [pc, #432]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003c40:	22df      	movs	r2, #223	; 0xdf
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	4b6b      	ldr	r3, [pc, #428]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003c46:	2208      	movs	r2, #8
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4b6b      	ldr	r3, [pc, #428]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003c5e:	2207      	movs	r2, #7
 8003c60:	601a      	str	r2, [r3, #0]
	 break;
 8003c62:	f002 bb2b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  187 :    x=477 ;  y=212  ;  width=9   ;  height=10   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8003c66:	4b61      	ldr	r3, [pc, #388]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003c68:	f240 12dd 	movw	r2, #477	; 0x1dd
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	4b60      	ldr	r3, [pc, #384]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003c70:	22d4      	movs	r2, #212	; 0xd4
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003c76:	2209      	movs	r2, #9
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	4b5f      	ldr	r3, [pc, #380]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003c7c:	220a      	movs	r2, #10
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	4b5e      	ldr	r3, [pc, #376]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003c88:	2205      	movs	r2, #5
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003c8e:	2209      	movs	r2, #9
 8003c90:	601a      	str	r2, [r3, #0]
	 break;
 8003c92:	f002 bb13 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  188 :    x=390 ;  y=72   ;  width=15  ;  height=15   ;  xoffset=0    ;  yoffset=1    ;  xadvance=15   ;
 8003c96:	4b55      	ldr	r3, [pc, #340]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003c98:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	4b54      	ldr	r3, [pc, #336]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003ca0:	2248      	movs	r2, #72	; 0x48
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003ca6:	220f      	movs	r2, #15
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003cac:	220f      	movs	r2, #15
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	4b51      	ldr	r3, [pc, #324]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	601a      	str	r2, [r3, #0]
	 break;
 8003cc2:	f002 bafb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  189 :    x=405 ;  y=72   ;  width=14  ;  height=15   ;  xoffset=0    ;  yoffset=1    ;  xadvance=14   ;
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003cc8:	f240 1295 	movw	r2, #405	; 0x195
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003cd0:	2248      	movs	r2, #72	; 0x48
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003cd6:	220e      	movs	r2, #14
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003cdc:	220f      	movs	r2, #15
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	4b45      	ldr	r3, [pc, #276]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003cee:	220e      	movs	r2, #14
 8003cf0:	601a      	str	r2, [r3, #0]
	 break;
 8003cf2:	f002 bae3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  190 :    x=419 ;  y=72   ;  width=15  ;  height=15   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=14   ;
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003cf8:	f240 12a3 	movw	r2, #419	; 0x1a3
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d00:	2248      	movs	r2, #72	; 0x48
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d06:	220f      	movs	r2, #15
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d12:	f04f 32ff 	mov.w	r2, #4294967295
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003d20:	220e      	movs	r2, #14
 8003d22:	601a      	str	r2, [r3, #0]
	 break;
 8003d24:	f002 baca 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  191 :    x=23  ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8003d28:	4b30      	ldr	r3, [pc, #192]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003d2a:	2217      	movs	r2, #23
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d30:	2267      	movs	r2, #103	; 0x67
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d36:	220a      	movs	r2, #10
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d3c:	220e      	movs	r2, #14
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003d48:	2205      	movs	r2, #5
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003d4e:	220a      	movs	r2, #10
 8003d50:	601a      	str	r2, [r3, #0]
	 break;
 8003d52:	f002 bab3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  192 :    x=35  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003d56:	4b25      	ldr	r3, [pc, #148]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003d58:	2223      	movs	r2, #35	; 0x23
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d5e:	2215      	movs	r2, #21
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d64:	220e      	movs	r2, #14
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d6a:	2211      	movs	r2, #17
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003d80:	220c      	movs	r2, #12
 8003d82:	601a      	str	r2, [r3, #0]
	 break;
 8003d84:	f002 ba9a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  193 :    x=49  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003d8a:	2231      	movs	r2, #49	; 0x31
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003d90:	2215      	movs	r2, #21
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003d96:	220e      	movs	r2, #14
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003d9c:	2211      	movs	r2, #17
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003db2:	220c      	movs	r2, #12
 8003db4:	601a      	str	r2, [r3, #0]
	 break;
 8003db6:	f002 ba81 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  194 :    x=63  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <Odczytaj_znak_S16_uc8+0x1f34>)
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <Odczytaj_znak_S16_uc8+0x1f38>)
 8003dc2:	2215      	movs	r2, #21
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <Odczytaj_znak_S16_uc8+0x1f3c>)
 8003dc8:	220e      	movs	r2, #14
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <Odczytaj_znak_S16_uc8+0x1f40>)
 8003dce:	2211      	movs	r2, #17
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <Odczytaj_znak_S16_uc8+0x1f44>)
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <Odczytaj_znak_S16_uc8+0x1f48>)
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <Odczytaj_znak_S16_uc8+0x1f4c>)
 8003de4:	220c      	movs	r2, #12
 8003de6:	601a      	str	r2, [r3, #0]
	 break;
 8003de8:	f002 ba68 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8003dec:	2400f638 	.word	0x2400f638
 8003df0:	24014460 	.word	0x24014460
 8003df4:	24014694 	.word	0x24014694
 8003df8:	24014464 	.word	0x24014464
 8003dfc:	2400f634 	.word	0x2400f634
 8003e00:	2400f63c 	.word	0x2400f63c
 8003e04:	24014690 	.word	0x24014690
	case  195 :    x=77  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003e08:	4b9e      	ldr	r3, [pc, #632]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003e0a:	224d      	movs	r2, #77	; 0x4d
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	4b9e      	ldr	r3, [pc, #632]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003e10:	2215      	movs	r2, #21
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	4b9d      	ldr	r3, [pc, #628]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003e16:	220e      	movs	r2, #14
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	4b9d      	ldr	r3, [pc, #628]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003e1c:	2211      	movs	r2, #17
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b9c      	ldr	r3, [pc, #624]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	4b9b      	ldr	r3, [pc, #620]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	4b9a      	ldr	r3, [pc, #616]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003e32:	220c      	movs	r2, #12
 8003e34:	601a      	str	r2, [r3, #0]
	 break;
 8003e36:	f002 ba41 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  196 :    x=91  ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8003e3a:	4b92      	ldr	r3, [pc, #584]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003e3c:	225b      	movs	r2, #91	; 0x5b
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	4b91      	ldr	r3, [pc, #580]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003e42:	2215      	movs	r2, #21
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	4b91      	ldr	r3, [pc, #580]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003e48:	220e      	movs	r2, #14
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	4b90      	ldr	r3, [pc, #576]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003e4e:	2211      	movs	r2, #17
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4b90      	ldr	r3, [pc, #576]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	4b8f      	ldr	r3, [pc, #572]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	4b8e      	ldr	r3, [pc, #568]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003e64:	220c      	movs	r2, #12
 8003e66:	601a      	str	r2, [r3, #0]
	 break;
 8003e68:	f002 ba28 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  197 :    x=105 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=11   ;
 8003e6c:	4b85      	ldr	r3, [pc, #532]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003e6e:	2269      	movs	r2, #105	; 0x69
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003e74:	2215      	movs	r2, #21
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4b84      	ldr	r3, [pc, #528]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003e7a:	220d      	movs	r2, #13
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	4b84      	ldr	r3, [pc, #528]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003e80:	2211      	movs	r2, #17
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	4b83      	ldr	r3, [pc, #524]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	4b82      	ldr	r3, [pc, #520]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	4b81      	ldr	r3, [pc, #516]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003e96:	220b      	movs	r2, #11
 8003e98:	601a      	str	r2, [r3, #0]
	 break;
 8003e9a:	f002 ba0f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  198 :    x=33  ;  y=103  ;  width=18  ;  height=14   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=16   ;
 8003e9e:	4b79      	ldr	r3, [pc, #484]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003ea6:	2267      	movs	r2, #103	; 0x67
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4b78      	ldr	r3, [pc, #480]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003eac:	2212      	movs	r2, #18
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b77      	ldr	r3, [pc, #476]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003eb2:	220e      	movs	r2, #14
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	4b77      	ldr	r3, [pc, #476]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003eb8:	f06f 0201 	mvn.w	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	4b75      	ldr	r3, [pc, #468]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	601a      	str	r2, [r3, #0]
	 break;
 8003eca:	f002 b9f7 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  199 :    x=118 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8003ece:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003ed0:	2276      	movs	r2, #118	; 0x76
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	4b6c      	ldr	r3, [pc, #432]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003ed6:	2215      	movs	r2, #21
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4b6c      	ldr	r3, [pc, #432]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003edc:	220c      	movs	r2, #12
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	4b6b      	ldr	r3, [pc, #428]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003ee2:	2211      	movs	r2, #17
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	4b6b      	ldr	r3, [pc, #428]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	4b6a      	ldr	r3, [pc, #424]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	601a      	str	r2, [r3, #0]
	 break;
 8003ef8:	f002 b9e0 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  200 :    x=130 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003efe:	2282      	movs	r2, #130	; 0x82
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	4b61      	ldr	r3, [pc, #388]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f04:	2215      	movs	r2, #21
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	4b60      	ldr	r3, [pc, #384]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f0a:	220b      	movs	r2, #11
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	4b60      	ldr	r3, [pc, #384]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003f10:	2211      	movs	r2, #17
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	4b5f      	ldr	r3, [pc, #380]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	4b5e      	ldr	r3, [pc, #376]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003f24:	220b      	movs	r2, #11
 8003f26:	601a      	str	r2, [r3, #0]
	 break;
 8003f28:	f002 b9c8 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  201 :    x=141 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8003f2c:	4b55      	ldr	r3, [pc, #340]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003f2e:	228d      	movs	r2, #141	; 0x8d
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4b55      	ldr	r3, [pc, #340]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f34:	2215      	movs	r2, #21
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	4b54      	ldr	r3, [pc, #336]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f3a:	220b      	movs	r2, #11
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003f40:	2211      	movs	r2, #17
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	4b53      	ldr	r3, [pc, #332]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003f54:	220b      	movs	r2, #11
 8003f56:	601a      	str	r2, [r3, #0]
	 break;
 8003f58:	f002 b9b0 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  202 :    x=152 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8003f5c:	4b49      	ldr	r3, [pc, #292]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003f5e:	2298      	movs	r2, #152	; 0x98
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	4b49      	ldr	r3, [pc, #292]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f64:	2215      	movs	r2, #21
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4b48      	ldr	r3, [pc, #288]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f6a:	220b      	movs	r2, #11
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4b48      	ldr	r3, [pc, #288]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003f70:	2211      	movs	r2, #17
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b47      	ldr	r3, [pc, #284]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003f84:	220b      	movs	r2, #11
 8003f86:	601a      	str	r2, [r3, #0]
	 break;
 8003f88:	f002 b998 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  203 :    x=163 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8003f8c:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003f8e:	22a3      	movs	r2, #163	; 0xa3
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003f94:	2215      	movs	r2, #21
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	4b3c      	ldr	r3, [pc, #240]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003f9a:	220b      	movs	r2, #11
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	4b3c      	ldr	r3, [pc, #240]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003fa0:	2211      	movs	r2, #17
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	4b3a      	ldr	r3, [pc, #232]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003fb4:	220b      	movs	r2, #11
 8003fb6:	601a      	str	r2, [r3, #0]
	 break;
 8003fb8:	f002 b980 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  204 :    x=174 ;  y=21   ;  width=5   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=4    ;
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003fbe:	22ae      	movs	r2, #174	; 0xae
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003fc4:	2215      	movs	r2, #21
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003fca:	2205      	movs	r2, #5
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	4b30      	ldr	r3, [pc, #192]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8003fd0:	2211      	movs	r2, #17
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	601a      	str	r2, [r3, #0]
	 break;
 8003fea:	f002 b967 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  205 :    x=179 ;  y=21   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=4    ;
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8003ff0:	22b3      	movs	r2, #179	; 0xb3
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8003ff6:	2215      	movs	r2, #21
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8004002:	2211      	movs	r2, #17
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 800400e:	f04f 32ff 	mov.w	r2, #4294967295
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	4b21      	ldr	r3, [pc, #132]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8004016:	2204      	movs	r2, #4
 8004018:	601a      	str	r2, [r3, #0]
	 break;
 800401a:	f002 b94f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  206 :    x=184 ;  y=21   ;  width=7   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=4    ;
 800401e:	4b19      	ldr	r3, [pc, #100]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8004020:	22b8      	movs	r2, #184	; 0xb8
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004026:	2215      	movs	r2, #21
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8004032:	2211      	movs	r2, #17
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 8004038:	f04f 32ff 	mov.w	r2, #4294967295
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 8004048:	2204      	movs	r2, #4
 800404a:	601a      	str	r2, [r3, #0]
	 break;
 800404c:	f002 b936 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  207 :    x=191 ;  y=21   ;  width=7   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=5    ;
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <Odczytaj_znak_S16_uc8+0x21cc>)
 8004052:	22bf      	movs	r2, #191	; 0xbf
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <Odczytaj_znak_S16_uc8+0x21d0>)
 8004058:	2215      	movs	r2, #21
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <Odczytaj_znak_S16_uc8+0x21d4>)
 800405e:	2207      	movs	r2, #7
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <Odczytaj_znak_S16_uc8+0x21d8>)
 8004064:	2211      	movs	r2, #17
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <Odczytaj_znak_S16_uc8+0x21dc>)
 800406a:	f04f 32ff 	mov.w	r2, #4294967295
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <Odczytaj_znak_S16_uc8+0x21e0>)
 8004072:	f04f 32ff 	mov.w	r2, #4294967295
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <Odczytaj_znak_S16_uc8+0x21e4>)
 800407a:	2205      	movs	r2, #5
 800407c:	601a      	str	r2, [r3, #0]
	 break;
 800407e:	f002 b91d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004082:	bf00      	nop
 8004084:	2400f638 	.word	0x2400f638
 8004088:	24014460 	.word	0x24014460
 800408c:	24014694 	.word	0x24014694
 8004090:	24014464 	.word	0x24014464
 8004094:	2400f634 	.word	0x2400f634
 8004098:	2400f63c 	.word	0x2400f63c
 800409c:	24014690 	.word	0x24014690
	case  208 :    x=51  ;  y=103  ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 80040a0:	4b9d      	ldr	r3, [pc, #628]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 80040a2:	2233      	movs	r2, #51	; 0x33
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	4b9d      	ldr	r3, [pc, #628]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 80040a8:	2267      	movs	r2, #103	; 0x67
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	4b9c      	ldr	r3, [pc, #624]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 80040ae:	220d      	movs	r2, #13
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	4b9c      	ldr	r3, [pc, #624]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 80040b4:	220e      	movs	r2, #14
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4b9b      	ldr	r3, [pc, #620]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	4b9a      	ldr	r3, [pc, #616]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	4b9a      	ldr	r3, [pc, #616]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 80040c8:	220c      	movs	r2, #12
 80040ca:	601a      	str	r2, [r3, #0]
	 break;
 80040cc:	f002 b8f6 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  209 :    x=198 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 80040d0:	4b91      	ldr	r3, [pc, #580]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 80040d2:	22c6      	movs	r2, #198	; 0xc6
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	4b91      	ldr	r3, [pc, #580]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 80040d8:	2215      	movs	r2, #21
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	4b90      	ldr	r3, [pc, #576]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 80040de:	220b      	movs	r2, #11
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	4b90      	ldr	r3, [pc, #576]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 80040e4:	2211      	movs	r2, #17
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	4b8f      	ldr	r3, [pc, #572]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	4b8f      	ldr	r3, [pc, #572]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	4b8e      	ldr	r3, [pc, #568]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 80040f8:	220c      	movs	r2, #12
 80040fa:	601a      	str	r2, [r3, #0]
	 break;
 80040fc:	f002 b8de 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  210 :    x=209 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 8004100:	4b85      	ldr	r3, [pc, #532]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004102:	22d1      	movs	r2, #209	; 0xd1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	4b85      	ldr	r3, [pc, #532]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 8004108:	2215      	movs	r2, #21
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	4b84      	ldr	r3, [pc, #528]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 800410e:	220d      	movs	r2, #13
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	4b84      	ldr	r3, [pc, #528]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004114:	2211      	movs	r2, #17
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	4b83      	ldr	r3, [pc, #524]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	4b83      	ldr	r3, [pc, #524]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004120:	f04f 32ff 	mov.w	r2, #4294967295
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	4b82      	ldr	r3, [pc, #520]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 8004128:	220d      	movs	r2, #13
 800412a:	601a      	str	r2, [r3, #0]
	 break;
 800412c:	f002 b8c6 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  211 :    x=222 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 8004130:	4b79      	ldr	r3, [pc, #484]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004132:	22de      	movs	r2, #222	; 0xde
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4b79      	ldr	r3, [pc, #484]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 8004138:	2215      	movs	r2, #21
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	4b78      	ldr	r3, [pc, #480]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 800413e:	220d      	movs	r2, #13
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	4b78      	ldr	r3, [pc, #480]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004144:	2211      	movs	r2, #17
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	4b77      	ldr	r3, [pc, #476]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	4b77      	ldr	r3, [pc, #476]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4b76      	ldr	r3, [pc, #472]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 8004158:	220d      	movs	r2, #13
 800415a:	601a      	str	r2, [r3, #0]
	 break;
 800415c:	f002 b8ae 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  212 :    x=235 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 8004160:	4b6d      	ldr	r3, [pc, #436]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004162:	22eb      	movs	r2, #235	; 0xeb
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 8004168:	2215      	movs	r2, #21
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 800416e:	220d      	movs	r2, #13
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4b6c      	ldr	r3, [pc, #432]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004174:	2211      	movs	r2, #17
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	4b6b      	ldr	r3, [pc, #428]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	4b6b      	ldr	r3, [pc, #428]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004180:	f04f 32ff 	mov.w	r2, #4294967295
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 8004188:	220d      	movs	r2, #13
 800418a:	601a      	str	r2, [r3, #0]
	 break;
 800418c:	f002 b896 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  213 :    x=248 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 8004190:	4b61      	ldr	r3, [pc, #388]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004192:	22f8      	movs	r2, #248	; 0xf8
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	4b61      	ldr	r3, [pc, #388]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 8004198:	2215      	movs	r2, #21
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	4b60      	ldr	r3, [pc, #384]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 800419e:	220d      	movs	r2, #13
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	4b60      	ldr	r3, [pc, #384]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 80041a4:	2211      	movs	r2, #17
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	4b5f      	ldr	r3, [pc, #380]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 80041b8:	220d      	movs	r2, #13
 80041ba:	601a      	str	r2, [r3, #0]
	 break;
 80041bc:	f002 b87e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  214 :    x=261 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 80041c0:	4b55      	ldr	r3, [pc, #340]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 80041c2:	f240 1205 	movw	r2, #261	; 0x105
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	4b54      	ldr	r3, [pc, #336]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 80041ca:	2215      	movs	r2, #21
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	4b54      	ldr	r3, [pc, #336]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 80041d0:	220d      	movs	r2, #13
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	4b53      	ldr	r3, [pc, #332]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 80041d6:	2211      	movs	r2, #17
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	4b53      	ldr	r3, [pc, #332]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	4b52      	ldr	r3, [pc, #328]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	4b51      	ldr	r3, [pc, #324]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 80041ea:	220d      	movs	r2, #13
 80041ec:	601a      	str	r2, [r3, #0]
	 break;
 80041ee:	f002 b865 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  215 :    x=486 ;  y=212  ;  width=9   ;  height=10   ;  xoffset=0    ;  yoffset=4    ;  xadvance=9    ;
 80041f2:	4b49      	ldr	r3, [pc, #292]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 80041f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	4b48      	ldr	r3, [pc, #288]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 80041fc:	22d4      	movs	r2, #212	; 0xd4
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	4b47      	ldr	r3, [pc, #284]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 8004202:	2209      	movs	r2, #9
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	4b47      	ldr	r3, [pc, #284]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004208:	220a      	movs	r2, #10
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	4b46      	ldr	r3, [pc, #280]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004214:	2204      	movs	r2, #4
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	4b45      	ldr	r3, [pc, #276]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 800421a:	2209      	movs	r2, #9
 800421c:	601a      	str	r2, [r3, #0]
	 break;
 800421e:	f002 b84d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  216 :    x=64  ;  y=103  ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004224:	2240      	movs	r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b3c      	ldr	r3, [pc, #240]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 800422a:	2267      	movs	r2, #103	; 0x67
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 8004230:	220d      	movs	r2, #13
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004236:	220e      	movs	r2, #14
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	4b3a      	ldr	r3, [pc, #232]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 8004248:	220d      	movs	r2, #13
 800424a:	601a      	str	r2, [r3, #0]
	 break;
 800424c:	f002 b836 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  217 :    x=274 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004250:	4b31      	ldr	r3, [pc, #196]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004252:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 800425a:	2215      	movs	r2, #21
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	4b30      	ldr	r3, [pc, #192]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 8004260:	220b      	movs	r2, #11
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004266:	2211      	movs	r2, #17
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	4b2e      	ldr	r3, [pc, #184]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 800427a:	220b      	movs	r2, #11
 800427c:	601a      	str	r2, [r3, #0]
	 break;
 800427e:	f002 b81d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  218 :    x=285 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 8004284:	f240 121d 	movw	r2, #285	; 0x11d
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 800428c:	2215      	movs	r2, #21
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 8004292:	220b      	movs	r2, #11
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	4b23      	ldr	r3, [pc, #140]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 8004298:	2211      	movs	r2, #17
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	4b22      	ldr	r3, [pc, #136]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	4b21      	ldr	r3, [pc, #132]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 80042ac:	220b      	movs	r2, #11
 80042ae:	601a      	str	r2, [r3, #0]
	 break;
 80042b0:	f002 b804 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  219 :    x=296 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 80042b4:	4b18      	ldr	r3, [pc, #96]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 80042b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 80042be:	2215      	movs	r2, #21
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 80042c4:	220b      	movs	r2, #11
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 80042ca:	2211      	movs	r2, #17
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 80042de:	220b      	movs	r2, #11
 80042e0:	601a      	str	r2, [r3, #0]
	 break;
 80042e2:	f001 bfeb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  220 :    x=307 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <Odczytaj_znak_S16_uc8+0x2460>)
 80042e8:	f240 1233 	movw	r2, #307	; 0x133
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <Odczytaj_znak_S16_uc8+0x2464>)
 80042f0:	2215      	movs	r2, #21
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <Odczytaj_znak_S16_uc8+0x2468>)
 80042f6:	220b      	movs	r2, #11
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <Odczytaj_znak_S16_uc8+0x246c>)
 80042fc:	2211      	movs	r2, #17
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <Odczytaj_znak_S16_uc8+0x2470>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <Odczytaj_znak_S16_uc8+0x2474>)
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <Odczytaj_znak_S16_uc8+0x2478>)
 8004310:	220b      	movs	r2, #11
 8004312:	601a      	str	r2, [r3, #0]
	 break;
 8004314:	f001 bfd2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004318:	2400f638 	.word	0x2400f638
 800431c:	24014460 	.word	0x24014460
 8004320:	24014694 	.word	0x24014694
 8004324:	24014464 	.word	0x24014464
 8004328:	2400f634 	.word	0x2400f634
 800432c:	2400f63c 	.word	0x2400f63c
 8004330:	24014690 	.word	0x24014690
	case  221 :    x=318 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=10   ;
 8004334:	4b96      	ldr	r3, [pc, #600]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004336:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	4b95      	ldr	r3, [pc, #596]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 800433e:	2215      	movs	r2, #21
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	4b95      	ldr	r3, [pc, #596]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004344:	220c      	movs	r2, #12
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	4b94      	ldr	r3, [pc, #592]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 800434a:	2211      	movs	r2, #17
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4b94      	ldr	r3, [pc, #592]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	4b93      	ldr	r3, [pc, #588]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	4b92      	ldr	r3, [pc, #584]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004360:	220a      	movs	r2, #10
 8004362:	601a      	str	r2, [r3, #0]
	 break;
 8004364:	f001 bfaa 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  222 :    x=77  ;  y=103  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8004368:	4b89      	ldr	r3, [pc, #548]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 800436a:	224d      	movs	r2, #77	; 0x4d
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	4b89      	ldr	r3, [pc, #548]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004370:	2267      	movs	r2, #103	; 0x67
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	4b88      	ldr	r3, [pc, #544]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004376:	220b      	movs	r2, #11
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	4b88      	ldr	r3, [pc, #544]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 800437c:	220e      	movs	r2, #14
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	4b87      	ldr	r3, [pc, #540]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	4b87      	ldr	r3, [pc, #540]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	4b86      	ldr	r3, [pc, #536]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 800438e:	220b      	movs	r2, #11
 8004390:	601a      	str	r2, [r3, #0]
	 break;
 8004392:	f001 bf93 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  223 :    x=88  ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004396:	4b7e      	ldr	r3, [pc, #504]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004398:	2258      	movs	r2, #88	; 0x58
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	4b7d      	ldr	r3, [pc, #500]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 800439e:	2267      	movs	r2, #103	; 0x67
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 80043a4:	220a      	movs	r2, #10
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	4b7c      	ldr	r3, [pc, #496]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 80043aa:	220e      	movs	r2, #14
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	4b7c      	ldr	r3, [pc, #496]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	4b7b      	ldr	r3, [pc, #492]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 80043bc:	220a      	movs	r2, #10
 80043be:	601a      	str	r2, [r3, #0]
	 break;
 80043c0:	f001 bf7c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  224 :    x=98  ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80043c4:	4b72      	ldr	r3, [pc, #456]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 80043c6:	2262      	movs	r2, #98	; 0x62
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	4b72      	ldr	r3, [pc, #456]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 80043cc:	2267      	movs	r2, #103	; 0x67
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	4b71      	ldr	r3, [pc, #452]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 80043d2:	220a      	movs	r2, #10
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	4b71      	ldr	r3, [pc, #452]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 80043d8:	220e      	movs	r2, #14
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	4b70      	ldr	r3, [pc, #448]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	4b70      	ldr	r3, [pc, #448]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 80043ea:	2209      	movs	r2, #9
 80043ec:	601a      	str	r2, [r3, #0]
	 break;
 80043ee:	f001 bf65 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  225 :    x=108 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80043f2:	4b67      	ldr	r3, [pc, #412]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 80043f4:	226c      	movs	r2, #108	; 0x6c
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b66      	ldr	r3, [pc, #408]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 80043fa:	2267      	movs	r2, #103	; 0x67
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	4b66      	ldr	r3, [pc, #408]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004400:	220a      	movs	r2, #10
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	4b65      	ldr	r3, [pc, #404]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 8004406:	220e      	movs	r2, #14
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	4b65      	ldr	r3, [pc, #404]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	4b64      	ldr	r3, [pc, #400]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004418:	2209      	movs	r2, #9
 800441a:	601a      	str	r2, [r3, #0]
	 break;
 800441c:	f001 bf4e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  226 :    x=118 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004420:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004422:	2276      	movs	r2, #118	; 0x76
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	4b5b      	ldr	r3, [pc, #364]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004428:	2267      	movs	r2, #103	; 0x67
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 800442e:	220a      	movs	r2, #10
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	4b5a      	ldr	r3, [pc, #360]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 8004434:	220e      	movs	r2, #14
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	4b58      	ldr	r3, [pc, #352]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004446:	2209      	movs	r2, #9
 8004448:	601a      	str	r2, [r3, #0]
	 break;
 800444a:	f001 bf37 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  227 :    x=128 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800444e:	4b50      	ldr	r3, [pc, #320]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004456:	2267      	movs	r2, #103	; 0x67
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 800445c:	220a      	movs	r2, #10
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	4b4e      	ldr	r3, [pc, #312]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 8004462:	220e      	movs	r2, #14
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	4b4e      	ldr	r3, [pc, #312]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004474:	2209      	movs	r2, #9
 8004476:	601a      	str	r2, [r3, #0]
	 break;
 8004478:	f001 bf20 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  228 :    x=138 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 800447c:	4b44      	ldr	r3, [pc, #272]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 800447e:	228a      	movs	r2, #138	; 0x8a
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	4b44      	ldr	r3, [pc, #272]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 8004484:	2267      	movs	r2, #103	; 0x67
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	4b43      	ldr	r3, [pc, #268]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 800448a:	220a      	movs	r2, #10
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	4b43      	ldr	r3, [pc, #268]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 8004490:	220e      	movs	r2, #14
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	4b42      	ldr	r3, [pc, #264]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 80044a2:	2209      	movs	r2, #9
 80044a4:	601a      	str	r2, [r3, #0]
	 break;
 80044a6:	f001 bf09 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  229 :    x=148 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 80044ac:	2294      	movs	r2, #148	; 0x94
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	4b38      	ldr	r3, [pc, #224]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 80044b2:	2267      	movs	r2, #103	; 0x67
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	4b38      	ldr	r3, [pc, #224]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 80044b8:	220a      	movs	r2, #10
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	4b37      	ldr	r3, [pc, #220]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 80044be:	220e      	movs	r2, #14
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 80044d0:	2209      	movs	r2, #9
 80044d2:	601a      	str	r2, [r3, #0]
	 break;
 80044d4:	f001 bef2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  230 :    x=101 ;  y=201  ;  width=15  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=15   ;
 80044d8:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 80044da:	2265      	movs	r2, #101	; 0x65
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 80044e0:	22c9      	movs	r2, #201	; 0xc9
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 80044e6:	220f      	movs	r2, #15
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	4b2c      	ldr	r3, [pc, #176]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 80044ec:	220b      	movs	r2, #11
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 80044f8:	2205      	movs	r2, #5
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 80044fe:	220f      	movs	r2, #15
 8004500:	601a      	str	r2, [r3, #0]
	 break;
 8004502:	f001 bedb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  231 :    x=158 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004508:	229e      	movs	r2, #158	; 0x9e
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	4b21      	ldr	r3, [pc, #132]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 800450e:	2267      	movs	r2, #103	; 0x67
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	4b21      	ldr	r3, [pc, #132]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004514:	220a      	movs	r2, #10
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 800451a:	220e      	movs	r2, #14
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004526:	2205      	movs	r2, #5
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 800452c:	2209      	movs	r2, #9
 800452e:	601a      	str	r2, [r3, #0]
	 break;
 8004530:	f001 bec4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  232 :    x=168 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004536:	22a8      	movs	r2, #168	; 0xa8
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 800453c:	2267      	movs	r2, #103	; 0x67
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004542:	220a      	movs	r2, #10
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 8004548:	220e      	movs	r2, #14
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 800455a:	220a      	movs	r2, #10
 800455c:	601a      	str	r2, [r3, #0]
	 break;
 800455e:	f001 bead 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  233 :    x=178 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <Odczytaj_znak_S16_uc8+0x26d8>)
 8004564:	22b2      	movs	r2, #178	; 0xb2
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <Odczytaj_znak_S16_uc8+0x26dc>)
 800456a:	2267      	movs	r2, #103	; 0x67
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <Odczytaj_znak_S16_uc8+0x26e0>)
 8004570:	220a      	movs	r2, #10
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <Odczytaj_znak_S16_uc8+0x26e4>)
 8004576:	220e      	movs	r2, #14
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <Odczytaj_znak_S16_uc8+0x26e8>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <Odczytaj_znak_S16_uc8+0x26ec>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <Odczytaj_znak_S16_uc8+0x26f0>)
 8004588:	220a      	movs	r2, #10
 800458a:	601a      	str	r2, [r3, #0]
	 break;
 800458c:	f001 be96 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004590:	2400f638 	.word	0x2400f638
 8004594:	24014460 	.word	0x24014460
 8004598:	24014694 	.word	0x24014694
 800459c:	24014464 	.word	0x24014464
 80045a0:	2400f634 	.word	0x2400f634
 80045a4:	2400f63c 	.word	0x2400f63c
 80045a8:	24014690 	.word	0x24014690
	case  234 :    x=188 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80045ac:	4b98      	ldr	r3, [pc, #608]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 80045ae:	22bc      	movs	r2, #188	; 0xbc
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	4b98      	ldr	r3, [pc, #608]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 80045b4:	2267      	movs	r2, #103	; 0x67
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	4b97      	ldr	r3, [pc, #604]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 80045ba:	220a      	movs	r2, #10
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	4b97      	ldr	r3, [pc, #604]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 80045c0:	220e      	movs	r2, #14
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	4b96      	ldr	r3, [pc, #600]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	4b96      	ldr	r3, [pc, #600]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	4b95      	ldr	r3, [pc, #596]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 80045d2:	220a      	movs	r2, #10
 80045d4:	601a      	str	r2, [r3, #0]
	 break;
 80045d6:	f001 be71 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  235 :    x=198 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80045da:	4b8d      	ldr	r3, [pc, #564]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 80045dc:	22c6      	movs	r2, #198	; 0xc6
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 80045e2:	2267      	movs	r2, #103	; 0x67
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 80045e8:	220a      	movs	r2, #10
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	4b8b      	ldr	r3, [pc, #556]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 80045ee:	220e      	movs	r2, #14
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	4b8b      	ldr	r3, [pc, #556]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	4b8a      	ldr	r3, [pc, #552]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	4b8a      	ldr	r3, [pc, #552]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 8004600:	220a      	movs	r2, #10
 8004602:	601a      	str	r2, [r3, #0]
	 break;
 8004604:	f001 be5a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  236 :    x=208 ;  y=103  ;  width=5   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 8004608:	4b81      	ldr	r3, [pc, #516]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 800460a:	22d0      	movs	r2, #208	; 0xd0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 8004610:	2267      	movs	r2, #103	; 0x67
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	4b80      	ldr	r3, [pc, #512]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004616:	2205      	movs	r2, #5
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	4b80      	ldr	r3, [pc, #512]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 800461c:	220e      	movs	r2, #14
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	4b7f      	ldr	r3, [pc, #508]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	4b7e      	ldr	r3, [pc, #504]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 8004630:	2204      	movs	r2, #4
 8004632:	601a      	str	r2, [r3, #0]
	 break;
 8004634:	f001 be42 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  237 :    x=213 ;  y=103  ;  width=5   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8004638:	4b75      	ldr	r3, [pc, #468]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 800463a:	22d5      	movs	r2, #213	; 0xd5
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	4b75      	ldr	r3, [pc, #468]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 8004640:	2267      	movs	r2, #103	; 0x67
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	4b74      	ldr	r3, [pc, #464]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004646:	2205      	movs	r2, #5
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	4b74      	ldr	r3, [pc, #464]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 800464c:	220e      	movs	r2, #14
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	4b73      	ldr	r3, [pc, #460]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4b73      	ldr	r3, [pc, #460]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	4b72      	ldr	r3, [pc, #456]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 800465e:	2204      	movs	r2, #4
 8004660:	601a      	str	r2, [r3, #0]
	 break;
 8004662:	f001 be2b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  238 :    x=218 ;  y=103  ;  width=8   ;  height=14   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=4    ;
 8004666:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 8004668:	22da      	movs	r2, #218	; 0xda
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	4b69      	ldr	r3, [pc, #420]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 800466e:	2267      	movs	r2, #103	; 0x67
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	4b69      	ldr	r3, [pc, #420]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004674:	2208      	movs	r2, #8
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	4b68      	ldr	r3, [pc, #416]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 800467a:	220e      	movs	r2, #14
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	4b68      	ldr	r3, [pc, #416]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 8004680:	f06f 0201 	mvn.w	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	4b67      	ldr	r3, [pc, #412]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	4b66      	ldr	r3, [pc, #408]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 800468e:	2204      	movs	r2, #4
 8004690:	601a      	str	r2, [r3, #0]
	 break;
 8004692:	f001 be13 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  239 :    x=226 ;  y=103  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8004696:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 8004698:	22e2      	movs	r2, #226	; 0xe2
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	4b5d      	ldr	r3, [pc, #372]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 800469e:	2267      	movs	r2, #103	; 0x67
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 80046a4:	2207      	movs	r2, #7
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	4b5c      	ldr	r3, [pc, #368]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 80046aa:	220e      	movs	r2, #14
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	4b5c      	ldr	r3, [pc, #368]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	4b5a      	ldr	r3, [pc, #360]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 80046be:	2205      	movs	r2, #5
 80046c0:	601a      	str	r2, [r3, #0]
	 break;
 80046c2:	f001 bdfb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  240 :    x=233 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80046c6:	4b52      	ldr	r3, [pc, #328]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 80046c8:	22e9      	movs	r2, #233	; 0xe9
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	4b51      	ldr	r3, [pc, #324]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 80046ce:	2267      	movs	r2, #103	; 0x67
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 80046d4:	220a      	movs	r2, #10
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 80046da:	220e      	movs	r2, #14
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	4b50      	ldr	r3, [pc, #320]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	4b4f      	ldr	r3, [pc, #316]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 80046ec:	220a      	movs	r2, #10
 80046ee:	601a      	str	r2, [r3, #0]
	 break;
 80046f0:	f001 bde4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  241 :    x=243 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80046f4:	4b46      	ldr	r3, [pc, #280]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 80046f6:	22f3      	movs	r2, #243	; 0xf3
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	4b46      	ldr	r3, [pc, #280]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 80046fc:	2267      	movs	r2, #103	; 0x67
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004702:	2209      	movs	r2, #9
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	4b45      	ldr	r3, [pc, #276]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 8004708:	220e      	movs	r2, #14
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	4b44      	ldr	r3, [pc, #272]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	4b44      	ldr	r3, [pc, #272]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	4b43      	ldr	r3, [pc, #268]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 800471a:	2209      	movs	r2, #9
 800471c:	601a      	str	r2, [r3, #0]
	 break;
 800471e:	f001 bdcd 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  242 :    x=252 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004722:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 8004724:	22fc      	movs	r2, #252	; 0xfc
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	4b3a      	ldr	r3, [pc, #232]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 800472a:	2267      	movs	r2, #103	; 0x67
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004730:	220a      	movs	r2, #10
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	4b39      	ldr	r3, [pc, #228]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 8004736:	220e      	movs	r2, #14
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	4b38      	ldr	r3, [pc, #224]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 8004748:	220a      	movs	r2, #10
 800474a:	601a      	str	r2, [r3, #0]
	 break;
 800474c:	f001 bdb6 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  243 :    x=262 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 8004752:	f44f 7283 	mov.w	r2, #262	; 0x106
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	4b2e      	ldr	r3, [pc, #184]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 800475a:	2267      	movs	r2, #103	; 0x67
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004760:	220a      	movs	r2, #10
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 8004766:	220e      	movs	r2, #14
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 8004778:	220a      	movs	r2, #10
 800477a:	601a      	str	r2, [r3, #0]
	 break;
 800477c:	f001 bd9e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  244 :    x=272 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 8004782:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 800478a:	2267      	movs	r2, #103	; 0x67
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 8004790:	220a      	movs	r2, #10
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 8004796:	220e      	movs	r2, #14
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 80047a8:	220a      	movs	r2, #10
 80047aa:	601a      	str	r2, [r3, #0]
	 break;
 80047ac:	f001 bd86 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  245 :    x=282 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 80047b2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 80047ba:	2267      	movs	r2, #103	; 0x67
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 80047c0:	220a      	movs	r2, #10
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 80047c6:	220e      	movs	r2, #14
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 80047d8:	220a      	movs	r2, #10
 80047da:	601a      	str	r2, [r3, #0]
	 break;
 80047dc:	f001 bd6e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  246 :    x=292 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <Odczytaj_znak_S16_uc8+0x2958>)
 80047e2:	f44f 7292 	mov.w	r2, #292	; 0x124
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <Odczytaj_znak_S16_uc8+0x295c>)
 80047ea:	2267      	movs	r2, #103	; 0x67
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <Odczytaj_znak_S16_uc8+0x2960>)
 80047f0:	220a      	movs	r2, #10
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <Odczytaj_znak_S16_uc8+0x2964>)
 80047f6:	220e      	movs	r2, #14
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <Odczytaj_znak_S16_uc8+0x2968>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <Odczytaj_znak_S16_uc8+0x296c>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <Odczytaj_znak_S16_uc8+0x2970>)
 8004808:	220a      	movs	r2, #10
 800480a:	601a      	str	r2, [r3, #0]
	 break;
 800480c:	f001 bd56 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004810:	2400f638 	.word	0x2400f638
 8004814:	24014460 	.word	0x24014460
 8004818:	24014694 	.word	0x24014694
 800481c:	24014464 	.word	0x24014464
 8004820:	2400f634 	.word	0x2400f634
 8004824:	2400f63c 	.word	0x2400f63c
 8004828:	24014690 	.word	0x24014690
	case  247 :    x=116 ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=3    ;  xadvance=10   ;
 800482c:	4b9d      	ldr	r3, [pc, #628]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 800482e:	2274      	movs	r2, #116	; 0x74
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	4b9d      	ldr	r3, [pc, #628]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004834:	22c9      	movs	r2, #201	; 0xc9
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 800483a:	220a      	movs	r2, #10
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	4b9c      	ldr	r3, [pc, #624]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004840:	220b      	movs	r2, #11
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	4b9b      	ldr	r3, [pc, #620]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	4b9b      	ldr	r3, [pc, #620]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 800484c:	2203      	movs	r2, #3
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	4b9a      	ldr	r3, [pc, #616]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004852:	220a      	movs	r2, #10
 8004854:	601a      	str	r2, [r3, #0]
	 break;
 8004856:	f001 bd31 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  248 :    x=126 ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 800485a:	4b92      	ldr	r3, [pc, #584]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 800485c:	227e      	movs	r2, #126	; 0x7e
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	4b91      	ldr	r3, [pc, #580]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004862:	22c9      	movs	r2, #201	; 0xc9
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	4b91      	ldr	r3, [pc, #580]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004868:	220a      	movs	r2, #10
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	4b90      	ldr	r3, [pc, #576]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 800486e:	220b      	movs	r2, #11
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	4b90      	ldr	r3, [pc, #576]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 800487a:	2205      	movs	r2, #5
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004880:	220a      	movs	r2, #10
 8004882:	601a      	str	r2, [r3, #0]
	 break;
 8004884:	f001 bd1a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  249 :    x=302 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004888:	4b86      	ldr	r3, [pc, #536]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 800488a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004892:	2267      	movs	r2, #103	; 0x67
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	4b85      	ldr	r3, [pc, #532]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004898:	2209      	movs	r2, #9
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	4b84      	ldr	r3, [pc, #528]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 800489e:	220e      	movs	r2, #14
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	4b84      	ldr	r3, [pc, #528]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	4b83      	ldr	r3, [pc, #524]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	4b83      	ldr	r3, [pc, #524]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 80048b0:	2209      	movs	r2, #9
 80048b2:	601a      	str	r2, [r3, #0]
	 break;
 80048b4:	f001 bd02 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  250 :    x=311 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80048b8:	4b7a      	ldr	r3, [pc, #488]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 80048ba:	f240 1237 	movw	r2, #311	; 0x137
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 80048c2:	2267      	movs	r2, #103	; 0x67
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	4b79      	ldr	r3, [pc, #484]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 80048c8:	2209      	movs	r2, #9
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	4b78      	ldr	r3, [pc, #480]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 80048ce:	220e      	movs	r2, #14
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	4b78      	ldr	r3, [pc, #480]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	4b77      	ldr	r3, [pc, #476]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	4b77      	ldr	r3, [pc, #476]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 80048e0:	2209      	movs	r2, #9
 80048e2:	601a      	str	r2, [r3, #0]
	 break;
 80048e4:	f001 bcea 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  251 :    x=320 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80048e8:	4b6e      	ldr	r3, [pc, #440]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 80048ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 80048f2:	2267      	movs	r2, #103	; 0x67
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	4b6d      	ldr	r3, [pc, #436]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 80048f8:	2209      	movs	r2, #9
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 80048fe:	220e      	movs	r2, #14
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	4b6c      	ldr	r3, [pc, #432]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	4b6b      	ldr	r3, [pc, #428]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004910:	2209      	movs	r2, #9
 8004912:	601a      	str	r2, [r3, #0]
	 break;
 8004914:	f001 bcd2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  252 :    x=329 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004918:	4b62      	ldr	r3, [pc, #392]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 800491a:	f240 1249 	movw	r2, #329	; 0x149
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004922:	2267      	movs	r2, #103	; 0x67
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004928:	2209      	movs	r2, #9
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	4b60      	ldr	r3, [pc, #384]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 800492e:	220e      	movs	r2, #14
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4b60      	ldr	r3, [pc, #384]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	4b5f      	ldr	r3, [pc, #380]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004940:	2209      	movs	r2, #9
 8004942:	601a      	str	r2, [r3, #0]
	 break;
 8004944:	f001 bcba 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  253 :    x=330 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 8004948:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 800494a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	4b55      	ldr	r3, [pc, #340]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004952:	2215      	movs	r2, #21
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	4b55      	ldr	r3, [pc, #340]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004958:	220b      	movs	r2, #11
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	4b54      	ldr	r3, [pc, #336]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 800495e:	2211      	movs	r2, #17
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	4b54      	ldr	r3, [pc, #336]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	4b52      	ldr	r3, [pc, #328]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004972:	2209      	movs	r2, #9
 8004974:	601a      	str	r2, [r3, #0]
	 break;
 8004976:	f001 bca1 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  254 :    x=341 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 800497c:	f240 1255 	movw	r2, #341	; 0x155
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4b49      	ldr	r3, [pc, #292]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004984:	2215      	movs	r2, #21
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	4b48      	ldr	r3, [pc, #288]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 800498a:	220a      	movs	r2, #10
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4b48      	ldr	r3, [pc, #288]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004990:	2211      	movs	r2, #17
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	4b47      	ldr	r3, [pc, #284]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	4b46      	ldr	r3, [pc, #280]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 80049a2:	220a      	movs	r2, #10
 80049a4:	601a      	str	r2, [r3, #0]
	 break;
 80049a6:	f001 bc89 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  255 :    x=351 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 80049aa:	4b3e      	ldr	r3, [pc, #248]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 80049ac:	f240 125f 	movw	r2, #351	; 0x15f
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 80049b4:	2215      	movs	r2, #21
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	4b3c      	ldr	r3, [pc, #240]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 80049ba:	220b      	movs	r2, #11
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	4b3c      	ldr	r3, [pc, #240]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 80049c0:	2211      	movs	r2, #17
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 80049d4:	2209      	movs	r2, #9
 80049d6:	601a      	str	r2, [r3, #0]
	 break;
 80049d8:	f001 bc70 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  256 :    x=362 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=11   ;
 80049dc:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 80049de:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 80049e6:	2215      	movs	r2, #21
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	4b30      	ldr	r3, [pc, #192]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 80049ec:	220d      	movs	r2, #13
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 80049f2:	2211      	movs	r2, #17
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	4b2f      	ldr	r3, [pc, #188]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a08:	220b      	movs	r2, #11
 8004a0a:	601a      	str	r2, [r3, #0]
	 break;
 8004a0c:	f001 bc56 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  257 :    x=338 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004a10:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a12:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004a1a:	2267      	movs	r2, #103	; 0x67
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	4b23      	ldr	r3, [pc, #140]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004a20:	220a      	movs	r2, #10
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004a26:	220e      	movs	r2, #14
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a38:	2209      	movs	r2, #9
 8004a3a:	601a      	str	r2, [r3, #0]
	 break;
 8004a3c:	f001 bc3e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  258 :    x=375 ;  y=21   ;  width=14  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=12   ;
 8004a40:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a42:	f240 1277 	movw	r2, #375	; 0x177
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004a4a:	2215      	movs	r2, #21
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004a50:	220e      	movs	r2, #14
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004a56:	2211      	movs	r2, #17
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a6c:	220c      	movs	r2, #12
 8004a6e:	601a      	str	r2, [r3, #0]
	 break;
 8004a70:	f001 bc24 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  259 :    x=348 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <Odczytaj_znak_S16_uc8+0x2bec>)
 8004a76:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <Odczytaj_znak_S16_uc8+0x2bf0>)
 8004a7e:	2267      	movs	r2, #103	; 0x67
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <Odczytaj_znak_S16_uc8+0x2bf4>)
 8004a84:	220a      	movs	r2, #10
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <Odczytaj_znak_S16_uc8+0x2bf8>)
 8004a8a:	220e      	movs	r2, #14
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <Odczytaj_znak_S16_uc8+0x2bfc>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <Odczytaj_znak_S16_uc8+0x2c00>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <Odczytaj_znak_S16_uc8+0x2c04>)
 8004a9c:	2209      	movs	r2, #9
 8004a9e:	601a      	str	r2, [r3, #0]
	 break;
 8004aa0:	f001 bc0c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004aa4:	2400f638 	.word	0x2400f638
 8004aa8:	24014460 	.word	0x24014460
 8004aac:	24014694 	.word	0x24014694
 8004ab0:	24014464 	.word	0x24014464
 8004ab4:	2400f634 	.word	0x2400f634
 8004ab8:	2400f63c 	.word	0x2400f63c
 8004abc:	24014690 	.word	0x24014690
	case  260 :    x=389 ;  y=21   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 8004ac0:	4b9d      	ldr	r3, [pc, #628]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004ac2:	f240 1285 	movw	r2, #389	; 0x185
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	4b9c      	ldr	r3, [pc, #624]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004aca:	2215      	movs	r2, #21
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	4b9c      	ldr	r3, [pc, #624]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004ad0:	220d      	movs	r2, #13
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	4b9b      	ldr	r3, [pc, #620]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004ad6:	2211      	movs	r2, #17
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	4b9b      	ldr	r3, [pc, #620]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	4b9a      	ldr	r3, [pc, #616]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	4b99      	ldr	r3, [pc, #612]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004aea:	220b      	movs	r2, #11
 8004aec:	601a      	str	r2, [r3, #0]
	 break;
 8004aee:	f001 bbe5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  261 :    x=358 ;  y=103  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8004af2:	4b91      	ldr	r3, [pc, #580]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004af4:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	4b90      	ldr	r3, [pc, #576]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004afc:	2267      	movs	r2, #103	; 0x67
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004b02:	2209      	movs	r2, #9
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	4b8f      	ldr	r3, [pc, #572]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004b08:	220e      	movs	r2, #14
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	4b8e      	ldr	r3, [pc, #568]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004b14:	2205      	movs	r2, #5
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	4b8d      	ldr	r3, [pc, #564]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004b1a:	2209      	movs	r2, #9
 8004b1c:	601a      	str	r2, [r3, #0]
	 break;
 8004b1e:	f001 bbcd 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  262 :    x=402 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 8004b22:	4b85      	ldr	r3, [pc, #532]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004b24:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	4b84      	ldr	r3, [pc, #528]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004b2c:	2215      	movs	r2, #21
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	4b83      	ldr	r3, [pc, #524]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004b32:	220c      	movs	r2, #12
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	4b83      	ldr	r3, [pc, #524]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004b38:	2211      	movs	r2, #17
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	4b82      	ldr	r3, [pc, #520]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	4b82      	ldr	r3, [pc, #520]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	4b81      	ldr	r3, [pc, #516]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004b4c:	220c      	movs	r2, #12
 8004b4e:	601a      	str	r2, [r3, #0]
	 break;
 8004b50:	f001 bbb4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  263 :    x=367 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004b54:	4b78      	ldr	r3, [pc, #480]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004b56:	f240 126f 	movw	r2, #367	; 0x16f
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004b5e:	2267      	movs	r2, #103	; 0x67
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	4b77      	ldr	r3, [pc, #476]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004b64:	220a      	movs	r2, #10
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	4b76      	ldr	r3, [pc, #472]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004b6a:	220e      	movs	r2, #14
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	4b75      	ldr	r3, [pc, #468]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	4b75      	ldr	r3, [pc, #468]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004b7c:	2209      	movs	r2, #9
 8004b7e:	601a      	str	r2, [r3, #0]
	 break;
 8004b80:	f001 bb9c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  264 :    x=150 ;  y=0    ;  width=12  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=12   ;
 8004b84:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004b86:	2296      	movs	r2, #150	; 0x96
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	4b6c      	ldr	r3, [pc, #432]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	4b6b      	ldr	r3, [pc, #428]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004b92:	220c      	movs	r2, #12
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	4b6b      	ldr	r3, [pc, #428]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004b98:	2212      	movs	r2, #18
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	4b6a      	ldr	r3, [pc, #424]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004ba4:	f06f 0201 	mvn.w	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	4b69      	ldr	r3, [pc, #420]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004bac:	220c      	movs	r2, #12
 8004bae:	601a      	str	r2, [r3, #0]
	 break;
 8004bb0:	f001 bb84 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  265 :    x=377 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004bb4:	4b60      	ldr	r3, [pc, #384]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004bb6:	f240 1279 	movw	r2, #377	; 0x179
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004bbe:	2267      	movs	r2, #103	; 0x67
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004bc4:	220a      	movs	r2, #10
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	4b5e      	ldr	r3, [pc, #376]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004bca:	220e      	movs	r2, #14
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	4b5e      	ldr	r3, [pc, #376]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	4b5d      	ldr	r3, [pc, #372]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	4b5d      	ldr	r3, [pc, #372]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004bdc:	2209      	movs	r2, #9
 8004bde:	601a      	str	r2, [r3, #0]
	 break;
 8004be0:	f001 bb6c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  266 :    x=162 ;  y=0    ;  width=12  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=12   ;
 8004be4:	4b54      	ldr	r3, [pc, #336]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004be6:	22a2      	movs	r2, #162	; 0xa2
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004bf8:	2212      	movs	r2, #18
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	4b52      	ldr	r3, [pc, #328]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c04:	f06f 0201 	mvn.w	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c0c:	220c      	movs	r2, #12
 8004c0e:	601a      	str	r2, [r3, #0]
	 break;
 8004c10:	f001 bb54 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  267 :    x=387 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004c14:	4b48      	ldr	r3, [pc, #288]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004c16:	f240 1283 	movw	r2, #387	; 0x183
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004c1e:	2267      	movs	r2, #103	; 0x67
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004c24:	220a      	movs	r2, #10
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004c2a:	220e      	movs	r2, #14
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	4b46      	ldr	r3, [pc, #280]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	4b45      	ldr	r3, [pc, #276]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	4b45      	ldr	r3, [pc, #276]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	601a      	str	r2, [r3, #0]
	 break;
 8004c40:	f001 bb3c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  268 :    x=414 ;  y=21   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 8004c44:	4b3c      	ldr	r3, [pc, #240]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004c46:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004c4e:	2215      	movs	r2, #21
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004c54:	220c      	movs	r2, #12
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004c5a:	2211      	movs	r2, #17
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	4b38      	ldr	r3, [pc, #224]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c6e:	220c      	movs	r2, #12
 8004c70:	601a      	str	r2, [r3, #0]
	 break;
 8004c72:	f001 bb23 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  269 :    x=397 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004c78:	f240 128d 	movw	r2, #397	; 0x18d
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004c80:	2267      	movs	r2, #103	; 0x67
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	4b2e      	ldr	r3, [pc, #184]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004c86:	220a      	movs	r2, #10
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004c8c:	220e      	movs	r2, #14
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004c9e:	2209      	movs	r2, #9
 8004ca0:	601a      	str	r2, [r3, #0]
	 break;
 8004ca2:	f001 bb0b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  270 :    x=426 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004ca6:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004ca8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	4b23      	ldr	r3, [pc, #140]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004cb0:	2215      	movs	r2, #21
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004cb6:	220b      	movs	r2, #11
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004cbc:	2211      	movs	r2, #17
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	4b21      	ldr	r3, [pc, #132]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004cd0:	220b      	movs	r2, #11
 8004cd2:	601a      	str	r2, [r3, #0]
	 break;
 8004cd4:	f001 baf2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  271 :    x=407 ;  y=103  ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004cda:	f240 1297 	movw	r2, #407	; 0x197
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004ce2:	2267      	movs	r2, #103	; 0x67
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004ce8:	220d      	movs	r2, #13
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004cee:	220e      	movs	r2, #14
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004d00:	220c      	movs	r2, #12
 8004d02:	601a      	str	r2, [r3, #0]
	 break;
 8004d04:	f001 bada 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  272 :    x=51  ;  y=103  ;  width=13  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <Odczytaj_znak_S16_uc8+0x2e80>)
 8004d0a:	2233      	movs	r2, #51	; 0x33
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <Odczytaj_znak_S16_uc8+0x2e84>)
 8004d10:	2267      	movs	r2, #103	; 0x67
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <Odczytaj_znak_S16_uc8+0x2e88>)
 8004d16:	220d      	movs	r2, #13
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <Odczytaj_znak_S16_uc8+0x2e8c>)
 8004d1c:	220e      	movs	r2, #14
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <Odczytaj_znak_S16_uc8+0x2e90>)
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <Odczytaj_znak_S16_uc8+0x2e94>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <Odczytaj_znak_S16_uc8+0x2e98>)
 8004d30:	220c      	movs	r2, #12
 8004d32:	601a      	str	r2, [r3, #0]
	 break;
 8004d34:	f001 bac2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004d38:	2400f638 	.word	0x2400f638
 8004d3c:	24014460 	.word	0x24014460
 8004d40:	24014694 	.word	0x24014694
 8004d44:	24014464 	.word	0x24014464
 8004d48:	2400f634 	.word	0x2400f634
 8004d4c:	2400f63c 	.word	0x2400f63c
 8004d50:	24014690 	.word	0x24014690
	case  273 :    x=420 ;  y=103  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8004d54:	4b9d      	ldr	r3, [pc, #628]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004d56:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	4b9c      	ldr	r3, [pc, #624]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004d5e:	2267      	movs	r2, #103	; 0x67
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	4b9c      	ldr	r3, [pc, #624]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004d64:	220b      	movs	r2, #11
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	4b9b      	ldr	r3, [pc, #620]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004d6a:	220e      	movs	r2, #14
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	4b9b      	ldr	r3, [pc, #620]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	4b9a      	ldr	r3, [pc, #616]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004d7c:	220b      	movs	r2, #11
 8004d7e:	601a      	str	r2, [r3, #0]
	 break;
 8004d80:	f001 ba9c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  274 :    x=437 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004d86:	f240 12b5 	movw	r2, #437	; 0x1b5
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	4b90      	ldr	r3, [pc, #576]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004d8e:	2215      	movs	r2, #21
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	4b90      	ldr	r3, [pc, #576]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004d94:	220b      	movs	r2, #11
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	4b8f      	ldr	r3, [pc, #572]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004d9a:	2211      	movs	r2, #17
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	4b8f      	ldr	r3, [pc, #572]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	4b8e      	ldr	r3, [pc, #568]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	4b8d      	ldr	r3, [pc, #564]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004dae:	220b      	movs	r2, #11
 8004db0:	601a      	str	r2, [r3, #0]
	 break;
 8004db2:	f001 ba83 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  275 :    x=431 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004db6:	4b85      	ldr	r3, [pc, #532]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004db8:	f240 12af 	movw	r2, #431	; 0x1af
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	4b84      	ldr	r3, [pc, #528]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004dc0:	2267      	movs	r2, #103	; 0x67
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	4b83      	ldr	r3, [pc, #524]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004dc6:	220a      	movs	r2, #10
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	4b83      	ldr	r3, [pc, #524]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004dcc:	220e      	movs	r2, #14
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	4b82      	ldr	r3, [pc, #520]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004dde:	220a      	movs	r2, #10
 8004de0:	601a      	str	r2, [r3, #0]
	 break;
 8004de2:	f001 ba6b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  276 :    x=174 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8004de6:	4b79      	ldr	r3, [pc, #484]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004de8:	22ae      	movs	r2, #174	; 0xae
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	4b78      	ldr	r3, [pc, #480]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004df4:	220b      	movs	r2, #11
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	4b77      	ldr	r3, [pc, #476]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004dfa:	2212      	movs	r2, #18
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4b77      	ldr	r3, [pc, #476]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	4b76      	ldr	r3, [pc, #472]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004e06:	f06f 0201 	mvn.w	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004e0e:	220b      	movs	r2, #11
 8004e10:	601a      	str	r2, [r3, #0]
	 break;
 8004e12:	f001 ba53 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  277 :    x=441 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004e16:	4b6d      	ldr	r3, [pc, #436]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004e18:	f240 12b9 	movw	r2, #441	; 0x1b9
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004e20:	2267      	movs	r2, #103	; 0x67
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	4b6b      	ldr	r3, [pc, #428]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004e26:	220a      	movs	r2, #10
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	4b6b      	ldr	r3, [pc, #428]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004e2c:	220e      	movs	r2, #14
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	4b69      	ldr	r3, [pc, #420]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004e3e:	220a      	movs	r2, #10
 8004e40:	601a      	str	r2, [r3, #0]
	 break;
 8004e42:	f001 ba3b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  278 :    x=448 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004e46:	4b61      	ldr	r3, [pc, #388]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004e48:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	4b60      	ldr	r3, [pc, #384]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004e50:	2215      	movs	r2, #21
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004e56:	220b      	movs	r2, #11
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	4b5f      	ldr	r3, [pc, #380]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004e5c:	2211      	movs	r2, #17
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	4b5e      	ldr	r3, [pc, #376]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004e70:	220b      	movs	r2, #11
 8004e72:	601a      	str	r2, [r3, #0]
	 break;
 8004e74:	f001 ba22 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  279 :    x=451 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004e78:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004e7a:	f240 12c3 	movw	r2, #451	; 0x1c3
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004e82:	2267      	movs	r2, #103	; 0x67
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004e88:	220a      	movs	r2, #10
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	4b52      	ldr	r3, [pc, #328]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004e8e:	220e      	movs	r2, #14
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	4b52      	ldr	r3, [pc, #328]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	4b51      	ldr	r3, [pc, #324]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	4b51      	ldr	r3, [pc, #324]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004ea0:	220a      	movs	r2, #10
 8004ea2:	601a      	str	r2, [r3, #0]
	 break;
 8004ea4:	f001 ba0a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  280 :    x=459 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004ea8:	4b48      	ldr	r3, [pc, #288]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004eaa:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004eb2:	2215      	movs	r2, #21
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004eb8:	220a      	movs	r2, #10
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	4b46      	ldr	r3, [pc, #280]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004ebe:	2211      	movs	r2, #17
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4b46      	ldr	r3, [pc, #280]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004ed0:	220a      	movs	r2, #10
 8004ed2:	601a      	str	r2, [r3, #0]
	 break;
 8004ed4:	f001 b9f2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  281 :    x=461 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 8004ed8:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004eda:	f240 12cd 	movw	r2, #461	; 0x1cd
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004ee2:	2267      	movs	r2, #103	; 0x67
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004ee8:	220a      	movs	r2, #10
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004eee:	220e      	movs	r2, #14
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004efa:	2205      	movs	r2, #5
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f00:	220a      	movs	r2, #10
 8004f02:	601a      	str	r2, [r3, #0]
	 break;
 8004f04:	f001 b9da 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  282 :    x=469 ;  y=21   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8004f08:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004f0a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004f12:	2215      	movs	r2, #21
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	4b2f      	ldr	r3, [pc, #188]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004f18:	220b      	movs	r2, #11
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004f1e:	2211      	movs	r2, #17
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f32:	220b      	movs	r2, #11
 8004f34:	601a      	str	r2, [r3, #0]
	 break;
 8004f36:	f001 b9c1 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  283 :    x=471 ;  y=103  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004f3c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004f44:	2267      	movs	r2, #103	; 0x67
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004f4a:	220a      	movs	r2, #10
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004f50:	220e      	movs	r2, #14
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f62:	220a      	movs	r2, #10
 8004f64:	601a      	str	r2, [r3, #0]
	 break;
 8004f66:	f001 b9a9 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  284 :    x=185 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004f6c:	22b9      	movs	r2, #185	; 0xb9
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004f78:	220d      	movs	r2, #13
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004f7e:	2212      	movs	r2, #18
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004f8a:	f06f 0201 	mvn.w	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004f92:	220d      	movs	r2, #13
 8004f94:	601a      	str	r2, [r3, #0]
	 break;
 8004f96:	f001 b991 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  285 :    x=480 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <Odczytaj_znak_S16_uc8+0x3114>)
 8004f9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <Odczytaj_znak_S16_uc8+0x3118>)
 8004fa4:	2215      	movs	r2, #21
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <Odczytaj_znak_S16_uc8+0x311c>)
 8004faa:	220a      	movs	r2, #10
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <Odczytaj_znak_S16_uc8+0x3120>)
 8004fb0:	2211      	movs	r2, #17
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <Odczytaj_znak_S16_uc8+0x3124>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <Odczytaj_znak_S16_uc8+0x3128>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <Odczytaj_znak_S16_uc8+0x312c>)
 8004fc2:	220a      	movs	r2, #10
 8004fc4:	601a      	str	r2, [r3, #0]
	 break;
 8004fc6:	f001 b979 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8004fca:	bf00      	nop
 8004fcc:	2400f638 	.word	0x2400f638
 8004fd0:	24014460 	.word	0x24014460
 8004fd4:	24014694 	.word	0x24014694
 8004fd8:	24014464 	.word	0x24014464
 8004fdc:	2400f634 	.word	0x2400f634
 8004fe0:	2400f63c 	.word	0x2400f63c
 8004fe4:	24014690 	.word	0x24014690
	case  286 :    x=198 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8004fe8:	4b9b      	ldr	r3, [pc, #620]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 8004fea:	22c6      	movs	r2, #198	; 0xc6
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	4b9b      	ldr	r3, [pc, #620]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	4b9a      	ldr	r3, [pc, #616]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8004ff6:	220d      	movs	r2, #13
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	4b9a      	ldr	r3, [pc, #616]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 8004ffc:	2212      	movs	r2, #18
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	4b99      	ldr	r3, [pc, #612]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	4b99      	ldr	r3, [pc, #612]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005008:	f06f 0201 	mvn.w	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	4b98      	ldr	r3, [pc, #608]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 8005010:	220d      	movs	r2, #13
 8005012:	601a      	str	r2, [r3, #0]
	 break;
 8005014:	f001 b952 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  287 :    x=490 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005018:	4b8f      	ldr	r3, [pc, #572]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 800501a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	4b8e      	ldr	r3, [pc, #568]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 8005022:	2215      	movs	r2, #21
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	4b8e      	ldr	r3, [pc, #568]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005028:	220a      	movs	r2, #10
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	4b8d      	ldr	r3, [pc, #564]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 800502e:	2211      	movs	r2, #17
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	4b8d      	ldr	r3, [pc, #564]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4b8c      	ldr	r3, [pc, #560]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	4b8c      	ldr	r3, [pc, #560]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 8005040:	220a      	movs	r2, #10
 8005042:	601a      	str	r2, [r3, #0]
	 break;
 8005044:	f001 b93a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  288 :    x=211 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8005048:	4b83      	ldr	r3, [pc, #524]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 800504a:	22d3      	movs	r2, #211	; 0xd3
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	4b83      	ldr	r3, [pc, #524]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	4b82      	ldr	r3, [pc, #520]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005056:	220d      	movs	r2, #13
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	4b82      	ldr	r3, [pc, #520]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 800505c:	2212      	movs	r2, #18
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	4b81      	ldr	r3, [pc, #516]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	4b81      	ldr	r3, [pc, #516]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4b80      	ldr	r3, [pc, #512]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 8005070:	220d      	movs	r2, #13
 8005072:	601a      	str	r2, [r3, #0]
	 break;
 8005074:	f001 b922 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  289 :    x=500 ;  y=21   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005078:	4b77      	ldr	r3, [pc, #476]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 800507a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	4b76      	ldr	r3, [pc, #472]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 8005082:	2215      	movs	r2, #21
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	4b76      	ldr	r3, [pc, #472]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005088:	220a      	movs	r2, #10
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	4b75      	ldr	r3, [pc, #468]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 800508e:	2211      	movs	r2, #17
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	4b75      	ldr	r3, [pc, #468]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4b74      	ldr	r3, [pc, #464]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4b74      	ldr	r3, [pc, #464]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 80050a0:	220a      	movs	r2, #10
 80050a2:	601a      	str	r2, [r3, #0]
	 break;
 80050a4:	f001 b90a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  290 :    x=224 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 80050a8:	4b6b      	ldr	r3, [pc, #428]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 80050aa:	22e0      	movs	r2, #224	; 0xe0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	4b6b      	ldr	r3, [pc, #428]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 80050b6:	220d      	movs	r2, #13
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 80050bc:	2212      	movs	r2, #18
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	4b69      	ldr	r3, [pc, #420]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	4b69      	ldr	r3, [pc, #420]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	4b68      	ldr	r3, [pc, #416]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 80050ce:	220d      	movs	r2, #13
 80050d0:	601a      	str	r2, [r3, #0]
	 break;
 80050d2:	f001 b8f3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  291 :    x=31  ;  y=0    ;  width=10  ;  height=19   ;  xoffset=0    ;  yoffset=0    ;  xadvance=10   ;
 80050d6:	4b60      	ldr	r3, [pc, #384]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 80050d8:	221f      	movs	r2, #31
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	4b5f      	ldr	r3, [pc, #380]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	4b5f      	ldr	r3, [pc, #380]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 80050e4:	220a      	movs	r2, #10
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	4b5e      	ldr	r3, [pc, #376]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 80050ea:	2213      	movs	r2, #19
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	4b5e      	ldr	r3, [pc, #376]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	4b5d      	ldr	r3, [pc, #372]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	4b5d      	ldr	r3, [pc, #372]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 80050fc:	220a      	movs	r2, #10
 80050fe:	601a      	str	r2, [r3, #0]
	 break;
 8005100:	f001 b8dc 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  292 :    x=0   ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005104:	4b54      	ldr	r3, [pc, #336]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	4b54      	ldr	r3, [pc, #336]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 800510c:	2226      	movs	r2, #38	; 0x26
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	4b53      	ldr	r3, [pc, #332]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005112:	220b      	movs	r2, #11
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	4b53      	ldr	r3, [pc, #332]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005118:	2211      	movs	r2, #17
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	4b52      	ldr	r3, [pc, #328]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	4b52      	ldr	r3, [pc, #328]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005124:	f04f 32ff 	mov.w	r2, #4294967295
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	4b51      	ldr	r3, [pc, #324]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 800512c:	220b      	movs	r2, #11
 800512e:	601a      	str	r2, [r3, #0]
	 break;
 8005130:	f001 b8c4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  293 :    x=11  ;  y=38   ;  width=9   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=9    ;
 8005134:	4b48      	ldr	r3, [pc, #288]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005136:	220b      	movs	r2, #11
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	4b48      	ldr	r3, [pc, #288]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 800513c:	2226      	movs	r2, #38	; 0x26
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	4b47      	ldr	r3, [pc, #284]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005142:	2209      	movs	r2, #9
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	4b47      	ldr	r3, [pc, #284]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 8005148:	2211      	movs	r2, #17
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	4b46      	ldr	r3, [pc, #280]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4b46      	ldr	r3, [pc, #280]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	4b45      	ldr	r3, [pc, #276]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 800515c:	2209      	movs	r2, #9
 800515e:	601a      	str	r2, [r3, #0]
	 break;
 8005160:	f001 b8ac 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  294 :    x=481 ;  y=103  ;  width=13  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=13   ;
 8005164:	4b3c      	ldr	r3, [pc, #240]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005166:	f240 12e1 	movw	r2, #481	; 0x1e1
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	4b3b      	ldr	r3, [pc, #236]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 800516e:	2267      	movs	r2, #103	; 0x67
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005174:	220d      	movs	r2, #13
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 800517a:	220e      	movs	r2, #14
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	4b3a      	ldr	r3, [pc, #232]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	4b39      	ldr	r3, [pc, #228]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 800518c:	220d      	movs	r2, #13
 800518e:	601a      	str	r2, [r3, #0]
	 break;
 8005190:	f001 b894 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  295 :    x=494 ;  y=103  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005194:	4b30      	ldr	r3, [pc, #192]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005196:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	4b2f      	ldr	r3, [pc, #188]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 800519e:	2267      	movs	r2, #103	; 0x67
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 80051a4:	220b      	movs	r2, #11
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 80051aa:	220e      	movs	r2, #14
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	4b2d      	ldr	r3, [pc, #180]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 80051bc:	220b      	movs	r2, #11
 80051be:	601a      	str	r2, [r3, #0]
	 break;
 80051c0:	f001 b87c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  296 :    x=237 ;  y=0    ;  width=7   ;  height=18   ;  xoffset=-1   ;  yoffset=-2   ;  xadvance=5    ;
 80051c4:	4b24      	ldr	r3, [pc, #144]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 80051c6:	22ed      	movs	r2, #237	; 0xed
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	4b23      	ldr	r3, [pc, #140]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 80051d2:	2207      	movs	r2, #7
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	4b23      	ldr	r3, [pc, #140]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 80051d8:	2212      	movs	r2, #18
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	4b22      	ldr	r3, [pc, #136]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	4b21      	ldr	r3, [pc, #132]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 80051e6:	f06f 0201 	mvn.w	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	4b20      	ldr	r3, [pc, #128]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 80051ee:	2205      	movs	r2, #5
 80051f0:	601a      	str	r2, [r3, #0]
	 break;
 80051f2:	f001 b863 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  297 :    x=0   ;  y=117  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 80051fe:	2275      	movs	r2, #117	; 0x75
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005204:	2207      	movs	r2, #7
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 800520a:	220e      	movs	r2, #14
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005210:	f04f 32ff 	mov.w	r2, #4294967295
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	4b14      	ldr	r3, [pc, #80]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 800521e:	2204      	movs	r2, #4
 8005220:	601a      	str	r2, [r3, #0]
	 break;
 8005222:	f001 b84b 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  298 :    x=20  ;  y=38   ;  width=7   ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=5    ;
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <Odczytaj_znak_S16_uc8+0x33a0>)
 8005228:	2214      	movs	r2, #20
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <Odczytaj_znak_S16_uc8+0x33a4>)
 800522e:	2226      	movs	r2, #38	; 0x26
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <Odczytaj_znak_S16_uc8+0x33a8>)
 8005234:	2207      	movs	r2, #7
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <Odczytaj_znak_S16_uc8+0x33ac>)
 800523a:	2211      	movs	r2, #17
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <Odczytaj_znak_S16_uc8+0x33b0>)
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <Odczytaj_znak_S16_uc8+0x33b4>)
 8005248:	f04f 32ff 	mov.w	r2, #4294967295
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <Odczytaj_znak_S16_uc8+0x33b8>)
 8005250:	2205      	movs	r2, #5
 8005252:	601a      	str	r2, [r3, #0]
	 break;
 8005254:	f001 b832 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8005258:	2400f638 	.word	0x2400f638
 800525c:	24014460 	.word	0x24014460
 8005260:	24014694 	.word	0x24014694
 8005264:	24014464 	.word	0x24014464
 8005268:	2400f634 	.word	0x2400f634
 800526c:	2400f63c 	.word	0x2400f63c
 8005270:	24014690 	.word	0x24014690
	case  299 :    x=7   ;  y=117  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=5    ;
 8005274:	4b98      	ldr	r3, [pc, #608]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 8005276:	2207      	movs	r2, #7
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	4b98      	ldr	r3, [pc, #608]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 800527c:	2275      	movs	r2, #117	; 0x75
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	4b97      	ldr	r3, [pc, #604]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 8005282:	2207      	movs	r2, #7
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	4b97      	ldr	r3, [pc, #604]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005288:	220e      	movs	r2, #14
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	4b96      	ldr	r3, [pc, #600]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4b95      	ldr	r3, [pc, #596]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	4b95      	ldr	r3, [pc, #596]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 800529c:	2205      	movs	r2, #5
 800529e:	601a      	str	r2, [r3, #0]
	 break;
 80052a0:	f001 b80c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  300 :    x=244 ;  y=0    ;  width=6   ;  height=18   ;  xoffset=-1   ;  yoffset=-2   ;  xadvance=4    ;
 80052a4:	4b8c      	ldr	r3, [pc, #560]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 80052a6:	22f4      	movs	r2, #244	; 0xf4
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	4b8c      	ldr	r3, [pc, #560]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	4b8b      	ldr	r3, [pc, #556]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 80052b2:	2206      	movs	r2, #6
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 80052b8:	2212      	movs	r2, #18
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4b8a      	ldr	r3, [pc, #552]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 80052be:	f04f 32ff 	mov.w	r2, #4294967295
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	4b89      	ldr	r3, [pc, #548]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 80052c6:	f06f 0201 	mvn.w	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	4b88      	ldr	r3, [pc, #544]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 80052ce:	2204      	movs	r2, #4
 80052d0:	601a      	str	r2, [r3, #0]
	 break;
 80052d2:	f000 bff3 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  301 :    x=14  ;  y=117  ;  width=7   ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=4    ;
 80052d6:	4b80      	ldr	r3, [pc, #512]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 80052d8:	220e      	movs	r2, #14
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 80052de:	2275      	movs	r2, #117	; 0x75
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	4b7f      	ldr	r3, [pc, #508]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 80052e4:	2207      	movs	r2, #7
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	4b7e      	ldr	r3, [pc, #504]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 80052ea:	220e      	movs	r2, #14
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	4b7e      	ldr	r3, [pc, #504]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	4b7d      	ldr	r3, [pc, #500]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	4b7c      	ldr	r3, [pc, #496]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 80052fe:	2204      	movs	r2, #4
 8005300:	601a      	str	r2, [r3, #0]
	 break;
 8005302:	f000 bfdb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  302 :    x=27  ;  y=38   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8005306:	4b74      	ldr	r3, [pc, #464]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 8005308:	221b      	movs	r2, #27
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	4b73      	ldr	r3, [pc, #460]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 800530e:	2226      	movs	r2, #38	; 0x26
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	4b73      	ldr	r3, [pc, #460]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 8005314:	2205      	movs	r2, #5
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	4b72      	ldr	r3, [pc, #456]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 800531a:	2211      	movs	r2, #17
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	4b71      	ldr	r3, [pc, #452]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	4b71      	ldr	r3, [pc, #452]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 800532c:	2205      	movs	r2, #5
 800532e:	601a      	str	r2, [r3, #0]
	 break;
 8005330:	f000 bfc4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  303 :    x=32  ;  y=38   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=5    ;
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 8005336:	2220      	movs	r2, #32
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	4b68      	ldr	r3, [pc, #416]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 800533c:	2226      	movs	r2, #38	; 0x26
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	4b67      	ldr	r3, [pc, #412]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 8005342:	2205      	movs	r2, #5
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	4b67      	ldr	r3, [pc, #412]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005348:	2211      	movs	r2, #17
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	4b66      	ldr	r3, [pc, #408]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	4b65      	ldr	r3, [pc, #404]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 800535a:	2205      	movs	r2, #5
 800535c:	601a      	str	r2, [r3, #0]
	 break;
 800535e:	f000 bfad 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  304 :    x=37  ;  y=38   ;  width=4   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=4    ;
 8005362:	4b5d      	ldr	r3, [pc, #372]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 8005364:	2225      	movs	r2, #37	; 0x25
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 800536a:	2226      	movs	r2, #38	; 0x26
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	4b5c      	ldr	r3, [pc, #368]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 8005370:	2204      	movs	r2, #4
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	4b5b      	ldr	r3, [pc, #364]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005376:	2211      	movs	r2, #17
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 800538a:	2204      	movs	r2, #4
 800538c:	601a      	str	r2, [r3, #0]
	 break;
 800538e:	f000 bf95 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  305 :    x=136 ;  y=201  ;  width=4   ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=4    ;
 8005392:	4b51      	ldr	r3, [pc, #324]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 8005394:	2288      	movs	r2, #136	; 0x88
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 800539a:	22c9      	movs	r2, #201	; 0xc9
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	4b50      	ldr	r3, [pc, #320]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 80053a0:	2204      	movs	r2, #4
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	4b4f      	ldr	r3, [pc, #316]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 80053a6:	220b      	movs	r2, #11
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4b4f      	ldr	r3, [pc, #316]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	4b4e      	ldr	r3, [pc, #312]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 80053b2:	2205      	movs	r2, #5
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 80053b8:	2204      	movs	r2, #4
 80053ba:	601a      	str	r2, [r3, #0]
	 break;
 80053bc:	f000 bf7e 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  306 :    x=21  ;  y=117  ;  width=12  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 80053c0:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 80053c2:	2215      	movs	r2, #21
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	4b45      	ldr	r3, [pc, #276]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 80053c8:	2275      	movs	r2, #117	; 0x75
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	4b44      	ldr	r3, [pc, #272]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 80053ce:	220c      	movs	r2, #12
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	4b44      	ldr	r3, [pc, #272]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 80053d4:	220e      	movs	r2, #14
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	4b43      	ldr	r3, [pc, #268]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	4b42      	ldr	r3, [pc, #264]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 80053e6:	220c      	movs	r2, #12
 80053e8:	601a      	str	r2, [r3, #0]
	 break;
 80053ea:	f000 bf67 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  307 :    x=41  ;  y=38   ;  width=8   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80053ee:	4b3a      	ldr	r3, [pc, #232]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 80053f0:	2229      	movs	r2, #41	; 0x29
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	4b39      	ldr	r3, [pc, #228]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 80053f6:	2226      	movs	r2, #38	; 0x26
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 80053fc:	2208      	movs	r2, #8
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005402:	2211      	movs	r2, #17
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	4b37      	ldr	r3, [pc, #220]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 8005414:	2209      	movs	r2, #9
 8005416:	601a      	str	r2, [r3, #0]
	 break;
 8005418:	f000 bf50 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  308 :    x=250 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=10   ;
 800541c:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 800541e:	22fa      	movs	r2, #250	; 0xfa
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4b2e      	ldr	r3, [pc, #184]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	4b2d      	ldr	r3, [pc, #180]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 800542a:	220b      	movs	r2, #11
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	4b2d      	ldr	r3, [pc, #180]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005430:	2212      	movs	r2, #18
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 800543c:	f06f 0201 	mvn.w	r2, #1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 8005444:	220a      	movs	r2, #10
 8005446:	601a      	str	r2, [r3, #0]
	 break;
 8005448:	f000 bf38 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  309 :    x=49  ;  y=38   ;  width=8   ;  height=17   ;  xoffset=-2   ;  yoffset=1    ;  xadvance=4    ;
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 800544e:	2231      	movs	r2, #49	; 0x31
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	4b22      	ldr	r3, [pc, #136]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 8005454:	2226      	movs	r2, #38	; 0x26
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 800545a:	2208      	movs	r2, #8
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005460:	2211      	movs	r2, #17
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 8005466:	f06f 0201 	mvn.w	r2, #1
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 8005474:	2204      	movs	r2, #4
 8005476:	601a      	str	r2, [r3, #0]
	 break;
 8005478:	f000 bf20 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  310 :    x=41  ;  y=0    ;  width=13  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 800547c:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 800547e:	2229      	movs	r2, #41	; 0x29
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 800548a:	220d      	movs	r2, #13
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 8005490:	2213      	movs	r2, #19
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 80054a2:	220c      	movs	r2, #12
 80054a4:	601a      	str	r2, [r3, #0]
	 break;
 80054a6:	f000 bf09 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  311 :    x=54  ;  y=0    ;  width=10  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <Odczytaj_znak_S16_uc8+0x3620>)
 80054ac:	2236      	movs	r2, #54	; 0x36
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <Odczytaj_znak_S16_uc8+0x3624>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <Odczytaj_znak_S16_uc8+0x3628>)
 80054b8:	220a      	movs	r2, #10
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <Odczytaj_znak_S16_uc8+0x362c>)
 80054be:	2213      	movs	r2, #19
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <Odczytaj_znak_S16_uc8+0x3630>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <Odczytaj_znak_S16_uc8+0x3634>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <Odczytaj_znak_S16_uc8+0x3638>)
 80054d0:	2209      	movs	r2, #9
 80054d2:	601a      	str	r2, [r3, #0]
	 break;
 80054d4:	f000 bef2 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 80054d8:	2400f638 	.word	0x2400f638
 80054dc:	24014460 	.word	0x24014460
 80054e0:	24014694 	.word	0x24014694
 80054e4:	24014464 	.word	0x24014464
 80054e8:	2400f634 	.word	0x2400f634
 80054ec:	2400f63c 	.word	0x2400f63c
 80054f0:	24014690 	.word	0x24014690
	case  312 :    x=140 ;  y=201  ;  width=10  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 80054f4:	4b97      	ldr	r3, [pc, #604]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 80054f6:	228c      	movs	r2, #140	; 0x8c
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	4b97      	ldr	r3, [pc, #604]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 80054fc:	22c9      	movs	r2, #201	; 0xc9
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	4b96      	ldr	r3, [pc, #600]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005502:	220a      	movs	r2, #10
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	4b96      	ldr	r3, [pc, #600]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005508:	220b      	movs	r2, #11
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b95      	ldr	r3, [pc, #596]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	4b95      	ldr	r3, [pc, #596]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005514:	2205      	movs	r2, #5
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	4b94      	ldr	r3, [pc, #592]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 800551a:	2209      	movs	r2, #9
 800551c:	601a      	str	r2, [r3, #0]
	 break;
 800551e:	f000 becd 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  313 :    x=57  ;  y=38   ;  width=10  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=10   ;
 8005522:	4b8c      	ldr	r3, [pc, #560]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 8005524:	2239      	movs	r2, #57	; 0x39
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4b8b      	ldr	r3, [pc, #556]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 800552a:	2226      	movs	r2, #38	; 0x26
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	4b8b      	ldr	r3, [pc, #556]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005530:	220a      	movs	r2, #10
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b8a      	ldr	r3, [pc, #552]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005536:	2211      	movs	r2, #17
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	4b8a      	ldr	r3, [pc, #552]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	4b89      	ldr	r3, [pc, #548]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	4b88      	ldr	r3, [pc, #544]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 800554a:	220a      	movs	r2, #10
 800554c:	601a      	str	r2, [r3, #0]
	 break;
 800554e:	f000 beb5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  314 :    x=67  ;  y=38   ;  width=5   ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=4    ;
 8005552:	4b80      	ldr	r3, [pc, #512]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 8005554:	2243      	movs	r2, #67	; 0x43
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	4b7f      	ldr	r3, [pc, #508]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 800555a:	2226      	movs	r2, #38	; 0x26
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	4b7f      	ldr	r3, [pc, #508]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005560:	2205      	movs	r2, #5
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	4b7e      	ldr	r3, [pc, #504]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005566:	2211      	movs	r2, #17
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	4b7d      	ldr	r3, [pc, #500]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	4b7c      	ldr	r3, [pc, #496]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 800557a:	2204      	movs	r2, #4
 800557c:	601a      	str	r2, [r3, #0]
	 break;
 800557e:	f000 be9d 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  315 :    x=64  ;  y=0    ;  width=10  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005582:	4b74      	ldr	r3, [pc, #464]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 8005584:	2240      	movs	r2, #64	; 0x40
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	4b73      	ldr	r3, [pc, #460]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005590:	220a      	movs	r2, #10
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	4b72      	ldr	r3, [pc, #456]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005596:	2213      	movs	r2, #19
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4b72      	ldr	r3, [pc, #456]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	4b71      	ldr	r3, [pc, #452]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	4b71      	ldr	r3, [pc, #452]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 80055a8:	220a      	movs	r2, #10
 80055aa:	601a      	str	r2, [r3, #0]
	 break;
 80055ac:	f000 be86 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  316 :    x=74  ;  y=0    ;  width=4   ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 80055b0:	4b68      	ldr	r3, [pc, #416]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 80055b2:	224a      	movs	r2, #74	; 0x4a
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	4b68      	ldr	r3, [pc, #416]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	4b67      	ldr	r3, [pc, #412]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 80055be:	2204      	movs	r2, #4
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	4b67      	ldr	r3, [pc, #412]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 80055c4:	2213      	movs	r2, #19
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	4b66      	ldr	r3, [pc, #408]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	4b66      	ldr	r3, [pc, #408]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	4b65      	ldr	r3, [pc, #404]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 80055d6:	2204      	movs	r2, #4
 80055d8:	601a      	str	r2, [r3, #0]
	 break;
 80055da:	f000 be6f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  317 :    x=33  ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80055de:	4b5d      	ldr	r3, [pc, #372]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 80055e0:	2221      	movs	r2, #33	; 0x21
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	4b5c      	ldr	r3, [pc, #368]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 80055e6:	2275      	movs	r2, #117	; 0x75
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	4b5c      	ldr	r3, [pc, #368]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 80055ec:	220a      	movs	r2, #10
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	4b5b      	ldr	r3, [pc, #364]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 80055f2:	220e      	movs	r2, #14
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	4b5b      	ldr	r3, [pc, #364]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	4b5a      	ldr	r3, [pc, #360]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	4b5a      	ldr	r3, [pc, #360]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 8005604:	220a      	movs	r2, #10
 8005606:	601a      	str	r2, [r3, #0]
	 break;
 8005608:	f000 be58 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  318 :    x=43  ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 800560c:	4b51      	ldr	r3, [pc, #324]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 800560e:	222b      	movs	r2, #43	; 0x2b
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005614:	2275      	movs	r2, #117	; 0x75
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	4b50      	ldr	r3, [pc, #320]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 800561a:	2207      	movs	r2, #7
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	4b50      	ldr	r3, [pc, #320]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005620:	220e      	movs	r2, #14
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	4b4e      	ldr	r3, [pc, #312]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 8005632:	2207      	movs	r2, #7
 8005634:	601a      	str	r2, [r3, #0]
	 break;
 8005636:	f000 be41 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  319 :    x=50  ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 800563a:	4b46      	ldr	r3, [pc, #280]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 800563c:	2232      	movs	r2, #50	; 0x32
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	4b45      	ldr	r3, [pc, #276]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005642:	2275      	movs	r2, #117	; 0x75
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	4b45      	ldr	r3, [pc, #276]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005648:	220a      	movs	r2, #10
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	4b44      	ldr	r3, [pc, #272]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 800564e:	220e      	movs	r2, #14
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	4b44      	ldr	r3, [pc, #272]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	4b43      	ldr	r3, [pc, #268]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	4b43      	ldr	r3, [pc, #268]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 8005660:	220a      	movs	r2, #10
 8005662:	601a      	str	r2, [r3, #0]
	 break;
 8005664:	f000 be2a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  320 :    x=60  ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005668:	4b3a      	ldr	r3, [pc, #232]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 800566a:	223c      	movs	r2, #60	; 0x3c
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	4b3a      	ldr	r3, [pc, #232]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 8005670:	2275      	movs	r2, #117	; 0x75
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	4b39      	ldr	r3, [pc, #228]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005676:	2207      	movs	r2, #7
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	4b39      	ldr	r3, [pc, #228]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 800567c:	220e      	movs	r2, #14
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	4b38      	ldr	r3, [pc, #224]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	4b38      	ldr	r3, [pc, #224]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	4b37      	ldr	r3, [pc, #220]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 800568e:	2207      	movs	r2, #7
 8005690:	601a      	str	r2, [r3, #0]
	 break;
 8005692:	f000 be13 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  321 :    x=67  ;  y=117  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005696:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 8005698:	2243      	movs	r2, #67	; 0x43
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	4b2e      	ldr	r3, [pc, #184]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 800569e:	2275      	movs	r2, #117	; 0x75
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	4b2e      	ldr	r3, [pc, #184]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 80056a4:	220b      	movs	r2, #11
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 80056aa:	220e      	movs	r2, #14
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	4b2c      	ldr	r3, [pc, #176]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	4b2c      	ldr	r3, [pc, #176]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 80056bc:	220b      	movs	r2, #11
 80056be:	601a      	str	r2, [r3, #0]
	 break;
 80056c0:	f000 bdfc 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  322 :    x=505 ;  y=103  ;  width=6   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 80056c4:	4b23      	ldr	r3, [pc, #140]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 80056c6:	f240 12f9 	movw	r2, #505	; 0x1f9
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	4b22      	ldr	r3, [pc, #136]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 80056ce:	2267      	movs	r2, #103	; 0x67
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	4b22      	ldr	r3, [pc, #136]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 80056d4:	2206      	movs	r2, #6
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	4b21      	ldr	r3, [pc, #132]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 80056da:	220e      	movs	r2, #14
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	4b21      	ldr	r3, [pc, #132]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 80056ec:	2206      	movs	r2, #6
 80056ee:	601a      	str	r2, [r3, #0]
	 break;
 80056f0:	f000 bde4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  323 :    x=72  ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 80056f6:	2248      	movs	r2, #72	; 0x48
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 80056fc:	2226      	movs	r2, #38	; 0x26
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005702:	220b      	movs	r2, #11
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	4b16      	ldr	r3, [pc, #88]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005708:	2211      	movs	r2, #17
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	4b15      	ldr	r3, [pc, #84]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 800571c:	220c      	movs	r2, #12
 800571e:	601a      	str	r2, [r3, #0]
	 break;
 8005720:	f000 bdcc 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  324 :    x=78  ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <Odczytaj_znak_S16_uc8+0x389c>)
 8005726:	224e      	movs	r2, #78	; 0x4e
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <Odczytaj_znak_S16_uc8+0x38a0>)
 800572c:	2275      	movs	r2, #117	; 0x75
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <Odczytaj_znak_S16_uc8+0x38a4>)
 8005732:	2209      	movs	r2, #9
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <Odczytaj_znak_S16_uc8+0x38a8>)
 8005738:	220e      	movs	r2, #14
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <Odczytaj_znak_S16_uc8+0x38ac>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <Odczytaj_znak_S16_uc8+0x38b0>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <Odczytaj_znak_S16_uc8+0x38b4>)
 800574a:	2209      	movs	r2, #9
 800574c:	601a      	str	r2, [r3, #0]
	 break;
 800574e:	f000 bdb5 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8005752:	bf00      	nop
 8005754:	2400f638 	.word	0x2400f638
 8005758:	24014460 	.word	0x24014460
 800575c:	24014694 	.word	0x24014694
 8005760:	24014464 	.word	0x24014464
 8005764:	2400f634 	.word	0x2400f634
 8005768:	2400f63c 	.word	0x2400f63c
 800576c:	24014690 	.word	0x24014690
	case  325 :    x=78  ;  y=0    ;  width=11  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=12   ;
 8005770:	4b98      	ldr	r3, [pc, #608]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005772:	224e      	movs	r2, #78	; 0x4e
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	4b98      	ldr	r3, [pc, #608]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	4b97      	ldr	r3, [pc, #604]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 800577e:	220b      	movs	r2, #11
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	4b97      	ldr	r3, [pc, #604]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 8005784:	2213      	movs	r2, #19
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	4b96      	ldr	r3, [pc, #600]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	4b96      	ldr	r3, [pc, #600]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	4b95      	ldr	r3, [pc, #596]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 8005796:	220c      	movs	r2, #12
 8005798:	601a      	str	r2, [r3, #0]
	 break;
 800579a:	f000 bd8f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  326 :    x=231 ;  y=72   ;  width=10  ;  height=16   ;  xoffset=0    ;  yoffset=5    ;  xadvance=10   ;
 800579e:	4b8d      	ldr	r3, [pc, #564]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80057a0:	22e7      	movs	r2, #231	; 0xe7
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	4b8c      	ldr	r3, [pc, #560]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 80057a6:	2248      	movs	r2, #72	; 0x48
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 80057ac:	220a      	movs	r2, #10
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	4b8b      	ldr	r3, [pc, #556]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 80057b2:	2210      	movs	r2, #16
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	4b8b      	ldr	r3, [pc, #556]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	4b8a      	ldr	r3, [pc, #552]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 80057be:	2205      	movs	r2, #5
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 80057c4:	220a      	movs	r2, #10
 80057c6:	601a      	str	r2, [r3, #0]
	 break;
 80057c8:	f000 bd78 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  327 :    x=83  ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=12   ;
 80057cc:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80057ce:	2253      	movs	r2, #83	; 0x53
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	4b81      	ldr	r3, [pc, #516]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 80057d4:	2226      	movs	r2, #38	; 0x26
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	4b80      	ldr	r3, [pc, #512]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 80057da:	220b      	movs	r2, #11
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	4b80      	ldr	r3, [pc, #512]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 80057e0:	2211      	movs	r2, #17
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	4b7f      	ldr	r3, [pc, #508]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	4b7f      	ldr	r3, [pc, #508]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	4b7e      	ldr	r3, [pc, #504]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 80057f4:	220c      	movs	r2, #12
 80057f6:	601a      	str	r2, [r3, #0]
	 break;
 80057f8:	f000 bd60 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  328 :    x=87  ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80057fc:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80057fe:	2257      	movs	r2, #87	; 0x57
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	4b75      	ldr	r3, [pc, #468]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005804:	2275      	movs	r2, #117	; 0x75
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	4b74      	ldr	r3, [pc, #464]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 800580a:	2209      	movs	r2, #9
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	4b74      	ldr	r3, [pc, #464]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 8005810:	220e      	movs	r2, #14
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	4b73      	ldr	r3, [pc, #460]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	4b73      	ldr	r3, [pc, #460]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	4b72      	ldr	r3, [pc, #456]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 8005822:	2209      	movs	r2, #9
 8005824:	601a      	str	r2, [r3, #0]
	 break;
 8005826:	f000 bd49 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  329 :    x=96  ;  y=117  ;  width=12  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=11   ;
 800582a:	4b6a      	ldr	r3, [pc, #424]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 800582c:	2260      	movs	r2, #96	; 0x60
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	4b69      	ldr	r3, [pc, #420]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005832:	2275      	movs	r2, #117	; 0x75
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	4b69      	ldr	r3, [pc, #420]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 8005838:	220c      	movs	r2, #12
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	4b68      	ldr	r3, [pc, #416]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 800583e:	220e      	movs	r2, #14
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	4b68      	ldr	r3, [pc, #416]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	4b66      	ldr	r3, [pc, #408]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 8005852:	220b      	movs	r2, #11
 8005854:	601a      	str	r2, [r3, #0]
	 break;
 8005856:	f000 bd31 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  330 :    x=108 ;  y=117  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 800585a:	4b5e      	ldr	r3, [pc, #376]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 800585c:	226c      	movs	r2, #108	; 0x6c
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	4b5d      	ldr	r3, [pc, #372]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005862:	2275      	movs	r2, #117	; 0x75
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	4b5d      	ldr	r3, [pc, #372]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 8005868:	220b      	movs	r2, #11
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	4b5c      	ldr	r3, [pc, #368]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 800586e:	220e      	movs	r2, #14
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	4b5c      	ldr	r3, [pc, #368]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	4b5b      	ldr	r3, [pc, #364]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 8005880:	220b      	movs	r2, #11
 8005882:	601a      	str	r2, [r3, #0]
	 break;
 8005884:	f000 bd1a 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  331 :    x=119 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8005888:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 800588a:	2277      	movs	r2, #119	; 0x77
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	4b52      	ldr	r3, [pc, #328]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 8005890:	2275      	movs	r2, #117	; 0x75
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	4b51      	ldr	r3, [pc, #324]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 8005896:	2209      	movs	r2, #9
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	4b51      	ldr	r3, [pc, #324]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 800589c:	220e      	movs	r2, #14
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	4b50      	ldr	r3, [pc, #320]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 80058a8:	2205      	movs	r2, #5
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	4b4f      	ldr	r3, [pc, #316]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 80058ae:	2209      	movs	r2, #9
 80058b0:	601a      	str	r2, [r3, #0]
	 break;
 80058b2:	f000 bd03 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  332 :    x=94  ;  y=38   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 80058b6:	4b47      	ldr	r3, [pc, #284]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80058b8:	225e      	movs	r2, #94	; 0x5e
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	4b46      	ldr	r3, [pc, #280]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 80058be:	2226      	movs	r2, #38	; 0x26
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	4b46      	ldr	r3, [pc, #280]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 80058c4:	220d      	movs	r2, #13
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	4b45      	ldr	r3, [pc, #276]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 80058ca:	2211      	movs	r2, #17
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 80058d6:	f04f 32ff 	mov.w	r2, #4294967295
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 80058de:	220d      	movs	r2, #13
 80058e0:	601a      	str	r2, [r3, #0]
	 break;
 80058e2:	f000 bceb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  333 :    x=128 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80058e6:	4b3b      	ldr	r3, [pc, #236]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80058e8:	2280      	movs	r2, #128	; 0x80
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 80058ee:	2275      	movs	r2, #117	; 0x75
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	4b3a      	ldr	r3, [pc, #232]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 80058f4:	220a      	movs	r2, #10
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 80058fa:	220e      	movs	r2, #14
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	4b38      	ldr	r3, [pc, #224]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 800590c:	220a      	movs	r2, #10
 800590e:	601a      	str	r2, [r3, #0]
	 break;
 8005910:	f000 bcd4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  334 :    x=261 ;  y=0    ;  width=13  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=13   ;
 8005914:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005916:	f240 1205 	movw	r2, #261	; 0x105
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 8005924:	220d      	movs	r2, #13
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 800592a:	2212      	movs	r2, #18
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005936:	f06f 0201 	mvn.w	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 800593e:	220d      	movs	r2, #13
 8005940:	601a      	str	r2, [r3, #0]
	 break;
 8005942:	f000 bcbb 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  335 :    x=138 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 8005946:	4b23      	ldr	r3, [pc, #140]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005948:	228a      	movs	r2, #138	; 0x8a
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 800594e:	2275      	movs	r2, #117	; 0x75
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	4b22      	ldr	r3, [pc, #136]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 8005954:	220a      	movs	r2, #10
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 800595a:	220e      	movs	r2, #14
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 800596c:	220a      	movs	r2, #10
 800596e:	601a      	str	r2, [r3, #0]
	 break;
 8005970:	f000 bca4 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  336 :    x=107 ;  y=38   ;  width=13  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=13   ;
 8005974:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 8005976:	226b      	movs	r2, #107	; 0x6b
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 800597c:	2226      	movs	r2, #38	; 0x26
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	4b16      	ldr	r3, [pc, #88]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 8005982:	220d      	movs	r2, #13
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 8005988:	2211      	movs	r2, #17
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	4b14      	ldr	r3, [pc, #80]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 800599c:	220d      	movs	r2, #13
 800599e:	601a      	str	r2, [r3, #0]
	 break;
 80059a0:	f000 bc8c 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  337 :    x=148 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=10   ;
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <Odczytaj_znak_S16_uc8+0x3b1c>)
 80059a6:	2294      	movs	r2, #148	; 0x94
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <Odczytaj_znak_S16_uc8+0x3b20>)
 80059ac:	2275      	movs	r2, #117	; 0x75
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <Odczytaj_znak_S16_uc8+0x3b24>)
 80059b2:	220a      	movs	r2, #10
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <Odczytaj_znak_S16_uc8+0x3b28>)
 80059b8:	220e      	movs	r2, #14
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <Odczytaj_znak_S16_uc8+0x3b2c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <Odczytaj_znak_S16_uc8+0x3b30>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	4b08      	ldr	r3, [pc, #32]	; (80059ec <Odczytaj_znak_S16_uc8+0x3b34>)
 80059ca:	220a      	movs	r2, #10
 80059cc:	601a      	str	r2, [r3, #0]
	 break;
 80059ce:	f000 bc75 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 80059d2:	bf00      	nop
 80059d4:	2400f638 	.word	0x2400f638
 80059d8:	24014460 	.word	0x24014460
 80059dc:	24014694 	.word	0x24014694
 80059e0:	24014464 	.word	0x24014464
 80059e4:	2400f634 	.word	0x2400f634
 80059e8:	2400f63c 	.word	0x2400f63c
 80059ec:	24014690 	.word	0x24014690
	case  338 :    x=158 ;  y=117  ;  width=17  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=16   ;
 80059f0:	4b93      	ldr	r3, [pc, #588]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 80059f2:	229e      	movs	r2, #158	; 0x9e
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	4b93      	ldr	r3, [pc, #588]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 80059f8:	2275      	movs	r2, #117	; 0x75
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	4b92      	ldr	r3, [pc, #584]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 80059fe:	2211      	movs	r2, #17
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	4b92      	ldr	r3, [pc, #584]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005a04:	220e      	movs	r2, #14
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	4b91      	ldr	r3, [pc, #580]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	4b91      	ldr	r3, [pc, #580]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	4b90      	ldr	r3, [pc, #576]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005a16:	2210      	movs	r2, #16
 8005a18:	601a      	str	r2, [r3, #0]
	 break;
 8005a1a:	f000 bc4f 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  339 :    x=150 ;  y=201  ;  width=16  ;  height=11   ;  xoffset=0    ;  yoffset=5    ;  xadvance=16   ;
 8005a1e:	4b88      	ldr	r3, [pc, #544]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005a20:	2296      	movs	r2, #150	; 0x96
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	4b87      	ldr	r3, [pc, #540]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005a26:	22c9      	movs	r2, #201	; 0xc9
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	4b87      	ldr	r3, [pc, #540]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	4b86      	ldr	r3, [pc, #536]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005a32:	220b      	movs	r2, #11
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4b86      	ldr	r3, [pc, #536]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	4b85      	ldr	r3, [pc, #532]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005a3e:	2205      	movs	r2, #5
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	4b85      	ldr	r3, [pc, #532]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005a44:	2210      	movs	r2, #16
 8005a46:	601a      	str	r2, [r3, #0]
	 break;
 8005a48:	f000 bc38 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  340 :    x=120 ;  y=38   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005a4c:	4b7c      	ldr	r3, [pc, #496]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005a4e:	2278      	movs	r2, #120	; 0x78
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	4b7c      	ldr	r3, [pc, #496]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005a54:	2226      	movs	r2, #38	; 0x26
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	4b7b      	ldr	r3, [pc, #492]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005a5a:	220c      	movs	r2, #12
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	4b7b      	ldr	r3, [pc, #492]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005a60:	2211      	movs	r2, #17
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	4b7a      	ldr	r3, [pc, #488]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	4b79      	ldr	r3, [pc, #484]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005a74:	220b      	movs	r2, #11
 8005a76:	601a      	str	r2, [r3, #0]
	 break;
 8005a78:	f000 bc20 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  341 :    x=175 ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8005a7c:	4b70      	ldr	r3, [pc, #448]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005a7e:	22af      	movs	r2, #175	; 0xaf
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	4b70      	ldr	r3, [pc, #448]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005a84:	2275      	movs	r2, #117	; 0x75
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005a8a:	2207      	movs	r2, #7
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	4b6f      	ldr	r3, [pc, #444]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005a90:	220e      	movs	r2, #14
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	4b6e      	ldr	r3, [pc, #440]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	4b6e      	ldr	r3, [pc, #440]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005aa2:	2206      	movs	r2, #6
 8005aa4:	601a      	str	r2, [r3, #0]
	 break;
 8005aa6:	f000 bc09 	b.w	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  342 :    x=89  ;  y=0    ;  width=12  ;  height=19   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005aaa:	4b65      	ldr	r3, [pc, #404]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005aac:	2259      	movs	r2, #89	; 0x59
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	4b64      	ldr	r3, [pc, #400]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005ab8:	220c      	movs	r2, #12
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	4b63      	ldr	r3, [pc, #396]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005abe:	2213      	movs	r2, #19
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	4b63      	ldr	r3, [pc, #396]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	4b62      	ldr	r3, [pc, #392]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	4b62      	ldr	r3, [pc, #392]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005ad0:	220b      	movs	r2, #11
 8005ad2:	601a      	str	r2, [r3, #0]
	 break;
 8005ad4:	e3f2      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  343 :    x=503 ;  y=55   ;  width=7   ;  height=16   ;  xoffset=0    ;  yoffset=5    ;  xadvance=6    ;
 8005ad6:	4b5a      	ldr	r3, [pc, #360]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005ad8:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	4b59      	ldr	r3, [pc, #356]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005ae0:	2237      	movs	r2, #55	; 0x37
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	4b58      	ldr	r3, [pc, #352]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	4b58      	ldr	r3, [pc, #352]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005aec:	2210      	movs	r2, #16
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	4b57      	ldr	r3, [pc, #348]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	4b57      	ldr	r3, [pc, #348]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005af8:	2205      	movs	r2, #5
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005afe:	2206      	movs	r2, #6
 8005b00:	601a      	str	r2, [r3, #0]
	 break;
 8005b02:	e3db      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  344 :    x=132 ;  y=38   ;  width=12  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005b04:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b06:	2284      	movs	r2, #132	; 0x84
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	4b4e      	ldr	r3, [pc, #312]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b0c:	2226      	movs	r2, #38	; 0x26
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	4b4d      	ldr	r3, [pc, #308]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b12:	220c      	movs	r2, #12
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	4b4d      	ldr	r3, [pc, #308]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005b18:	2211      	movs	r2, #17
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	4b4c      	ldr	r3, [pc, #304]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	4b4b      	ldr	r3, [pc, #300]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005b2c:	220b      	movs	r2, #11
 8005b2e:	601a      	str	r2, [r3, #0]
	 break;
 8005b30:	e3c4      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  345 :    x=182 ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=6    ;
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b34:	22b6      	movs	r2, #182	; 0xb6
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	4b42      	ldr	r3, [pc, #264]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b3a:	2275      	movs	r2, #117	; 0x75
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b40:	2207      	movs	r2, #7
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005b46:	220e      	movs	r2, #14
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	4b40      	ldr	r3, [pc, #256]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	4b40      	ldr	r3, [pc, #256]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005b58:	2206      	movs	r2, #6
 8005b5a:	601a      	str	r2, [r3, #0]
	 break;
 8005b5c:	e3ae      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  346 :    x=144 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005b5e:	4b38      	ldr	r3, [pc, #224]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b60:	2290      	movs	r2, #144	; 0x90
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	4b37      	ldr	r3, [pc, #220]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b66:	2226      	movs	r2, #38	; 0x26
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b6c:	220b      	movs	r2, #11
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005b72:	2211      	movs	r2, #17
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	4b34      	ldr	r3, [pc, #208]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005b86:	220b      	movs	r2, #11
 8005b88:	601a      	str	r2, [r3, #0]
	 break;
 8005b8a:	e397      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  347 :    x=189 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005b8e:	22bd      	movs	r2, #189	; 0xbd
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	4b2c      	ldr	r3, [pc, #176]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005b94:	2275      	movs	r2, #117	; 0x75
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005ba0:	220e      	movs	r2, #14
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	4b29      	ldr	r3, [pc, #164]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005bb2:	2209      	movs	r2, #9
 8005bb4:	601a      	str	r2, [r3, #0]
	 break;
 8005bb6:	e381      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  348 :    x=274 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005bb8:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005bba:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005bc8:	220b      	movs	r2, #11
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005bce:	2212      	movs	r2, #18
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005bda:	f06f 0201 	mvn.w	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005be2:	220b      	movs	r2, #11
 8005be4:	601a      	str	r2, [r3, #0]
	 break;
 8005be6:	e369      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  349 :    x=199 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005bea:	22c7      	movs	r2, #199	; 0xc7
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005bf0:	2275      	movs	r2, #117	; 0x75
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005bf6:	220a      	movs	r2, #10
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005bfc:	220e      	movs	r2, #14
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005c0e:	2209      	movs	r2, #9
 8005c10:	601a      	str	r2, [r3, #0]
	 break;
 8005c12:	e353      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  350 :    x=155 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <Odczytaj_znak_S16_uc8+0x3d88>)
 8005c16:	229b      	movs	r2, #155	; 0x9b
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <Odczytaj_znak_S16_uc8+0x3d8c>)
 8005c1c:	2226      	movs	r2, #38	; 0x26
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <Odczytaj_znak_S16_uc8+0x3d90>)
 8005c22:	220b      	movs	r2, #11
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <Odczytaj_znak_S16_uc8+0x3d94>)
 8005c28:	2211      	movs	r2, #17
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <Odczytaj_znak_S16_uc8+0x3d98>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <Odczytaj_znak_S16_uc8+0x3d9c>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <Odczytaj_znak_S16_uc8+0x3da0>)
 8005c3a:	220b      	movs	r2, #11
 8005c3c:	601a      	str	r2, [r3, #0]
	 break;
 8005c3e:	e33d      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8005c40:	2400f638 	.word	0x2400f638
 8005c44:	24014460 	.word	0x24014460
 8005c48:	24014694 	.word	0x24014694
 8005c4c:	24014464 	.word	0x24014464
 8005c50:	2400f634 	.word	0x2400f634
 8005c54:	2400f63c 	.word	0x2400f63c
 8005c58:	24014690 	.word	0x24014690
	case  351 :    x=209 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8005c5c:	4b92      	ldr	r3, [pc, #584]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005c5e:	22d1      	movs	r2, #209	; 0xd1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	4b92      	ldr	r3, [pc, #584]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005c64:	2275      	movs	r2, #117	; 0x75
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	4b91      	ldr	r3, [pc, #580]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005c6a:	220a      	movs	r2, #10
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	4b91      	ldr	r3, [pc, #580]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005c70:	220e      	movs	r2, #14
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	4b90      	ldr	r3, [pc, #576]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	4b90      	ldr	r3, [pc, #576]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	4b8f      	ldr	r3, [pc, #572]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005c82:	2209      	movs	r2, #9
 8005c84:	601a      	str	r2, [r3, #0]
	 break;
 8005c86:	e319      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  352 :    x=166 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005c88:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005c8a:	22a6      	movs	r2, #166	; 0xa6
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	4b87      	ldr	r3, [pc, #540]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005c90:	2226      	movs	r2, #38	; 0x26
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	4b86      	ldr	r3, [pc, #536]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005c96:	220b      	movs	r2, #11
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	4b86      	ldr	r3, [pc, #536]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005c9c:	2211      	movs	r2, #17
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	4b85      	ldr	r3, [pc, #532]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	4b85      	ldr	r3, [pc, #532]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	4b84      	ldr	r3, [pc, #528]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005cb0:	220b      	movs	r2, #11
 8005cb2:	601a      	str	r2, [r3, #0]
	 break;
 8005cb4:	e302      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  353 :    x=219 ;  y=117  ;  width=10  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005cb6:	4b7c      	ldr	r3, [pc, #496]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005cb8:	22db      	movs	r2, #219	; 0xdb
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	4b7b      	ldr	r3, [pc, #492]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005cbe:	2275      	movs	r2, #117	; 0x75
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	4b7b      	ldr	r3, [pc, #492]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005cc4:	220a      	movs	r2, #10
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	4b7a      	ldr	r3, [pc, #488]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005cca:	220e      	movs	r2, #14
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	4b7a      	ldr	r3, [pc, #488]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	4b79      	ldr	r3, [pc, #484]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	4b79      	ldr	r3, [pc, #484]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005cdc:	2209      	movs	r2, #9
 8005cde:	601a      	str	r2, [r3, #0]
	 break;
 8005ce0:	e2ec      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  354 :    x=177 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005ce2:	4b71      	ldr	r3, [pc, #452]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005ce4:	22b1      	movs	r2, #177	; 0xb1
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	4b70      	ldr	r3, [pc, #448]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005cea:	2226      	movs	r2, #38	; 0x26
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	4b70      	ldr	r3, [pc, #448]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005cf0:	220b      	movs	r2, #11
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	4b6f      	ldr	r3, [pc, #444]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005cf6:	2211      	movs	r2, #17
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	4b6f      	ldr	r3, [pc, #444]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	4b6e      	ldr	r3, [pc, #440]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	4b6e      	ldr	r3, [pc, #440]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005d08:	220b      	movs	r2, #11
 8005d0a:	601a      	str	r2, [r3, #0]
	 break;
 8005d0c:	e2d6      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  355 :    x=188 ;  y=38   ;  width=7   ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005d0e:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005d10:	22bc      	movs	r2, #188	; 0xbc
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	4b65      	ldr	r3, [pc, #404]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005d16:	2226      	movs	r2, #38	; 0x26
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	4b65      	ldr	r3, [pc, #404]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	4b64      	ldr	r3, [pc, #400]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005d22:	2211      	movs	r2, #17
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	4b64      	ldr	r3, [pc, #400]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	4b63      	ldr	r3, [pc, #396]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	4b63      	ldr	r3, [pc, #396]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005d34:	2207      	movs	r2, #7
 8005d36:	601a      	str	r2, [r3, #0]
	 break;
 8005d38:	e2c0      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  356 :    x=195 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005d3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005d3c:	22c3      	movs	r2, #195	; 0xc3
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	4b5a      	ldr	r3, [pc, #360]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005d42:	2226      	movs	r2, #38	; 0x26
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	4b5a      	ldr	r3, [pc, #360]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005d48:	220b      	movs	r2, #11
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	4b59      	ldr	r3, [pc, #356]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005d4e:	2211      	movs	r2, #17
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	4b59      	ldr	r3, [pc, #356]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	4b58      	ldr	r3, [pc, #352]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	4b57      	ldr	r3, [pc, #348]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005d62:	220b      	movs	r2, #11
 8005d64:	601a      	str	r2, [r3, #0]
	 break;
 8005d66:	e2a9      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  357 :    x=229 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=8    ;
 8005d68:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005d6a:	22e5      	movs	r2, #229	; 0xe5
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005d70:	2275      	movs	r2, #117	; 0x75
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	4b4e      	ldr	r3, [pc, #312]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005d76:	2209      	movs	r2, #9
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005d7c:	220e      	movs	r2, #14
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	4b4d      	ldr	r3, [pc, #308]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	4b4d      	ldr	r3, [pc, #308]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005d8e:	2208      	movs	r2, #8
 8005d90:	601a      	str	r2, [r3, #0]
	 break;
 8005d92:	e293      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  358 :    x=238 ;  y=117  ;  width=11  ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005d94:	4b44      	ldr	r3, [pc, #272]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005d96:	22ee      	movs	r2, #238	; 0xee
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	4b44      	ldr	r3, [pc, #272]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005d9c:	2275      	movs	r2, #117	; 0x75
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	4b43      	ldr	r3, [pc, #268]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005da2:	220b      	movs	r2, #11
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	4b43      	ldr	r3, [pc, #268]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005da8:	220e      	movs	r2, #14
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	4b42      	ldr	r3, [pc, #264]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005dba:	220b      	movs	r2, #11
 8005dbc:	601a      	str	r2, [r3, #0]
	 break;
 8005dbe:	e27d      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  359 :    x=249 ;  y=117  ;  width=7   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=7    ;
 8005dc0:	4b39      	ldr	r3, [pc, #228]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005dc2:	22f9      	movs	r2, #249	; 0xf9
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	4b39      	ldr	r3, [pc, #228]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005dc8:	2275      	movs	r2, #117	; 0x75
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	4b38      	ldr	r3, [pc, #224]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005dce:	2207      	movs	r2, #7
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	4b38      	ldr	r3, [pc, #224]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005dd4:	220e      	movs	r2, #14
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005de6:	2207      	movs	r2, #7
 8005de8:	601a      	str	r2, [r3, #0]
	 break;
 8005dea:	e267      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  360 :    x=285 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005dec:	4b2e      	ldr	r3, [pc, #184]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005dee:	f240 121d 	movw	r2, #285	; 0x11d
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005dfc:	220b      	movs	r2, #11
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	4b2c      	ldr	r3, [pc, #176]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e02:	2212      	movs	r2, #18
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	4b2c      	ldr	r3, [pc, #176]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005e0e:	f06f 0201 	mvn.w	r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005e16:	220b      	movs	r2, #11
 8005e18:	601a      	str	r2, [r3, #0]
	 break;
 8005e1a:	e24f      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  361 :    x=256 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005e1c:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	4b21      	ldr	r3, [pc, #132]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e26:	2275      	movs	r2, #117	; 0x75
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e2c:	2209      	movs	r2, #9
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e32:	220e      	movs	r2, #14
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005e44:	2209      	movs	r2, #9
 8005e46:	601a      	str	r2, [r3, #0]
	 break;
 8005e48:	e238      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  362 :    x=206 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e4c:	22ce      	movs	r2, #206	; 0xce
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	4b16      	ldr	r3, [pc, #88]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e52:	2226      	movs	r2, #38	; 0x26
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e58:	220b      	movs	r2, #11
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e5e:	2211      	movs	r2, #17
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005e72:	220b      	movs	r2, #11
 8005e74:	601a      	str	r2, [r3, #0]
	 break;
 8005e76:	e221      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  363 :    x=265 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <Odczytaj_znak_S16_uc8+0x3ff0>)
 8005e7a:	f240 1209 	movw	r2, #265	; 0x109
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <Odczytaj_znak_S16_uc8+0x3ff4>)
 8005e82:	2275      	movs	r2, #117	; 0x75
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <Odczytaj_znak_S16_uc8+0x3ff8>)
 8005e88:	2209      	movs	r2, #9
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <Odczytaj_znak_S16_uc8+0x3ffc>)
 8005e8e:	220e      	movs	r2, #14
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <Odczytaj_znak_S16_uc8+0x4000>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <Odczytaj_znak_S16_uc8+0x4004>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <Odczytaj_znak_S16_uc8+0x4008>)
 8005ea0:	2209      	movs	r2, #9
 8005ea2:	601a      	str	r2, [r3, #0]
	 break;
 8005ea4:	e20a      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 8005ea6:	bf00      	nop
 8005ea8:	2400f638 	.word	0x2400f638
 8005eac:	24014460 	.word	0x24014460
 8005eb0:	24014694 	.word	0x24014694
 8005eb4:	24014464 	.word	0x24014464
 8005eb8:	2400f634 	.word	0x2400f634
 8005ebc:	2400f63c 	.word	0x2400f63c
 8005ec0:	24014690 	.word	0x24014690
	case  364 :    x=296 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005ec4:	4b99      	ldr	r3, [pc, #612]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005ec6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	4b98      	ldr	r3, [pc, #608]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	4b98      	ldr	r3, [pc, #608]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005ed4:	220b      	movs	r2, #11
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	4b97      	ldr	r3, [pc, #604]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005eda:	2212      	movs	r2, #18
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	4b97      	ldr	r3, [pc, #604]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	4b96      	ldr	r3, [pc, #600]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005ee6:	f06f 0201 	mvn.w	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	4b95      	ldr	r3, [pc, #596]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8005eee:	220b      	movs	r2, #11
 8005ef0:	601a      	str	r2, [r3, #0]
	 break;
 8005ef2:	e1e3      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  365 :    x=274 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005ef4:	4b8d      	ldr	r3, [pc, #564]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005ef6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	4b8c      	ldr	r3, [pc, #560]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005efe:	2275      	movs	r2, #117	; 0x75
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	4b8c      	ldr	r3, [pc, #560]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005f04:	2209      	movs	r2, #9
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	4b8b      	ldr	r3, [pc, #556]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005f0a:	220e      	movs	r2, #14
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	4b8b      	ldr	r3, [pc, #556]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	4b8a      	ldr	r3, [pc, #552]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	4b8a      	ldr	r3, [pc, #552]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8005f1c:	2209      	movs	r2, #9
 8005f1e:	601a      	str	r2, [r3, #0]
	 break;
 8005f20:	e1cc      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  366 :    x=307 ;  y=0    ;  width=11  ;  height=18   ;  xoffset=0    ;  yoffset=-2   ;  xadvance=11   ;
 8005f22:	4b82      	ldr	r3, [pc, #520]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005f24:	f240 1233 	movw	r2, #307	; 0x133
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	4b81      	ldr	r3, [pc, #516]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	4b80      	ldr	r3, [pc, #512]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005f32:	220b      	movs	r2, #11
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	4b80      	ldr	r3, [pc, #512]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005f38:	2212      	movs	r2, #18
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	4b7f      	ldr	r3, [pc, #508]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	4b7f      	ldr	r3, [pc, #508]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005f44:	f06f 0201 	mvn.w	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	4b7e      	ldr	r3, [pc, #504]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8005f4c:	220b      	movs	r2, #11
 8005f4e:	601a      	str	r2, [r3, #0]
	 break;
 8005f50:	e1b4      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  367 :    x=283 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005f52:	4b76      	ldr	r3, [pc, #472]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005f54:	f240 121b 	movw	r2, #283	; 0x11b
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	4b75      	ldr	r3, [pc, #468]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005f5c:	2275      	movs	r2, #117	; 0x75
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	4b74      	ldr	r3, [pc, #464]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005f62:	2209      	movs	r2, #9
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	4b74      	ldr	r3, [pc, #464]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005f68:	220e      	movs	r2, #14
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	4b73      	ldr	r3, [pc, #460]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	4b73      	ldr	r3, [pc, #460]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	4b72      	ldr	r3, [pc, #456]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8005f7a:	2209      	movs	r2, #9
 8005f7c:	601a      	str	r2, [r3, #0]
	 break;
 8005f7e:	e19d      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  368 :    x=217 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8005f80:	4b6a      	ldr	r3, [pc, #424]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005f82:	22d9      	movs	r2, #217	; 0xd9
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	4b6a      	ldr	r3, [pc, #424]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005f88:	2226      	movs	r2, #38	; 0x26
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	4b69      	ldr	r3, [pc, #420]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005f8e:	220b      	movs	r2, #11
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	4b69      	ldr	r3, [pc, #420]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005f94:	2211      	movs	r2, #17
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	4b68      	ldr	r3, [pc, #416]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	4b68      	ldr	r3, [pc, #416]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	4b67      	ldr	r3, [pc, #412]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8005fa8:	220b      	movs	r2, #11
 8005faa:	601a      	str	r2, [r3, #0]
	 break;
 8005fac:	e186      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  369 :    x=292 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8005fae:	4b5f      	ldr	r3, [pc, #380]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005fb0:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005fb8:	2275      	movs	r2, #117	; 0x75
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	4b5d      	ldr	r3, [pc, #372]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005fbe:	2209      	movs	r2, #9
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005fc4:	220e      	movs	r2, #14
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	4b5c      	ldr	r3, [pc, #368]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	4b5b      	ldr	r3, [pc, #364]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8005fd6:	2209      	movs	r2, #9
 8005fd8:	601a      	str	r2, [r3, #0]
	 break;
 8005fda:	e16f      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  370 :    x=228 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=1    ;  xadvance=11   ;
 8005fdc:	4b53      	ldr	r3, [pc, #332]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8005fde:	22e4      	movs	r2, #228	; 0xe4
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	4b53      	ldr	r3, [pc, #332]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8005fe4:	2226      	movs	r2, #38	; 0x26
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	4b52      	ldr	r3, [pc, #328]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8005fea:	220b      	movs	r2, #11
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	4b52      	ldr	r3, [pc, #328]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 8005ff0:	2211      	movs	r2, #17
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	4b51      	ldr	r3, [pc, #324]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	4b51      	ldr	r3, [pc, #324]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	4b50      	ldr	r3, [pc, #320]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8006002:	220b      	movs	r2, #11
 8006004:	601a      	str	r2, [r3, #0]
	 break;
 8006006:	e159      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  371 :    x=301 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=5    ;  xadvance=9    ;
 8006008:	4b48      	ldr	r3, [pc, #288]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 800600a:	f240 122d 	movw	r2, #301	; 0x12d
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	4b47      	ldr	r3, [pc, #284]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8006012:	2275      	movs	r2, #117	; 0x75
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	4b47      	ldr	r3, [pc, #284]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8006018:	2209      	movs	r2, #9
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	4b46      	ldr	r3, [pc, #280]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 800601e:	220e      	movs	r2, #14
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	4b46      	ldr	r3, [pc, #280]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 800602a:	2205      	movs	r2, #5
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	4b45      	ldr	r3, [pc, #276]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8006030:	2209      	movs	r2, #9
 8006032:	601a      	str	r2, [r3, #0]
	 break;
 8006034:	e142      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  372 :    x=239 ;  y=38   ;  width=17  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=15   ;
 8006036:	4b3d      	ldr	r3, [pc, #244]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8006038:	22ef      	movs	r2, #239	; 0xef
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	4b3c      	ldr	r3, [pc, #240]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 800603e:	2226      	movs	r2, #38	; 0x26
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	4b3c      	ldr	r3, [pc, #240]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8006044:	2211      	movs	r2, #17
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 800604a:	2211      	movs	r2, #17
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	4b3b      	ldr	r3, [pc, #236]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	4b39      	ldr	r3, [pc, #228]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8006060:	220f      	movs	r2, #15
 8006062:	601a      	str	r2, [r3, #0]
	 break;
 8006064:	e12a      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  373 :    x=310 ;  y=117  ;  width=14  ;  height=14   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=12   ;
 8006066:	4b31      	ldr	r3, [pc, #196]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8006068:	f44f 729b 	mov.w	r2, #310	; 0x136
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	4b30      	ldr	r3, [pc, #192]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8006070:	2275      	movs	r2, #117	; 0x75
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8006076:	220e      	movs	r2, #14
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	4b2f      	ldr	r3, [pc, #188]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 800607c:	220e      	movs	r2, #14
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	4b2e      	ldr	r3, [pc, #184]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8006090:	220c      	movs	r2, #12
 8006092:	601a      	str	r2, [r3, #0]
	 break;
 8006094:	e112      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  374 :    x=256 ;  y=38   ;  width=12  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=10   ;
 8006096:	4b25      	ldr	r3, [pc, #148]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 8006098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 80060a0:	2226      	movs	r2, #38	; 0x26
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	4b23      	ldr	r3, [pc, #140]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 80060a6:	220c      	movs	r2, #12
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	4b23      	ldr	r3, [pc, #140]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 80060ac:	2211      	movs	r2, #17
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	4b22      	ldr	r3, [pc, #136]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 80060b2:	f04f 32ff 	mov.w	r2, #4294967295
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	4b21      	ldr	r3, [pc, #132]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 80060c2:	220a      	movs	r2, #10
 80060c4:	601a      	str	r2, [r3, #0]
	 break;
 80060c6:	e0f9      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  375 :    x=268 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=-1   ;  yoffset=1    ;  xadvance=9    ;
 80060c8:	4b18      	ldr	r3, [pc, #96]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 80060ca:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	4b17      	ldr	r3, [pc, #92]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 80060d2:	2226      	movs	r2, #38	; 0x26
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 80060d8:	220b      	movs	r2, #11
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 80060de:	2211      	movs	r2, #17
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 80060e4:	f04f 32ff 	mov.w	r2, #4294967295
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	4b14      	ldr	r3, [pc, #80]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 80060f2:	2209      	movs	r2, #9
 80060f4:	601a      	str	r2, [r3, #0]
	 break;
 80060f6:	e0e1      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  376 :    x=279 ;  y=38   ;  width=13  ;  height=17   ;  xoffset=-1   ;  yoffset=-1   ;  xadvance=11   ;
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <Odczytaj_znak_S16_uc8+0x4274>)
 80060fa:	f240 1217 	movw	r2, #279	; 0x117
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <Odczytaj_znak_S16_uc8+0x4278>)
 8006102:	2226      	movs	r2, #38	; 0x26
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <Odczytaj_znak_S16_uc8+0x427c>)
 8006108:	220d      	movs	r2, #13
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <Odczytaj_znak_S16_uc8+0x4280>)
 800610e:	2211      	movs	r2, #17
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <Odczytaj_znak_S16_uc8+0x4284>)
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <Odczytaj_znak_S16_uc8+0x4288>)
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	4b08      	ldr	r3, [pc, #32]	; (8006144 <Odczytaj_znak_S16_uc8+0x428c>)
 8006124:	220b      	movs	r2, #11
 8006126:	601a      	str	r2, [r3, #0]
	 break;
 8006128:	e0c8      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
 800612a:	bf00      	nop
 800612c:	2400f638 	.word	0x2400f638
 8006130:	24014460 	.word	0x24014460
 8006134:	24014694 	.word	0x24014694
 8006138:	24014464 	.word	0x24014464
 800613c:	2400f634 	.word	0x2400f634
 8006140:	2400f63c 	.word	0x2400f63c
 8006144:	24014690 	.word	0x24014690
	case  377 :    x=292 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8006148:	4b5f      	ldr	r3, [pc, #380]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 800614a:	f44f 7292 	mov.w	r2, #292	; 0x124
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	4b5e      	ldr	r3, [pc, #376]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 8006152:	2226      	movs	r2, #38	; 0x26
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	4b5e      	ldr	r3, [pc, #376]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 8006158:	220b      	movs	r2, #11
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	4b5d      	ldr	r3, [pc, #372]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 800615e:	2211      	movs	r2, #17
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	4b5c      	ldr	r3, [pc, #368]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 800616a:	f04f 32ff 	mov.w	r2, #4294967295
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	4b5b      	ldr	r3, [pc, #364]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 8006172:	220b      	movs	r2, #11
 8006174:	601a      	str	r2, [r3, #0]
	 break;
 8006176:	e0a1      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  378 :    x=324 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8006178:	4b53      	ldr	r3, [pc, #332]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 800617a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	4b52      	ldr	r3, [pc, #328]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 8006182:	2275      	movs	r2, #117	; 0x75
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 8006188:	2209      	movs	r2, #9
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 800618e:	220e      	movs	r2, #14
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	4b51      	ldr	r3, [pc, #324]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	4b50      	ldr	r3, [pc, #320]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 80061a0:	2209      	movs	r2, #9
 80061a2:	601a      	str	r2, [r3, #0]
	 break;
 80061a4:	e08a      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  379 :    x=303 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 80061a6:	4b48      	ldr	r3, [pc, #288]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 80061a8:	f240 122f 	movw	r2, #303	; 0x12f
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	4b47      	ldr	r3, [pc, #284]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 80061b0:	2226      	movs	r2, #38	; 0x26
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	4b46      	ldr	r3, [pc, #280]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 80061b6:	220b      	movs	r2, #11
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	4b46      	ldr	r3, [pc, #280]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 80061bc:	2211      	movs	r2, #17
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	4b45      	ldr	r3, [pc, #276]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	4b45      	ldr	r3, [pc, #276]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 80061d0:	220b      	movs	r2, #11
 80061d2:	601a      	str	r2, [r3, #0]
	 break;
 80061d4:	e072      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  380 :    x=333 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 80061d6:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 80061d8:	f240 124d 	movw	r2, #333	; 0x14d
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 80061e0:	2275      	movs	r2, #117	; 0x75
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	4b3a      	ldr	r3, [pc, #232]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 80061e6:	2209      	movs	r2, #9
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 80061ec:	220e      	movs	r2, #14
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	4b39      	ldr	r3, [pc, #228]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	4b38      	ldr	r3, [pc, #224]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 80061fe:	2209      	movs	r2, #9
 8006200:	601a      	str	r2, [r3, #0]
	 break;
 8006202:	e05b      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  381 :    x=314 ;  y=38   ;  width=11  ;  height=17   ;  xoffset=0    ;  yoffset=-1   ;  xadvance=11   ;
 8006204:	4b30      	ldr	r3, [pc, #192]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 8006206:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 800620e:	2226      	movs	r2, #38	; 0x26
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	4b2f      	ldr	r3, [pc, #188]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 8006214:	220b      	movs	r2, #11
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 800621a:	2211      	movs	r2, #17
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	4b2d      	ldr	r3, [pc, #180]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 800622e:	220b      	movs	r2, #11
 8006230:	601a      	str	r2, [r3, #0]
	 break;
 8006232:	e043      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  382 :    x=342 ;  y=117  ;  width=9   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=9    ;
 8006234:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 8006236:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	4b23      	ldr	r3, [pc, #140]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 800623e:	2275      	movs	r2, #117	; 0x75
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 8006244:	2209      	movs	r2, #9
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 800624a:	220e      	movs	r2, #14
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	4b21      	ldr	r3, [pc, #132]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 800625c:	2209      	movs	r2, #9
 800625e:	601a      	str	r2, [r3, #0]
	 break;
 8006260:	e02c      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
	case  383 :    x=351 ;  y=117  ;  width=6   ;  height=14   ;  xoffset=0    ;  yoffset=1    ;  xadvance=4    ;
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 8006264:	f240 125f 	movw	r2, #351	; 0x15f
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	4b18      	ldr	r3, [pc, #96]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 800626c:	2275      	movs	r2, #117	; 0x75
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 8006272:	2206      	movs	r2, #6
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 8006278:	220e      	movs	r2, #14
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	4b16      	ldr	r3, [pc, #88]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 800628a:	2204      	movs	r2, #4
 800628c:	601a      	str	r2, [r3, #0]
	 break;
 800628e:	e015      	b.n	80062bc <Odczytaj_znak_S16_uc8+0x4404>
    default   :    x=0    ;y=0    ;    width=0    ;    height=0     ;   xoffset=0  ;  yoffset=0    ;  xadvance=0 ;
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <Odczytaj_znak_S16_uc8+0x4410>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <Odczytaj_znak_S16_uc8+0x4414>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <Odczytaj_znak_S16_uc8+0x4418>)
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <Odczytaj_znak_S16_uc8+0x441c>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <Odczytaj_znak_S16_uc8+0x4420>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <Odczytaj_znak_S16_uc8+0x4424>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <Odczytaj_znak_S16_uc8+0x4428>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
		}
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	2400f638 	.word	0x2400f638
 80062cc:	24014460 	.word	0x24014460
 80062d0:	24014694 	.word	0x24014694
 80062d4:	24014464 	.word	0x24014464
 80062d8:	2400f634 	.word	0x2400f634
 80062dc:	2400f63c 	.word	0x2400f63c
 80062e0:	24014690 	.word	0x24014690

080062e4 <Conv_String_From_UART_BMP>:
uint8_t get_color_value(uint8_t Color_mark);
int Ilosc_Lini_tesktu=0;
uint32_t Z_czasOtrzymania_tekstu=0;

int Conv_String_From_UART_BMP(uint8_t *Rec_String, uint16_t CountData)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	807b      	strh	r3, [r7, #2]
	uint8_t Line_nr=0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
	uint8_t Ilosc_zn_pop_rzedu=0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	75bb      	strb	r3, [r7, #22]
	uint8_t Ilosc_znak_do_wstawienia=0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	757b      	strb	r3, [r7, #21]

	uint8_t count_line=0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	753b      	strb	r3, [r7, #20]

	uint8_t color_flag=0;
 8006300:	2300      	movs	r3, #0
 8006302:	74fb      	strb	r3, [r7, #19]

	for(int i=0; i<10000; i++)
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e007      	b.n	800631a <Conv_String_From_UART_BMP+0x36>
	{
		 Created_By_UART_BMP[i]=0;
 800630a:	4a3f      	ldr	r2, [pc, #252]	; (8006408 <Conv_String_From_UART_BMP+0x124>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<10000; i++)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006320:	4293      	cmp	r3, r2
 8006322:	ddf2      	ble.n	800630a <Conv_String_From_UART_BMP+0x26>
	}

	for(int i=0; i< CountData;   i++)
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	e04a      	b.n	80063c0 <Conv_String_From_UART_BMP+0xdc>
	{

		if( Rec_String[i]=='$' )
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b24      	cmp	r3, #36	; 0x24
 8006334:	d138      	bne.n	80063a8 <Conv_String_From_UART_BMP+0xc4>
		{

			count_line++;
 8006336:	7d3b      	ldrb	r3, [r7, #20]
 8006338:	3301      	adds	r3, #1
 800633a:	753b      	strb	r3, [r7, #20]

			color_flag=1;
 800633c:	2301      	movs	r3, #1
 800633e:	74fb      	strb	r3, [r7, #19]

										//rozmiar           	   							//rzad      	//bufor wyjsciowy   //color
			if(Create_String_buffer (Rec_String+Ilosc_zn_pop_rzedu+(Line_nr*3), Ilosc_znak_do_wstawienia , Line_nr , Created_By_UART_BMP, get_color_value(Rec_String[i+1]) )==0);
 8006340:	7db9      	ldrb	r1, [r7, #22]
 8006342:	7dfa      	ldrb	r2, [r7, #23]
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	440b      	add	r3, r1
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	18d4      	adds	r4, r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	3301      	adds	r3, #1
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f856 	bl	800640c <get_color_value>
 8006360:	4603      	mov	r3, r0
 8006362:	7dfa      	ldrb	r2, [r7, #23]
 8006364:	7d79      	ldrb	r1, [r7, #21]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4b27      	ldr	r3, [pc, #156]	; (8006408 <Conv_String_From_UART_BMP+0x124>)
 800636a:	4620      	mov	r0, r4
 800636c:	f7fb fb18 	bl	80019a0 <Create_String_buffer>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <Conv_String_From_UART_BMP+0x98>
			else
			{
				return Line_nr+1; // za dluga linia nr Line_nr
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	3301      	adds	r3, #1
 800637a:	e041      	b.n	8006400 <Conv_String_From_UART_BMP+0x11c>
			}

			if( Rec_String[i+2] != '\0')
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	3302      	adds	r3, #2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <Conv_String_From_UART_BMP+0xac>
			{
				return Line_nr+1; // inny blad
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	3301      	adds	r3, #1
 800638e:	e037      	b.n	8006400 <Conv_String_From_UART_BMP+0x11c>
			}



			Ilosc_zn_pop_rzedu=Ilosc_zn_pop_rzedu+Ilosc_znak_do_wstawienia;
 8006390:	7dba      	ldrb	r2, [r7, #22]
 8006392:	7d7b      	ldrb	r3, [r7, #21]
 8006394:	4413      	add	r3, r2
 8006396:	75bb      	strb	r3, [r7, #22]
			i=i+3;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	3303      	adds	r3, #3
 800639c:	60bb      	str	r3, [r7, #8]

			Line_nr++;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	3301      	adds	r3, #1
 80063a2:	75fb      	strb	r3, [r7, #23]
			Ilosc_znak_do_wstawienia=0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	757b      	strb	r3, [r7, #21]

		}

		if(Ilosc_znak_do_wstawienia>17)
 80063a8:	7d7b      	ldrb	r3, [r7, #21]
 80063aa:	2b11      	cmp	r3, #17
 80063ac:	d902      	bls.n	80063b4 <Conv_String_From_UART_BMP+0xd0>
		{
			return Line_nr+1; // za dluga linia nr Line_nr
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	3301      	adds	r3, #1
 80063b2:	e025      	b.n	8006400 <Conv_String_From_UART_BMP+0x11c>
		}

		Ilosc_znak_do_wstawienia++;
 80063b4:	7d7b      	ldrb	r3, [r7, #21]
 80063b6:	3301      	adds	r3, #1
 80063b8:	757b      	strb	r3, [r7, #21]
	for(int i=0; i< CountData;   i++)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	3301      	adds	r3, #1
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	887b      	ldrh	r3, [r7, #2]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	dbb0      	blt.n	800632a <Conv_String_From_UART_BMP+0x46>


	}

	Set_Flag_String_From_Usart(Line_nr);
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f872 	bl	80064b4 <Set_Flag_String_From_Usart>


	if(color_flag && (count_line==1 || count_line==2) )
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <Conv_String_From_UART_BMP+0x102>
 80063d6:	7d3b      	ldrb	r3, [r7, #20]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d002      	beq.n	80063e2 <Conv_String_From_UART_BMP+0xfe>
 80063dc:	7d3b      	ldrb	r3, [r7, #20]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d101      	bne.n	80063e6 <Conv_String_From_UART_BMP+0x102>
	{
		return 20; //1-2 lub dwie linie
 80063e2:	2314      	movs	r3, #20
 80063e4:	e00c      	b.n	8006400 <Conv_String_From_UART_BMP+0x11c>
	}
	else if(color_flag && (count_line==3 || count_line==4) )
 80063e6:	7cfb      	ldrb	r3, [r7, #19]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <Conv_String_From_UART_BMP+0x118>
 80063ec:	7d3b      	ldrb	r3, [r7, #20]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d002      	beq.n	80063f8 <Conv_String_From_UART_BMP+0x114>
 80063f2:	7d3b      	ldrb	r3, [r7, #20]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d101      	bne.n	80063fc <Conv_String_From_UART_BMP+0x118>
	{
		return 40; //3-4 lub dwie linie
 80063f8:	2328      	movs	r3, #40	; 0x28
 80063fa:	e001      	b.n	8006400 <Conv_String_From_UART_BMP+0x11c>
	}
	else
	{
		return Line_nr+1; // inny blad
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	3301      	adds	r3, #1
	}

}
 8006400:	4618      	mov	r0, r3
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd90      	pop	{r4, r7, pc}
 8006408:	2400cd00 	.word	0x2400cd00

0800640c <get_color_value>:

uint8_t get_color_value(uint8_t Color_mark)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	71fb      	strb	r3, [r7, #7]
	switch(Color_mark)
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	3b41      	subs	r3, #65	; 0x41
 800641a:	2b18      	cmp	r3, #24
 800641c:	d842      	bhi.n	80064a4 <get_color_value+0x98>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <get_color_value+0x18>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	0800649d 	.word	0x0800649d
 8006428:	08006495 	.word	0x08006495
 800642c:	080064a5 	.word	0x080064a5
 8006430:	080064a5 	.word	0x080064a5
 8006434:	080064a5 	.word	0x080064a5
 8006438:	080064a5 	.word	0x080064a5
 800643c:	08006491 	.word	0x08006491
 8006440:	080064a5 	.word	0x080064a5
 8006444:	080064a5 	.word	0x080064a5
 8006448:	080064a5 	.word	0x080064a5
 800644c:	080064a5 	.word	0x080064a5
 8006450:	080064a5 	.word	0x080064a5
 8006454:	080064a5 	.word	0x080064a5
 8006458:	080064a5 	.word	0x080064a5
 800645c:	080064a5 	.word	0x080064a5
 8006460:	080064a1 	.word	0x080064a1
 8006464:	080064a5 	.word	0x080064a5
 8006468:	0800648d 	.word	0x0800648d
 800646c:	080064a5 	.word	0x080064a5
 8006470:	080064a5 	.word	0x080064a5
 8006474:	080064a5 	.word	0x080064a5
 8006478:	080064a5 	.word	0x080064a5
 800647c:	08006489 	.word	0x08006489
 8006480:	080064a5 	.word	0x080064a5
 8006484:	08006499 	.word	0x08006499
	{
	case 'W':
		return White;
 8006488:	230f      	movs	r3, #15
 800648a:	e00c      	b.n	80064a6 <get_color_value+0x9a>
		break;
	case 'R':
		return Red;
 800648c:	2309      	movs	r3, #9
 800648e:	e00a      	b.n	80064a6 <get_color_value+0x9a>
		break;
	case 'G':
		return Green;
 8006490:	230a      	movs	r3, #10
 8006492:	e008      	b.n	80064a6 <get_color_value+0x9a>
		break;
	case 'B':
		return Blue;
 8006494:	230c      	movs	r3, #12
 8006496:	e006      	b.n	80064a6 <get_color_value+0x9a>
		break;
	case 'Y':
		return Yellow;
 8006498:	230b      	movs	r3, #11
 800649a:	e004      	b.n	80064a6 <get_color_value+0x9a>
		break;
	case 'A':
		return Azure;
 800649c:	230e      	movs	r3, #14
 800649e:	e002      	b.n	80064a6 <get_color_value+0x9a>
		break;
	case 'P':
		return Purple;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <get_color_value+0x9a>
		break;
	default :
		return 0;
 80064a4:	2300      	movs	r3, #0
		break;
	}
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop

080064b4 <Set_Flag_String_From_Usart>:


int Set_Flag_String_From_Usart(uint8_t Ilosc_Lini)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
	Ilosc_Lini_tesktu=Ilosc_Lini;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	4a06      	ldr	r2, [pc, #24]	; (80064dc <Set_Flag_String_From_Usart+0x28>)
 80064c2:	6013      	str	r3, [r2, #0]
	Z_czasOtrzymania_tekstu=HAL_GetTick();
 80064c4:	f001 fca6 	bl	8007e14 <HAL_GetTick>
 80064c8:	4603      	mov	r3, r0
 80064ca:	4a05      	ldr	r2, [pc, #20]	; (80064e0 <Set_Flag_String_From_Usart+0x2c>)
 80064cc:	6013      	str	r3, [r2, #0]
	return Ilosc_Lini_tesktu;
 80064ce:	4b03      	ldr	r3, [pc, #12]	; (80064dc <Set_Flag_String_From_Usart+0x28>)
 80064d0:	681b      	ldr	r3, [r3, #0]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2400f410 	.word	0x2400f410
 80064e0:	2400f414 	.word	0x2400f414

080064e4 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	605a      	str	r2, [r3, #4]
 80064f4:	609a      	str	r2, [r3, #8]
 80064f6:	60da      	str	r2, [r3, #12]
 80064f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80064fa:	4b57      	ldr	r3, [pc, #348]	; (8006658 <MX_GPIO_Init+0x174>)
 80064fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006500:	4a55      	ldr	r2, [pc, #340]	; (8006658 <MX_GPIO_Init+0x174>)
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800650a:	4b53      	ldr	r3, [pc, #332]	; (8006658 <MX_GPIO_Init+0x174>)
 800650c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006518:	4b4f      	ldr	r3, [pc, #316]	; (8006658 <MX_GPIO_Init+0x174>)
 800651a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651e:	4a4e      	ldr	r2, [pc, #312]	; (8006658 <MX_GPIO_Init+0x174>)
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006528:	4b4b      	ldr	r3, [pc, #300]	; (8006658 <MX_GPIO_Init+0x174>)
 800652a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006536:	4b48      	ldr	r3, [pc, #288]	; (8006658 <MX_GPIO_Init+0x174>)
 8006538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800653c:	4a46      	ldr	r2, [pc, #280]	; (8006658 <MX_GPIO_Init+0x174>)
 800653e:	f043 0310 	orr.w	r3, r3, #16
 8006542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006546:	4b44      	ldr	r3, [pc, #272]	; (8006658 <MX_GPIO_Init+0x174>)
 8006548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006554:	4b40      	ldr	r3, [pc, #256]	; (8006658 <MX_GPIO_Init+0x174>)
 8006556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <MX_GPIO_Init+0x174>)
 800655c:	f043 0308 	orr.w	r3, r3, #8
 8006560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006564:	4b3c      	ldr	r3, [pc, #240]	; (8006658 <MX_GPIO_Init+0x174>)
 8006566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006572:	4b39      	ldr	r3, [pc, #228]	; (8006658 <MX_GPIO_Init+0x174>)
 8006574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006578:	4a37      	ldr	r2, [pc, #220]	; (8006658 <MX_GPIO_Init+0x174>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006582:	4b35      	ldr	r3, [pc, #212]	; (8006658 <MX_GPIO_Init+0x174>)
 8006584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LATCH_Pin|U_LED4_Pin, GPIO_PIN_RESET);
 8006590:	2200      	movs	r2, #0
 8006592:	f244 0108 	movw	r1, #16392	; 0x4008
 8006596:	4831      	ldr	r0, [pc, #196]	; (800665c <MX_GPIO_Init+0x178>)
 8006598:	f001 ff14 	bl	80083c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LINE_A_Pin|LINE_B_Pin|LINE_C_Pin, GPIO_PIN_RESET);
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80065a2:	482f      	ldr	r0, [pc, #188]	; (8006660 <MX_GPIO_Init+0x17c>)
 80065a4:	f001 ff0e 	bl	80083c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINE_D_GPIO_Port, LINE_D_Pin, GPIO_PIN_SET);
 80065a8:	2201      	movs	r2, #1
 80065aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ae:	482c      	ldr	r0, [pc, #176]	; (8006660 <MX_GPIO_Init+0x17c>)
 80065b0:	f001 ff08 	bl	80083c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_RENUMn_GPIO_Port, USB_RENUMn_Pin, GPIO_PIN_RESET);
 80065b4:	2200      	movs	r2, #0
 80065b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ba:	482a      	ldr	r0, [pc, #168]	; (8006664 <MX_GPIO_Init+0x180>)
 80065bc:	f001 ff02 	bl	80083c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LATCH_Pin|U_LED4_Pin;
 80065c0:	f244 0308 	movw	r3, #16392	; 0x4008
 80065c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065c6:	2301      	movs	r3, #1
 80065c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	4619      	mov	r1, r3
 80065d8:	4820      	ldr	r0, [pc, #128]	; (800665c <MX_GPIO_Init+0x178>)
 80065da:	f001 fd43 	bl	8008064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LINE_A_Pin|LINE_B_Pin|LINE_C_Pin;
 80065de:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80065e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065e4:	2301      	movs	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065e8:	2301      	movs	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065ec:	2302      	movs	r3, #2
 80065ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	4619      	mov	r1, r3
 80065f6:	481a      	ldr	r0, [pc, #104]	; (8006660 <MX_GPIO_Init+0x17c>)
 80065f8:	f001 fd34 	bl	8008064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LINE_D_Pin;
 80065fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006602:	2301      	movs	r3, #1
 8006604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006606:	2302      	movs	r3, #2
 8006608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800660a:	2300      	movs	r3, #0
 800660c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LINE_D_GPIO_Port, &GPIO_InitStruct);
 800660e:	f107 0314 	add.w	r3, r7, #20
 8006612:	4619      	mov	r1, r3
 8006614:	4812      	ldr	r0, [pc, #72]	; (8006660 <MX_GPIO_Init+0x17c>)
 8006616:	f001 fd25 	bl	8008064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_RENUMn_Pin;
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006620:	2301      	movs	r3, #1
 8006622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006628:	2300      	movs	r3, #0
 800662a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RENUMn_GPIO_Port, &GPIO_InitStruct);
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	4619      	mov	r1, r3
 8006632:	480c      	ldr	r0, [pc, #48]	; (8006664 <MX_GPIO_Init+0x180>)
 8006634:	f001 fd16 	bl	8008064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006638:	2310      	movs	r3, #16
 800663a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	4619      	mov	r1, r3
 800664a:	4804      	ldr	r0, [pc, #16]	; (800665c <MX_GPIO_Init+0x178>)
 800664c:	f001 fd0a 	bl	8008064 <HAL_GPIO_Init>

}
 8006650:	bf00      	nop
 8006652:	3728      	adds	r7, #40	; 0x28
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	58024400 	.word	0x58024400
 800665c:	58020c00 	.word	0x58020c00
 8006660:	58020800 	.word	0x58020800
 8006664:	58020000 	.word	0x58020000

08006668 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <MX_IWDG1_Init+0x34>)
 800666e:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <MX_IWDG1_Init+0x38>)
 8006670:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <MX_IWDG1_Init+0x34>)
 8006674:	2202      	movs	r2, #2
 8006676:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <MX_IWDG1_Init+0x34>)
 800667a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800667e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 160;
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <MX_IWDG1_Init+0x34>)
 8006682:	22a0      	movs	r2, #160	; 0xa0
 8006684:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8006686:	4805      	ldr	r0, [pc, #20]	; (800669c <MX_IWDG1_Init+0x34>)
 8006688:	f001 fecf 	bl	800842a <HAL_IWDG_Init>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 8006692:	f000 fb83 	bl	8006d9c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	24014698 	.word	0x24014698
 80066a0:	58004800 	.word	0x58004800

080066a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80066aa:	b087      	sub	sp, #28
 80066ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066ae:	f001 fb2b 	bl	8007d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066b2:	f000 fabb 	bl	8006c2c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80066b6:	f000 fb41 	bl	8006d3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066ba:	f7ff ff13 	bl	80064e4 <MX_GPIO_Init>
  MX_MDMA_Init();
 80066be:	f000 fb75 	bl	8006dac <MX_MDMA_Init>
  MX_TIM2_Init();
 80066c2:	f000 ff81 	bl	80075c8 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 80066c6:	f000 fb91 	bl	8006dec <MX_QUADSPI_Init>
  MX_TIM3_Init();
 80066ca:	f000 ffbf 	bl	800764c <MX_TIM3_Init>
  MX_TIM5_Init();
 80066ce:	f001 f871 	bl	80077b4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80066d2:	f001 fa53 	bl	8007b7c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80066d6:	f000 fff7 	bl	80076c8 <MX_TIM4_Init>
  MX_SPI2_Init();
 80066da:	f000 fc93 	bl	8007004 <MX_SPI2_Init>
  MX_IWDG1_Init();
 80066de:	f7ff ffc3 	bl	8006668 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2);  //WatchDOG!!!!! na 20 MS
  HAL_IWDG_Refresh(&hiwdg1);
 80066e2:	48b8      	ldr	r0, [pc, #736]	; (80069c4 <main+0x320>)
 80066e4:	f001 fef0 	bl	80084c8 <HAL_IWDG_Refresh>
HUB_75_INIT();
 80066e8:	f7fa fb6c 	bl	8000dc4 <HUB_75_INIT>

INIT_UART3();
 80066ec:	f7fa ffb0 	bl	8001650 <INIT_UART3>

uint8_t Proces_num=0 ;
 80066f0:	2300      	movs	r3, #0
 80066f2:	f644 628f 	movw	r2, #20111	; 0x4e8f
 80066f6:	443a      	add	r2, r7
 80066f8:	7013      	strb	r3, [r2, #0]

uint8_t Pozdr_widzow[10000]={0};
 80066fa:	4bb3      	ldr	r3, [pc, #716]	; (80069c8 <main+0x324>)
 80066fc:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006700:	443a      	add	r2, r7
 8006702:	4413      	add	r3, r2
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	3304      	adds	r3, #4
 800670a:	f242 720c 	movw	r2, #9996	; 0x270c
 800670e:	2100      	movs	r1, #0
 8006710:	4618      	mov	r0, r3
 8006712:	f007 fcbd 	bl	800e090 <memset>

uint8_t B1[]= "tel. 885015433";
 8006716:	4bad      	ldr	r3, [pc, #692]	; (80069cc <main+0x328>)
 8006718:	f644 6290 	movw	r2, #20112	; 0x4e90
 800671c:	443a      	add	r2, r7
 800671e:	4413      	add	r3, r2
 8006720:	4aab      	ldr	r2, [pc, #684]	; (80069d0 <main+0x32c>)
 8006722:	461c      	mov	r4, r3
 8006724:	4613      	mov	r3, r2
 8006726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006728:	c407      	stmia	r4!, {r0, r1, r2}
 800672a:	8023      	strh	r3, [r4, #0]
 800672c:	3402      	adds	r4, #2
 800672e:	0c1b      	lsrs	r3, r3, #16
 8006730:	7023      	strb	r3, [r4, #0]
int Size=sizeof(B1)-1;
 8006732:	230e      	movs	r3, #14
 8006734:	f644 6288 	movw	r2, #20104	; 0x4e88
 8006738:	443a      	add	r2, r7
 800673a:	6013      	str	r3, [r2, #0]
Create_String_buffer (B1, Size, 0 , Pozdr_widzow,Azure);
 800673c:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006740:	443b      	add	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	b2d9      	uxtb	r1, r3
 8006746:	4ba0      	ldr	r3, [pc, #640]	; (80069c8 <main+0x324>)
 8006748:	f644 6290 	movw	r2, #20112	; 0x4e90
 800674c:	443a      	add	r2, r7
 800674e:	4413      	add	r3, r2
 8006750:	489e      	ldr	r0, [pc, #632]	; (80069cc <main+0x328>)
 8006752:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006756:	443a      	add	r2, r7
 8006758:	4410      	add	r0, r2
 800675a:	220e      	movs	r2, #14
 800675c:	9200      	str	r2, [sp, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	f7fb f91e 	bl	80019a0 <Create_String_buffer>
uint8_t B2[]= "POZDRAWIAMY";
 8006764:	4b9b      	ldr	r3, [pc, #620]	; (80069d4 <main+0x330>)
 8006766:	f644 6290 	movw	r2, #20112	; 0x4e90
 800676a:	443a      	add	r2, r7
 800676c:	4413      	add	r3, r2
 800676e:	4a9a      	ldr	r2, [pc, #616]	; (80069d8 <main+0x334>)
 8006770:	ca07      	ldmia	r2, {r0, r1, r2}
 8006772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
Size=sizeof(B2)-1;
 8006776:	230b      	movs	r3, #11
 8006778:	f644 6288 	movw	r2, #20104	; 0x4e88
 800677c:	443a      	add	r2, r7
 800677e:	6013      	str	r3, [r2, #0]
Create_String_buffer (B2, Size, 1 , Pozdr_widzow,Green);
 8006780:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006784:	443b      	add	r3, r7
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	b2d9      	uxtb	r1, r3
 800678a:	4b8f      	ldr	r3, [pc, #572]	; (80069c8 <main+0x324>)
 800678c:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006790:	443a      	add	r2, r7
 8006792:	4413      	add	r3, r2
 8006794:	488f      	ldr	r0, [pc, #572]	; (80069d4 <main+0x330>)
 8006796:	f644 6290 	movw	r2, #20112	; 0x4e90
 800679a:	443a      	add	r2, r7
 800679c:	4410      	add	r0, r2
 800679e:	220a      	movs	r2, #10
 80067a0:	9200      	str	r2, [sp, #0]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f7fb f8fc 	bl	80019a0 <Create_String_buffer>

HAL_IWDG_Refresh(&hiwdg1);
 80067a8:	4886      	ldr	r0, [pc, #536]	; (80069c4 <main+0x320>)
 80067aa:	f001 fe8d 	bl	80084c8 <HAL_IWDG_Refresh>

uint8_t ZaprDoSalonuFryzStudio[10000]={0};
 80067ae:	4b8b      	ldr	r3, [pc, #556]	; (80069dc <main+0x338>)
 80067b0:	f644 6290 	movw	r2, #20112	; 0x4e90
 80067b4:	443a      	add	r2, r7
 80067b6:	4413      	add	r3, r2
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	3304      	adds	r3, #4
 80067be:	f242 720c 	movw	r2, #9996	; 0x270c
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f007 fc63 	bl	800e090 <memset>
uint8_t S1[]= " ZAPRASZAMY";
 80067ca:	4b85      	ldr	r3, [pc, #532]	; (80069e0 <main+0x33c>)
 80067cc:	f644 6290 	movw	r2, #20112	; 0x4e90
 80067d0:	443a      	add	r2, r7
 80067d2:	4413      	add	r3, r2
 80067d4:	4a83      	ldr	r2, [pc, #524]	; (80069e4 <main+0x340>)
 80067d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80067d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
uint8_t S2[]= "  DO SALONU ";
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <main+0x344>)
 80067de:	f644 6290 	movw	r2, #20112	; 0x4e90
 80067e2:	443a      	add	r2, r7
 80067e4:	4413      	add	r3, r2
 80067e6:	4a81      	ldr	r2, [pc, #516]	; (80069ec <main+0x348>)
 80067e8:	461c      	mov	r4, r3
 80067ea:	4613      	mov	r3, r2
 80067ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067ee:	c407      	stmia	r4!, {r0, r1, r2}
 80067f0:	7023      	strb	r3, [r4, #0]
uint8_t S3[]= "FRYZJESKIEGO";
 80067f2:	4b7f      	ldr	r3, [pc, #508]	; (80069f0 <main+0x34c>)
 80067f4:	f644 6290 	movw	r2, #20112	; 0x4e90
 80067f8:	443a      	add	r2, r7
 80067fa:	4413      	add	r3, r2
 80067fc:	4a7d      	ldr	r2, [pc, #500]	; (80069f4 <main+0x350>)
 80067fe:	461c      	mov	r4, r3
 8006800:	4613      	mov	r3, r2
 8006802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006804:	c407      	stmia	r4!, {r0, r1, r2}
 8006806:	7023      	strb	r3, [r4, #0]
uint8_t S4[]= " ORAZ STUDIA";
 8006808:	4b7b      	ldr	r3, [pc, #492]	; (80069f8 <main+0x354>)
 800680a:	f644 6290 	movw	r2, #20112	; 0x4e90
 800680e:	443a      	add	r2, r7
 8006810:	4413      	add	r3, r2
 8006812:	4a7a      	ldr	r2, [pc, #488]	; (80069fc <main+0x358>)
 8006814:	461c      	mov	r4, r3
 8006816:	4613      	mov	r3, r2
 8006818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800681a:	c407      	stmia	r4!, {r0, r1, r2}
 800681c:	7023      	strb	r3, [r4, #0]
uint8_t S5[]= "  PAZNOKCI!";
 800681e:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <main+0x35c>)
 8006820:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006824:	443a      	add	r2, r7
 8006826:	4413      	add	r3, r2
 8006828:	4a76      	ldr	r2, [pc, #472]	; (8006a04 <main+0x360>)
 800682a:	ca07      	ldmia	r2, {r0, r1, r2}
 800682c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 Size=sizeof(S1)-1;
 8006830:	230b      	movs	r3, #11
 8006832:	f644 6288 	movw	r2, #20104	; 0x4e88
 8006836:	443a      	add	r2, r7
 8006838:	6013      	str	r3, [r2, #0]
Create_String_buffer (S1, Size, 0 , ZaprDoSalonuFryzStudio,Azure);
 800683a:	f644 6388 	movw	r3, #20104	; 0x4e88
 800683e:	443b      	add	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b2d9      	uxtb	r1, r3
 8006844:	4b65      	ldr	r3, [pc, #404]	; (80069dc <main+0x338>)
 8006846:	f644 6290 	movw	r2, #20112	; 0x4e90
 800684a:	443a      	add	r2, r7
 800684c:	4413      	add	r3, r2
 800684e:	4864      	ldr	r0, [pc, #400]	; (80069e0 <main+0x33c>)
 8006850:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006854:	443a      	add	r2, r7
 8006856:	4410      	add	r0, r2
 8006858:	220e      	movs	r2, #14
 800685a:	9200      	str	r2, [sp, #0]
 800685c:	2200      	movs	r2, #0
 800685e:	f7fb f89f 	bl	80019a0 <Create_String_buffer>
 Size=sizeof(S2)-1;
 8006862:	230c      	movs	r3, #12
 8006864:	f644 6288 	movw	r2, #20104	; 0x4e88
 8006868:	443a      	add	r2, r7
 800686a:	6013      	str	r3, [r2, #0]
Create_String_buffer (S2, Size, 1 , ZaprDoSalonuFryzStudio,Green);
 800686c:	f644 6388 	movw	r3, #20104	; 0x4e88
 8006870:	443b      	add	r3, r7
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	b2d9      	uxtb	r1, r3
 8006876:	4b59      	ldr	r3, [pc, #356]	; (80069dc <main+0x338>)
 8006878:	f644 6290 	movw	r2, #20112	; 0x4e90
 800687c:	443a      	add	r2, r7
 800687e:	4413      	add	r3, r2
 8006880:	4859      	ldr	r0, [pc, #356]	; (80069e8 <main+0x344>)
 8006882:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006886:	443a      	add	r2, r7
 8006888:	4410      	add	r0, r2
 800688a:	220a      	movs	r2, #10
 800688c:	9200      	str	r2, [sp, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	f7fb f886 	bl	80019a0 <Create_String_buffer>
 Size=sizeof(S3)-1;
 8006894:	230c      	movs	r3, #12
 8006896:	f644 6288 	movw	r2, #20104	; 0x4e88
 800689a:	443a      	add	r2, r7
 800689c:	6013      	str	r3, [r2, #0]

 HAL_IWDG_Refresh(&hiwdg1);
 800689e:	4849      	ldr	r0, [pc, #292]	; (80069c4 <main+0x320>)
 80068a0:	f001 fe12 	bl	80084c8 <HAL_IWDG_Refresh>

Create_String_buffer (S3, Size, 2 , ZaprDoSalonuFryzStudio,Yellow);
 80068a4:	f644 6388 	movw	r3, #20104	; 0x4e88
 80068a8:	443b      	add	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	b2d9      	uxtb	r1, r3
 80068ae:	4b4b      	ldr	r3, [pc, #300]	; (80069dc <main+0x338>)
 80068b0:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068b4:	443a      	add	r2, r7
 80068b6:	4413      	add	r3, r2
 80068b8:	484d      	ldr	r0, [pc, #308]	; (80069f0 <main+0x34c>)
 80068ba:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068be:	443a      	add	r2, r7
 80068c0:	4410      	add	r0, r2
 80068c2:	220b      	movs	r2, #11
 80068c4:	9200      	str	r2, [sp, #0]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f7fb f86a 	bl	80019a0 <Create_String_buffer>
 Size=sizeof(S4)-1;
 80068cc:	230c      	movs	r3, #12
 80068ce:	f644 6288 	movw	r2, #20104	; 0x4e88
 80068d2:	443a      	add	r2, r7
 80068d4:	6013      	str	r3, [r2, #0]
Create_String_buffer (S4, Size, 3 , ZaprDoSalonuFryzStudio,Purple);
 80068d6:	f644 6388 	movw	r3, #20104	; 0x4e88
 80068da:	443b      	add	r3, r7
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	b2d9      	uxtb	r1, r3
 80068e0:	4b3e      	ldr	r3, [pc, #248]	; (80069dc <main+0x338>)
 80068e2:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068e6:	443a      	add	r2, r7
 80068e8:	4413      	add	r3, r2
 80068ea:	4843      	ldr	r0, [pc, #268]	; (80069f8 <main+0x354>)
 80068ec:	f644 6290 	movw	r2, #20112	; 0x4e90
 80068f0:	443a      	add	r2, r7
 80068f2:	4410      	add	r0, r2
 80068f4:	2201      	movs	r2, #1
 80068f6:	9200      	str	r2, [sp, #0]
 80068f8:	2203      	movs	r2, #3
 80068fa:	f7fb f851 	bl	80019a0 <Create_String_buffer>
Size=sizeof(S5)-1;
 80068fe:	230b      	movs	r3, #11
 8006900:	f644 6288 	movw	r2, #20104	; 0x4e88
 8006904:	443a      	add	r2, r7
 8006906:	6013      	str	r3, [r2, #0]
Create_String_buffer (S5, Size, 4 , ZaprDoSalonuFryzStudio,White);
 8006908:	f644 6388 	movw	r3, #20104	; 0x4e88
 800690c:	443b      	add	r3, r7
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	b2d9      	uxtb	r1, r3
 8006912:	4b32      	ldr	r3, [pc, #200]	; (80069dc <main+0x338>)
 8006914:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006918:	443a      	add	r2, r7
 800691a:	4413      	add	r3, r2
 800691c:	4838      	ldr	r0, [pc, #224]	; (8006a00 <main+0x35c>)
 800691e:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006922:	443a      	add	r2, r7
 8006924:	4410      	add	r0, r2
 8006926:	220f      	movs	r2, #15
 8006928:	9200      	str	r2, [sp, #0]
 800692a:	2204      	movs	r2, #4
 800692c:	f7fb f838 	bl	80019a0 <Create_String_buffer>
int ZaprDoSalonuFryzStudioRow=4+1;
 8006930:	2305      	movs	r3, #5
 8006932:	f644 6284 	movw	r2, #20100	; 0x4e84
 8006936:	443a      	add	r2, r7
 8006938:	6013      	str	r3, [r2, #0]
Create_String_buffer (S5, Size, 4 , ZaprDoSalonuFryzStudio,Purple);
int ZaprDoSalonuFryzStudioRow2=4+1;
*/


SedingBufor_Adr=OUT_B1;
 800693a:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <main+0x364>)
 800693c:	4a33      	ldr	r2, [pc, #204]	; (8006a0c <main+0x368>)
 800693e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg1);
 8006940:	4820      	ldr	r0, [pc, #128]	; (80069c4 <main+0x320>)
 8006942:	f001 fdc1 	bl	80084c8 <HAL_IWDG_Refresh>
	  HandleEcho(&Thuart3);
 8006946:	4832      	ldr	r0, [pc, #200]	; (8006a10 <main+0x36c>)
 8006948:	f7fa fecc 	bl	80016e4 <HandleEcho>

	  switch( Proces_num )
 800694c:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006950:	443b      	add	r3, r7
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b05      	cmp	r3, #5
 8006956:	f200 8146 	bhi.w	8006be6 <main+0x542>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <main+0x2bc>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006a19 	.word	0x08006a19
 8006968:	08006a65 	.word	0x08006a65
 800696c:	08006a97 	.word	0x08006a97
 8006970:	08006ac9 	.word	0x08006ac9
 8006974:	08006af7 	.word	0x08006af7
	  {
	  case 0:
	  	Verical_Scroll_Flow_withHOLD(ZaprDoSalonuFryzStudio, ZaprDoSalonuFryzStudioRow*16, 50, 800,300, 0);  //this fucion execution maks 550us
 8006978:	f644 6384 	movw	r3, #20100	; 0x4e84
 800697c:	443b      	add	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	b2d9      	uxtb	r1, r3
 8006986:	4815      	ldr	r0, [pc, #84]	; (80069dc <main+0x338>)
 8006988:	f644 6390 	movw	r3, #20112	; 0x4e90
 800698c:	443b      	add	r3, r7
 800698e:	4418      	add	r0, r3
 8006990:	2300      	movs	r3, #0
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800699e:	2232      	movs	r2, #50	; 0x32
 80069a0:	f7fa fa88 	bl	8000eb4 <Verical_Scroll_Flow_withHOLD>
	   if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <main+0x370>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	f040 8122 	bne.w	8006bf2 <main+0x54e>
	   {
	  	 Proces_num++;
 80069ae:	f644 638f 	movw	r3, #20111	; 0x4e8f
 80069b2:	443b      	add	r3, r7
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	f644 628f 	movw	r2, #20111	; 0x4e8f
 80069bc:	443a      	add	r2, r7
 80069be:	7013      	strb	r3, [r2, #0]
	   }
	  break;
 80069c0:	e117      	b.n	8006bf2 <main+0x54e>
 80069c2:	bf00      	nop
 80069c4:	24014698 	.word	0x24014698
 80069c8:	ffffd8e4 	.word	0xffffd8e4
 80069cc:	ffffd8d4 	.word	0xffffd8d4
 80069d0:	0800e9b4 	.word	0x0800e9b4
 80069d4:	ffffd8c8 	.word	0xffffd8c8
 80069d8:	0800e9c4 	.word	0x0800e9c4
 80069dc:	ffffb1b8 	.word	0xffffb1b8
 80069e0:	ffffb1ac 	.word	0xffffb1ac
 80069e4:	0800e9d0 	.word	0x0800e9d0
 80069e8:	ffffb19c 	.word	0xffffb19c
 80069ec:	0800e9dc 	.word	0x0800e9dc
 80069f0:	ffffb18c 	.word	0xffffb18c
 80069f4:	0800e9ec 	.word	0x0800e9ec
 80069f8:	ffffb17c 	.word	0xffffb17c
 80069fc:	0800e9fc 	.word	0x0800e9fc
 8006a00:	ffffb170 	.word	0xffffb170
 8006a04:	0800ea0c 	.word	0x0800ea0c
 8006a08:	2400ccec 	.word	0x2400ccec
 8006a0c:	2400b8e8 	.word	0x2400b8e8
 8006a10:	2400f468 	.word	0x2400f468
 8006a14:	2400f428 	.word	0x2400f428
	  case 1:

	  	Verical_Scroll_Flow_withHOLD(ZaprDoSalonuFryzStudio, (ZaprDoSalonuFryzStudioRow*16) +16 , 50, 300,800, 1);
 8006a18:	f644 6384 	movw	r3, #20100	; 0x4e84
 8006a1c:	443b      	add	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	b2d9      	uxtb	r1, r3
 8006a28:	4878      	ldr	r0, [pc, #480]	; (8006c0c <main+0x568>)
 8006a2a:	f644 6390 	movw	r3, #20112	; 0x4e90
 8006a2e:	443b      	add	r3, r7
 8006a30:	4418      	add	r0, r3
 8006a32:	2301      	movs	r3, #1
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006a40:	2232      	movs	r2, #50	; 0x32
 8006a42:	f7fa fa37 	bl	8000eb4 <Verical_Scroll_Flow_withHOLD>
	  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006a46:	4b72      	ldr	r3, [pc, #456]	; (8006c10 <main+0x56c>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	f040 80d3 	bne.w	8006bf6 <main+0x552>
	  	 {
	  		 Proces_num++;
 8006a50:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006a54:	443b      	add	r3, r7
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006a5e:	443a      	add	r2, r7
 8006a60:	7013      	strb	r3, [r2, #0]
	  	 }
	  	break;
 8006a62:	e0c8      	b.n	8006bf6 <main+0x552>
	  case 2:

	  	Viewing_BitMapBy_Time(Pozdr_widzow, 2000);
 8006a64:	4b6b      	ldr	r3, [pc, #428]	; (8006c14 <main+0x570>)
 8006a66:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006a6a:	443a      	add	r2, r7
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fa fb60 	bl	8001138 <Viewing_BitMapBy_Time>
	  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006a78:	4b65      	ldr	r3, [pc, #404]	; (8006c10 <main+0x56c>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	f040 80bc 	bne.w	8006bfa <main+0x556>
	  	 {
	  		 Proces_num++;
 8006a82:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006a86:	443b      	add	r3, r7
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006a90:	443a      	add	r2, r7
 8006a92:	7013      	strb	r3, [r2, #0]
	  	 }

	  	break;
 8006a94:	e0b1      	b.n	8006bfa <main+0x556>
	  case 3:

	  	Viewing_BitMapBy_Time(Pozdr_widzow, 1000);
 8006a96:	4b5f      	ldr	r3, [pc, #380]	; (8006c14 <main+0x570>)
 8006a98:	f644 6290 	movw	r2, #20112	; 0x4e90
 8006a9c:	443a      	add	r2, r7
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fa fb47 	bl	8001138 <Viewing_BitMapBy_Time>
	  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006aaa:	4b59      	ldr	r3, [pc, #356]	; (8006c10 <main+0x56c>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f040 80a5 	bne.w	8006bfe <main+0x55a>
	  	 {
	  		 Proces_num++;
 8006ab4:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006ab8:	443b      	add	r3, r7
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006ac2:	443a      	add	r2, r7
 8006ac4:	7013      	strb	r3, [r2, #0]
	  	 }

	  	break;
 8006ac6:	e09a      	b.n	8006bfe <main+0x55a>

	  case 4:
		  	 Horizontal_SCROLL( Pozdr_wsz, 1300 , 1300, 23);  //Pozdr_wsz
 8006ac8:	2317      	movs	r3, #23
 8006aca:	f240 5214 	movw	r2, #1300	; 0x514
 8006ace:	f240 5114 	movw	r1, #1300	; 0x514
 8006ad2:	4851      	ldr	r0, [pc, #324]	; (8006c18 <main+0x574>)
 8006ad4:	f7fa fb66 	bl	80011a4 <Horizontal_SCROLL>
		  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006ad8:	4b4d      	ldr	r3, [pc, #308]	; (8006c10 <main+0x56c>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	f040 8090 	bne.w	8006c02 <main+0x55e>
		  	 {
		  		 Proces_num++;
 8006ae2:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006ae6:	443b      	add	r3, r7
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	3301      	adds	r3, #1
 8006aec:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006af0:	443a      	add	r2, r7
 8006af2:	7013      	strb	r3, [r2, #0]
		  	 }


	  	break;
 8006af4:	e085      	b.n	8006c02 <main+0x55e>
	  case 5:
		  	  	  	  //Napisy z UARTU czyli bluetootha
		  if(Ilosc_Lini_tesktu>0)
 8006af6:	4b49      	ldr	r3, [pc, #292]	; (8006c1c <main+0x578>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dd66      	ble.n	8006bcc <main+0x528>
		  {

			  if(Ilosc_Lini_tesktu==1 || Ilosc_Lini_tesktu==2)
 8006afe:	4b47      	ldr	r3, [pc, #284]	; (8006c1c <main+0x578>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d003      	beq.n	8006b0e <main+0x46a>
 8006b06:	4b45      	ldr	r3, [pc, #276]	; (8006c1c <main+0x578>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d112      	bne.n	8006b34 <main+0x490>
			  {
				  	Viewing_BitMapBy_Time( Created_By_UART_BMP , 6000);
 8006b0e:	f241 7170 	movw	r1, #6000	; 0x1770
 8006b12:	4843      	ldr	r0, [pc, #268]	; (8006c20 <main+0x57c>)
 8006b14:	f7fa fb10 	bl	8001138 <Viewing_BitMapBy_Time>

						  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006b18:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <main+0x56c>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d138      	bne.n	8006b92 <main+0x4ee>
						  	 {
						  		Proces_num++;
 8006b20:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006b24:	443b      	add	r3, r7
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006b2e:	443a      	add	r2, r7
 8006b30:	7013      	strb	r3, [r2, #0]
						  		break;
 8006b32:	e069      	b.n	8006c08 <main+0x564>
						  	 }
			  }


			  else if(Ilosc_Lini_tesktu==3 || Ilosc_Lini_tesktu==4)
 8006b34:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <main+0x578>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d003      	beq.n	8006b44 <main+0x4a0>
 8006b3c:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <main+0x578>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d119      	bne.n	8006b78 <main+0x4d4>
			  {
				  Verical_Scroll_Flow_withHOLD(Created_By_UART_BMP, 64, 80, 3200,3200, 1);
 8006b44:	2301      	movs	r3, #1
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8006b52:	2250      	movs	r2, #80	; 0x50
 8006b54:	2140      	movs	r1, #64	; 0x40
 8006b56:	4832      	ldr	r0, [pc, #200]	; (8006c20 <main+0x57c>)
 8006b58:	f7fa f9ac 	bl	8000eb4 <Verical_Scroll_Flow_withHOLD>
				  	 if(SCR_PROCESS==SCR_VIEWING_PROCESS_DONE)
 8006b5c:	4b2c      	ldr	r3, [pc, #176]	; (8006c10 <main+0x56c>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d116      	bne.n	8006b92 <main+0x4ee>
				  	 {
				  		Proces_num++;
 8006b64:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006b68:	443b      	add	r3, r7
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006b72:	443a      	add	r2, r7
 8006b74:	7013      	strb	r3, [r2, #0]
				  		break;
 8006b76:	e047      	b.n	8006c08 <main+0x564>
				  	 }
			  }
			  else
			  {
				  SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <main+0x56c>)
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	701a      	strb	r2, [r3, #0]
				  Proces_num++;
 8006b7e:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006b82:	443b      	add	r3, r7
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006b8c:	443a      	add	r2, r7
 8006b8e:	7013      	strb	r3, [r2, #0]
				  break;
 8006b90:	e03a      	b.n	8006c08 <main+0x564>
			  }

			  if(  (HAL_GetTick() - Z_czasOtrzymania_tekstu) > (1000*60*1) )
 8006b92:	f001 f93f 	bl	8007e14 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4b22      	ldr	r3, [pc, #136]	; (8006c24 <main+0x580>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d92f      	bls.n	8006c06 <main+0x562>
			  {
				  SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <main+0x56c>)
 8006ba8:	2202      	movs	r2, #2
 8006baa:	701a      	strb	r2, [r3, #0]
				  Ilosc_Lini_tesktu=0;
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <main+0x578>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
				  f_start_view=1;
 8006bb2:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <main+0x584>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
				  Proces_num++;
 8006bb8:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006bbc:	443b      	add	r3, r7
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006bc6:	443a      	add	r2, r7
 8006bc8:	7013      	strb	r3, [r2, #0]
				  break;
 8006bca:	e01d      	b.n	8006c08 <main+0x564>

		  }

		  else
		  {
			  SCR_PROCESS=SCR_VIEWING_PROCESS_DONE;
 8006bcc:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <main+0x56c>)
 8006bce:	2202      	movs	r2, #2
 8006bd0:	701a      	strb	r2, [r3, #0]
			  Proces_num++;
 8006bd2:	f644 638f 	movw	r3, #20111	; 0x4e8f
 8006bd6:	443b      	add	r3, r7
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006be0:	443a      	add	r2, r7
 8006be2:	7013      	strb	r3, [r2, #0]
			  break;
 8006be4:	e010      	b.n	8006c08 <main+0x564>
		  }
	  	break;

	  default :
	  	Proces_num=0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8006bec:	443a      	add	r2, r7
 8006bee:	7013      	strb	r3, [r2, #0]

	  	break;
 8006bf0:	e00a      	b.n	8006c08 <main+0x564>
	  break;
 8006bf2:	bf00      	nop
 8006bf4:	e6a4      	b.n	8006940 <main+0x29c>
	  	break;
 8006bf6:	bf00      	nop
 8006bf8:	e6a2      	b.n	8006940 <main+0x29c>
	  	break;
 8006bfa:	bf00      	nop
 8006bfc:	e6a0      	b.n	8006940 <main+0x29c>
	  	break;
 8006bfe:	bf00      	nop
 8006c00:	e69e      	b.n	8006940 <main+0x29c>
	  	break;
 8006c02:	bf00      	nop
 8006c04:	e69c      	b.n	8006940 <main+0x29c>
	  	break;
 8006c06:	bf00      	nop
	  HAL_IWDG_Refresh(&hiwdg1);
 8006c08:	e69a      	b.n	8006940 <main+0x29c>
 8006c0a:	bf00      	nop
 8006c0c:	ffffb1b8 	.word	0xffffb1b8
 8006c10:	2400f428 	.word	0x2400f428
 8006c14:	ffffd8e4 	.word	0xffffd8e4
 8006c18:	24004008 	.word	0x24004008
 8006c1c:	2400f410 	.word	0x2400f410
 8006c20:	2400cd00 	.word	0x2400cd00
 8006c24:	2400f414 	.word	0x2400f414
 8006c28:	24000000 	.word	0x24000000

08006c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b09c      	sub	sp, #112	; 0x70
 8006c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c36:	224c      	movs	r2, #76	; 0x4c
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f007 fa28 	bl	800e090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c40:	1d3b      	adds	r3, r7, #4
 8006c42:	2220      	movs	r2, #32
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f007 fa22 	bl	800e090 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006c4c:	2002      	movs	r0, #2
 8006c4e:	f001 ffef 	bl	8008c30 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006c52:	2300      	movs	r3, #0
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <SystemClock_Config+0x104>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	4a35      	ldr	r2, [pc, #212]	; (8006d30 <SystemClock_Config+0x104>)
 8006c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c60:	6193      	str	r3, [r2, #24]
 8006c62:	4b33      	ldr	r3, [pc, #204]	; (8006d30 <SystemClock_Config+0x104>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <SystemClock_Config+0x108>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a30      	ldr	r2, [pc, #192]	; (8006d34 <SystemClock_Config+0x108>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c78:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <SystemClock_Config+0x108>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c84:	bf00      	nop
 8006c86:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <SystemClock_Config+0x104>)
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	d1f8      	bne.n	8006c86 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8006c94:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <SystemClock_Config+0x10c>)
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <SystemClock_Config+0x10c>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_LSI;
 8006ca4:	2318      	movs	r3, #24
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8006cac:	2380      	movs	r3, #128	; 0x80
 8006cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8006cc0:	23f0      	movs	r3, #240	; 0xf0
 8006cc2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 120;
 8006cc8:	2378      	movs	r3, #120	; 0x78
 8006cca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 fe31 	bl	8009948 <HAL_RCC_OscConfig>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006cec:	f000 f856 	bl	8006d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cf0:	233f      	movs	r3, #63	; 0x3f
 8006cf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	2104      	movs	r1, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f003 fa26 	bl	800a168 <HAL_RCC_ClockConfig>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8006d22:	f000 f83b 	bl	8006d9c <Error_Handler>
  }
}
 8006d26:	bf00      	nop
 8006d28:	3770      	adds	r7, #112	; 0x70
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	58024800 	.word	0x58024800
 8006d34:	58000400 	.word	0x58000400
 8006d38:	58024400 	.word	0x58024400

08006d3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b0b0      	sub	sp, #192	; 0xc0
 8006d40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	22bc      	movs	r2, #188	; 0xbc
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f007 f9a1 	bl	800e090 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_SPI2;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <PeriphCommonClock_Config+0x5c>)
 8006d50:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8006d52:	2301      	movs	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 8006d56:	233c      	movs	r3, #60	; 0x3c
 8006d58:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 120;
 8006d5a:	2378      	movs	r3, #120	; 0x78
 8006d5c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 120;
 8006d5e:	2378      	movs	r3, #120	; 0x78
 8006d60:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 5;
 8006d62:	2305      	movs	r3, #5
 8006d64:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8006d66:	2380      	movs	r3, #128	; 0x80
 8006d68:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 8006d72:	2320      	movs	r3, #32
 8006d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8006d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d7a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f003 fd22 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8006d8a:	f000 f807 	bl	8006d9c <Error_Handler>
  }
}
 8006d8e:	bf00      	nop
 8006d90:	37c0      	adds	r7, #192	; 0xc0
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	02001000 	.word	0x02001000

08006d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
void MX_MDMA_Init(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <MX_MDMA_Init+0x3c>)
 8006db4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006db8:	4a0b      	ldr	r2, [pc, #44]	; (8006de8 <MX_MDMA_Init+0x3c>)
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006dc2:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <MX_MDMA_Init+0x3c>)
 8006dc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 2, 0);
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	207a      	movs	r0, #122	; 0x7a
 8006dd6:	f001 f910 	bl	8007ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8006dda:	207a      	movs	r0, #122	; 0x7a
 8006ddc:	f001 f927 	bl	800802e <HAL_NVIC_EnableIRQ>

}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	58024400 	.word	0x58024400

08006dec <MX_QUADSPI_Init>:
QSPI_HandleTypeDef hqspi;
MDMA_HandleTypeDef hmdma_quadspi_fifo_th;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <MX_QUADSPI_Init+0x54>)
 8006df4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4;
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006df8:	2204      	movs	r2, #4
 8006dfa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006dfe:	2204      	movs	r2, #4
 8006e00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e0a:	2219      	movs	r2, #25
 8006e0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006e14:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006e26:	4805      	ldr	r0, [pc, #20]	; (8006e3c <MX_QUADSPI_Init+0x50>)
 8006e28:	f001 ff3c 	bl	8008ca4 <HAL_QSPI_Init>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8006e32:	f7ff ffb3 	bl	8006d9c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	24014714 	.word	0x24014714
 8006e40:	52005000 	.word	0x52005000

08006e44 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08c      	sub	sp, #48	; 0x30
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e4c:	f107 031c 	add.w	r3, r7, #28
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	609a      	str	r2, [r3, #8]
 8006e58:	60da      	str	r2, [r3, #12]
 8006e5a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a61      	ldr	r2, [pc, #388]	; (8006fe8 <HAL_QSPI_MspInit+0x1a4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	f040 80bc 	bne.w	8006fe0 <HAL_QSPI_MspInit+0x19c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006e68:	4b60      	ldr	r3, [pc, #384]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006e6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006e6e:	4a5f      	ldr	r2, [pc, #380]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e74:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006e78:	4b5c      	ldr	r3, [pc, #368]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006e7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e86:	4b59      	ldr	r3, [pc, #356]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e8c:	4a57      	ldr	r2, [pc, #348]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006e8e:	f043 0302 	orr.w	r3, r3, #2
 8006e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e96:	4b55      	ldr	r3, [pc, #340]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ea4:	4b51      	ldr	r3, [pc, #324]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eaa:	4a50      	ldr	r2, [pc, #320]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006eac:	f043 0310 	orr.w	r3, r3, #16
 8006eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eb4:	4b4d      	ldr	r3, [pc, #308]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ec2:	4b4a      	ldr	r3, [pc, #296]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ec8:	4a48      	ldr	r2, [pc, #288]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006eca:	f043 0304 	orr.w	r3, r3, #4
 8006ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ed2:	4b46      	ldr	r3, [pc, #280]	; (8006fec <HAL_QSPI_MspInit+0x1a8>)
 8006ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006ef0:	2309      	movs	r3, #9
 8006ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef4:	f107 031c 	add.w	r3, r7, #28
 8006ef8:	4619      	mov	r1, r3
 8006efa:	483d      	ldr	r0, [pc, #244]	; (8006ff0 <HAL_QSPI_MspInit+0x1ac>)
 8006efc:	f001 f8b2 	bl	8008064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006f00:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f06:	2302      	movs	r3, #2
 8006f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006f12:	230a      	movs	r3, #10
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f16:	f107 031c 	add.w	r3, r7, #28
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4835      	ldr	r0, [pc, #212]	; (8006ff4 <HAL_QSPI_MspInit+0x1b0>)
 8006f1e:	f001 f8a1 	bl	8008064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f30:	2300      	movs	r3, #0
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006f34:	2309      	movs	r3, #9
 8006f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f38:	f107 031c 	add.w	r3, r7, #28
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	482e      	ldr	r0, [pc, #184]	; (8006ff8 <HAL_QSPI_MspInit+0x1b4>)
 8006f40:	f001 f890 	bl	8008064 <HAL_GPIO_Init>

    /* QUADSPI MDMA Init */
    /* QUADSPI_FIFO_TH Init */
    hmdma_quadspi_fifo_th.Instance = MDMA_Channel0;
 8006f44:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f46:	4a2e      	ldr	r2, [pc, #184]	; (8007000 <HAL_QSPI_MspInit+0x1bc>)
 8006f48:	601a      	str	r2, [r3, #0]
    hmdma_quadspi_fifo_th.Init.Request = MDMA_REQUEST_QUADSPI_FIFO_TH;
 8006f4a:	4b2c      	ldr	r3, [pc, #176]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f4c:	2216      	movs	r2, #22
 8006f4e:	605a      	str	r2, [r3, #4]
    hmdma_quadspi_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006f50:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	609a      	str	r2, [r3, #8]
    hmdma_quadspi_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 8006f56:	4b29      	ldr	r3, [pc, #164]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60da      	str	r2, [r3, #12]
    hmdma_quadspi_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006f5c:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	611a      	str	r2, [r3, #16]
    hmdma_quadspi_fifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8006f62:	4b26      	ldr	r3, [pc, #152]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f64:	2202      	movs	r2, #2
 8006f66:	615a      	str	r2, [r3, #20]
    hmdma_quadspi_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8006f68:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	619a      	str	r2, [r3, #24]
    hmdma_quadspi_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8006f6e:	4b23      	ldr	r3, [pc, #140]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	61da      	str	r2, [r3, #28]
    hmdma_quadspi_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8006f74:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	621a      	str	r2, [r3, #32]
    hmdma_quadspi_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_quadspi_fifo_th.Init.BufferTransferLength = 4;
 8006f82:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f84:	2204      	movs	r2, #4
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_quadspi_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_quadspi_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8006f8e:	4b1b      	ldr	r3, [pc, #108]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_quadspi_fifo_th.Init.SourceBlockAddressOffset = 0;
 8006f94:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_quadspi_fifo_th.Init.DestBlockAddressOffset = 0;
 8006f9a:	4b18      	ldr	r3, [pc, #96]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_quadspi_fifo_th) != HAL_OK)
 8006fa0:	4816      	ldr	r0, [pc, #88]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006fa2:	f001 faa1 	bl	80084e8 <HAL_MDMA_Init>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_QSPI_MspInit+0x16c>
    {
      Error_Handler();
 8006fac:	f7ff fef6 	bl	8006d9c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_quadspi_fifo_th, 0, 0) != HAL_OK)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4811      	ldr	r0, [pc, #68]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006fb6:	f001 fae3 	bl	8008580 <HAL_MDMA_ConfigPostRequestMask>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_QSPI_MspInit+0x180>
    {
      Error_Handler();
 8006fc0:	f7ff feec 	bl	8006d9c <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hmdma,hmdma_quadspi_fifo_th);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006fca:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <HAL_QSPI_MspInit+0x1b8>)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6413      	str	r3, [r2, #64]	; 0x40

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 2, 0);
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2102      	movs	r1, #2
 8006fd4:	205c      	movs	r0, #92	; 0x5c
 8006fd6:	f001 f810 	bl	8007ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8006fda:	205c      	movs	r0, #92	; 0x5c
 8006fdc:	f001 f827 	bl	800802e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	3730      	adds	r7, #48	; 0x30
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	52005000 	.word	0x52005000
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	58020400 	.word	0x58020400
 8006ff4:	58021000 	.word	0x58021000
 8006ff8:	58020800 	.word	0x58020800
 8006ffc:	240146a8 	.word	0x240146a8
 8007000:	52000040 	.word	0x52000040

08007004 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007008:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800700a:	4a28      	ldr	r2, [pc, #160]	; (80070ac <MX_SPI2_Init+0xa8>)
 800700c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800700e:	4b26      	ldr	r3, [pc, #152]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007010:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007014:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007018:	2200      	movs	r2, #0
 800701a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800701c:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800701e:	2203      	movs	r2, #3
 8007020:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007024:	2200      	movs	r2, #0
 8007026:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007028:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800702a:	2200      	movs	r2, #0
 800702c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007030:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007034:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007036:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007038:	2200      	movs	r2, #0
 800703a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800703e:	2200      	movs	r2, #0
 8007040:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007042:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007044:	2200      	movs	r2, #0
 8007046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800704a:	2200      	movs	r2, #0
 800704c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007050:	2200      	movs	r2, #0
 8007052:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007054:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800705a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800705e:	2200      	movs	r2, #0
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007064:	2200      	movs	r2, #0
 8007066:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800706a:	2200      	movs	r2, #0
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800706e:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007070:	2200      	movs	r2, #0
 8007072:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007076:	2200      	movs	r2, #0
 8007078:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800707c:	2200      	movs	r2, #0
 800707e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007082:	2200      	movs	r2, #0
 8007084:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007086:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007088:	2200      	movs	r2, #0
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <MX_SPI2_Init+0xa4>)
 800708e:	2200      	movs	r2, #0
 8007090:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007092:	4805      	ldr	r0, [pc, #20]	; (80070a8 <MX_SPI2_Init+0xa4>)
 8007094:	f004 fc3c 	bl	800b910 <HAL_SPI_Init>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800709e:	f7ff fe7d 	bl	8006d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80070a2:	bf00      	nop
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	24014760 	.word	0x24014760
 80070ac:	40003800 	.word	0x40003800

080070b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	; 0x28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b8:	f107 0314 	add.w	r3, r7, #20
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	609a      	str	r2, [r3, #8]
 80070c4:	60da      	str	r2, [r3, #12]
 80070c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a2a      	ldr	r2, [pc, #168]	; (8007178 <HAL_SPI_MspInit+0xc8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d14d      	bne.n	800716e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80070d2:	4b2a      	ldr	r3, [pc, #168]	; (800717c <HAL_SPI_MspInit+0xcc>)
 80070d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070d8:	4a28      	ldr	r2, [pc, #160]	; (800717c <HAL_SPI_MspInit+0xcc>)
 80070da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80070e2:	4b26      	ldr	r3, [pc, #152]	; (800717c <HAL_SPI_MspInit+0xcc>)
 80070e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070f0:	4b22      	ldr	r3, [pc, #136]	; (800717c <HAL_SPI_MspInit+0xcc>)
 80070f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070f6:	4a21      	ldr	r2, [pc, #132]	; (800717c <HAL_SPI_MspInit+0xcc>)
 80070f8:	f043 0304 	orr.w	r3, r3, #4
 80070fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007100:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_SPI_MspInit+0xcc>)
 8007102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710e:	4b1b      	ldr	r3, [pc, #108]	; (800717c <HAL_SPI_MspInit+0xcc>)
 8007110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007114:	4a19      	ldr	r2, [pc, #100]	; (800717c <HAL_SPI_MspInit+0xcc>)
 8007116:	f043 0302 	orr.w	r3, r3, #2
 800711a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800711e:	4b17      	ldr	r3, [pc, #92]	; (800717c <HAL_SPI_MspInit+0xcc>)
 8007120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800712c:	2306      	movs	r3, #6
 800712e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007130:	2302      	movs	r3, #2
 8007132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007134:	2300      	movs	r3, #0
 8007136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007138:	2300      	movs	r3, #0
 800713a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800713c:	2305      	movs	r3, #5
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007140:	f107 0314 	add.w	r3, r7, #20
 8007144:	4619      	mov	r1, r3
 8007146:	480e      	ldr	r0, [pc, #56]	; (8007180 <HAL_SPI_MspInit+0xd0>)
 8007148:	f000 ff8c 	bl	8008064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800714c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007152:	2302      	movs	r3, #2
 8007154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715a:	2300      	movs	r3, #0
 800715c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800715e:	2305      	movs	r3, #5
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007162:	f107 0314 	add.w	r3, r7, #20
 8007166:	4619      	mov	r1, r3
 8007168:	4806      	ldr	r0, [pc, #24]	; (8007184 <HAL_SPI_MspInit+0xd4>)
 800716a:	f000 ff7b 	bl	8008064 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800716e:	bf00      	nop
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40003800 	.word	0x40003800
 800717c:	58024400 	.word	0x58024400
 8007180:	58020800 	.word	0x58020800
 8007184:	58020400 	.word	0x58020400

08007188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <HAL_MspInit+0x30>)
 8007190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007194:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <HAL_MspInit+0x30>)
 8007196:	f043 0302 	orr.w	r3, r3, #2
 800719a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_MspInit+0x30>)
 80071a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	58024400 	.word	0x58024400

080071bc <LL_TIM_ClearFlag_CC1>:
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f06f 0202 	mvn.w	r2, #2
 80071ca:	611a      	str	r2, [r3, #16]
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071e6:	b480      	push	{r7}
 80071e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071ea:	e7fe      	b.n	80071ea <HardFault_Handler+0x4>

080071ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071f0:	e7fe      	b.n	80071f0 <MemManage_Handler+0x4>

080071f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071f2:	b480      	push	{r7}
 80071f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071f6:	e7fe      	b.n	80071f6 <BusFault_Handler+0x4>

080071f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071fc:	e7fe      	b.n	80071fc <UsageFault_Handler+0x4>

080071fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071fe:	b480      	push	{r7}
 8007200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800722c:	f000 fdde 	bl	8007dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007230:	bf00      	nop
 8007232:	bd80      	pop	{r7, pc}

08007234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	++t2;
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <TIM2_IRQHandler+0x1c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3301      	adds	r3, #1
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <TIM2_IRQHandler+0x1c>)
 8007240:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	LL_TIM_ClearFlag_CC1(TIM2);
 8007242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007246:	f7ff ffb9 	bl	80071bc <LL_TIM_ClearFlag_CC1>
  /* USER CODE END TIM2_IRQn 1 */
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	2400f418 	.word	0x2400f418

08007254 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	TUART_CallBack_IRQ(&Thuart3);
 8007268:	4802      	ldr	r0, [pc, #8]	; (8007274 <USART3_IRQHandler+0x10>)
 800726a:	f7fa fb52 	bl	8001912 <TUART_CallBack_IRQ>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800726e:	bf00      	nop
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	2400f468 	.word	0x2400f468

08007278 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	TIM5_CallBack();
 800727c:	f7f9 f8a0 	bl	80003c0 <TIM5_CallBack>
	LL_TIM_ClearFlag_CC1(TIM5);
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <TIM5_IRQHandler+0x14>)
 8007282:	f7ff ff9b 	bl	80071bc <LL_TIM_ClearFlag_CC1>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40000c00 	.word	0x40000c00

08007290 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8007294:	4802      	ldr	r0, [pc, #8]	; (80072a0 <QUADSPI_IRQHandler+0x10>)
 8007296:	f001 fd79 	bl	8008d8c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	24014714 	.word	0x24014714

080072a4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_quadspi_fifo_th);
 80072a8:	4802      	ldr	r0, [pc, #8]	; (80072b4 <MDMA_IRQHandler+0x10>)
 80072aa:	f001 fa63 	bl	8008774 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80072ae:	bf00      	nop
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	240146a8 	.word	0x240146a8

080072b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072c0:	4a14      	ldr	r2, [pc, #80]	; (8007314 <_sbrk+0x5c>)
 80072c2:	4b15      	ldr	r3, [pc, #84]	; (8007318 <_sbrk+0x60>)
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80072cc:	4b13      	ldr	r3, [pc, #76]	; (800731c <_sbrk+0x64>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80072d4:	4b11      	ldr	r3, [pc, #68]	; (800731c <_sbrk+0x64>)
 80072d6:	4a12      	ldr	r2, [pc, #72]	; (8007320 <_sbrk+0x68>)
 80072d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072da:	4b10      	ldr	r3, [pc, #64]	; (800731c <_sbrk+0x64>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4413      	add	r3, r2
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d207      	bcs.n	80072f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80072e8:	f006 fea8 	bl	800e03c <__errno>
 80072ec:	4603      	mov	r3, r0
 80072ee:	220c      	movs	r2, #12
 80072f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	e009      	b.n	800730c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80072f8:	4b08      	ldr	r3, [pc, #32]	; (800731c <_sbrk+0x64>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <_sbrk+0x64>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	4a05      	ldr	r2, [pc, #20]	; (800731c <_sbrk+0x64>)
 8007308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	24080000 	.word	0x24080000
 8007318:	00000400 	.word	0x00000400
 800731c:	2400f41c 	.word	0x2400f41c
 8007320:	24014848 	.word	0x24014848

08007324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007328:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <SystemInit+0xac>)
 800732a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732e:	4a28      	ldr	r2, [pc, #160]	; (80073d0 <SystemInit+0xac>)
 8007330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007338:	4b26      	ldr	r3, [pc, #152]	; (80073d4 <SystemInit+0xb0>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a25      	ldr	r2, [pc, #148]	; (80073d4 <SystemInit+0xb0>)
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007344:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <SystemInit+0xb0>)
 8007346:	2200      	movs	r2, #0
 8007348:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800734a:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <SystemInit+0xb0>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4921      	ldr	r1, [pc, #132]	; (80073d4 <SystemInit+0xb0>)
 8007350:	4b21      	ldr	r3, [pc, #132]	; (80073d8 <SystemInit+0xb4>)
 8007352:	4013      	ands	r3, r2
 8007354:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007356:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <SystemInit+0xb0>)
 8007358:	2200      	movs	r2, #0
 800735a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800735c:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <SystemInit+0xb0>)
 800735e:	2200      	movs	r2, #0
 8007360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <SystemInit+0xb0>)
 8007364:	2200      	movs	r2, #0
 8007366:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <SystemInit+0xb0>)
 800736a:	2200      	movs	r2, #0
 800736c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800736e:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <SystemInit+0xb0>)
 8007370:	2200      	movs	r2, #0
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007374:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <SystemInit+0xb0>)
 8007376:	2200      	movs	r2, #0
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800737a:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <SystemInit+0xb0>)
 800737c:	2200      	movs	r2, #0
 800737e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <SystemInit+0xb0>)
 8007382:	2200      	movs	r2, #0
 8007384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007386:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <SystemInit+0xb0>)
 8007388:	2200      	movs	r2, #0
 800738a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <SystemInit+0xb0>)
 800738e:	2200      	movs	r2, #0
 8007390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <SystemInit+0xb0>)
 8007394:	2200      	movs	r2, #0
 8007396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007398:	4b0e      	ldr	r3, [pc, #56]	; (80073d4 <SystemInit+0xb0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a0d      	ldr	r2, [pc, #52]	; (80073d4 <SystemInit+0xb0>)
 800739e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <SystemInit+0xb0>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80073aa:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <SystemInit+0xb8>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <SystemInit+0xbc>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b6:	d202      	bcs.n	80073be <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <SystemInit+0xc0>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073be:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <SystemInit+0xac>)
 80073c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80073c6:	bf00      	nop
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	e000ed00 	.word	0xe000ed00
 80073d4:	58024400 	.word	0x58024400
 80073d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80073dc:	5c001000 	.word	0x5c001000
 80073e0:	ffff0000 	.word	0xffff0000
 80073e4:	51008108 	.word	0x51008108

080073e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <__NVIC_GetPriorityGrouping+0x18>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	f003 0307 	and.w	r3, r3, #7
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	e000ed00 	.word	0xe000ed00

08007404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800740e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007412:	2b00      	cmp	r3, #0
 8007414:	db0b      	blt.n	800742e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	f003 021f 	and.w	r2, r3, #31
 800741c:	4907      	ldr	r1, [pc, #28]	; (800743c <__NVIC_EnableIRQ+0x38>)
 800741e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	2001      	movs	r0, #1
 8007426:	fa00 f202 	lsl.w	r2, r0, r2
 800742a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	e000e100 	.word	0xe000e100

08007440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800744c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	db0a      	blt.n	800746a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	490c      	ldr	r1, [pc, #48]	; (800748c <__NVIC_SetPriority+0x4c>)
 800745a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800745e:	0112      	lsls	r2, r2, #4
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	440b      	add	r3, r1
 8007464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007468:	e00a      	b.n	8007480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	b2da      	uxtb	r2, r3
 800746e:	4908      	ldr	r1, [pc, #32]	; (8007490 <__NVIC_SetPriority+0x50>)
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	3b04      	subs	r3, #4
 8007478:	0112      	lsls	r2, r2, #4
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	440b      	add	r3, r1
 800747e:	761a      	strb	r2, [r3, #24]
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	e000e100 	.word	0xe000e100
 8007490:	e000ed00 	.word	0xe000ed00

08007494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007494:	b480      	push	{r7}
 8007496:	b089      	sub	sp, #36	; 0x24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f1c3 0307 	rsb	r3, r3, #7
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	bf28      	it	cs
 80074b2:	2304      	movcs	r3, #4
 80074b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	3304      	adds	r3, #4
 80074ba:	2b06      	cmp	r3, #6
 80074bc:	d902      	bls.n	80074c4 <NVIC_EncodePriority+0x30>
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	3b03      	subs	r3, #3
 80074c2:	e000      	b.n	80074c6 <NVIC_EncodePriority+0x32>
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074c8:	f04f 32ff 	mov.w	r2, #4294967295
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43da      	mvns	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	401a      	ands	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	fa01 f303 	lsl.w	r3, r1, r3
 80074e6:	43d9      	mvns	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074ec:	4313      	orrs	r3, r2
         );
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3724      	adds	r7, #36	; 0x24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <LL_TIM_DisableARRPreload>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <LL_TIM_SetClockSource>:
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	4b06      	ldr	r3, [pc, #24]	; (8007544 <LL_TIM_SetClockSource+0x28>)
 800752c:	4013      	ands	r3, r2
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	609a      	str	r2, [r3, #8]
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	fffebff8 	.word	0xfffebff8

08007548 <LL_TIM_SetTriggerOutput>:
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <LL_TIM_DisableMasterSlaveMode>:
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	609a      	str	r2, [r3, #8]
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <LL_APB1_GRP1_EnableClock+0x34>)
 800759a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800759e:	4909      	ldr	r1, [pc, #36]	; (80075c4 <LL_APB1_GRP1_EnableClock+0x34>)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <LL_APB1_GRP1_EnableClock+0x34>)
 80075aa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4013      	ands	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	58024400 	.word	0x58024400

080075c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	605a      	str	r2, [r3, #4]
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80075dc:	2001      	movs	r0, #1
 80075de:	f7ff ffd7 	bl	8007590 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 80075e2:	f7ff ff01 	bl	80073e8 <__NVIC_GetPriorityGrouping>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2200      	movs	r2, #0
 80075ea:	2104      	movs	r1, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff ff51 	bl	8007494 <NVIC_EncodePriority>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4619      	mov	r1, r3
 80075f6:	201c      	movs	r0, #28
 80075f8:	f7ff ff22 	bl	8007440 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80075fc:	201c      	movs	r0, #28
 80075fe:	f7ff ff01 	bl	8007404 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8007602:	23ef      	movs	r3, #239	; 0xef
 8007604:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 99;
 800760a:	2363      	movs	r3, #99	; 0x63
 800760c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	4619      	mov	r1, r3
 8007616:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800761a:	f006 fb33 	bl	800dc84 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800761e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007622:	f7ff ff6a 	bl	80074fa <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8007626:	2100      	movs	r1, #0
 8007628:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800762c:	f7ff ff76 	bl	800751c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8007630:	2100      	movs	r1, #0
 8007632:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007636:	f7ff ff87 	bl	8007548 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800763a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800763e:	f7ff ff96 	bl	800756e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007642:	bf00      	nop
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	60da      	str	r2, [r3, #12]
 800765e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8007660:	2002      	movs	r0, #2
 8007662:	f7ff ff95 	bl	8007590 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8007666:	f7ff febf 	bl	80073e8 <__NVIC_GetPriorityGrouping>
 800766a:	4603      	mov	r3, r0
 800766c:	2200      	movs	r2, #0
 800766e:	2104      	movs	r1, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff ff0f 	bl	8007494 <NVIC_EncodePriority>
 8007676:	4603      	mov	r3, r0
 8007678:	4619      	mov	r1, r3
 800767a:	201d      	movs	r0, #29
 800767c:	f7ff fee0 	bl	8007440 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8007680:	201d      	movs	r0, #29
 8007682:	f7ff febf 	bl	8007404 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8007686:	23ef      	movs	r3, #239	; 0xef
 8007688:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9;
 800768e:	2309      	movs	r3, #9
 8007690:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8007696:	1d3b      	adds	r3, r7, #4
 8007698:	4619      	mov	r1, r3
 800769a:	480a      	ldr	r0, [pc, #40]	; (80076c4 <MX_TIM3_Init+0x78>)
 800769c:	f006 faf2 	bl	800dc84 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80076a0:	4808      	ldr	r0, [pc, #32]	; (80076c4 <MX_TIM3_Init+0x78>)
 80076a2:	f7ff ff2a 	bl	80074fa <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80076a6:	2100      	movs	r1, #0
 80076a8:	4806      	ldr	r0, [pc, #24]	; (80076c4 <MX_TIM3_Init+0x78>)
 80076aa:	f7ff ff37 	bl	800751c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80076ae:	2100      	movs	r1, #0
 80076b0:	4804      	ldr	r0, [pc, #16]	; (80076c4 <MX_TIM3_Init+0x78>)
 80076b2:	f7ff ff49 	bl	8007548 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80076b6:	4803      	ldr	r0, [pc, #12]	; (80076c4 <MX_TIM3_Init+0x78>)
 80076b8:	f7ff ff59 	bl	800756e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80076bc:	bf00      	nop
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40000400 	.word	0x40000400

080076c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08e      	sub	sp, #56	; 0x38
 80076cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	609a      	str	r2, [r3, #8]
 80076da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076dc:	f107 031c 	add.w	r3, r7, #28
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076e8:	463b      	mov	r3, r7
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	605a      	str	r2, [r3, #4]
 80076f0:	609a      	str	r2, [r3, #8]
 80076f2:	60da      	str	r2, [r3, #12]
 80076f4:	611a      	str	r2, [r3, #16]
 80076f6:	615a      	str	r2, [r3, #20]
 80076f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80076fa:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <MX_TIM4_Init+0xe4>)
 80076fc:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <MX_TIM4_Init+0xe8>)
 80076fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8007700:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <MX_TIM4_Init+0xe4>)
 8007702:	2201      	movs	r2, #1
 8007704:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007706:	4b29      	ldr	r3, [pc, #164]	; (80077ac <MX_TIM4_Init+0xe4>)
 8007708:	2200      	movs	r2, #0
 800770a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800770c:	4b27      	ldr	r3, [pc, #156]	; (80077ac <MX_TIM4_Init+0xe4>)
 800770e:	2264      	movs	r2, #100	; 0x64
 8007710:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007712:	4b26      	ldr	r3, [pc, #152]	; (80077ac <MX_TIM4_Init+0xe4>)
 8007714:	2200      	movs	r2, #0
 8007716:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007718:	4b24      	ldr	r3, [pc, #144]	; (80077ac <MX_TIM4_Init+0xe4>)
 800771a:	2200      	movs	r2, #0
 800771c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800771e:	4823      	ldr	r0, [pc, #140]	; (80077ac <MX_TIM4_Init+0xe4>)
 8007720:	f004 fa13 	bl	800bb4a <HAL_TIM_Base_Init>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800772a:	f7ff fb37 	bl	8006d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800772e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007738:	4619      	mov	r1, r3
 800773a:	481c      	ldr	r0, [pc, #112]	; (80077ac <MX_TIM4_Init+0xe4>)
 800773c:	f004 fcd6 	bl	800c0ec <HAL_TIM_ConfigClockSource>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007746:	f7ff fb29 	bl	8006d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800774a:	4818      	ldr	r0, [pc, #96]	; (80077ac <MX_TIM4_Init+0xe4>)
 800774c:	f004 fa54 	bl	800bbf8 <HAL_TIM_PWM_Init>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007756:	f7ff fb21 	bl	8006d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800775a:	2300      	movs	r3, #0
 800775c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007762:	f107 031c 	add.w	r3, r7, #28
 8007766:	4619      	mov	r1, r3
 8007768:	4810      	ldr	r0, [pc, #64]	; (80077ac <MX_TIM4_Init+0xe4>)
 800776a:	f005 f9df 	bl	800cb2c <HAL_TIMEx_MasterConfigSynchronization>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007774:	f7ff fb12 	bl	8006d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007778:	2360      	movs	r3, #96	; 0x60
 800777a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007788:	463b      	mov	r3, r7
 800778a:	2200      	movs	r2, #0
 800778c:	4619      	mov	r1, r3
 800778e:	4807      	ldr	r0, [pc, #28]	; (80077ac <MX_TIM4_Init+0xe4>)
 8007790:	f004 fb9c 	bl	800becc <HAL_TIM_PWM_ConfigChannel>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800779a:	f7ff faff 	bl	8006d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800779e:	4803      	ldr	r0, [pc, #12]	; (80077ac <MX_TIM4_Init+0xe4>)
 80077a0:	f000 f868 	bl	8007874 <HAL_TIM_MspPostInit>

}
 80077a4:	bf00      	nop
 80077a6:	3738      	adds	r7, #56	; 0x38
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	240147e8 	.word	0x240147e8
 80077b0:	40000800 	.word	0x40000800

080077b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80077ba:	1d3b      	adds	r3, r7, #4
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	609a      	str	r2, [r3, #8]
 80077c4:	60da      	str	r2, [r3, #12]
 80077c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80077c8:	2008      	movs	r0, #8
 80077ca:	f7ff fee1 	bl	8007590 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80077ce:	f7ff fe0b 	bl	80073e8 <__NVIC_GetPriorityGrouping>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2200      	movs	r2, #0
 80077d6:	2103      	movs	r1, #3
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fe5b 	bl	8007494 <NVIC_EncodePriority>
 80077de:	4603      	mov	r3, r0
 80077e0:	4619      	mov	r1, r3
 80077e2:	2032      	movs	r0, #50	; 0x32
 80077e4:	f7ff fe2c 	bl	8007440 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80077e8:	2032      	movs	r0, #50	; 0x32
 80077ea:	f7ff fe0b 	bl	8007404 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 80077ee:	23ef      	movs	r3, #239	; 0xef
 80077f0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 200;
 80077f6:	23c8      	movs	r3, #200	; 0xc8
 80077f8:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80077fa:	2300      	movs	r3, #0
 80077fc:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80077fe:	1d3b      	adds	r3, r7, #4
 8007800:	4619      	mov	r1, r3
 8007802:	480a      	ldr	r0, [pc, #40]	; (800782c <MX_TIM5_Init+0x78>)
 8007804:	f006 fa3e 	bl	800dc84 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8007808:	4808      	ldr	r0, [pc, #32]	; (800782c <MX_TIM5_Init+0x78>)
 800780a:	f7ff fe76 	bl	80074fa <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800780e:	2100      	movs	r1, #0
 8007810:	4806      	ldr	r0, [pc, #24]	; (800782c <MX_TIM5_Init+0x78>)
 8007812:	f7ff fe83 	bl	800751c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8007816:	2100      	movs	r1, #0
 8007818:	4804      	ldr	r0, [pc, #16]	; (800782c <MX_TIM5_Init+0x78>)
 800781a:	f7ff fe95 	bl	8007548 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800781e:	4803      	ldr	r0, [pc, #12]	; (800782c <MX_TIM5_Init+0x78>)
 8007820:	f7ff fea5 	bl	800756e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007824:	bf00      	nop
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40000c00 	.word	0x40000c00

08007830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a0b      	ldr	r2, [pc, #44]	; (800786c <HAL_TIM_Base_MspInit+0x3c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d10e      	bne.n	8007860 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007842:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <HAL_TIM_Base_MspInit+0x40>)
 8007844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <HAL_TIM_Base_MspInit+0x40>)
 800784a:	f043 0304 	orr.w	r3, r3, #4
 800784e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <HAL_TIM_Base_MspInit+0x40>)
 8007854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40000800 	.word	0x40000800
 8007870:	58024400 	.word	0x58024400

08007874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	609a      	str	r2, [r3, #8]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a13      	ldr	r2, [pc, #76]	; (80078e0 <HAL_TIM_MspPostInit+0x6c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d11f      	bne.n	80078d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007896:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <HAL_TIM_MspPostInit+0x70>)
 8007898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800789c:	4a11      	ldr	r2, [pc, #68]	; (80078e4 <HAL_TIM_MspPostInit+0x70>)
 800789e:	f043 0308 	orr.w	r3, r3, #8
 80078a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <HAL_TIM_MspPostInit+0x70>)
 80078a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80078b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ba:	2302      	movs	r3, #2
 80078bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078c2:	2300      	movs	r3, #0
 80078c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80078c6:	2302      	movs	r3, #2
 80078c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078ca:	f107 030c 	add.w	r3, r7, #12
 80078ce:	4619      	mov	r1, r3
 80078d0:	4805      	ldr	r0, [pc, #20]	; (80078e8 <HAL_TIM_MspPostInit+0x74>)
 80078d2:	f000 fbc7 	bl	8008064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80078d6:	bf00      	nop
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40000800 	.word	0x40000800
 80078e4:	58024400 	.word	0x58024400
 80078e8:	58020c00 	.word	0x58020c00

080078ec <__NVIC_GetPriorityGrouping>:
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <__NVIC_GetPriorityGrouping+0x18>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	0a1b      	lsrs	r3, r3, #8
 80078f6:	f003 0307 	and.w	r3, r3, #7
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	e000ed00 	.word	0xe000ed00

08007908 <__NVIC_EnableIRQ>:
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007916:	2b00      	cmp	r3, #0
 8007918:	db0b      	blt.n	8007932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800791a:	88fb      	ldrh	r3, [r7, #6]
 800791c:	f003 021f 	and.w	r2, r3, #31
 8007920:	4907      	ldr	r1, [pc, #28]	; (8007940 <__NVIC_EnableIRQ+0x38>)
 8007922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	2001      	movs	r0, #1
 800792a:	fa00 f202 	lsl.w	r2, r0, r2
 800792e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	e000e100 	.word	0xe000e100

08007944 <__NVIC_SetPriority>:
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	db0a      	blt.n	800796e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	b2da      	uxtb	r2, r3
 800795c:	490c      	ldr	r1, [pc, #48]	; (8007990 <__NVIC_SetPriority+0x4c>)
 800795e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007962:	0112      	lsls	r2, r2, #4
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	440b      	add	r3, r1
 8007968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800796c:	e00a      	b.n	8007984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	4908      	ldr	r1, [pc, #32]	; (8007994 <__NVIC_SetPriority+0x50>)
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	3b04      	subs	r3, #4
 800797c:	0112      	lsls	r2, r2, #4
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	440b      	add	r3, r1
 8007982:	761a      	strb	r2, [r3, #24]
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	e000e100 	.word	0xe000e100
 8007994:	e000ed00 	.word	0xe000ed00

08007998 <NVIC_EncodePriority>:
{
 8007998:	b480      	push	{r7}
 800799a:	b089      	sub	sp, #36	; 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f1c3 0307 	rsb	r3, r3, #7
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	bf28      	it	cs
 80079b6:	2304      	movcs	r3, #4
 80079b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3304      	adds	r3, #4
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d902      	bls.n	80079c8 <NVIC_EncodePriority+0x30>
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	3b03      	subs	r3, #3
 80079c6:	e000      	b.n	80079ca <NVIC_EncodePriority+0x32>
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079cc:	f04f 32ff 	mov.w	r2, #4294967295
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43da      	mvns	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	401a      	ands	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079e0:	f04f 31ff 	mov.w	r1, #4294967295
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ea:	43d9      	mvns	r1, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079f0:	4313      	orrs	r3, r2
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3724      	adds	r7, #36	; 0x24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <LL_USART_Enable>:
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f043 0201 	orr.w	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <LL_USART_DisableFIFO>:
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <LL_USART_SetTXFIFOThreshold>:
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	075b      	lsls	r3, r3, #29
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	609a      	str	r2, [r3, #8]
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <LL_USART_SetRXFIFOThreshold>:
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	065b      	lsls	r3, r3, #25
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	609a      	str	r2, [r3, #8]
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <LL_USART_ConfigAsyncMode>:
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	609a      	str	r2, [r3, #8]
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <LL_USART_IsActiveFlag_TEACK>:
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ace:	d101      	bne.n	8007ad4 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <LL_USART_IsActiveFlag_REACK>:
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007af6:	d101      	bne.n	8007afc <LL_USART_IsActiveFlag_REACK+0x1a>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <LL_USART_IsActiveFlag_REACK+0x1c>
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <LL_AHB4_GRP1_EnableClock>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8007b16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007b1a:	4909      	ldr	r1, [pc, #36]	; (8007b40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8007b26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	58024400 	.word	0x58024400

08007b44 <LL_APB1_GRP1_EnableClock>:
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <LL_APB1_GRP1_EnableClock+0x34>)
 8007b4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007b52:	4909      	ldr	r1, [pc, #36]	; (8007b78 <LL_APB1_GRP1_EnableClock+0x34>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8007b5c:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <LL_APB1_GRP1_EnableClock+0x34>)
 8007b5e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4013      	ands	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b68:	68fb      	ldr	r3, [r7, #12]
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400

08007b7c <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b0be      	sub	sp, #248	; 0xf8
 8007b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007b82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007b86:	2220      	movs	r2, #32
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f006 fa80 	bl	800e090 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b90:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	611a      	str	r2, [r3, #16]
 8007ba0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	22bc      	movs	r2, #188	; 0xbc
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f006 fa71 	bl	800e090 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bb6:	1d3b      	adds	r3, r7, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f002 fe05 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 8007bc4:	f7ff f8ea 	bl	8006d9c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8007bc8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007bcc:	f7ff ffba 	bl	8007b44 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8007bd0:	2008      	movs	r0, #8
 8007bd2:	f7ff ff9b 	bl	8007b0c <LL_AHB4_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8007bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007bde:	2302      	movs	r3, #2
 8007be0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007bf6:	2307      	movs	r3, #7
 8007bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bfc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007c00:	4619      	mov	r1, r3
 8007c02:	482a      	ldr	r0, [pc, #168]	; (8007cac <MX_USART3_UART_Init+0x130>)
 8007c04:	f005 f8f4 	bl	800cdf0 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c08:	f7ff fe70 	bl	80078ec <__NVIC_GetPriorityGrouping>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fec0 	bl	8007998 <NVIC_EncodePriority>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	2027      	movs	r0, #39	; 0x27
 8007c1e:	f7ff fe91 	bl	8007944 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8007c22:	2027      	movs	r0, #39	; 0x27
 8007c24:	f7ff fe70 	bl	8007908 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  USART_InitStruct.BaudRate = 9600;
 8007c2e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007c48:	230c      	movs	r3, #12
 8007c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  LL_USART_Init(USART3, &USART_InitStruct);
 8007c5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4813      	ldr	r0, [pc, #76]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c62:	f006 f941 	bl	800dee8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8007c66:	2100      	movs	r1, #0
 8007c68:	4811      	ldr	r0, [pc, #68]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c6a:	f7ff fee8 	bl	8007a3e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8007c6e:	2100      	movs	r1, #0
 8007c70:	480f      	ldr	r0, [pc, #60]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c72:	f7ff fef8 	bl	8007a66 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8007c76:	480e      	ldr	r0, [pc, #56]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c78:	f7ff fed1 	bl	8007a1e <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 8007c7c:	480c      	ldr	r0, [pc, #48]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c7e:	f7ff ff06 	bl	8007a8e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 8007c82:	480b      	ldr	r0, [pc, #44]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c84:	f7ff febb 	bl	80079fe <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8007c88:	bf00      	nop
 8007c8a:	4809      	ldr	r0, [pc, #36]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c8c:	f7ff ff15 	bl	8007aba <LL_USART_IsActiveFlag_TEACK>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f9      	beq.n	8007c8a <MX_USART3_UART_Init+0x10e>
 8007c96:	4806      	ldr	r0, [pc, #24]	; (8007cb0 <MX_USART3_UART_Init+0x134>)
 8007c98:	f7ff ff23 	bl	8007ae2 <LL_USART_IsActiveFlag_REACK>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f3      	beq.n	8007c8a <MX_USART3_UART_Init+0x10e>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	37f8      	adds	r7, #248	; 0xf8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	58020c00 	.word	0x58020c00
 8007cb0:	40004800 	.word	0x40004800

08007cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007cec <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007cb8:	f7ff fb34 	bl	8007324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007cbe:	e003      	b.n	8007cc8 <LoopCopyDataInit>

08007cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8007cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007cc6:	3104      	adds	r1, #4

08007cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007cc8:	480a      	ldr	r0, [pc, #40]	; (8007cf4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8007ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007cd0:	d3f6      	bcc.n	8007cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8007cd4:	e002      	b.n	8007cdc <LoopFillZerobss>

08007cd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007cd8:	f842 3b04 	str.w	r3, [r2], #4

08007cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007cdc:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8007cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ce0:	d3f9      	bcc.n	8007cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007ce2:	f006 f9b1 	bl	800e048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ce6:	f7fe fcdd 	bl	80066a4 <main>
  bx  lr    
 8007cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007cec:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8007cf0:	0800eaa4 	.word	0x0800eaa4
  ldr  r0, =_sdata
 8007cf4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8007cf8:	240091bc 	.word	0x240091bc
  ldr  r2, =_sbss
 8007cfc:	240091bc 	.word	0x240091bc
  ldr  r3, = _ebss
 8007d00:	24014848 	.word	0x24014848

08007d04 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d04:	e7fe      	b.n	8007d04 <ADC3_IRQHandler>
	...

08007d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d0e:	2003      	movs	r0, #3
 8007d10:	f000 f968 	bl	8007fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d14:	f002 fbde 	bl	800a4d4 <HAL_RCC_GetSysClockFreq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <HAL_Init+0x68>)
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	4913      	ldr	r1, [pc, #76]	; (8007d74 <HAL_Init+0x6c>)
 8007d26:	5ccb      	ldrb	r3, [r1, r3]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <HAL_Init+0x68>)
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	4a0e      	ldr	r2, [pc, #56]	; (8007d74 <HAL_Init+0x6c>)
 8007d3c:	5cd3      	ldrb	r3, [r2, r3]
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	fa22 f303 	lsr.w	r3, r2, r3
 8007d48:	4a0b      	ldr	r2, [pc, #44]	; (8007d78 <HAL_Init+0x70>)
 8007d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <HAL_Init+0x74>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d52:	2000      	movs	r0, #0
 8007d54:	f000 f814 	bl	8007d80 <HAL_InitTick>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e002      	b.n	8007d68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007d62:	f7ff fa11 	bl	8007188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	58024400 	.word	0x58024400
 8007d74:	0800ea18 	.word	0x0800ea18
 8007d78:	2400914c 	.word	0x2400914c
 8007d7c:	24009148 	.word	0x24009148

08007d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007d88:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <HAL_InitTick+0x60>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e021      	b.n	8007dd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007d94:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <HAL_InitTick+0x64>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <HAL_InitTick+0x60>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f94d 	bl	800804a <HAL_SYSTICK_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e00e      	b.n	8007dd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b0f      	cmp	r3, #15
 8007dbe:	d80a      	bhi.n	8007dd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	f000 f917 	bl	8007ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007dcc:	4a06      	ldr	r2, [pc, #24]	; (8007de8 <HAL_InitTick+0x68>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e000      	b.n	8007dd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	24009154 	.word	0x24009154
 8007de4:	24009148 	.word	0x24009148
 8007de8:	24009150 	.word	0x24009150

08007dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007df0:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <HAL_IncTick+0x20>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <HAL_IncTick+0x24>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <HAL_IncTick+0x24>)
 8007dfe:	6013      	str	r3, [r2, #0]
}
 8007e00:	bf00      	nop
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	24009154 	.word	0x24009154
 8007e10:	24014834 	.word	0x24014834

08007e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return uwTick;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <HAL_GetTick+0x14>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	24014834 	.word	0x24014834

08007e2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007e30:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <HAL_GetREVID+0x14>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	0c1b      	lsrs	r3, r3, #16
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	5c001000 	.word	0x5c001000

08007e44 <__NVIC_SetPriorityGrouping>:
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <__NVIC_SetPriorityGrouping+0x40>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e60:	4013      	ands	r3, r2
 8007e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <__NVIC_SetPriorityGrouping+0x44>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e72:	4a04      	ldr	r2, [pc, #16]	; (8007e84 <__NVIC_SetPriorityGrouping+0x40>)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	60d3      	str	r3, [r2, #12]
}
 8007e78:	bf00      	nop
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	e000ed00 	.word	0xe000ed00
 8007e88:	05fa0000 	.word	0x05fa0000

08007e8c <__NVIC_GetPriorityGrouping>:
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e90:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	f003 0307 	and.w	r3, r3, #7
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	e000ed00 	.word	0xe000ed00

08007ea8 <__NVIC_EnableIRQ>:
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	db0b      	blt.n	8007ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	f003 021f 	and.w	r2, r3, #31
 8007ec0:	4907      	ldr	r1, [pc, #28]	; (8007ee0 <__NVIC_EnableIRQ+0x38>)
 8007ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	2001      	movs	r0, #1
 8007eca:	fa00 f202 	lsl.w	r2, r0, r2
 8007ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	e000e100 	.word	0xe000e100

08007ee4 <__NVIC_SetPriority>:
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	db0a      	blt.n	8007f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	490c      	ldr	r1, [pc, #48]	; (8007f30 <__NVIC_SetPriority+0x4c>)
 8007efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f02:	0112      	lsls	r2, r2, #4
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	440b      	add	r3, r1
 8007f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f0c:	e00a      	b.n	8007f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4908      	ldr	r1, [pc, #32]	; (8007f34 <__NVIC_SetPriority+0x50>)
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	0112      	lsls	r2, r2, #4
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	440b      	add	r3, r1
 8007f22:	761a      	strb	r2, [r3, #24]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	e000e100 	.word	0xe000e100
 8007f34:	e000ed00 	.word	0xe000ed00

08007f38 <NVIC_EncodePriority>:
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	; 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f1c3 0307 	rsb	r3, r3, #7
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	bf28      	it	cs
 8007f56:	2304      	movcs	r3, #4
 8007f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d902      	bls.n	8007f68 <NVIC_EncodePriority+0x30>
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	3b03      	subs	r3, #3
 8007f66:	e000      	b.n	8007f6a <NVIC_EncodePriority+0x32>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	43da      	mvns	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	401a      	ands	r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f80:	f04f 31ff 	mov.w	r1, #4294967295
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	43d9      	mvns	r1, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f90:	4313      	orrs	r3, r2
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3724      	adds	r7, #36	; 0x24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb0:	d301      	bcc.n	8007fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e00f      	b.n	8007fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fb6:	4a0a      	ldr	r2, [pc, #40]	; (8007fe0 <SysTick_Config+0x40>)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fbe:	210f      	movs	r1, #15
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	f7ff ff8e 	bl	8007ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <SysTick_Config+0x40>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fce:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <SysTick_Config+0x40>)
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	e000e010 	.word	0xe000e010

08007fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff ff29 	bl	8007e44 <__NVIC_SetPriorityGrouping>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	4603      	mov	r3, r0
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
 8008006:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008008:	f7ff ff40 	bl	8007e8c <__NVIC_GetPriorityGrouping>
 800800c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	6978      	ldr	r0, [r7, #20]
 8008014:	f7ff ff90 	bl	8007f38 <NVIC_EncodePriority>
 8008018:	4602      	mov	r2, r0
 800801a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800801e:	4611      	mov	r1, r2
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff5f 	bl	8007ee4 <__NVIC_SetPriority>
}
 8008026:	bf00      	nop
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	4603      	mov	r3, r0
 8008036:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff ff33 	bl	8007ea8 <__NVIC_EnableIRQ>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff ffa4 	bl	8007fa0 <SysTick_Config>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008064:	b480      	push	{r7}
 8008066:	b089      	sub	sp, #36	; 0x24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800806e:	2300      	movs	r3, #0
 8008070:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008072:	4b89      	ldr	r3, [pc, #548]	; (8008298 <HAL_GPIO_Init+0x234>)
 8008074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008076:	e194      	b.n	80083a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	2101      	movs	r1, #1
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	4013      	ands	r3, r2
 8008086:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8186 	beq.w	800839c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d00b      	beq.n	80080b0 <HAL_GPIO_Init+0x4c>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d007      	beq.n	80080b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080a4:	2b11      	cmp	r3, #17
 80080a6:	d003      	beq.n	80080b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	2b12      	cmp	r3, #18
 80080ae:	d130      	bne.n	8008112 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	2203      	movs	r2, #3
 80080bc:	fa02 f303 	lsl.w	r3, r2, r3
 80080c0:	43db      	mvns	r3, r3
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	4013      	ands	r3, r2
 80080c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080e6:	2201      	movs	r2, #1
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	43db      	mvns	r3, r3
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	4013      	ands	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	091b      	lsrs	r3, r3, #4
 80080fc:	f003 0201 	and.w	r2, r3, #1
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	4313      	orrs	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	2203      	movs	r2, #3
 800811e:	fa02 f303 	lsl.w	r3, r2, r3
 8008122:	43db      	mvns	r3, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4013      	ands	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4313      	orrs	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d003      	beq.n	8008152 <HAL_GPIO_Init+0xee>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b12      	cmp	r3, #18
 8008150:	d123      	bne.n	800819a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	08da      	lsrs	r2, r3, #3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3208      	adds	r2, #8
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	220f      	movs	r2, #15
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43db      	mvns	r3, r3
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	4013      	ands	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	4313      	orrs	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	08da      	lsrs	r2, r3, #3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3208      	adds	r2, #8
 8008194:	69b9      	ldr	r1, [r7, #24]
 8008196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	2203      	movs	r2, #3
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f003 0203 	and.w	r2, r3, #3
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80e0 	beq.w	800839c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081dc:	4b2f      	ldr	r3, [pc, #188]	; (800829c <HAL_GPIO_Init+0x238>)
 80081de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081e2:	4a2e      	ldr	r2, [pc, #184]	; (800829c <HAL_GPIO_Init+0x238>)
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80081ec:	4b2b      	ldr	r3, [pc, #172]	; (800829c <HAL_GPIO_Init+0x238>)
 80081ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081fa:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <HAL_GPIO_Init+0x23c>)
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	089b      	lsrs	r3, r3, #2
 8008200:	3302      	adds	r3, #2
 8008202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	220f      	movs	r2, #15
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43db      	mvns	r3, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4013      	ands	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <HAL_GPIO_Init+0x240>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d052      	beq.n	80082cc <HAL_GPIO_Init+0x268>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1f      	ldr	r2, [pc, #124]	; (80082a8 <HAL_GPIO_Init+0x244>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d031      	beq.n	8008292 <HAL_GPIO_Init+0x22e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <HAL_GPIO_Init+0x248>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d02b      	beq.n	800828e <HAL_GPIO_Init+0x22a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <HAL_GPIO_Init+0x24c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d025      	beq.n	800828a <HAL_GPIO_Init+0x226>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <HAL_GPIO_Init+0x250>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01f      	beq.n	8008286 <HAL_GPIO_Init+0x222>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <HAL_GPIO_Init+0x254>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d019      	beq.n	8008282 <HAL_GPIO_Init+0x21e>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <HAL_GPIO_Init+0x258>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d013      	beq.n	800827e <HAL_GPIO_Init+0x21a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <HAL_GPIO_Init+0x25c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00d      	beq.n	800827a <HAL_GPIO_Init+0x216>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <HAL_GPIO_Init+0x260>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <HAL_GPIO_Init+0x212>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <HAL_GPIO_Init+0x264>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d101      	bne.n	8008272 <HAL_GPIO_Init+0x20e>
 800826e:	2309      	movs	r3, #9
 8008270:	e02d      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008272:	230a      	movs	r3, #10
 8008274:	e02b      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008276:	2308      	movs	r3, #8
 8008278:	e029      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800827a:	2307      	movs	r3, #7
 800827c:	e027      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800827e:	2306      	movs	r3, #6
 8008280:	e025      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008282:	2305      	movs	r3, #5
 8008284:	e023      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008286:	2304      	movs	r3, #4
 8008288:	e021      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800828a:	2303      	movs	r3, #3
 800828c:	e01f      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800828e:	2302      	movs	r3, #2
 8008290:	e01d      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008292:	2301      	movs	r3, #1
 8008294:	e01b      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008296:	bf00      	nop
 8008298:	58000080 	.word	0x58000080
 800829c:	58024400 	.word	0x58024400
 80082a0:	58000400 	.word	0x58000400
 80082a4:	58020000 	.word	0x58020000
 80082a8:	58020400 	.word	0x58020400
 80082ac:	58020800 	.word	0x58020800
 80082b0:	58020c00 	.word	0x58020c00
 80082b4:	58021000 	.word	0x58021000
 80082b8:	58021400 	.word	0x58021400
 80082bc:	58021800 	.word	0x58021800
 80082c0:	58021c00 	.word	0x58021c00
 80082c4:	58022000 	.word	0x58022000
 80082c8:	58022400 	.word	0x58022400
 80082cc:	2300      	movs	r3, #0
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	f002 0203 	and.w	r2, r2, #3
 80082d4:	0092      	lsls	r2, r2, #2
 80082d6:	4093      	lsls	r3, r2
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	4313      	orrs	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082de:	4938      	ldr	r1, [pc, #224]	; (80083c0 <HAL_GPIO_Init+0x35c>)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	089b      	lsrs	r3, r3, #2
 80082e4:	3302      	adds	r3, #2
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	43db      	mvns	r3, r3
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	4013      	ands	r3, r2
 80082fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	43db      	mvns	r3, r3
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	4013      	ands	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	43db      	mvns	r3, r3
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	4013      	ands	r3, r2
 8008350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800836e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	43db      	mvns	r3, r3
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	4013      	ands	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	3301      	adds	r3, #1
 80083a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f47f ae63 	bne.w	8008078 <HAL_GPIO_Init+0x14>
  }
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	3724      	adds	r7, #36	; 0x24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	58000400 	.word	0x58000400

080083c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	807b      	strh	r3, [r7, #2]
 80083d0:	4613      	mov	r3, r2
 80083d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083d4:	787b      	ldrb	r3, [r7, #1]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083da:	887a      	ldrh	r2, [r7, #2]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80083e0:	e003      	b.n	80083ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80083e2:	887b      	ldrh	r3, [r7, #2]
 80083e4:	041a      	lsls	r2, r3, #16
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	619a      	str	r2, [r3, #24]
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008408:	887a      	ldrh	r2, [r7, #2]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4013      	ands	r3, r2
 800840e:	041a      	lsls	r2, r3, #16
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	43d9      	mvns	r1, r3
 8008414:	887b      	ldrh	r3, [r7, #2]
 8008416:	400b      	ands	r3, r1
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	619a      	str	r2, [r3, #24]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e041      	b.n	80084c0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008444:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f245 5255 	movw	r2, #21845	; 0x5555
 800844e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6852      	ldr	r2, [r2, #4]
 8008458:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6892      	ldr	r2, [r2, #8]
 8008462:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008464:	f7ff fcd6 	bl	8007e14 <HAL_GetTick>
 8008468:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800846a:	e00f      	b.n	800848c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800846c:	f7ff fcd2 	bl	8007e14 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b30      	cmp	r3, #48	; 0x30
 8008478:	d908      	bls.n	800848c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e019      	b.n	80084c0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e8      	bne.n	800846c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d005      	beq.n	80084b4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	68d2      	ldr	r2, [r2, #12]
 80084b0:	611a      	str	r2, [r3, #16]
 80084b2:	e004      	b.n	80084be <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80084bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80084d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084f0:	f7ff fc90 	bl	8007e14 <HAL_GetTick>
 80084f4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e03b      	b.n	8008578 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008520:	e00f      	b.n	8008542 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008522:	f7ff fc77 	bl	8007e14 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b05      	cmp	r3, #5
 800852e:	d908      	bls.n	8008542 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2240      	movs	r2, #64	; 0x40
 8008534:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2203      	movs	r2, #3
 800853a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e01a      	b.n	8008578 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e8      	bne.n	8008522 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fad5 	bl	8008b00 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e03e      	b.n	8008618 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e037      	b.n	8008618 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d126      	bne.n	800860a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d11c      	bne.n	8008604 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d108      	bne.n	80085f2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80085ee:	611a      	str	r2, [r3, #16]
 80085f0:	e00d      	b.n	800860e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008600:	611a      	str	r2, [r3, #16]
 8008602:	e004      	b.n	800860e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]
 8008608:	e001      	b.n	800860e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
}
 8008618:	4618      	mov	r0, r3
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af02      	add	r7, sp, #8
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e070      	b.n	800871e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_MDMA_Start_IT+0x26>
 8008646:	2302      	movs	r3, #2
 8008648:	e069      	b.n	800871e <HAL_MDMA_Start_IT+0xfa>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d158      	bne.n	8008710 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2202      	movs	r2, #2
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f9ca 	bl	8008a20 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0206 	orr.w	r2, r2, #6
 800869a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0210 	orr.w	r2, r2, #16
 80086b2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0208 	orr.w	r2, r2, #8
 80086ca:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0220 	orr.w	r2, r2, #32
 80086e2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0201 	orr.w	r2, r2, #1
 80086f2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fc:	d10e      	bne.n	800871c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800870c:	60da      	str	r2, [r3, #12]
 800870e:	e005      	b.n	800871c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 8008718:	2302      	movs	r3, #2
 800871a:	e000      	b.n	800871e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e017      	b.n	8008768 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b02      	cmp	r3, #2
 8008742:	d004      	beq.n	800874e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2280      	movs	r2, #128	; 0x80
 8008748:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e00c      	b.n	8008768 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2204      	movs	r2, #4
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0201 	bic.w	r2, r2, #1
 8008764:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008780:	4b9a      	ldr	r3, [pc, #616]	; (80089ec <HAL_MDMA_IRQHandler+0x278>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a9a      	ldr	r2, [pc, #616]	; (80089f0 <HAL_MDMA_IRQHandler+0x27c>)
 8008786:	fba2 2303 	umull	r2, r3, r2, r3
 800878a:	0a9b      	lsrs	r3, r3, #10
 800878c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	4b97      	ldr	r3, [pc, #604]	; (80089f4 <HAL_MDMA_IRQHandler+0x280>)
 8008796:	4413      	add	r3, r2
 8008798:	099b      	lsrs	r3, r3, #6
 800879a:	f003 031f 	and.w	r3, r3, #31
 800879e:	2201      	movs	r2, #1
 80087a0:	fa02 f303 	lsl.w	r3, r2, r3
 80087a4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80087a6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	4013      	ands	r3, r2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 812e 	beq.w	8008a12 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d054      	beq.n	800886e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04d      	beq.n	800886e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0202 	bic.w	r2, r2, #2
 80087e0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087f8:	f043 0201 	orr.w	r2, r3, #1
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	669a      	str	r2, [r3, #104]	; 0x68
 8008800:	e005      	b.n	800880e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008806:	f043 0202 	orr.w	r2, r3, #2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800881c:	f043 0204 	orr.w	r2, r3, #4
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008832:	f043 0208 	orr.w	r2, r3, #8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008848:	f043 0210 	orr.w	r2, r3, #16
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800885e:	f043 0220 	orr.w	r2, r3, #32
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2201      	movs	r2, #1
 800886c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b00      	cmp	r3, #0
 800887a:	d012      	beq.n	80088a2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2210      	movs	r2, #16
 8008890:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d012      	beq.n	80088d6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2208      	movs	r2, #8
 80088c4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d012      	beq.n	800890a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0308 	and.w	r3, r3, #8
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2204      	movs	r2, #4
 80088f8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d039      	beq.n	800898c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d032      	beq.n	800898c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8008934:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b04      	cmp	r3, #4
 8008940:	d110      	bne.n	8008964 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008956:	2b00      	cmp	r3, #0
 8008958:	d05d      	beq.n	8008a16 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3
        }
        return;
 8008962:	e058      	b.n	8008a16 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2202      	movs	r2, #2
 800896a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008990:	2b00      	cmp	r3, #0
 8008992:	d041      	beq.n	8008a18 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2204      	movs	r2, #4
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0201 	bic.w	r2, r2, #1
 80089aa:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3301      	adds	r3, #1
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d307      	bcc.n	80089c8 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f2      	bne.n	80089ac <HAL_MDMA_IRQHandler+0x238>
 80089c6:	e000      	b.n	80089ca <HAL_MDMA_IRQHandler+0x256>
        break;
 80089c8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2203      	movs	r2, #3
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089e8:	e00a      	b.n	8008a00 <HAL_MDMA_IRQHandler+0x28c>
 80089ea:	bf00      	nop
 80089ec:	24009148 	.word	0x24009148
 80089f0:	1b4e81b5 	.word	0x1b4e81b5
 80089f4:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d007      	beq.n	8008a18 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
 8008a10:	e002      	b.n	8008a18 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8008a12:	bf00      	nop
 8008a14:	e000      	b.n	8008a18 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8008a16:	bf00      	nop
    }
  }
}
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop

08008a20 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695a      	ldr	r2, [r3, #20]
 8008a34:	4b31      	ldr	r3, [pc, #196]	; (8008afc <MDMA_SetConfig+0xdc>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	430b      	orrs	r3, r1
 8008a44:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	051a      	lsls	r2, r3, #20
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	221f      	movs	r2, #31
 8008a64:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008a7c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a84:	d002      	beq.n	8008a8c <MDMA_SetConfig+0x6c>
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d108      	bne.n	8008a9e <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a9c:	e007      	b.n	8008aae <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ab4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abc:	d002      	beq.n	8008ac4 <MDMA_SetConfig+0xa4>
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ad4:	e007      	b.n	8008ae6 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	fffe0000 	.word	0xfffe0000

08008b00 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68d9      	ldr	r1, [r3, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	695a      	ldr	r2, [r3, #20]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b26:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008b32:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008b3e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	3b01      	subs	r3, #1
 8008b46:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008b48:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008b54:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b56:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b60:	d107      	bne.n	8008b72 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008b70:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	da11      	bge.n	8008ba6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008b90:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	425b      	negs	r3, r3
 8008b98:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	b292      	uxth	r2, r2
 8008ba2:	621a      	str	r2, [r3, #32]
 8008ba4:	e006      	b.n	8008bb4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	b292      	uxth	r2, r2
 8008bb2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	da15      	bge.n	8008be8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695a      	ldr	r2, [r3, #20]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008bca:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	425b      	negs	r3, r3
 8008bd2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a19      	ldr	r1, [r3, #32]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	041a      	lsls	r2, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	621a      	str	r2, [r3, #32]
 8008be6:	e009      	b.n	8008bfc <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6a19      	ldr	r1, [r3, #32]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	041a      	lsls	r2, r3, #16
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c04:	d006      	beq.n	8008c14 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	629a      	str	r2, [r3, #40]	; 0x28
 8008c12:	e003      	b.n	8008c1c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2200      	movs	r2, #0
 8008c22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c38:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d00a      	beq.n	8008c5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c44:	4b16      	ldr	r3, [pc, #88]	; (8008ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d001      	beq.n	8008c56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e01f      	b.n	8008c96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e01d      	b.n	8008c96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c5a:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f023 0207 	bic.w	r2, r3, #7
 8008c62:	490f      	ldr	r1, [pc, #60]	; (8008ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c6a:	f7ff f8d3 	bl	8007e14 <HAL_GetTick>
 8008c6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c70:	e009      	b.n	8008c86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c72:	f7ff f8cf 	bl	8007e14 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c80:	d901      	bls.n	8008c86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e007      	b.n	8008c96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c92:	d1ee      	bne.n	8008c72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	58024800 	.word	0x58024800

08008ca4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008cac:	f7ff f8b2 	bl	8007e14 <HAL_GetTick>
 8008cb0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e05f      	b.n	8008d7c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d107      	bne.n	8008cd8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7fe f8bb 	bl	8006e44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008cce:	f241 3188 	movw	r1, #5000	; 0x1388
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc00 	bl	80094d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	021a      	lsls	r2, r3, #8
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2120      	movs	r1, #32
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fc65 	bl	80095ce <QSPI_WaitFlagStateUntilTimeout>
 8008d04:	4603      	mov	r3, r0
 8008d06:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d135      	bne.n	8008d7a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	4b1b      	ldr	r3, [pc, #108]	; (8008d84 <HAL_QSPI_Init+0xe0>)
 8008d16:	4013      	ands	r3, r2
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	0611      	lsls	r1, r2, #24
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	68d2      	ldr	r2, [r2, #12]
 8008d22:	4311      	orrs	r1, r2
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	69d2      	ldr	r2, [r2, #28]
 8008d28:	4311      	orrs	r1, r2
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6a12      	ldr	r2, [r2, #32]
 8008d2e:	4311      	orrs	r1, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <HAL_QSPI_Init+0xe4>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	6912      	ldr	r2, [r2, #16]
 8008d46:	0411      	lsls	r1, r2, #16
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6952      	ldr	r2, [r2, #20]
 8008d4c:	4311      	orrs	r1, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6992      	ldr	r2, [r2, #24]
 8008d52:	4311      	orrs	r1, r2
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0201 	orr.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	00ffff2f 	.word	0x00ffff2f
 8008d88:	ffe0f8fe 	.word	0xffe0f8fe

08008d8c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d064      	beq.n	8008e78 <HAL_QSPI_IRQHandler+0xec>
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d05f      	beq.n	8008e78 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3320      	adds	r3, #32
 8008dbe:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b12      	cmp	r3, #18
 8008dca:	d125      	bne.n	8008e18 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008dcc:	e01c      	b.n	8008e08 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	781a      	ldrb	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	1e5a      	subs	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8008df4:	e008      	b.n	8008e08 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e04:	601a      	str	r2, [r3, #0]
          break;
 8008e06:	e033      	b.n	8008e70 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1db      	bne.n	8008dce <HAL_QSPI_IRQHandler+0x42>
 8008e16:	e02b      	b.n	8008e70 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b22      	cmp	r3, #34	; 0x22
 8008e22:	d125      	bne.n	8008e70 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008e24:	e01d      	b.n	8008e62 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d010      	beq.n	8008e50 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	7812      	ldrb	r2, [r2, #0]
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	1e5a      	subs	r2, r3, #1
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e4e:	e008      	b.n	8008e62 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e5e:	601a      	str	r2, [r3, #0]
          break;
 8008e60:	e006      	b.n	8008e70 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1da      	bne.n	8008e26 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fab7 	bl	80093e4 <HAL_QSPI_FifoThresholdCallback>
 8008e76:	e13c      	b.n	80090f2 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80b0 	beq.w	8008fe4 <HAL_QSPI_IRQHandler+0x258>
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 80aa 	beq.w	8008fe4 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2202      	movs	r2, #2
 8008e96:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008ea6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b12      	cmp	r3, #18
 8008eb2:	d120      	bne.n	8008ef6 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0204 	bic.w	r2, r2, #4
 8008ed0:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0201 	bic.w	r2, r2, #1
 8008ee4:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7f7 ff3a 	bl	8000d68 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008ef4:	e0fa      	b.n	80090ec <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b22      	cmp	r3, #34	; 0x22
 8008f00:	d143      	bne.n	8008f8a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d012      	beq.n	8008f36 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0204 	bic.w	r2, r2, #4
 8008f1e:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
 8008f32:	60da      	str	r2, [r3, #12]
 8008f34:	e021      	b.n	8008f7a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3320      	adds	r3, #32
 8008f3c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008f3e:	e013      	b.n	8008f68 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d017      	beq.n	8008f78 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	7812      	ldrb	r2, [r2, #0]
 8008f50:	b2d2      	uxtb	r2, r2
 8008f52:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f62:	1e5a      	subs	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e4      	bne.n	8008f40 <HAL_QSPI_IRQHandler+0x1b4>
 8008f76:	e000      	b.n	8008f7a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8008f78:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa24 	bl	80093d0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008f88:	e0b0      	b.n	80090ec <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d107      	bne.n	8008fa6 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa0c 	bl	80093bc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008fa4:	e0a2      	b.n	80090ec <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	f040 809c 	bne.w	80090ec <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008fc2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9e7 	bl	80093a8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008fda:	e087      	b.n	80090ec <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9d9 	bl	8009394 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008fe2:	e083      	b.n	80090ec <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01f      	beq.n	800902e <HAL_QSPI_IRQHandler+0x2a2>
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01a      	beq.n	800902e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800901c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f9e6 	bl	80093f8 <HAL_QSPI_StatusMatchCallback>
 800902c:	e061      	b.n	80090f2 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d047      	beq.n	80090c8 <HAL_QSPI_IRQHandler+0x33c>
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d042      	beq.n	80090c8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009058:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	f043 0202 	orr.w	r2, r3, #2
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d021      	beq.n	80090b8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0204 	bic.w	r2, r2, #4
 8009082:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	4a1c      	ldr	r2, [pc, #112]	; (80090fc <HAL_QSPI_IRQHandler+0x370>)
 800908a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fb48 	bl	8008726 <HAL_MDMA_Abort_IT>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d029      	beq.n	80090f0 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a0:	f043 0204 	orr.w	r2, r3, #4
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f96f 	bl	8009394 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80090b6:	e01b      	b.n	80090f0 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f967 	bl	8009394 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80090c6:	e013      	b.n	80090f0 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f003 0310 	and.w	r3, r3, #16
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00f      	beq.n	80090f2 <HAL_QSPI_IRQHandler+0x366>
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2210      	movs	r2, #16
 80090e2:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f991 	bl	800940c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80090ea:	e002      	b.n	80090f2 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80090ec:	bf00      	nop
 80090ee:	e000      	b.n	80090f2 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80090f0:	bf00      	nop
}
 80090f2:	bf00      	nop
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	08009569 	.word	0x08009569

08009100 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800910c:	f7fe fe82 	bl	8007e14 <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_QSPI_Command+0x22>
 800911e:	2302      	movs	r3, #2
 8009120:	e048      	b.n	80091b4 <HAL_QSPI_Command+0xb4>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b01      	cmp	r3, #1
 8009134:	d137      	bne.n	80091a6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2200      	movs	r2, #0
 800914c:	2120      	movs	r1, #32
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 fa3d 	bl	80095ce <QSPI_WaitFlagStateUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d125      	bne.n	80091aa <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800915e:	2200      	movs	r2, #0
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fa6a 	bl	800963c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d115      	bne.n	800919c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2201      	movs	r2, #1
 8009178:	2102      	movs	r1, #2
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 fa27 	bl	80095ce <QSPI_WaitFlagStateUntilTimeout>
 8009180:	4603      	mov	r3, r0
 8009182:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10f      	bne.n	80091aa <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2202      	movs	r2, #2
 8009190:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800919a:	e006      	b.n	80091aa <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091a4:	e001      	b.n	80091aa <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80091a6:	2302      	movs	r3, #2
 80091a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_QSPI_Transmit_DMA>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b087      	sub	sp, #28
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	3301      	adds	r3, #1
 80091d2:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_QSPI_Transmit_DMA+0x28>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e0cb      	b.n	800937c <HAL_QSPI_Transmit_DMA+0x1c0>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	f040 80ba 	bne.w	800936e <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80a6 	beq.w	8009354 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2212      	movs	r2, #18
 8009212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2203      	movs	r2, #3
 800921c:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695a      	ldr	r2, [r3, #20]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800923a:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	4a50      	ldr	r2, [pc, #320]	; (8009384 <HAL_QSPI_Transmit_DMA+0x1c8>)
 8009242:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009248:	4a4f      	ldr	r2, [pc, #316]	; (8009388 <HAL_QSPI_Transmit_DMA+0x1cc>)
 800924a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009250:	2200      	movs	r2, #0
 8009252:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6919      	ldr	r1, [r3, #16]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b4a      	ldr	r3, [pc, #296]	; (800938c <HAL_QSPI_Transmit_DMA+0x1d0>)
 8009264:	400b      	ands	r3, r1
 8009266:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10c      	bne.n	800928c <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	4b45      	ldr	r3, [pc, #276]	; (8009390 <HAL_QSPI_Transmit_DMA+0x1d4>)
 800927c:	4013      	ands	r3, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	f043 0302 	orr.w	r3, r3, #2
 8009288:	6113      	str	r3, [r2, #16]
 800928a:	e02c      	b.n	80092e6 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b10      	cmp	r3, #16
 8009294:	d10c      	bne.n	80092b0 <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691a      	ldr	r2, [r3, #16]
 800929e:	4b3c      	ldr	r3, [pc, #240]	; (8009390 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80092a6:	6812      	ldr	r2, [r2, #0]
 80092a8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80092ac:	6113      	str	r3, [r2, #16]
 80092ae:	e01a      	b.n	80092e6 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d10d      	bne.n	80092d6 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	4a33      	ldr	r2, [pc, #204]	; (8009390 <HAL_QSPI_Transmit_DMA+0x1d4>)
 80092c4:	401a      	ands	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	f240 2302 	movw	r3, #514	; 0x202
 80092d0:	4313      	orrs	r3, r2
 80092d2:	610b      	str	r3, [r1, #16]
 80092d4:	e007      	b.n	80092e6 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092da:	f043 0204 	orr.w	r2, r3, #4
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3320      	adds	r3, #32
 80092f2:	461c      	mov	r4, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	2201      	movs	r2, #1
 80092fa:	9200      	str	r2, [sp, #0]
 80092fc:	4622      	mov	r2, r4
 80092fe:	f7ff f991 	bl	8008624 <HAL_MDMA_Start_IT>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d114      	bne.n	8009332 <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800931e:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0204 	orr.w	r2, r2, #4
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e023      	b.n	800937a <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933a:	f043 0204 	orr.w	r2, r3, #4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009352:	e012      	b.n	800937a <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009358:	f043 0208 	orr.w	r2, r3, #8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800936c:	e005      	b.n	800937a <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
 800936e:	2302      	movs	r3, #2
 8009370:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	bd90      	pop	{r4, r7, pc}
 8009384:	080094f5 	.word	0x080094f5
 8009388:	08009525 	.word	0x08009525
 800938c:	fffff3f3 	.word	0xfffff3f3
 8009390:	fffffcfc 	.word	0xfffffcfc

08009394 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d046      	beq.n	80094ca <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2208      	movs	r2, #8
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800945a:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d01b      	beq.n	80094a2 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 0204 	bic.w	r2, r2, #4
 8009478:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947e:	4a15      	ldr	r2, [pc, #84]	; (80094d4 <HAL_QSPI_Abort_IT+0xb4>)
 8009480:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff f94d 	bl	8008726 <HAL_MDMA_Abort_IT>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d01b      	beq.n	80094ca <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ff84 	bl	80093a8 <HAL_QSPI_AbortCpltCallback>
 80094a0:	e013      	b.n	80094ca <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2202      	movs	r2, #2
 80094a8:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094b8:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f042 0202 	orr.w	r2, r2, #2
 80094c8:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	08009569 	.word	0x08009569

080094d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009516:	601a      	str	r2, [r3, #0]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009530:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009542:	f043 0204 	orr.w	r2, r3, #4
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0204 	bic.w	r2, r2, #4
 8009558:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff ff60 	bl	8009420 <HAL_QSPI_Abort_IT>

}
 8009560:	bf00      	nop
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b08      	cmp	r3, #8
 800958c:	d114      	bne.n	80095b8 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2202      	movs	r2, #2
 8009594:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80095a4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0202 	orr.w	r2, r2, #2
 80095b4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80095b6:	e006      	b.n	80095c6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fee7 	bl	8009394 <HAL_QSPI_ErrorCallback>
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	4613      	mov	r3, r2
 80095dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80095de:	e01a      	b.n	8009616 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d016      	beq.n	8009616 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095e8:	f7fe fc14 	bl	8007e14 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d302      	bcc.n	80095fe <QSPI_WaitFlagStateUntilTimeout+0x30>
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10b      	bne.n	8009616 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2204      	movs	r2, #4
 8009602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960a:	f043 0201 	orr.w	r2, r3, #1
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e00e      	b.n	8009634 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	2b00      	cmp	r3, #0
 8009622:	bf14      	ite	ne
 8009624:	2301      	movne	r3, #1
 8009626:	2300      	moveq	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	429a      	cmp	r2, r3
 8009630:	d1d6      	bne.n	80095e0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <QSPI_Config+0x28>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009656:	d005      	beq.n	8009664 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3a01      	subs	r2, #1
 8009662:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80b9 	beq.w	80097e0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d05f      	beq.n	8009736 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	6892      	ldr	r2, [r2, #8]
 800967e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d031      	beq.n	80096ec <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009690:	431a      	orrs	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009696:	431a      	orrs	r2, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	431a      	orrs	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	049b      	lsls	r3, r3, #18
 80096a4:	431a      	orrs	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	431a      	orrs	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	431a      	orrs	r2, r3
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	431a      	orrs	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	ea42 0103 	orr.w	r1, r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80096dc:	f000 812e 	beq.w	800993c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	6852      	ldr	r2, [r2, #4]
 80096e8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80096ea:	e127      	b.n	800993c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f4:	431a      	orrs	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	431a      	orrs	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	431a      	orrs	r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	049b      	lsls	r3, r3, #18
 8009708:	431a      	orrs	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	431a      	orrs	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	431a      	orrs	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	431a      	orrs	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	431a      	orrs	r2, r3
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	ea42 0103 	orr.w	r1, r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	430a      	orrs	r2, r1
 8009732:	615a      	str	r2, [r3, #20]
}
 8009734:	e102      	b.n	800993c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d02e      	beq.n	800979c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	431a      	orrs	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	431a      	orrs	r2, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	431a      	orrs	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	049b      	lsls	r3, r3, #18
 800975a:	431a      	orrs	r2, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	431a      	orrs	r2, r3
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	431a      	orrs	r2, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	431a      	orrs	r2, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	431a      	orrs	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	ea42 0103 	orr.w	r1, r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	430a      	orrs	r2, r1
 8009784:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800978c:	f000 80d6 	beq.w	800993c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	6852      	ldr	r2, [r2, #4]
 8009798:	619a      	str	r2, [r3, #24]
}
 800979a:	e0cf      	b.n	800993c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a4:	431a      	orrs	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097aa:	431a      	orrs	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	431a      	orrs	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	049b      	lsls	r3, r3, #18
 80097b8:	431a      	orrs	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	431a      	orrs	r2, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	431a      	orrs	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	ea42 0103 	orr.w	r1, r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	430a      	orrs	r2, r1
 80097dc:	615a      	str	r2, [r3, #20]
}
 80097de:	e0ad      	b.n	800993c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d058      	beq.n	800989a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	6892      	ldr	r2, [r2, #8]
 80097f0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d02d      	beq.n	8009856 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009802:	431a      	orrs	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009808:	431a      	orrs	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	431a      	orrs	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	049b      	lsls	r3, r3, #18
 8009816:	431a      	orrs	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	431a      	orrs	r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	431a      	orrs	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	431a      	orrs	r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	431a      	orrs	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	ea42 0103 	orr.w	r1, r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	430a      	orrs	r2, r1
 8009840:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009848:	d078      	beq.n	800993c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	6852      	ldr	r2, [r2, #4]
 8009852:	619a      	str	r2, [r3, #24]
}
 8009854:	e072      	b.n	800993c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985e:	431a      	orrs	r2, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	431a      	orrs	r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	431a      	orrs	r2, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	049b      	lsls	r3, r3, #18
 8009872:	431a      	orrs	r2, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	431a      	orrs	r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	431a      	orrs	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	431a      	orrs	r2, r3
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	ea42 0103 	orr.w	r1, r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	430a      	orrs	r2, r1
 8009896:	615a      	str	r2, [r3, #20]
}
 8009898:	e050      	b.n	800993c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d02a      	beq.n	80098f8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	431a      	orrs	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b0:	431a      	orrs	r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	431a      	orrs	r2, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	049b      	lsls	r3, r3, #18
 80098be:	431a      	orrs	r2, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	ea42 0103 	orr.w	r1, r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80098ea:	d027      	beq.n	800993c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	619a      	str	r2, [r3, #24]
}
 80098f6:	e021      	b.n	800993c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01d      	beq.n	800993c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	431a      	orrs	r2, r3
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	431a      	orrs	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	431a      	orrs	r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	049b      	lsls	r3, r3, #18
 800991c:	431a      	orrs	r2, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	431a      	orrs	r2, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	431a      	orrs	r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	ea42 0103 	orr.w	r1, r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	430a      	orrs	r2, r1
 800993a:	615a      	str	r2, [r3, #20]
}
 800993c:	bf00      	nop
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08c      	sub	sp, #48	; 0x30
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e3ff      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 8087 	beq.w	8009a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009968:	4b99      	ldr	r3, [pc, #612]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009972:	4b97      	ldr	r3, [pc, #604]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	2b10      	cmp	r3, #16
 800997c:	d007      	beq.n	800998e <HAL_RCC_OscConfig+0x46>
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	2b18      	cmp	r3, #24
 8009982:	d110      	bne.n	80099a6 <HAL_RCC_OscConfig+0x5e>
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d10b      	bne.n	80099a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800998e:	4b90      	ldr	r3, [pc, #576]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d06c      	beq.n	8009a74 <HAL_RCC_OscConfig+0x12c>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d168      	bne.n	8009a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e3d9      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ae:	d106      	bne.n	80099be <HAL_RCC_OscConfig+0x76>
 80099b0:	4b87      	ldr	r3, [pc, #540]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a86      	ldr	r2, [pc, #536]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	e02e      	b.n	8009a1c <HAL_RCC_OscConfig+0xd4>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10c      	bne.n	80099e0 <HAL_RCC_OscConfig+0x98>
 80099c6:	4b82      	ldr	r3, [pc, #520]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a81      	ldr	r2, [pc, #516]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	4b7f      	ldr	r3, [pc, #508]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a7e      	ldr	r2, [pc, #504]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	e01d      	b.n	8009a1c <HAL_RCC_OscConfig+0xd4>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099e8:	d10c      	bne.n	8009a04 <HAL_RCC_OscConfig+0xbc>
 80099ea:	4b79      	ldr	r3, [pc, #484]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a78      	ldr	r2, [pc, #480]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	4b76      	ldr	r3, [pc, #472]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a75      	ldr	r2, [pc, #468]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 80099fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	e00b      	b.n	8009a1c <HAL_RCC_OscConfig+0xd4>
 8009a04:	4b72      	ldr	r3, [pc, #456]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a71      	ldr	r2, [pc, #452]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	4b6f      	ldr	r3, [pc, #444]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a6e      	ldr	r2, [pc, #440]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d013      	beq.n	8009a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a24:	f7fe f9f6 	bl	8007e14 <HAL_GetTick>
 8009a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a2c:	f7fe f9f2 	bl	8007e14 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b64      	cmp	r3, #100	; 0x64
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e38d      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a3e:	4b64      	ldr	r3, [pc, #400]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f0      	beq.n	8009a2c <HAL_RCC_OscConfig+0xe4>
 8009a4a:	e014      	b.n	8009a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4c:	f7fe f9e2 	bl	8007e14 <HAL_GetTick>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a52:	e008      	b.n	8009a66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a54:	f7fe f9de 	bl	8007e14 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b64      	cmp	r3, #100	; 0x64
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e379      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a66:	4b5a      	ldr	r3, [pc, #360]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1f0      	bne.n	8009a54 <HAL_RCC_OscConfig+0x10c>
 8009a72:	e000      	b.n	8009a76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 80ae 	beq.w	8009be0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a84:	4b52      	ldr	r3, [pc, #328]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a8e:	4b50      	ldr	r3, [pc, #320]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d007      	beq.n	8009aaa <HAL_RCC_OscConfig+0x162>
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	2b18      	cmp	r3, #24
 8009a9e:	d13a      	bne.n	8009b16 <HAL_RCC_OscConfig+0x1ce>
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d135      	bne.n	8009b16 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009aaa:	4b49      	ldr	r3, [pc, #292]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d005      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x17a>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e34b      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ac2:	f7fe f9b3 	bl	8007e2c <HAL_GetREVID>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d817      	bhi.n	8009b00 <HAL_RCC_OscConfig+0x1b8>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	2b40      	cmp	r3, #64	; 0x40
 8009ad6:	d108      	bne.n	8009aea <HAL_RCC_OscConfig+0x1a2>
 8009ad8:	4b3d      	ldr	r3, [pc, #244]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ae0:	4a3b      	ldr	r2, [pc, #236]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ae8:	e07a      	b.n	8009be0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aea:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	031b      	lsls	r3, r3, #12
 8009af8:	4935      	ldr	r1, [pc, #212]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009afe:	e06f      	b.n	8009be0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b00:	4b33      	ldr	r3, [pc, #204]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	061b      	lsls	r3, r3, #24
 8009b0e:	4930      	ldr	r1, [pc, #192]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b14:	e064      	b.n	8009be0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d045      	beq.n	8009baa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b1e:	4b2c      	ldr	r3, [pc, #176]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f023 0219 	bic.w	r2, r3, #25
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	4929      	ldr	r1, [pc, #164]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7fe f970 	bl	8007e14 <HAL_GetTick>
 8009b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b38:	f7fe f96c 	bl	8007e14 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e307      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b4a:	4b21      	ldr	r3, [pc, #132]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f0      	beq.n	8009b38 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b56:	f7fe f969 	bl	8007e2c <HAL_GetREVID>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d817      	bhi.n	8009b94 <HAL_RCC_OscConfig+0x24c>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	d108      	bne.n	8009b7e <HAL_RCC_OscConfig+0x236>
 8009b6c:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b74:	4a16      	ldr	r2, [pc, #88]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b7a:	6053      	str	r3, [r2, #4]
 8009b7c:	e030      	b.n	8009be0 <HAL_RCC_OscConfig+0x298>
 8009b7e:	4b14      	ldr	r3, [pc, #80]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	031b      	lsls	r3, r3, #12
 8009b8c:	4910      	ldr	r1, [pc, #64]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	604b      	str	r3, [r1, #4]
 8009b92:	e025      	b.n	8009be0 <HAL_RCC_OscConfig+0x298>
 8009b94:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	490b      	ldr	r1, [pc, #44]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	604b      	str	r3, [r1, #4]
 8009ba8:	e01a      	b.n	8009be0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <HAL_RCC_OscConfig+0x288>)
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb6:	f7fe f92d 	bl	8007e14 <HAL_GetTick>
 8009bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bbc:	e00a      	b.n	8009bd4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bbe:	f7fe f929 	bl	8007e14 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d903      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e2c4      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
 8009bd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bd4:	4ba4      	ldr	r3, [pc, #656]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1ee      	bne.n	8009bbe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80a9 	beq.w	8009d40 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bee:	4b9e      	ldr	r3, [pc, #632]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bf8:	4b9b      	ldr	r3, [pc, #620]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d007      	beq.n	8009c14 <HAL_RCC_OscConfig+0x2cc>
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b18      	cmp	r3, #24
 8009c08:	d13a      	bne.n	8009c80 <HAL_RCC_OscConfig+0x338>
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d135      	bne.n	8009c80 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c14:	4b94      	ldr	r3, [pc, #592]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <HAL_RCC_OscConfig+0x2e4>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	2b80      	cmp	r3, #128	; 0x80
 8009c26:	d001      	beq.n	8009c2c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e296      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c2c:	f7fe f8fe 	bl	8007e2c <HAL_GetREVID>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d817      	bhi.n	8009c6a <HAL_RCC_OscConfig+0x322>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	d108      	bne.n	8009c54 <HAL_RCC_OscConfig+0x30c>
 8009c42:	4b89      	ldr	r3, [pc, #548]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c4a:	4a87      	ldr	r2, [pc, #540]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c52:	e075      	b.n	8009d40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c54:	4b84      	ldr	r3, [pc, #528]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	069b      	lsls	r3, r3, #26
 8009c62:	4981      	ldr	r1, [pc, #516]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c68:	e06a      	b.n	8009d40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c6a:	4b7f      	ldr	r3, [pc, #508]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	061b      	lsls	r3, r3, #24
 8009c78:	497b      	ldr	r1, [pc, #492]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c7e:	e05f      	b.n	8009d40 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d042      	beq.n	8009d0e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c88:	4b77      	ldr	r3, [pc, #476]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a76      	ldr	r2, [pc, #472]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c94:	f7fe f8be 	bl	8007e14 <HAL_GetTick>
 8009c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c9a:	e008      	b.n	8009cae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c9c:	f7fe f8ba 	bl	8007e14 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e255      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cae:	4b6e      	ldr	r3, [pc, #440]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f0      	beq.n	8009c9c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cba:	f7fe f8b7 	bl	8007e2c <HAL_GetREVID>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d817      	bhi.n	8009cf8 <HAL_RCC_OscConfig+0x3b0>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d108      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x39a>
 8009cd0:	4b65      	ldr	r3, [pc, #404]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009cd8:	4a63      	ldr	r2, [pc, #396]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cde:	6053      	str	r3, [r2, #4]
 8009ce0:	e02e      	b.n	8009d40 <HAL_RCC_OscConfig+0x3f8>
 8009ce2:	4b61      	ldr	r3, [pc, #388]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	069b      	lsls	r3, r3, #26
 8009cf0:	495d      	ldr	r1, [pc, #372]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	604b      	str	r3, [r1, #4]
 8009cf6:	e023      	b.n	8009d40 <HAL_RCC_OscConfig+0x3f8>
 8009cf8:	4b5b      	ldr	r3, [pc, #364]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	061b      	lsls	r3, r3, #24
 8009d06:	4958      	ldr	r1, [pc, #352]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60cb      	str	r3, [r1, #12]
 8009d0c:	e018      	b.n	8009d40 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d0e:	4b56      	ldr	r3, [pc, #344]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a55      	ldr	r2, [pc, #340]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d1a:	f7fe f87b 	bl	8007e14 <HAL_GetTick>
 8009d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d20:	e008      	b.n	8009d34 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009d22:	f7fe f877 	bl	8007e14 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e212      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d34:	4b4c      	ldr	r3, [pc, #304]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1f0      	bne.n	8009d22 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d036      	beq.n	8009dba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d019      	beq.n	8009d88 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d54:	4b44      	ldr	r3, [pc, #272]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d58:	4a43      	ldr	r2, [pc, #268]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d5a:	f043 0301 	orr.w	r3, r3, #1
 8009d5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d60:	f7fe f858 	bl	8007e14 <HAL_GetTick>
 8009d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d66:	e008      	b.n	8009d7a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d68:	f7fe f854 	bl	8007e14 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d901      	bls.n	8009d7a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e1ef      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d7a:	4b3b      	ldr	r3, [pc, #236]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0f0      	beq.n	8009d68 <HAL_RCC_OscConfig+0x420>
 8009d86:	e018      	b.n	8009dba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d88:	4b37      	ldr	r3, [pc, #220]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d8c:	4a36      	ldr	r2, [pc, #216]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d94:	f7fe f83e 	bl	8007e14 <HAL_GetTick>
 8009d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d9a:	e008      	b.n	8009dae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d9c:	f7fe f83a 	bl	8007e14 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e1d5      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009dae:	4b2e      	ldr	r3, [pc, #184]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1f0      	bne.n	8009d9c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d036      	beq.n	8009e34 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d019      	beq.n	8009e02 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009dce:	4b26      	ldr	r3, [pc, #152]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a25      	ldr	r2, [pc, #148]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009dda:	f7fe f81b 	bl	8007e14 <HAL_GetTick>
 8009dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009de0:	e008      	b.n	8009df4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009de2:	f7fe f817 	bl	8007e14 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d901      	bls.n	8009df4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e1b2      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009df4:	4b1c      	ldr	r3, [pc, #112]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0f0      	beq.n	8009de2 <HAL_RCC_OscConfig+0x49a>
 8009e00:	e018      	b.n	8009e34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e02:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a18      	ldr	r2, [pc, #96]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e0e:	f7fe f801 	bl	8007e14 <HAL_GetTick>
 8009e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e14:	e008      	b.n	8009e28 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009e16:	f7fd fffd 	bl	8007e14 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d901      	bls.n	8009e28 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e198      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <HAL_RCC_OscConfig+0x520>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1f0      	bne.n	8009e16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 8085 	beq.w	8009f4c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e42:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <HAL_RCC_OscConfig+0x524>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <HAL_RCC_OscConfig+0x524>)
 8009e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e4e:	f7fd ffe1 	bl	8007e14 <HAL_GetTick>
 8009e52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e54:	e00c      	b.n	8009e70 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009e56:	f7fd ffdd 	bl	8007e14 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	2b64      	cmp	r3, #100	; 0x64
 8009e62:	d905      	bls.n	8009e70 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e178      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
 8009e68:	58024400 	.word	0x58024400
 8009e6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e70:	4b96      	ldr	r3, [pc, #600]	; (800a0cc <HAL_RCC_OscConfig+0x784>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0ec      	beq.n	8009e56 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d106      	bne.n	8009e92 <HAL_RCC_OscConfig+0x54a>
 8009e84:	4b92      	ldr	r3, [pc, #584]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e88:	4a91      	ldr	r2, [pc, #580]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009e8a:	f043 0301 	orr.w	r3, r3, #1
 8009e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e90:	e02d      	b.n	8009eee <HAL_RCC_OscConfig+0x5a6>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10c      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x56c>
 8009e9a:	4b8d      	ldr	r3, [pc, #564]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9e:	4a8c      	ldr	r2, [pc, #560]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ea0:	f023 0301 	bic.w	r3, r3, #1
 8009ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ea6:	4b8a      	ldr	r3, [pc, #552]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eaa:	4a89      	ldr	r2, [pc, #548]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009eac:	f023 0304 	bic.w	r3, r3, #4
 8009eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8009eb2:	e01c      	b.n	8009eee <HAL_RCC_OscConfig+0x5a6>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	2b05      	cmp	r3, #5
 8009eba:	d10c      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x58e>
 8009ebc:	4b84      	ldr	r3, [pc, #528]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec0:	4a83      	ldr	r2, [pc, #524]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ec2:	f043 0304 	orr.w	r3, r3, #4
 8009ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ec8:	4b81      	ldr	r3, [pc, #516]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ecc:	4a80      	ldr	r2, [pc, #512]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ed4:	e00b      	b.n	8009eee <HAL_RCC_OscConfig+0x5a6>
 8009ed6:	4b7e      	ldr	r3, [pc, #504]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eda:	4a7d      	ldr	r2, [pc, #500]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ee2:	4b7b      	ldr	r3, [pc, #492]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	4a7a      	ldr	r2, [pc, #488]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ee8:	f023 0304 	bic.w	r3, r3, #4
 8009eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d015      	beq.n	8009f22 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef6:	f7fd ff8d 	bl	8007e14 <HAL_GetTick>
 8009efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009efc:	e00a      	b.n	8009f14 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009efe:	f7fd ff89 	bl	8007e14 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d901      	bls.n	8009f14 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e122      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f14:	4b6e      	ldr	r3, [pc, #440]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0ee      	beq.n	8009efe <HAL_RCC_OscConfig+0x5b6>
 8009f20:	e014      	b.n	8009f4c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f22:	f7fd ff77 	bl	8007e14 <HAL_GetTick>
 8009f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f28:	e00a      	b.n	8009f40 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f2a:	f7fd ff73 	bl	8007e14 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d901      	bls.n	8009f40 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e10c      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f40:	4b63      	ldr	r3, [pc, #396]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1ee      	bne.n	8009f2a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 8101 	beq.w	800a158 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f56:	4b5e      	ldr	r3, [pc, #376]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f5e:	2b18      	cmp	r3, #24
 8009f60:	f000 80bc 	beq.w	800a0dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	f040 8095 	bne.w	800a098 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f6e:	4b58      	ldr	r3, [pc, #352]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a57      	ldr	r2, [pc, #348]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7a:	f7fd ff4b 	bl	8007e14 <HAL_GetTick>
 8009f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f80:	e008      	b.n	8009f94 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f82:	f7fd ff47 	bl	8007e14 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d901      	bls.n	8009f94 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e0e2      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f94:	4b4e      	ldr	r3, [pc, #312]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1f0      	bne.n	8009f82 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fa0:	4b4b      	ldr	r3, [pc, #300]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fa4:	4b4b      	ldr	r3, [pc, #300]	; (800a0d4 <HAL_RCC_OscConfig+0x78c>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fb0:	0112      	lsls	r2, r2, #4
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	4946      	ldr	r1, [pc, #280]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	628b      	str	r3, [r1, #40]	; 0x28
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	025b      	lsls	r3, r3, #9
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	041b      	lsls	r3, r3, #16
 8009fd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	061b      	lsls	r3, r3, #24
 8009fe6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fea:	4939      	ldr	r1, [pc, #228]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009ff0:	4b37      	ldr	r3, [pc, #220]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	4a36      	ldr	r2, [pc, #216]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ff6:	f023 0301 	bic.w	r3, r3, #1
 8009ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ffc:	4b34      	ldr	r3, [pc, #208]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 8009ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a000:	4b35      	ldr	r3, [pc, #212]	; (800a0d8 <HAL_RCC_OscConfig+0x790>)
 800a002:	4013      	ands	r3, r2
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a008:	00d2      	lsls	r2, r2, #3
 800a00a:	4931      	ldr	r1, [pc, #196]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a010:	4b2f      	ldr	r3, [pc, #188]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	f023 020c 	bic.w	r2, r3, #12
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	492c      	ldr	r1, [pc, #176]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a022:	4b2b      	ldr	r3, [pc, #172]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	f023 0202 	bic.w	r2, r3, #2
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02e:	4928      	ldr	r1, [pc, #160]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a030:	4313      	orrs	r3, r2
 800a032:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a034:	4b26      	ldr	r3, [pc, #152]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	4a25      	ldr	r2, [pc, #148]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a03a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a03e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a040:	4b23      	ldr	r3, [pc, #140]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	4a22      	ldr	r2, [pc, #136]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a04a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a04c:	4b20      	ldr	r3, [pc, #128]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	4a1f      	ldr	r2, [pc, #124]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a058:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	4a1c      	ldr	r2, [pc, #112]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a05e:	f043 0301 	orr.w	r3, r3, #1
 800a062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a064:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a19      	ldr	r2, [pc, #100]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a06a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a070:	f7fd fed0 	bl	8007e14 <HAL_GetTick>
 800a074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a076:	e008      	b.n	800a08a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a078:	f7fd fecc 	bl	8007e14 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d901      	bls.n	800a08a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e067      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <HAL_RCC_OscConfig+0x730>
 800a096:	e05f      	b.n	800a158 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a098:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a09e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a4:	f7fd feb6 	bl	8007e14 <HAL_GetTick>
 800a0a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0aa:	e008      	b.n	800a0be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0ac:	f7fd feb2 	bl	8007e14 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e04d      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0be:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <HAL_RCC_OscConfig+0x788>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f0      	bne.n	800a0ac <HAL_RCC_OscConfig+0x764>
 800a0ca:	e045      	b.n	800a158 <HAL_RCC_OscConfig+0x810>
 800a0cc:	58024800 	.word	0x58024800
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	fffffc0c 	.word	0xfffffc0c
 800a0d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a0dc:	4b21      	ldr	r3, [pc, #132]	; (800a164 <HAL_RCC_OscConfig+0x81c>)
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a0e2:	4b20      	ldr	r3, [pc, #128]	; (800a164 <HAL_RCC_OscConfig+0x81c>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d031      	beq.n	800a154 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f003 0203 	and.w	r2, r3, #3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d12a      	bne.n	800a154 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	091b      	lsrs	r3, r3, #4
 800a102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d122      	bne.n	800a154 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d11a      	bne.n	800a154 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	0a5b      	lsrs	r3, r3, #9
 800a122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d111      	bne.n	800a154 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a13e:	429a      	cmp	r2, r3
 800a140:	d108      	bne.n	800a154 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	0e1b      	lsrs	r3, r3, #24
 800a146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a150:	429a      	cmp	r2, r3
 800a152:	d001      	beq.n	800a158 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3730      	adds	r7, #48	; 0x30
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	58024400 	.word	0x58024400

0800a168 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e19c      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a17c:	4b8a      	ldr	r3, [pc, #552]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d910      	bls.n	800a1ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a18a:	4b87      	ldr	r3, [pc, #540]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f023 020f 	bic.w	r2, r3, #15
 800a192:	4985      	ldr	r1, [pc, #532]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	4313      	orrs	r3, r2
 800a198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a19a:	4b83      	ldr	r3, [pc, #524]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 030f 	and.w	r3, r3, #15
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d001      	beq.n	800a1ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e184      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d010      	beq.n	800a1da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	4b7b      	ldr	r3, [pc, #492]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d908      	bls.n	800a1da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1c8:	4b78      	ldr	r3, [pc, #480]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	4975      	ldr	r1, [pc, #468]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0308 	and.w	r3, r3, #8
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d010      	beq.n	800a208 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695a      	ldr	r2, [r3, #20]
 800a1ea:	4b70      	ldr	r3, [pc, #448]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d908      	bls.n	800a208 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1f6:	4b6d      	ldr	r3, [pc, #436]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	496a      	ldr	r1, [pc, #424]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a204:	4313      	orrs	r3, r2
 800a206:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b00      	cmp	r3, #0
 800a212:	d010      	beq.n	800a236 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	4b64      	ldr	r3, [pc, #400]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a220:	429a      	cmp	r2, r3
 800a222:	d908      	bls.n	800a236 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a224:	4b61      	ldr	r3, [pc, #388]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	495e      	ldr	r1, [pc, #376]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a232:	4313      	orrs	r3, r2
 800a234:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d010      	beq.n	800a264 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	69da      	ldr	r2, [r3, #28]
 800a246:	4b59      	ldr	r3, [pc, #356]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a24e:	429a      	cmp	r2, r3
 800a250:	d908      	bls.n	800a264 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a252:	4b56      	ldr	r3, [pc, #344]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	4953      	ldr	r1, [pc, #332]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a260:	4313      	orrs	r3, r2
 800a262:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d010      	beq.n	800a292 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	4b4d      	ldr	r3, [pc, #308]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	f003 030f 	and.w	r3, r3, #15
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d908      	bls.n	800a292 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a280:	4b4a      	ldr	r3, [pc, #296]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	f023 020f 	bic.w	r2, r3, #15
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	4947      	ldr	r1, [pc, #284]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d055      	beq.n	800a34a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a29e:	4b43      	ldr	r3, [pc, #268]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	4940      	ldr	r1, [pc, #256]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d107      	bne.n	800a2c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2b8:	4b3c      	ldr	r3, [pc, #240]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d121      	bne.n	800a308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e0f6      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d107      	bne.n	800a2e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2d0:	4b36      	ldr	r3, [pc, #216]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d115      	bne.n	800a308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e0ea      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d107      	bne.n	800a2f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2e8:	4b30      	ldr	r3, [pc, #192]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d109      	bne.n	800a308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0de      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2f8:	4b2c      	ldr	r3, [pc, #176]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e0d6      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a308:	4b28      	ldr	r3, [pc, #160]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f023 0207 	bic.w	r2, r3, #7
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	4925      	ldr	r1, [pc, #148]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a316:	4313      	orrs	r3, r2
 800a318:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a31a:	f7fd fd7b 	bl	8007e14 <HAL_GetTick>
 800a31e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a320:	e00a      	b.n	800a338 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a322:	f7fd fd77 	bl	8007e14 <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a330:	4293      	cmp	r3, r2
 800a332:	d901      	bls.n	800a338 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e0be      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a338:	4b1c      	ldr	r3, [pc, #112]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	429a      	cmp	r2, r3
 800a348:	d1eb      	bne.n	800a322 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d010      	beq.n	800a378 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	4b14      	ldr	r3, [pc, #80]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	429a      	cmp	r2, r3
 800a364:	d208      	bcs.n	800a378 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a366:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	f023 020f 	bic.w	r2, r3, #15
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	490e      	ldr	r1, [pc, #56]	; (800a3ac <HAL_RCC_ClockConfig+0x244>)
 800a374:	4313      	orrs	r3, r2
 800a376:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a378:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d214      	bcs.n	800a3b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a386:	4b08      	ldr	r3, [pc, #32]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f023 020f 	bic.w	r2, r3, #15
 800a38e:	4906      	ldr	r1, [pc, #24]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	4313      	orrs	r3, r2
 800a394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a396:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <HAL_RCC_ClockConfig+0x240>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d005      	beq.n	800a3b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e086      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x34e>
 800a3a8:	52002000 	.word	0x52002000
 800a3ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d010      	beq.n	800a3de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691a      	ldr	r2, [r3, #16]
 800a3c0:	4b3f      	ldr	r3, [pc, #252]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d208      	bcs.n	800a3de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3cc:	4b3c      	ldr	r3, [pc, #240]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	4939      	ldr	r1, [pc, #228]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0308 	and.w	r3, r3, #8
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d010      	beq.n	800a40c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	695a      	ldr	r2, [r3, #20]
 800a3ee:	4b34      	ldr	r3, [pc, #208]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d208      	bcs.n	800a40c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3fa:	4b31      	ldr	r3, [pc, #196]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	492e      	ldr	r1, [pc, #184]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	2b00      	cmp	r3, #0
 800a416:	d010      	beq.n	800a43a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699a      	ldr	r2, [r3, #24]
 800a41c:	4b28      	ldr	r3, [pc, #160]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a424:	429a      	cmp	r2, r3
 800a426:	d208      	bcs.n	800a43a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a428:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	4922      	ldr	r1, [pc, #136]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a436:	4313      	orrs	r3, r2
 800a438:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d010      	beq.n	800a468 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69da      	ldr	r2, [r3, #28]
 800a44a:	4b1d      	ldr	r3, [pc, #116]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a452:	429a      	cmp	r2, r3
 800a454:	d208      	bcs.n	800a468 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a456:	4b1a      	ldr	r3, [pc, #104]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	4917      	ldr	r1, [pc, #92]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a464:	4313      	orrs	r3, r2
 800a466:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a468:	f000 f834 	bl	800a4d4 <HAL_RCC_GetSysClockFreq>
 800a46c:	4602      	mov	r2, r0
 800a46e:	4b14      	ldr	r3, [pc, #80]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	0a1b      	lsrs	r3, r3, #8
 800a474:	f003 030f 	and.w	r3, r3, #15
 800a478:	4912      	ldr	r1, [pc, #72]	; (800a4c4 <HAL_RCC_ClockConfig+0x35c>)
 800a47a:	5ccb      	ldrb	r3, [r1, r3]
 800a47c:	f003 031f 	and.w	r3, r3, #31
 800a480:	fa22 f303 	lsr.w	r3, r2, r3
 800a484:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a486:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <HAL_RCC_ClockConfig+0x358>)
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	4a0d      	ldr	r2, [pc, #52]	; (800a4c4 <HAL_RCC_ClockConfig+0x35c>)
 800a490:	5cd3      	ldrb	r3, [r2, r3]
 800a492:	f003 031f 	and.w	r3, r3, #31
 800a496:	693a      	ldr	r2, [r7, #16]
 800a498:	fa22 f303 	lsr.w	r3, r2, r3
 800a49c:	4a0a      	ldr	r2, [pc, #40]	; (800a4c8 <HAL_RCC_ClockConfig+0x360>)
 800a49e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4a0:	4a0a      	ldr	r2, [pc, #40]	; (800a4cc <HAL_RCC_ClockConfig+0x364>)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <HAL_RCC_ClockConfig+0x368>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fd fc68 	bl	8007d80 <HAL_InitTick>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	58024400 	.word	0x58024400
 800a4c4:	0800ea18 	.word	0x0800ea18
 800a4c8:	2400914c 	.word	0x2400914c
 800a4cc:	24009148 	.word	0x24009148
 800a4d0:	24009150 	.word	0x24009150

0800a4d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b089      	sub	sp, #36	; 0x24
 800a4d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4da:	4bb3      	ldr	r3, [pc, #716]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4e2:	2b18      	cmp	r3, #24
 800a4e4:	f200 8155 	bhi.w	800a792 <HAL_RCC_GetSysClockFreq+0x2be>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a555 	.word	0x0800a555
 800a4f4:	0800a793 	.word	0x0800a793
 800a4f8:	0800a793 	.word	0x0800a793
 800a4fc:	0800a793 	.word	0x0800a793
 800a500:	0800a793 	.word	0x0800a793
 800a504:	0800a793 	.word	0x0800a793
 800a508:	0800a793 	.word	0x0800a793
 800a50c:	0800a793 	.word	0x0800a793
 800a510:	0800a57b 	.word	0x0800a57b
 800a514:	0800a793 	.word	0x0800a793
 800a518:	0800a793 	.word	0x0800a793
 800a51c:	0800a793 	.word	0x0800a793
 800a520:	0800a793 	.word	0x0800a793
 800a524:	0800a793 	.word	0x0800a793
 800a528:	0800a793 	.word	0x0800a793
 800a52c:	0800a793 	.word	0x0800a793
 800a530:	0800a581 	.word	0x0800a581
 800a534:	0800a793 	.word	0x0800a793
 800a538:	0800a793 	.word	0x0800a793
 800a53c:	0800a793 	.word	0x0800a793
 800a540:	0800a793 	.word	0x0800a793
 800a544:	0800a793 	.word	0x0800a793
 800a548:	0800a793 	.word	0x0800a793
 800a54c:	0800a793 	.word	0x0800a793
 800a550:	0800a587 	.word	0x0800a587
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a554:	4b94      	ldr	r3, [pc, #592]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0320 	and.w	r3, r3, #32
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a560:	4b91      	ldr	r3, [pc, #580]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	08db      	lsrs	r3, r3, #3
 800a566:	f003 0303 	and.w	r3, r3, #3
 800a56a:	4a90      	ldr	r2, [pc, #576]	; (800a7ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a56c:	fa22 f303 	lsr.w	r3, r2, r3
 800a570:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a572:	e111      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a574:	4b8d      	ldr	r3, [pc, #564]	; (800a7ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a576:	61bb      	str	r3, [r7, #24]
    break;
 800a578:	e10e      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a57a:	4b8d      	ldr	r3, [pc, #564]	; (800a7b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a57c:	61bb      	str	r3, [r7, #24]
    break;
 800a57e:	e10b      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a580:	4b8c      	ldr	r3, [pc, #560]	; (800a7b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a582:	61bb      	str	r3, [r7, #24]
    break;
 800a584:	e108      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a586:	4b88      	ldr	r3, [pc, #544]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a590:	4b85      	ldr	r3, [pc, #532]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a594:	091b      	lsrs	r3, r3, #4
 800a596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a59a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a59c:	4b82      	ldr	r3, [pc, #520]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a5a6:	4b80      	ldr	r3, [pc, #512]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5aa:	08db      	lsrs	r3, r3, #3
 800a5ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	fb02 f303 	mul.w	r3, r2, r3
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 80e1 	beq.w	800a78c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	f000 8083 	beq.w	800a6d8 <HAL_RCC_GetSysClockFreq+0x204>
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	f200 80a1 	bhi.w	800a71c <HAL_RCC_GetSysClockFreq+0x248>
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d003      	beq.n	800a5e8 <HAL_RCC_GetSysClockFreq+0x114>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d056      	beq.n	800a694 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5e6:	e099      	b.n	800a71c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e8:	4b6f      	ldr	r3, [pc, #444]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02d      	beq.n	800a650 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5f4:	4b6c      	ldr	r3, [pc, #432]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	08db      	lsrs	r3, r3, #3
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	4a6b      	ldr	r2, [pc, #428]	; (800a7ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a600:	fa22 f303 	lsr.w	r3, r2, r3
 800a604:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	ee07 3a90 	vmov	s15, r3
 800a60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a61e:	4b62      	ldr	r3, [pc, #392]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a632:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a7b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a64e:	e087      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	ee07 3a90 	vmov	s15, r3
 800a656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a7bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a662:	4b51      	ldr	r3, [pc, #324]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66a:	ee07 3a90 	vmov	s15, r3
 800a66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a672:	ed97 6a02 	vldr	s12, [r7, #8]
 800a676:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a7b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a692:	e065      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a7c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a6:	4b40      	ldr	r3, [pc, #256]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a7b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6d6:	e043      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a7c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a7b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a71a:	e021      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a726:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a7c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a72e:	4b1e      	ldr	r3, [pc, #120]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a73e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a742:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a7b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a75e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a760:	4b11      	ldr	r3, [pc, #68]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	0a5b      	lsrs	r3, r3, #9
 800a766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a76a:	3301      	adds	r3, #1
 800a76c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	ee07 3a90 	vmov	s15, r3
 800a774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a778:	edd7 6a07 	vldr	s13, [r7, #28]
 800a77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a784:	ee17 3a90 	vmov	r3, s15
 800a788:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a78a:	e005      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61bb      	str	r3, [r7, #24]
    break;
 800a790:	e002      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a792:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a794:	61bb      	str	r3, [r7, #24]
    break;
 800a796:	bf00      	nop
  }

  return sysclockfreq;
 800a798:	69bb      	ldr	r3, [r7, #24]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3724      	adds	r7, #36	; 0x24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	58024400 	.word	0x58024400
 800a7ac:	03d09000 	.word	0x03d09000
 800a7b0:	003d0900 	.word	0x003d0900
 800a7b4:	007a1200 	.word	0x007a1200
 800a7b8:	46000000 	.word	0x46000000
 800a7bc:	4c742400 	.word	0x4c742400
 800a7c0:	4a742400 	.word	0x4a742400
 800a7c4:	4af42400 	.word	0x4af42400

0800a7c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d03f      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7ec:	d02a      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a7ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7f2:	d824      	bhi.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a7f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f8:	d018      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7fe:	d81e      	bhi.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a800:	2b00      	cmp	r3, #0
 800a802:	d003      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a808:	d007      	beq.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a80a:	e018      	b.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a80c:	4bab      	ldr	r3, [pc, #684]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	4aaa      	ldr	r2, [pc, #680]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a818:	e015      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3304      	adds	r3, #4
 800a81e:	2102      	movs	r1, #2
 800a820:	4618      	mov	r0, r3
 800a822:	f000 ff11 	bl	800b648 <RCCEx_PLL2_Config>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a82a:	e00c      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3324      	adds	r3, #36	; 0x24
 800a830:	2102      	movs	r1, #2
 800a832:	4618      	mov	r0, r3
 800a834:	f000 ffba 	bl	800b7ac <RCCEx_PLL3_Config>
 800a838:	4603      	mov	r3, r0
 800a83a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a83c:	e003      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	75fb      	strb	r3, [r7, #23]
      break;
 800a842:	e000      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a844:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d109      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a84c:	4b9b      	ldr	r3, [pc, #620]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a858:	4998      	ldr	r1, [pc, #608]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	650b      	str	r3, [r1, #80]	; 0x50
 800a85e:	e001      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d03d      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a874:	2b04      	cmp	r3, #4
 800a876:	d826      	bhi.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a878:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87e:	bf00      	nop
 800a880:	0800a895 	.word	0x0800a895
 800a884:	0800a8a3 	.word	0x0800a8a3
 800a888:	0800a8b5 	.word	0x0800a8b5
 800a88c:	0800a8cd 	.word	0x0800a8cd
 800a890:	0800a8cd 	.word	0x0800a8cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a894:	4b89      	ldr	r3, [pc, #548]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a898:	4a88      	ldr	r2, [pc, #544]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a89a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a89e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8a0:	e015      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fecd 	bl	800b648 <RCCEx_PLL2_Config>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8b2:	e00c      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3324      	adds	r3, #36	; 0x24
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 ff76 	bl	800b7ac <RCCEx_PLL3_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8c4:	e003      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ca:	e000      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a8cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8d4:	4b79      	ldr	r3, [pc, #484]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d8:	f023 0207 	bic.w	r2, r3, #7
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e0:	4976      	ldr	r1, [pc, #472]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	650b      	str	r3, [r1, #80]	; 0x50
 800a8e6:	e001      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d042      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a900:	d02b      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a906:	d825      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a908:	2bc0      	cmp	r3, #192	; 0xc0
 800a90a:	d028      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a90c:	2bc0      	cmp	r3, #192	; 0xc0
 800a90e:	d821      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a910:	2b80      	cmp	r3, #128	; 0x80
 800a912:	d016      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a914:	2b80      	cmp	r3, #128	; 0x80
 800a916:	d81d      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a91c:	2b40      	cmp	r3, #64	; 0x40
 800a91e:	d007      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a920:	e018      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a922:	4b66      	ldr	r3, [pc, #408]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a926:	4a65      	ldr	r2, [pc, #404]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a92e:	e017      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3304      	adds	r3, #4
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fe86 	bl	800b648 <RCCEx_PLL2_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a940:	e00e      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	3324      	adds	r3, #36	; 0x24
 800a946:	2100      	movs	r1, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 ff2f 	bl	800b7ac <RCCEx_PLL3_Config>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a952:	e005      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]
      break;
 800a958:	e002      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a95a:	bf00      	nop
 800a95c:	e000      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a95e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a966:	4b55      	ldr	r3, [pc, #340]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a96a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a972:	4952      	ldr	r1, [pc, #328]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a974:	4313      	orrs	r3, r2
 800a976:	650b      	str	r3, [r1, #80]	; 0x50
 800a978:	e001      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a986:	2b00      	cmp	r3, #0
 800a988:	d049      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a994:	d030      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a99a:	d82a      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a99c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9a0:	d02c      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a9a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9a6:	d824      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a9a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9ac:	d018      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a9ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9b2:	d81e      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a9b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9bc:	d007      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9be:	e018      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	4a3d      	ldr	r2, [pc, #244]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9cc:	e017      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fe37 	bl	800b648 <RCCEx_PLL2_Config>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a9de:	e00e      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fee0 	bl	800b7ac <RCCEx_PLL3_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9f0:	e005      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f6:	e002      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a9f8:	bf00      	nop
 800a9fa:	e000      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a9fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa04:	4b2d      	ldr	r3, [pc, #180]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa12:	492a      	ldr	r1, [pc, #168]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	658b      	str	r3, [r1, #88]	; 0x58
 800aa18:	e001      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d04c      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa34:	d030      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aa36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa3a:	d82a      	bhi.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aa3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa40:	d02c      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800aa42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa46:	d824      	bhi.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aa48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa4c:	d018      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800aa4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa52:	d81e      	bhi.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aa58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa5c:	d007      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aa5e:	e018      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa60:	4b16      	ldr	r3, [pc, #88]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	4a15      	ldr	r2, [pc, #84]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa6c:	e017      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	3304      	adds	r3, #4
 800aa72:	2100      	movs	r1, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fde7 	bl	800b648 <RCCEx_PLL2_Config>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aa7e:	e00e      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3324      	adds	r3, #36	; 0x24
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 fe90 	bl	800b7ac <RCCEx_PLL3_Config>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa90:	e005      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	75fb      	strb	r3, [r7, #23]
      break;
 800aa96:	e002      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800aa98:	bf00      	nop
 800aa9a:	e000      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800aa9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa9e:	7dfb      	ldrb	r3, [r7, #23]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10d      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aab2:	4902      	ldr	r1, [pc, #8]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	658b      	str	r3, [r1, #88]	; 0x58
 800aab8:	e004      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800aaba:	bf00      	nop
 800aabc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d032      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad4:	2b30      	cmp	r3, #48	; 0x30
 800aad6:	d01c      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aad8:	2b30      	cmp	r3, #48	; 0x30
 800aada:	d817      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d00c      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800aae0:	2b20      	cmp	r3, #32
 800aae2:	d813      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d016      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800aae8:	2b10      	cmp	r3, #16
 800aaea:	d10f      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaec:	4baf      	ldr	r3, [pc, #700]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf0:	4aae      	ldr	r2, [pc, #696]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aaf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aaf8:	e00e      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3304      	adds	r3, #4
 800aafe:	2102      	movs	r1, #2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fda1 	bl	800b648 <RCCEx_PLL2_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab0a:	e005      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab10:	e002      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ab12:	bf00      	nop
 800ab14:	e000      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ab16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d109      	bne.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab1e:	4ba3      	ldr	r3, [pc, #652]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab2a:	49a0      	ldr	r1, [pc, #640]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab30:	e001      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d047      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab4a:	d030      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800ab4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab50:	d82a      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ab52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab56:	d02c      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800ab58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab5c:	d824      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ab5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab62:	d018      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ab64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab68:	d81e      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800ab6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab72:	d007      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800ab74:	e018      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab76:	4b8d      	ldr	r3, [pc, #564]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	4a8c      	ldr	r2, [pc, #560]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ab82:	e017      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3304      	adds	r3, #4
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 fd5c 	bl	800b648 <RCCEx_PLL2_Config>
 800ab90:	4603      	mov	r3, r0
 800ab92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ab94:	e00e      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3324      	adds	r3, #36	; 0x24
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fe05 	bl	800b7ac <RCCEx_PLL3_Config>
 800aba2:	4603      	mov	r3, r0
 800aba4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aba6:	e005      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	75fb      	strb	r3, [r7, #23]
      break;
 800abac:	e002      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800abae:	bf00      	nop
 800abb0:	e000      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800abb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d109      	bne.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abba:	4b7c      	ldr	r3, [pc, #496]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800abbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abbe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc6:	4979      	ldr	r1, [pc, #484]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	650b      	str	r3, [r1, #80]	; 0x50
 800abcc:	e001      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d049      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abe6:	d02e      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800abe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abec:	d828      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800abee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abf2:	d02a      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x482>
 800abf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abf8:	d822      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800abfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abfe:	d026      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ac00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac04:	d81c      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac0a:	d010      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ac0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac10:	d816      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01d      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ac16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac1a:	d111      	bne.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	2101      	movs	r1, #1
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 fd10 	bl	800b648 <RCCEx_PLL2_Config>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ac2c:	e012      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3324      	adds	r3, #36	; 0x24
 800ac32:	2101      	movs	r1, #1
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fdb9 	bl	800b7ac <RCCEx_PLL3_Config>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ac3e:	e009      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	75fb      	strb	r3, [r7, #23]
      break;
 800ac44:	e006      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ac46:	bf00      	nop
 800ac48:	e004      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ac52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d109      	bne.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac5a:	4b54      	ldr	r3, [pc, #336]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac5e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac66:	4951      	ldr	r1, [pc, #324]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	650b      	str	r3, [r1, #80]	; 0x50
 800ac6c:	e001      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d04b      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac88:	d02e      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800ac8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac8e:	d828      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ac90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac94:	d02a      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ac96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9a:	d822      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ac9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aca0:	d026      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800aca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aca6:	d81c      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800aca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acac:	d010      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800acae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb2:	d816      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d01d      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800acb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acbc:	d111      	bne.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3304      	adds	r3, #4
 800acc2:	2101      	movs	r1, #1
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fcbf 	bl	800b648 <RCCEx_PLL2_Config>
 800acca:	4603      	mov	r3, r0
 800accc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800acce:	e012      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3324      	adds	r3, #36	; 0x24
 800acd4:	2101      	movs	r1, #1
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fd68 	bl	800b7ac <RCCEx_PLL3_Config>
 800acdc:	4603      	mov	r3, r0
 800acde:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ace0:	e009      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	75fb      	strb	r3, [r7, #23]
      break;
 800ace6:	e006      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ace8:	bf00      	nop
 800acea:	e004      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800acec:	bf00      	nop
 800acee:	e002      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800acf0:	bf00      	nop
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800acf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800acfc:	4b2b      	ldr	r3, [pc, #172]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad00:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad0a:	4928      	ldr	r1, [pc, #160]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	658b      	str	r3, [r1, #88]	; 0x58
 800ad10:	e001      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d02f      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad2a:	d00e      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ad2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad30:	d814      	bhi.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d015      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ad36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad3a:	d10f      	bne.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad3c:	4b1b      	ldr	r3, [pc, #108]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a1a      	ldr	r2, [pc, #104]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ad48:	e00c      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fc79 	bl	800b648 <RCCEx_PLL2_Config>
 800ad56:	4603      	mov	r3, r0
 800ad58:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ad5a:	e003      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad60:	e000      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800ad62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d109      	bne.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad76:	490d      	ldr	r1, [pc, #52]	; (800adac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	650b      	str	r3, [r1, #80]	; 0x50
 800ad7c:	e001      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d033      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d81c      	bhi.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800add7 	.word	0x0800add7
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adbf 	.word	0x0800adbf
 800ada8:	0800add7 	.word	0x0800add7
 800adac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adb0:	4bb8      	ldr	r3, [pc, #736]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb4:	4ab7      	ldr	r2, [pc, #732]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800adb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800adbc:	e00c      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3304      	adds	r3, #4
 800adc2:	2102      	movs	r1, #2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 fc3f 	bl	800b648 <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800adce:	e003      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	75fb      	strb	r3, [r7, #23]
      break;
 800add4:	e000      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800add6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800adde:	4bad      	ldr	r3, [pc, #692]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade2:	f023 0203 	bic.w	r2, r3, #3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adea:	49aa      	ldr	r1, [pc, #680]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800adec:	4313      	orrs	r3, r2
 800adee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800adf0:	e001      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 8086 	beq.w	800af10 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae04:	4ba4      	ldr	r3, [pc, #656]	; (800b098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4aa3      	ldr	r2, [pc, #652]	; (800b098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae10:	f7fd f800 	bl	8007e14 <HAL_GetTick>
 800ae14:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae16:	e009      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae18:	f7fc fffc 	bl	8007e14 <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	2b64      	cmp	r3, #100	; 0x64
 800ae24:	d902      	bls.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	75fb      	strb	r3, [r7, #23]
        break;
 800ae2a:	e005      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae2c:	4b9a      	ldr	r3, [pc, #616]	; (800b098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d0ef      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d166      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae3e:	4b95      	ldr	r3, [pc, #596]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae48:	4053      	eors	r3, r2
 800ae4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d013      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae52:	4b90      	ldr	r3, [pc, #576]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae5a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae5c:	4b8d      	ldr	r3, [pc, #564]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae60:	4a8c      	ldr	r2, [pc, #560]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae66:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae68:	4b8a      	ldr	r3, [pc, #552]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae6c:	4a89      	ldr	r2, [pc, #548]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae72:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ae74:	4a87      	ldr	r2, [pc, #540]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae84:	d115      	bne.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae86:	f7fc ffc5 	bl	8007e14 <HAL_GetTick>
 800ae8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae8c:	e00b      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae8e:	f7fc ffc1 	bl	8007e14 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d902      	bls.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	75fb      	strb	r3, [r7, #23]
            break;
 800aea4:	e005      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aea6:	4b7b      	ldr	r3, [pc, #492]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeaa:	f003 0302 	and.w	r3, r3, #2
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0ed      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d126      	bne.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aec6:	d10d      	bne.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aec8:	4b72      	ldr	r3, [pc, #456]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aed6:	0919      	lsrs	r1, r3, #4
 800aed8:	4b70      	ldr	r3, [pc, #448]	; (800b09c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800aeda:	400b      	ands	r3, r1
 800aedc:	496d      	ldr	r1, [pc, #436]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	610b      	str	r3, [r1, #16]
 800aee2:	e005      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800aee4:	4b6b      	ldr	r3, [pc, #428]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	4a6a      	ldr	r2, [pc, #424]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aeee:	6113      	str	r3, [r2, #16]
 800aef0:	4b68      	ldr	r3, [pc, #416]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aefa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aefe:	4965      	ldr	r1, [pc, #404]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af00:	4313      	orrs	r3, r2
 800af02:	670b      	str	r3, [r1, #112]	; 0x70
 800af04:	e004      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	75bb      	strb	r3, [r7, #22]
 800af0a:	e001      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d07e      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af20:	2b28      	cmp	r3, #40	; 0x28
 800af22:	d867      	bhi.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800af24:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800af26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2a:	bf00      	nop
 800af2c:	0800affb 	.word	0x0800affb
 800af30:	0800aff5 	.word	0x0800aff5
 800af34:	0800aff5 	.word	0x0800aff5
 800af38:	0800aff5 	.word	0x0800aff5
 800af3c:	0800aff5 	.word	0x0800aff5
 800af40:	0800aff5 	.word	0x0800aff5
 800af44:	0800aff5 	.word	0x0800aff5
 800af48:	0800aff5 	.word	0x0800aff5
 800af4c:	0800afd1 	.word	0x0800afd1
 800af50:	0800aff5 	.word	0x0800aff5
 800af54:	0800aff5 	.word	0x0800aff5
 800af58:	0800aff5 	.word	0x0800aff5
 800af5c:	0800aff5 	.word	0x0800aff5
 800af60:	0800aff5 	.word	0x0800aff5
 800af64:	0800aff5 	.word	0x0800aff5
 800af68:	0800aff5 	.word	0x0800aff5
 800af6c:	0800afe3 	.word	0x0800afe3
 800af70:	0800aff5 	.word	0x0800aff5
 800af74:	0800aff5 	.word	0x0800aff5
 800af78:	0800aff5 	.word	0x0800aff5
 800af7c:	0800aff5 	.word	0x0800aff5
 800af80:	0800aff5 	.word	0x0800aff5
 800af84:	0800aff5 	.word	0x0800aff5
 800af88:	0800aff5 	.word	0x0800aff5
 800af8c:	0800affb 	.word	0x0800affb
 800af90:	0800aff5 	.word	0x0800aff5
 800af94:	0800aff5 	.word	0x0800aff5
 800af98:	0800aff5 	.word	0x0800aff5
 800af9c:	0800aff5 	.word	0x0800aff5
 800afa0:	0800aff5 	.word	0x0800aff5
 800afa4:	0800aff5 	.word	0x0800aff5
 800afa8:	0800aff5 	.word	0x0800aff5
 800afac:	0800affb 	.word	0x0800affb
 800afb0:	0800aff5 	.word	0x0800aff5
 800afb4:	0800aff5 	.word	0x0800aff5
 800afb8:	0800aff5 	.word	0x0800aff5
 800afbc:	0800aff5 	.word	0x0800aff5
 800afc0:	0800aff5 	.word	0x0800aff5
 800afc4:	0800aff5 	.word	0x0800aff5
 800afc8:	0800aff5 	.word	0x0800aff5
 800afcc:	0800affb 	.word	0x0800affb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3304      	adds	r3, #4
 800afd4:	2101      	movs	r1, #1
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fb36 	bl	800b648 <RCCEx_PLL2_Config>
 800afdc:	4603      	mov	r3, r0
 800afde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800afe0:	e00c      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3324      	adds	r3, #36	; 0x24
 800afe6:	2101      	movs	r1, #1
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fbdf 	bl	800b7ac <RCCEx_PLL3_Config>
 800afee:	4603      	mov	r3, r0
 800aff0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aff2:	e003      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	75fb      	strb	r3, [r7, #23]
      break;
 800aff8:	e000      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800affa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d109      	bne.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b002:	4b24      	ldr	r3, [pc, #144]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b006:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b00e:	4921      	ldr	r1, [pc, #132]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b010:	4313      	orrs	r3, r2
 800b012:	654b      	str	r3, [r1, #84]	; 0x54
 800b014:	e001      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0302 	and.w	r3, r3, #2
 800b022:	2b00      	cmp	r3, #0
 800b024:	d03e      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b02a:	2b05      	cmp	r3, #5
 800b02c:	d820      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b077 	.word	0x0800b077
 800b038:	0800b04d 	.word	0x0800b04d
 800b03c:	0800b05f 	.word	0x0800b05f
 800b040:	0800b077 	.word	0x0800b077
 800b044:	0800b077 	.word	0x0800b077
 800b048:	0800b077 	.word	0x0800b077
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3304      	adds	r3, #4
 800b050:	2101      	movs	r1, #1
 800b052:	4618      	mov	r0, r3
 800b054:	f000 faf8 	bl	800b648 <RCCEx_PLL2_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b05c:	e00c      	b.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3324      	adds	r3, #36	; 0x24
 800b062:	2101      	movs	r1, #1
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fba1 	bl	800b7ac <RCCEx_PLL3_Config>
 800b06a:	4603      	mov	r3, r0
 800b06c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b06e:	e003      	b.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	e000      	b.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b076:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d110      	bne.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b07e:	4b05      	ldr	r3, [pc, #20]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	f023 0207 	bic.w	r2, r3, #7
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08a:	4902      	ldr	r1, [pc, #8]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	654b      	str	r3, [r1, #84]	; 0x54
 800b090:	e008      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b092:	bf00      	nop
 800b094:	58024400 	.word	0x58024400
 800b098:	58024800 	.word	0x58024800
 800b09c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d039      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	d820      	bhi.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b0ba:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c0:	0800b103 	.word	0x0800b103
 800b0c4:	0800b0d9 	.word	0x0800b0d9
 800b0c8:	0800b0eb 	.word	0x0800b0eb
 800b0cc:	0800b103 	.word	0x0800b103
 800b0d0:	0800b103 	.word	0x0800b103
 800b0d4:	0800b103 	.word	0x0800b103
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	2101      	movs	r1, #1
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fab2 	bl	800b648 <RCCEx_PLL2_Config>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b0e8:	e00c      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3324      	adds	r3, #36	; 0x24
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fb5b 	bl	800b7ac <RCCEx_PLL3_Config>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b0fa:	e003      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b100:	e000      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b102:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10a      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b10a:	4bb7      	ldr	r3, [pc, #732]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10e:	f023 0207 	bic.w	r2, r3, #7
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b118:	49b3      	ldr	r1, [pc, #716]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	658b      	str	r3, [r1, #88]	; 0x58
 800b11e:	e001      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0320 	and.w	r3, r3, #32
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d04b      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b13a:	d02e      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b13c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b140:	d828      	bhi.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b146:	d02a      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b14c:	d822      	bhi.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b14e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b152:	d026      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b158:	d81c      	bhi.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15e:	d010      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b164:	d816      	bhi.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d01d      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b16a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b16e:	d111      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3304      	adds	r3, #4
 800b174:	2100      	movs	r1, #0
 800b176:	4618      	mov	r0, r3
 800b178:	f000 fa66 	bl	800b648 <RCCEx_PLL2_Config>
 800b17c:	4603      	mov	r3, r0
 800b17e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b180:	e012      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3324      	adds	r3, #36	; 0x24
 800b186:	2102      	movs	r1, #2
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 fb0f 	bl	800b7ac <RCCEx_PLL3_Config>
 800b18e:	4603      	mov	r3, r0
 800b190:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b192:	e009      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	75fb      	strb	r3, [r7, #23]
      break;
 800b198:	e006      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b19a:	bf00      	nop
 800b19c:	e004      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b1a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b1ae:	4b8e      	ldr	r3, [pc, #568]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1bc:	498a      	ldr	r1, [pc, #552]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	654b      	str	r3, [r1, #84]	; 0x54
 800b1c2:	e001      	b.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
 800b1c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d04b      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b1de:	d02e      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b1e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b1e4:	d828      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b1e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ea:	d02a      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b1ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f0:	d822      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b1f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1f6:	d026      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b1f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1fc:	d81c      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b1fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b202:	d010      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b208:	d816      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01d      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b212:	d111      	bne.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3304      	adds	r3, #4
 800b218:	2100      	movs	r1, #0
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fa14 	bl	800b648 <RCCEx_PLL2_Config>
 800b220:	4603      	mov	r3, r0
 800b222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b224:	e012      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3324      	adds	r3, #36	; 0x24
 800b22a:	2102      	movs	r1, #2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fabd 	bl	800b7ac <RCCEx_PLL3_Config>
 800b232:	4603      	mov	r3, r0
 800b234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b236:	e009      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
      break;
 800b23c:	e006      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b23e:	bf00      	nop
 800b240:	e004      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b242:	bf00      	nop
 800b244:	e002      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b246:	bf00      	nop
 800b248:	e000      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b24a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b252:	4b65      	ldr	r3, [pc, #404]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b256:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b260:	4961      	ldr	r1, [pc, #388]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b262:	4313      	orrs	r3, r2
 800b264:	658b      	str	r3, [r1, #88]	; 0x58
 800b266:	e001      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b274:	2b00      	cmp	r3, #0
 800b276:	d04b      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b27e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b282:	d02e      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b284:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b288:	d828      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b28a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b28e:	d02a      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b294:	d822      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b296:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b29a:	d026      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b29c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b2a0:	d81c      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2a6:	d010      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2ac:	d816      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01d      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b2b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2b6:	d111      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f9c2 	bl	800b648 <RCCEx_PLL2_Config>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b2c8:	e012      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3324      	adds	r3, #36	; 0x24
 800b2ce:	2102      	movs	r1, #2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fa6b 	bl	800b7ac <RCCEx_PLL3_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b2da:	e009      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e0:	e006      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b2e2:	bf00      	nop
 800b2e4:	e004      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b2e6:	bf00      	nop
 800b2e8:	e002      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b2ea:	bf00      	nop
 800b2ec:	e000      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b2ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b2f6:	4b3c      	ldr	r3, [pc, #240]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b304:	4938      	ldr	r1, [pc, #224]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b306:	4313      	orrs	r3, r2
 800b308:	658b      	str	r3, [r1, #88]	; 0x58
 800b30a:	e001      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01a      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b326:	d10a      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3324      	adds	r3, #36	; 0x24
 800b32c:	2102      	movs	r1, #2
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fa3c 	bl	800b7ac <RCCEx_PLL3_Config>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b33e:	4b2a      	ldr	r3, [pc, #168]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b342:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b34c:	4926      	ldr	r1, [pc, #152]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0310 	and.w	r3, r3, #16
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d01a      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b368:	d10a      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3324      	adds	r3, #36	; 0x24
 800b36e:	2102      	movs	r1, #2
 800b370:	4618      	mov	r0, r3
 800b372:	f000 fa1b 	bl	800b7ac <RCCEx_PLL3_Config>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b380:	4b19      	ldr	r3, [pc, #100]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b38e:	4916      	ldr	r1, [pc, #88]	; (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b390:	4313      	orrs	r3, r2
 800b392:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d036      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3aa:	d01f      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b3ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3b0:	d817      	bhi.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b3b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ba:	d009      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b3bc:	e011      	b.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 f93f 	bl	800b648 <RCCEx_PLL2_Config>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b3ce:	e00e      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3324      	adds	r3, #36	; 0x24
 800b3d4:	2102      	movs	r1, #2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 f9e8 	bl	800b7ac <RCCEx_PLL3_Config>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b3e0:	e005      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e6:	e002      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b3e8:	58024400 	.word	0x58024400
      break;
 800b3ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b3f4:	4b93      	ldr	r3, [pc, #588]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b402:	4990      	ldr	r1, [pc, #576]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b404:	4313      	orrs	r3, r2
 800b406:	658b      	str	r3, [r1, #88]	; 0x58
 800b408:	e001      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d033      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b424:	d01c      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b42a:	d816      	bhi.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b42c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b430:	d003      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b436:	d007      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b438:	e00f      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b43a:	4b82      	ldr	r3, [pc, #520]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	4a81      	ldr	r2, [pc, #516]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b446:	e00c      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3324      	adds	r3, #36	; 0x24
 800b44c:	2101      	movs	r1, #1
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 f9ac 	bl	800b7ac <RCCEx_PLL3_Config>
 800b454:	4603      	mov	r3, r0
 800b456:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b458:	e003      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]
      break;
 800b45e:	e000      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b460:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b468:	4b76      	ldr	r3, [pc, #472]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b476:	4973      	ldr	r1, [pc, #460]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	654b      	str	r3, [r1, #84]	; 0x54
 800b47c:	e001      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d029      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b49a:	d007      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b49c:	e00f      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b49e:	4b69      	ldr	r3, [pc, #420]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a2:	4a68      	ldr	r2, [pc, #416]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b4aa:	e00b      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	2102      	movs	r1, #2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f8c8 	bl	800b648 <RCCEx_PLL2_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b4bc:	e002      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d109      	bne.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b4ca:	4b5e      	ldr	r3, [pc, #376]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d6:	495b      	ldr	r1, [pc, #364]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b4dc:	e001      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3324      	adds	r3, #36	; 0x24
 800b4f2:	2102      	movs	r1, #2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f959 	bl	800b7ac <RCCEx_PLL3_Config>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d030      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b518:	d017      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b51a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b51e:	d811      	bhi.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b524:	d013      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b52a:	d80b      	bhi.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d010      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b534:	d106      	bne.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b536:	4b43      	ldr	r3, [pc, #268]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53a:	4a42      	ldr	r2, [pc, #264]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b53c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b542:	e007      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	75fb      	strb	r3, [r7, #23]
      break;
 800b548:	e004      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b552:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b55a:	4b3a      	ldr	r3, [pc, #232]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b55e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b566:	4937      	ldr	r1, [pc, #220]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	654b      	str	r3, [r1, #84]	; 0x54
 800b56c:	e001      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d008      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b57e:	4b31      	ldr	r3, [pc, #196]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b58a:	492e      	ldr	r1, [pc, #184]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d009      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b59c:	4b29      	ldr	r3, [pc, #164]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5aa:	4926      	ldr	r1, [pc, #152]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b5bc:	4b21      	ldr	r3, [pc, #132]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5c8:	491e      	ldr	r1, [pc, #120]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00d      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5da:	4b1a      	ldr	r3, [pc, #104]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	4a19      	ldr	r2, [pc, #100]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5e4:	6113      	str	r3, [r2, #16]
 800b5e6:	4b17      	ldr	r3, [pc, #92]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5e8:	691a      	ldr	r2, [r3, #16]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b5f0:	4914      	ldr	r1, [pc, #80]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	da08      	bge.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60a:	490e      	ldr	r1, [pc, #56]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b61c:	4b09      	ldr	r3, [pc, #36]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b62a:	4906      	ldr	r1, [pc, #24]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b630:	7dbb      	ldrb	r3, [r7, #22]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	e000      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	58024400 	.word	0x58024400

0800b648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b656:	4b53      	ldr	r3, [pc, #332]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d101      	bne.n	800b666 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e099      	b.n	800b79a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b666:	4b4f      	ldr	r3, [pc, #316]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a4e      	ldr	r2, [pc, #312]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b66c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b672:	f7fc fbcf 	bl	8007e14 <HAL_GetTick>
 800b676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b678:	e008      	b.n	800b68c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b67a:	f7fc fbcb 	bl	8007e14 <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	2b02      	cmp	r3, #2
 800b686:	d901      	bls.n	800b68c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e086      	b.n	800b79a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b68c:	4b45      	ldr	r3, [pc, #276]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1f0      	bne.n	800b67a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b698:	4b42      	ldr	r3, [pc, #264]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	031b      	lsls	r3, r3, #12
 800b6a6:	493f      	ldr	r1, [pc, #252]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	628b      	str	r3, [r1, #40]	; 0x28
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	025b      	lsls	r3, r3, #9
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	041b      	lsls	r3, r3, #16
 800b6ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	061b      	lsls	r3, r3, #24
 800b6d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6dc:	4931      	ldr	r1, [pc, #196]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b6e2:	4b30      	ldr	r3, [pc, #192]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	492d      	ldr	r1, [pc, #180]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b6f4:	4b2b      	ldr	r3, [pc, #172]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	f023 0220 	bic.w	r2, r3, #32
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	4928      	ldr	r1, [pc, #160]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b702:	4313      	orrs	r3, r2
 800b704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70a:	4a26      	ldr	r2, [pc, #152]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b70c:	f023 0310 	bic.w	r3, r3, #16
 800b710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b712:	4b24      	ldr	r3, [pc, #144]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b716:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <RCCEx_PLL2_Config+0x160>)
 800b718:	4013      	ands	r3, r2
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	69d2      	ldr	r2, [r2, #28]
 800b71e:	00d2      	lsls	r2, r2, #3
 800b720:	4920      	ldr	r1, [pc, #128]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b722:	4313      	orrs	r3, r2
 800b724:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b726:	4b1f      	ldr	r3, [pc, #124]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72a:	4a1e      	ldr	r2, [pc, #120]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b72c:	f043 0310 	orr.w	r3, r3, #16
 800b730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d106      	bne.n	800b746 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b738:	4b1a      	ldr	r3, [pc, #104]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	4a19      	ldr	r2, [pc, #100]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b73e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b742:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b744:	e00f      	b.n	800b766 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d106      	bne.n	800b75a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b74c:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b756:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b758:	e005      	b.n	800b766 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b75a:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75e:	4a11      	ldr	r2, [pc, #68]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b766:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a0e      	ldr	r2, [pc, #56]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b76c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b772:	f7fc fb4f 	bl	8007e14 <HAL_GetTick>
 800b776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b778:	e008      	b.n	800b78c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b77a:	f7fc fb4b 	bl	8007e14 <HAL_GetTick>
 800b77e:	4602      	mov	r2, r0
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	2b02      	cmp	r3, #2
 800b786:	d901      	bls.n	800b78c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b788:	2303      	movs	r3, #3
 800b78a:	e006      	b.n	800b79a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b78c:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <RCCEx_PLL2_Config+0x15c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0f0      	beq.n	800b77a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b798:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	58024400 	.word	0x58024400
 800b7a8:	ffff0007 	.word	0xffff0007

0800b7ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7ba:	4b53      	ldr	r3, [pc, #332]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d101      	bne.n	800b7ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e099      	b.n	800b8fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b7ca:	4b4f      	ldr	r3, [pc, #316]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a4e      	ldr	r2, [pc, #312]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b7d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7d6:	f7fc fb1d 	bl	8007e14 <HAL_GetTick>
 800b7da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7dc:	e008      	b.n	800b7f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b7de:	f7fc fb19 	bl	8007e14 <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d901      	bls.n	800b7f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e086      	b.n	800b8fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7f0:	4b45      	ldr	r3, [pc, #276]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1f0      	bne.n	800b7de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b7fc:	4b42      	ldr	r3, [pc, #264]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b800:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	051b      	lsls	r3, r3, #20
 800b80a:	493f      	ldr	r1, [pc, #252]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b80c:	4313      	orrs	r3, r2
 800b80e:	628b      	str	r3, [r1, #40]	; 0x28
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	3b01      	subs	r3, #1
 800b816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	3b01      	subs	r3, #1
 800b820:	025b      	lsls	r3, r3, #9
 800b822:	b29b      	uxth	r3, r3
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	041b      	lsls	r3, r3, #16
 800b82e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b832:	431a      	orrs	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	3b01      	subs	r3, #1
 800b83a:	061b      	lsls	r3, r3, #24
 800b83c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b840:	4931      	ldr	r1, [pc, #196]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b842:	4313      	orrs	r3, r2
 800b844:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b846:	4b30      	ldr	r3, [pc, #192]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	492d      	ldr	r1, [pc, #180]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b854:	4313      	orrs	r3, r2
 800b856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b858:	4b2b      	ldr	r3, [pc, #172]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	4928      	ldr	r1, [pc, #160]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b866:	4313      	orrs	r3, r2
 800b868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b86a:	4b27      	ldr	r3, [pc, #156]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86e:	4a26      	ldr	r2, [pc, #152]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b876:	4b24      	ldr	r3, [pc, #144]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b87a:	4b24      	ldr	r3, [pc, #144]	; (800b90c <RCCEx_PLL3_Config+0x160>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	69d2      	ldr	r2, [r2, #28]
 800b882:	00d2      	lsls	r2, r2, #3
 800b884:	4920      	ldr	r1, [pc, #128]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b886:	4313      	orrs	r3, r2
 800b888:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b88a:	4b1f      	ldr	r3, [pc, #124]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88e:	4a1e      	ldr	r2, [pc, #120]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b89c:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	4a19      	ldr	r2, [pc, #100]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b8a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8a8:	e00f      	b.n	800b8ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d106      	bne.n	800b8be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b8b0:	4b15      	ldr	r3, [pc, #84]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	4a14      	ldr	r2, [pc, #80]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b8ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8bc:	e005      	b.n	800b8ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b8be:	4b12      	ldr	r3, [pc, #72]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	4a11      	ldr	r2, [pc, #68]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b8ca:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a0e      	ldr	r2, [pc, #56]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8d6:	f7fc fa9d 	bl	8007e14 <HAL_GetTick>
 800b8da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8dc:	e008      	b.n	800b8f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b8de:	f7fc fa99 	bl	8007e14 <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d901      	bls.n	800b8f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	e006      	b.n	800b8fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8f0:	4b05      	ldr	r3, [pc, #20]	; (800b908 <RCCEx_PLL3_Config+0x15c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0f0      	beq.n	800b8de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	58024400 	.word	0x58024400
 800b90c:	ffff0007 	.word	0xffff0007

0800b910 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e0eb      	b.n	800bafe <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a75      	ldr	r2, [pc, #468]	; (800bb08 <HAL_SPI_Init+0x1f8>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d00f      	beq.n	800b956 <HAL_SPI_Init+0x46>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a74      	ldr	r2, [pc, #464]	; (800bb0c <HAL_SPI_Init+0x1fc>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d00a      	beq.n	800b956 <HAL_SPI_Init+0x46>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a72      	ldr	r2, [pc, #456]	; (800bb10 <HAL_SPI_Init+0x200>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d005      	beq.n	800b956 <HAL_SPI_Init+0x46>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	2b0f      	cmp	r3, #15
 800b950:	d901      	bls.n	800b956 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e0d3      	b.n	800bafe <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f8dc 	bl	800bb14 <SPI_GetPacketSize>
 800b95c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a69      	ldr	r2, [pc, #420]	; (800bb08 <HAL_SPI_Init+0x1f8>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00c      	beq.n	800b982 <HAL_SPI_Init+0x72>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a67      	ldr	r2, [pc, #412]	; (800bb0c <HAL_SPI_Init+0x1fc>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d007      	beq.n	800b982 <HAL_SPI_Init+0x72>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a66      	ldr	r2, [pc, #408]	; (800bb10 <HAL_SPI_Init+0x200>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d002      	beq.n	800b982 <HAL_SPI_Init+0x72>
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2b08      	cmp	r3, #8
 800b980:	d811      	bhi.n	800b9a6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b986:	4a60      	ldr	r2, [pc, #384]	; (800bb08 <HAL_SPI_Init+0x1f8>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d009      	beq.n	800b9a0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a5e      	ldr	r2, [pc, #376]	; (800bb0c <HAL_SPI_Init+0x1fc>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d004      	beq.n	800b9a0 <HAL_SPI_Init+0x90>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a5d      	ldr	r2, [pc, #372]	; (800bb10 <HAL_SPI_Init+0x200>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d104      	bne.n	800b9aa <HAL_SPI_Init+0x9a>
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b10      	cmp	r3, #16
 800b9a4:	d901      	bls.n	800b9aa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e0a9      	b.n	800bafe <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d106      	bne.n	800b9c4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7fb fb76 	bl	80070b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0201 	bic.w	r2, r2, #1
 800b9da:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9e4:	d119      	bne.n	800ba1a <HAL_SPI_Init+0x10a>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9ee:	d103      	bne.n	800b9f8 <HAL_SPI_Init+0xe8>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10c      	bne.n	800ba1a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba08:	d107      	bne.n	800ba1a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69da      	ldr	r2, [r3, #28]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	431a      	orrs	r2, r3
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2c:	ea42 0103 	orr.w	r1, r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	431a      	orrs	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba6e:	431a      	orrs	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	431a      	orrs	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba7a:	ea42 0103 	orr.w	r1, r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d113      	bne.n	800baba <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baa4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bab8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f022 0201 	bic.w	r2, r2, #1
 800bac8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	40013000 	.word	0x40013000
 800bb0c:	40003800 	.word	0x40003800
 800bb10:	40003c00 	.word	0x40003c00

0800bb14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb20:	095b      	lsrs	r3, r3, #5
 800bb22:	3301      	adds	r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	3307      	adds	r3, #7
 800bb32:	08db      	lsrs	r3, r3, #3
 800bb34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e049      	b.n	800bbf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d106      	bne.n	800bb76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7fb fe5d 	bl	8007830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2202      	movs	r2, #2
 800bb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3304      	adds	r3, #4
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f000 fba3 	bl	800c2d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e049      	b.n	800bc9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f841 	bl	800bca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f000 fb4c 	bl	800c2d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
	...

0800bcbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d109      	bne.n	800bce0 <HAL_TIM_PWM_Start+0x24>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	e03c      	b.n	800bd5a <HAL_TIM_PWM_Start+0x9e>
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d109      	bne.n	800bcfa <HAL_TIM_PWM_Start+0x3e>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	bf14      	ite	ne
 800bcf2:	2301      	movne	r3, #1
 800bcf4:	2300      	moveq	r3, #0
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	e02f      	b.n	800bd5a <HAL_TIM_PWM_Start+0x9e>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b08      	cmp	r3, #8
 800bcfe:	d109      	bne.n	800bd14 <HAL_TIM_PWM_Start+0x58>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	bf14      	ite	ne
 800bd0c:	2301      	movne	r3, #1
 800bd0e:	2300      	moveq	r3, #0
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	e022      	b.n	800bd5a <HAL_TIM_PWM_Start+0x9e>
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b0c      	cmp	r3, #12
 800bd18:	d109      	bne.n	800bd2e <HAL_TIM_PWM_Start+0x72>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	e015      	b.n	800bd5a <HAL_TIM_PWM_Start+0x9e>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b10      	cmp	r3, #16
 800bd32:	d109      	bne.n	800bd48 <HAL_TIM_PWM_Start+0x8c>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	bf14      	ite	ne
 800bd40:	2301      	movne	r3, #1
 800bd42:	2300      	moveq	r3, #0
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	e008      	b.n	800bd5a <HAL_TIM_PWM_Start+0x9e>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	bf14      	ite	ne
 800bd54:	2301      	movne	r3, #1
 800bd56:	2300      	moveq	r3, #0
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e09c      	b.n	800be9c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d104      	bne.n	800bd72 <HAL_TIM_PWM_Start+0xb6>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd70:	e023      	b.n	800bdba <HAL_TIM_PWM_Start+0xfe>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	d104      	bne.n	800bd82 <HAL_TIM_PWM_Start+0xc6>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd80:	e01b      	b.n	800bdba <HAL_TIM_PWM_Start+0xfe>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b08      	cmp	r3, #8
 800bd86:	d104      	bne.n	800bd92 <HAL_TIM_PWM_Start+0xd6>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd90:	e013      	b.n	800bdba <HAL_TIM_PWM_Start+0xfe>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b0c      	cmp	r3, #12
 800bd96:	d104      	bne.n	800bda2 <HAL_TIM_PWM_Start+0xe6>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bda0:	e00b      	b.n	800bdba <HAL_TIM_PWM_Start+0xfe>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b10      	cmp	r3, #16
 800bda6:	d104      	bne.n	800bdb2 <HAL_TIM_PWM_Start+0xf6>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdb0:	e003      	b.n	800bdba <HAL_TIM_PWM_Start+0xfe>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fe8c 	bl	800cae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a35      	ldr	r2, [pc, #212]	; (800bea4 <HAL_TIM_PWM_Start+0x1e8>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d013      	beq.n	800bdfa <HAL_TIM_PWM_Start+0x13e>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a34      	ldr	r2, [pc, #208]	; (800bea8 <HAL_TIM_PWM_Start+0x1ec>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00e      	beq.n	800bdfa <HAL_TIM_PWM_Start+0x13e>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a32      	ldr	r2, [pc, #200]	; (800beac <HAL_TIM_PWM_Start+0x1f0>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d009      	beq.n	800bdfa <HAL_TIM_PWM_Start+0x13e>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a31      	ldr	r2, [pc, #196]	; (800beb0 <HAL_TIM_PWM_Start+0x1f4>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d004      	beq.n	800bdfa <HAL_TIM_PWM_Start+0x13e>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a2f      	ldr	r2, [pc, #188]	; (800beb4 <HAL_TIM_PWM_Start+0x1f8>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d101      	bne.n	800bdfe <HAL_TIM_PWM_Start+0x142>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e000      	b.n	800be00 <HAL_TIM_PWM_Start+0x144>
 800bdfe:	2300      	movs	r3, #0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d007      	beq.n	800be14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a22      	ldr	r2, [pc, #136]	; (800bea4 <HAL_TIM_PWM_Start+0x1e8>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d01d      	beq.n	800be5a <HAL_TIM_PWM_Start+0x19e>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be26:	d018      	beq.n	800be5a <HAL_TIM_PWM_Start+0x19e>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a22      	ldr	r2, [pc, #136]	; (800beb8 <HAL_TIM_PWM_Start+0x1fc>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d013      	beq.n	800be5a <HAL_TIM_PWM_Start+0x19e>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a21      	ldr	r2, [pc, #132]	; (800bebc <HAL_TIM_PWM_Start+0x200>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d00e      	beq.n	800be5a <HAL_TIM_PWM_Start+0x19e>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a1f      	ldr	r2, [pc, #124]	; (800bec0 <HAL_TIM_PWM_Start+0x204>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d009      	beq.n	800be5a <HAL_TIM_PWM_Start+0x19e>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <HAL_TIM_PWM_Start+0x1ec>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d004      	beq.n	800be5a <HAL_TIM_PWM_Start+0x19e>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a1b      	ldr	r2, [pc, #108]	; (800bec4 <HAL_TIM_PWM_Start+0x208>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d115      	bne.n	800be86 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	689a      	ldr	r2, [r3, #8]
 800be60:	4b19      	ldr	r3, [pc, #100]	; (800bec8 <HAL_TIM_PWM_Start+0x20c>)
 800be62:	4013      	ands	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b06      	cmp	r3, #6
 800be6a:	d015      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1dc>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be72:	d011      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f042 0201 	orr.w	r2, r2, #1
 800be82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be84:	e008      	b.n	800be98 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f042 0201 	orr.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	e000      	b.n	800be9a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	40010000 	.word	0x40010000
 800bea8:	40010400 	.word	0x40010400
 800beac:	40014000 	.word	0x40014000
 800beb0:	40014400 	.word	0x40014400
 800beb4:	40014800 	.word	0x40014800
 800beb8:	40000400 	.word	0x40000400
 800bebc:	40000800 	.word	0x40000800
 800bec0:	40000c00 	.word	0x40000c00
 800bec4:	40001800 	.word	0x40001800
 800bec8:	00010007 	.word	0x00010007

0800becc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d101      	bne.n	800bee6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bee2:	2302      	movs	r3, #2
 800bee4:	e0fd      	b.n	800c0e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b14      	cmp	r3, #20
 800bef2:	f200 80f0 	bhi.w	800c0d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bef6:	a201      	add	r2, pc, #4	; (adr r2, 800befc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf51 	.word	0x0800bf51
 800bf00:	0800c0d7 	.word	0x0800c0d7
 800bf04:	0800c0d7 	.word	0x0800c0d7
 800bf08:	0800c0d7 	.word	0x0800c0d7
 800bf0c:	0800bf91 	.word	0x0800bf91
 800bf10:	0800c0d7 	.word	0x0800c0d7
 800bf14:	0800c0d7 	.word	0x0800c0d7
 800bf18:	0800c0d7 	.word	0x0800c0d7
 800bf1c:	0800bfd3 	.word	0x0800bfd3
 800bf20:	0800c0d7 	.word	0x0800c0d7
 800bf24:	0800c0d7 	.word	0x0800c0d7
 800bf28:	0800c0d7 	.word	0x0800c0d7
 800bf2c:	0800c013 	.word	0x0800c013
 800bf30:	0800c0d7 	.word	0x0800c0d7
 800bf34:	0800c0d7 	.word	0x0800c0d7
 800bf38:	0800c0d7 	.word	0x0800c0d7
 800bf3c:	0800c055 	.word	0x0800c055
 800bf40:	0800c0d7 	.word	0x0800c0d7
 800bf44:	0800c0d7 	.word	0x0800c0d7
 800bf48:	0800c0d7 	.word	0x0800c0d7
 800bf4c:	0800c095 	.word	0x0800c095
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 fa56 	bl	800c408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699a      	ldr	r2, [r3, #24]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f042 0208 	orr.w	r2, r2, #8
 800bf6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0204 	bic.w	r2, r2, #4
 800bf7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6999      	ldr	r1, [r3, #24]
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	691a      	ldr	r2, [r3, #16]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	619a      	str	r2, [r3, #24]
      break;
 800bf8e:	e0a3      	b.n	800c0d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68b9      	ldr	r1, [r7, #8]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fac6 	bl	800c528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	699a      	ldr	r2, [r3, #24]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6999      	ldr	r1, [r3, #24]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	021a      	lsls	r2, r3, #8
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	619a      	str	r2, [r3, #24]
      break;
 800bfd0:	e082      	b.n	800c0d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fb2f 	bl	800c63c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69da      	ldr	r2, [r3, #28]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0208 	orr.w	r2, r2, #8
 800bfec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69da      	ldr	r2, [r3, #28]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f022 0204 	bic.w	r2, r2, #4
 800bffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69d9      	ldr	r1, [r3, #28]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	691a      	ldr	r2, [r3, #16]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	61da      	str	r2, [r3, #28]
      break;
 800c010:	e062      	b.n	800c0d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 fb95 	bl	800c748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	69da      	ldr	r2, [r3, #28]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c02c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69da      	ldr	r2, [r3, #28]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c03c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69d9      	ldr	r1, [r3, #28]
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	021a      	lsls	r2, r3, #8
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	430a      	orrs	r2, r1
 800c050:	61da      	str	r2, [r3, #28]
      break;
 800c052:	e041      	b.n	800c0d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68b9      	ldr	r1, [r7, #8]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fbdc 	bl	800c818 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f042 0208 	orr.w	r2, r2, #8
 800c06e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f022 0204 	bic.w	r2, r2, #4
 800c07e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	691a      	ldr	r2, [r3, #16]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	430a      	orrs	r2, r1
 800c090:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c092:	e021      	b.n	800c0d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68b9      	ldr	r1, [r7, #8]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 fc1e 	bl	800c8dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	021a      	lsls	r2, r3, #8
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	430a      	orrs	r2, r1
 800c0d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0d4:	e000      	b.n	800c0d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c0d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop

0800c0ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d101      	bne.n	800c104 <HAL_TIM_ConfigClockSource+0x18>
 800c100:	2302      	movs	r3, #2
 800c102:	e0db      	b.n	800c2bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2202      	movs	r2, #2
 800c110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4b69      	ldr	r3, [pc, #420]	; (800c2c4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c120:	4013      	ands	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c12a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a63      	ldr	r2, [pc, #396]	; (800c2c8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	f000 80a9 	beq.w	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c140:	4a61      	ldr	r2, [pc, #388]	; (800c2c8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c142:	4293      	cmp	r3, r2
 800c144:	f200 80ae 	bhi.w	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c148:	4a60      	ldr	r2, [pc, #384]	; (800c2cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	f000 80a1 	beq.w	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c150:	4a5e      	ldr	r2, [pc, #376]	; (800c2cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	f200 80a6 	bhi.w	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c158:	4a5d      	ldr	r2, [pc, #372]	; (800c2d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	f000 8099 	beq.w	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c160:	4a5b      	ldr	r2, [pc, #364]	; (800c2d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c162:	4293      	cmp	r3, r2
 800c164:	f200 809e 	bhi.w	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c168:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c16c:	f000 8091 	beq.w	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c170:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c174:	f200 8096 	bhi.w	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c17c:	f000 8089 	beq.w	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c184:	f200 808e 	bhi.w	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c18c:	d03e      	beq.n	800c20c <HAL_TIM_ConfigClockSource+0x120>
 800c18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c192:	f200 8087 	bhi.w	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c19a:	f000 8085 	beq.w	800c2a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a2:	d87f      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1a4:	2b70      	cmp	r3, #112	; 0x70
 800c1a6:	d01a      	beq.n	800c1de <HAL_TIM_ConfigClockSource+0xf2>
 800c1a8:	2b70      	cmp	r3, #112	; 0x70
 800c1aa:	d87b      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1ac:	2b60      	cmp	r3, #96	; 0x60
 800c1ae:	d050      	beq.n	800c252 <HAL_TIM_ConfigClockSource+0x166>
 800c1b0:	2b60      	cmp	r3, #96	; 0x60
 800c1b2:	d877      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1b4:	2b50      	cmp	r3, #80	; 0x50
 800c1b6:	d03c      	beq.n	800c232 <HAL_TIM_ConfigClockSource+0x146>
 800c1b8:	2b50      	cmp	r3, #80	; 0x50
 800c1ba:	d873      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1bc:	2b40      	cmp	r3, #64	; 0x40
 800c1be:	d058      	beq.n	800c272 <HAL_TIM_ConfigClockSource+0x186>
 800c1c0:	2b40      	cmp	r3, #64	; 0x40
 800c1c2:	d86f      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1c4:	2b30      	cmp	r3, #48	; 0x30
 800c1c6:	d064      	beq.n	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c1c8:	2b30      	cmp	r3, #48	; 0x30
 800c1ca:	d86b      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1cc:	2b20      	cmp	r3, #32
 800c1ce:	d060      	beq.n	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c1d0:	2b20      	cmp	r3, #32
 800c1d2:	d867      	bhi.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d05c      	beq.n	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
 800c1d8:	2b10      	cmp	r3, #16
 800c1da:	d05a      	beq.n	800c292 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c1dc:	e062      	b.n	800c2a4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6818      	ldr	r0, [r3, #0]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	6899      	ldr	r1, [r3, #8]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f000 fc57 	bl	800caa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	609a      	str	r2, [r3, #8]
      break;
 800c20a:	e04e      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	6899      	ldr	r1, [r3, #8]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	f000 fc40 	bl	800caa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689a      	ldr	r2, [r3, #8]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c22e:	609a      	str	r2, [r3, #8]
      break;
 800c230:	e03b      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	6859      	ldr	r1, [r3, #4]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	461a      	mov	r2, r3
 800c240:	f000 fbb0 	bl	800c9a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2150      	movs	r1, #80	; 0x50
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 fc0a 	bl	800ca64 <TIM_ITRx_SetConfig>
      break;
 800c250:	e02b      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	6859      	ldr	r1, [r3, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	461a      	mov	r2, r3
 800c260:	f000 fbcf 	bl	800ca02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2160      	movs	r1, #96	; 0x60
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 fbfa 	bl	800ca64 <TIM_ITRx_SetConfig>
      break;
 800c270:	e01b      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	6859      	ldr	r1, [r3, #4]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	461a      	mov	r2, r3
 800c280:	f000 fb90 	bl	800c9a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2140      	movs	r1, #64	; 0x40
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 fbea 	bl	800ca64 <TIM_ITRx_SetConfig>
      break;
 800c290:	e00b      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f000 fbe1 	bl	800ca64 <TIM_ITRx_SetConfig>
        break;
 800c2a2:	e002      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c2a4:	bf00      	nop
 800c2a6:	e000      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c2a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	ffceff88 	.word	0xffceff88
 800c2c8:	00100040 	.word	0x00100040
 800c2cc:	00100030 	.word	0x00100030
 800c2d0:	00100020 	.word	0x00100020

0800c2d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a40      	ldr	r2, [pc, #256]	; (800c3e8 <TIM_Base_SetConfig+0x114>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d013      	beq.n	800c314 <TIM_Base_SetConfig+0x40>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f2:	d00f      	beq.n	800c314 <TIM_Base_SetConfig+0x40>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a3d      	ldr	r2, [pc, #244]	; (800c3ec <TIM_Base_SetConfig+0x118>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d00b      	beq.n	800c314 <TIM_Base_SetConfig+0x40>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a3c      	ldr	r2, [pc, #240]	; (800c3f0 <TIM_Base_SetConfig+0x11c>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d007      	beq.n	800c314 <TIM_Base_SetConfig+0x40>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a3b      	ldr	r2, [pc, #236]	; (800c3f4 <TIM_Base_SetConfig+0x120>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d003      	beq.n	800c314 <TIM_Base_SetConfig+0x40>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a3a      	ldr	r2, [pc, #232]	; (800c3f8 <TIM_Base_SetConfig+0x124>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d108      	bne.n	800c326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c31a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a2f      	ldr	r2, [pc, #188]	; (800c3e8 <TIM_Base_SetConfig+0x114>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d01f      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c334:	d01b      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a2c      	ldr	r2, [pc, #176]	; (800c3ec <TIM_Base_SetConfig+0x118>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d017      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a2b      	ldr	r2, [pc, #172]	; (800c3f0 <TIM_Base_SetConfig+0x11c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d013      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a2a      	ldr	r2, [pc, #168]	; (800c3f4 <TIM_Base_SetConfig+0x120>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00f      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a29      	ldr	r2, [pc, #164]	; (800c3f8 <TIM_Base_SetConfig+0x124>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d00b      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a28      	ldr	r2, [pc, #160]	; (800c3fc <TIM_Base_SetConfig+0x128>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d007      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a27      	ldr	r2, [pc, #156]	; (800c400 <TIM_Base_SetConfig+0x12c>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d003      	beq.n	800c36e <TIM_Base_SetConfig+0x9a>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a26      	ldr	r2, [pc, #152]	; (800c404 <TIM_Base_SetConfig+0x130>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d108      	bne.n	800c380 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a10      	ldr	r2, [pc, #64]	; (800c3e8 <TIM_Base_SetConfig+0x114>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d00f      	beq.n	800c3cc <TIM_Base_SetConfig+0xf8>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a12      	ldr	r2, [pc, #72]	; (800c3f8 <TIM_Base_SetConfig+0x124>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d00b      	beq.n	800c3cc <TIM_Base_SetConfig+0xf8>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a11      	ldr	r2, [pc, #68]	; (800c3fc <TIM_Base_SetConfig+0x128>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d007      	beq.n	800c3cc <TIM_Base_SetConfig+0xf8>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a10      	ldr	r2, [pc, #64]	; (800c400 <TIM_Base_SetConfig+0x12c>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d003      	beq.n	800c3cc <TIM_Base_SetConfig+0xf8>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a0f      	ldr	r2, [pc, #60]	; (800c404 <TIM_Base_SetConfig+0x130>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d103      	bne.n	800c3d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	691a      	ldr	r2, [r3, #16]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	615a      	str	r2, [r3, #20]
}
 800c3da:	bf00      	nop
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	40010000 	.word	0x40010000
 800c3ec:	40000400 	.word	0x40000400
 800c3f0:	40000800 	.word	0x40000800
 800c3f4:	40000c00 	.word	0x40000c00
 800c3f8:	40010400 	.word	0x40010400
 800c3fc:	40014000 	.word	0x40014000
 800c400:	40014400 	.word	0x40014400
 800c404:	40014800 	.word	0x40014800

0800c408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c408:	b480      	push	{r7}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	f023 0201 	bic.w	r2, r3, #1
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4b37      	ldr	r3, [pc, #220]	; (800c510 <TIM_OC1_SetConfig+0x108>)
 800c434:	4013      	ands	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f023 0303 	bic.w	r3, r3, #3
 800c43e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	4313      	orrs	r3, r2
 800c448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f023 0302 	bic.w	r3, r3, #2
 800c450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a2d      	ldr	r2, [pc, #180]	; (800c514 <TIM_OC1_SetConfig+0x10c>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d00f      	beq.n	800c484 <TIM_OC1_SetConfig+0x7c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a2c      	ldr	r2, [pc, #176]	; (800c518 <TIM_OC1_SetConfig+0x110>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d00b      	beq.n	800c484 <TIM_OC1_SetConfig+0x7c>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a2b      	ldr	r2, [pc, #172]	; (800c51c <TIM_OC1_SetConfig+0x114>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d007      	beq.n	800c484 <TIM_OC1_SetConfig+0x7c>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4a2a      	ldr	r2, [pc, #168]	; (800c520 <TIM_OC1_SetConfig+0x118>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d003      	beq.n	800c484 <TIM_OC1_SetConfig+0x7c>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a29      	ldr	r2, [pc, #164]	; (800c524 <TIM_OC1_SetConfig+0x11c>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d10c      	bne.n	800c49e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	f023 0308 	bic.w	r3, r3, #8
 800c48a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	4313      	orrs	r3, r2
 800c494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f023 0304 	bic.w	r3, r3, #4
 800c49c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a1c      	ldr	r2, [pc, #112]	; (800c514 <TIM_OC1_SetConfig+0x10c>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00f      	beq.n	800c4c6 <TIM_OC1_SetConfig+0xbe>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a1b      	ldr	r2, [pc, #108]	; (800c518 <TIM_OC1_SetConfig+0x110>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d00b      	beq.n	800c4c6 <TIM_OC1_SetConfig+0xbe>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a1a      	ldr	r2, [pc, #104]	; (800c51c <TIM_OC1_SetConfig+0x114>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d007      	beq.n	800c4c6 <TIM_OC1_SetConfig+0xbe>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a19      	ldr	r2, [pc, #100]	; (800c520 <TIM_OC1_SetConfig+0x118>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d003      	beq.n	800c4c6 <TIM_OC1_SetConfig+0xbe>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a18      	ldr	r2, [pc, #96]	; (800c524 <TIM_OC1_SetConfig+0x11c>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d111      	bne.n	800c4ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	621a      	str	r2, [r3, #32]
}
 800c504:	bf00      	nop
 800c506:	371c      	adds	r7, #28
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	fffeff8f 	.word	0xfffeff8f
 800c514:	40010000 	.word	0x40010000
 800c518:	40010400 	.word	0x40010400
 800c51c:	40014000 	.word	0x40014000
 800c520:	40014400 	.word	0x40014400
 800c524:	40014800 	.word	0x40014800

0800c528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	f023 0210 	bic.w	r2, r3, #16
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4b34      	ldr	r3, [pc, #208]	; (800c624 <TIM_OC2_SetConfig+0xfc>)
 800c554:	4013      	ands	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f023 0320 	bic.w	r3, r3, #32
 800c572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	011b      	lsls	r3, r3, #4
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a29      	ldr	r2, [pc, #164]	; (800c628 <TIM_OC2_SetConfig+0x100>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d003      	beq.n	800c590 <TIM_OC2_SetConfig+0x68>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a28      	ldr	r2, [pc, #160]	; (800c62c <TIM_OC2_SetConfig+0x104>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d10d      	bne.n	800c5ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a1e      	ldr	r2, [pc, #120]	; (800c628 <TIM_OC2_SetConfig+0x100>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d00f      	beq.n	800c5d4 <TIM_OC2_SetConfig+0xac>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a1d      	ldr	r2, [pc, #116]	; (800c62c <TIM_OC2_SetConfig+0x104>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00b      	beq.n	800c5d4 <TIM_OC2_SetConfig+0xac>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a1c      	ldr	r2, [pc, #112]	; (800c630 <TIM_OC2_SetConfig+0x108>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d007      	beq.n	800c5d4 <TIM_OC2_SetConfig+0xac>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a1b      	ldr	r2, [pc, #108]	; (800c634 <TIM_OC2_SetConfig+0x10c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d003      	beq.n	800c5d4 <TIM_OC2_SetConfig+0xac>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a1a      	ldr	r2, [pc, #104]	; (800c638 <TIM_OC2_SetConfig+0x110>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d113      	bne.n	800c5fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	699b      	ldr	r3, [r3, #24]
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	621a      	str	r2, [r3, #32]
}
 800c616:	bf00      	nop
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	feff8fff 	.word	0xfeff8fff
 800c628:	40010000 	.word	0x40010000
 800c62c:	40010400 	.word	0x40010400
 800c630:	40014000 	.word	0x40014000
 800c634:	40014400 	.word	0x40014400
 800c638:	40014800 	.word	0x40014800

0800c63c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a1b      	ldr	r3, [r3, #32]
 800c64a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f023 0303 	bic.w	r3, r3, #3
 800c672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	021b      	lsls	r3, r3, #8
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	4313      	orrs	r3, r2
 800c690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a27      	ldr	r2, [pc, #156]	; (800c734 <TIM_OC3_SetConfig+0xf8>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d003      	beq.n	800c6a2 <TIM_OC3_SetConfig+0x66>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a26      	ldr	r2, [pc, #152]	; (800c738 <TIM_OC3_SetConfig+0xfc>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d10d      	bne.n	800c6be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	021b      	lsls	r3, r3, #8
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a1c      	ldr	r2, [pc, #112]	; (800c734 <TIM_OC3_SetConfig+0xf8>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d00f      	beq.n	800c6e6 <TIM_OC3_SetConfig+0xaa>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a1b      	ldr	r2, [pc, #108]	; (800c738 <TIM_OC3_SetConfig+0xfc>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d00b      	beq.n	800c6e6 <TIM_OC3_SetConfig+0xaa>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a1a      	ldr	r2, [pc, #104]	; (800c73c <TIM_OC3_SetConfig+0x100>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d007      	beq.n	800c6e6 <TIM_OC3_SetConfig+0xaa>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a19      	ldr	r2, [pc, #100]	; (800c740 <TIM_OC3_SetConfig+0x104>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d003      	beq.n	800c6e6 <TIM_OC3_SetConfig+0xaa>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a18      	ldr	r2, [pc, #96]	; (800c744 <TIM_OC3_SetConfig+0x108>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d113      	bne.n	800c70e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	011b      	lsls	r3, r3, #4
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	011b      	lsls	r3, r3, #4
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	621a      	str	r2, [r3, #32]
}
 800c728:	bf00      	nop
 800c72a:	371c      	adds	r7, #28
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	40010000 	.word	0x40010000
 800c738:	40010400 	.word	0x40010400
 800c73c:	40014000 	.word	0x40014000
 800c740:	40014400 	.word	0x40014400
 800c744:	40014800 	.word	0x40014800

0800c748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	021b      	lsls	r3, r3, #8
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	031b      	lsls	r3, r3, #12
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a18      	ldr	r2, [pc, #96]	; (800c804 <TIM_OC4_SetConfig+0xbc>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00f      	beq.n	800c7c8 <TIM_OC4_SetConfig+0x80>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a17      	ldr	r2, [pc, #92]	; (800c808 <TIM_OC4_SetConfig+0xc0>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_OC4_SetConfig+0x80>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a16      	ldr	r2, [pc, #88]	; (800c80c <TIM_OC4_SetConfig+0xc4>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_OC4_SetConfig+0x80>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a15      	ldr	r2, [pc, #84]	; (800c810 <TIM_OC4_SetConfig+0xc8>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_OC4_SetConfig+0x80>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a14      	ldr	r2, [pc, #80]	; (800c814 <TIM_OC4_SetConfig+0xcc>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d109      	bne.n	800c7dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	019b      	lsls	r3, r3, #6
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	621a      	str	r2, [r3, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	371c      	adds	r7, #28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	40010000 	.word	0x40010000
 800c808:	40010400 	.word	0x40010400
 800c80c:	40014000 	.word	0x40014000
 800c810:	40014400 	.word	0x40014400
 800c814:	40014800 	.word	0x40014800

0800c818 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c858:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	041b      	lsls	r3, r3, #16
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	4313      	orrs	r3, r2
 800c864:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a17      	ldr	r2, [pc, #92]	; (800c8c8 <TIM_OC5_SetConfig+0xb0>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00f      	beq.n	800c88e <TIM_OC5_SetConfig+0x76>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a16      	ldr	r2, [pc, #88]	; (800c8cc <TIM_OC5_SetConfig+0xb4>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d00b      	beq.n	800c88e <TIM_OC5_SetConfig+0x76>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a15      	ldr	r2, [pc, #84]	; (800c8d0 <TIM_OC5_SetConfig+0xb8>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d007      	beq.n	800c88e <TIM_OC5_SetConfig+0x76>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a14      	ldr	r2, [pc, #80]	; (800c8d4 <TIM_OC5_SetConfig+0xbc>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d003      	beq.n	800c88e <TIM_OC5_SetConfig+0x76>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a13      	ldr	r2, [pc, #76]	; (800c8d8 <TIM_OC5_SetConfig+0xc0>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d109      	bne.n	800c8a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	021b      	lsls	r3, r3, #8
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	621a      	str	r2, [r3, #32]
}
 800c8bc:	bf00      	nop
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	40010000 	.word	0x40010000
 800c8cc:	40010400 	.word	0x40010400
 800c8d0:	40014000 	.word	0x40014000
 800c8d4:	40014400 	.word	0x40014400
 800c8d8:	40014800 	.word	0x40014800

0800c8dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b087      	sub	sp, #28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	021b      	lsls	r3, r3, #8
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	4313      	orrs	r3, r2
 800c916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c91e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	051b      	lsls	r3, r3, #20
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	4313      	orrs	r3, r2
 800c92a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a18      	ldr	r2, [pc, #96]	; (800c990 <TIM_OC6_SetConfig+0xb4>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d00f      	beq.n	800c954 <TIM_OC6_SetConfig+0x78>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a17      	ldr	r2, [pc, #92]	; (800c994 <TIM_OC6_SetConfig+0xb8>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d00b      	beq.n	800c954 <TIM_OC6_SetConfig+0x78>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a16      	ldr	r2, [pc, #88]	; (800c998 <TIM_OC6_SetConfig+0xbc>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d007      	beq.n	800c954 <TIM_OC6_SetConfig+0x78>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a15      	ldr	r2, [pc, #84]	; (800c99c <TIM_OC6_SetConfig+0xc0>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d003      	beq.n	800c954 <TIM_OC6_SetConfig+0x78>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a14      	ldr	r2, [pc, #80]	; (800c9a0 <TIM_OC6_SetConfig+0xc4>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d109      	bne.n	800c968 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c95a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	029b      	lsls	r3, r3, #10
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	4313      	orrs	r3, r2
 800c966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	621a      	str	r2, [r3, #32]
}
 800c982:	bf00      	nop
 800c984:	371c      	adds	r7, #28
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	40010000 	.word	0x40010000
 800c994:	40010400 	.word	0x40010400
 800c998:	40014000 	.word	0x40014000
 800c99c:	40014400 	.word	0x40014400
 800c9a0:	40014800 	.word	0x40014800

0800c9a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b087      	sub	sp, #28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	f023 0201 	bic.w	r2, r3, #1
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f023 030a 	bic.w	r3, r3, #10
 800c9e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	621a      	str	r2, [r3, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	371c      	adds	r7, #28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca02:	b480      	push	{r7}
 800ca04:	b087      	sub	sp, #28
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	60f8      	str	r0, [r7, #12]
 800ca0a:	60b9      	str	r1, [r7, #8]
 800ca0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	f023 0210 	bic.w	r2, r3, #16
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6a1b      	ldr	r3, [r3, #32]
 800ca24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	031b      	lsls	r3, r3, #12
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	011b      	lsls	r3, r3, #4
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	621a      	str	r2, [r3, #32]
}
 800ca56:	bf00      	nop
 800ca58:	371c      	adds	r7, #28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
	...

0800ca64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4b09      	ldr	r3, [pc, #36]	; (800ca9c <TIM_ITRx_SetConfig+0x38>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	f043 0307 	orr.w	r3, r3, #7
 800ca86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	609a      	str	r2, [r3, #8]
}
 800ca8e:	bf00      	nop
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	ffcfff8f 	.word	0xffcfff8f

0800caa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800caba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	021a      	lsls	r2, r3, #8
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	431a      	orrs	r2, r3
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	4313      	orrs	r3, r2
 800cacc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	609a      	str	r2, [r3, #8]
}
 800cad4:	bf00      	nop
 800cad6:	371c      	adds	r7, #28
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f003 031f 	and.w	r3, r3, #31
 800caf2:	2201      	movs	r2, #1
 800caf4:	fa02 f303 	lsl.w	r3, r2, r3
 800caf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6a1a      	ldr	r2, [r3, #32]
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	43db      	mvns	r3, r3
 800cb02:	401a      	ands	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6a1a      	ldr	r2, [r3, #32]
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f003 031f 	and.w	r3, r3, #31
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	fa01 f303 	lsl.w	r3, r1, r3
 800cb18:	431a      	orrs	r2, r3
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	621a      	str	r2, [r3, #32]
}
 800cb1e:	bf00      	nop
 800cb20:	371c      	adds	r7, #28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
	...

0800cb2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d101      	bne.n	800cb44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb40:	2302      	movs	r3, #2
 800cb42:	e068      	b.n	800cc16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a2e      	ldr	r2, [pc, #184]	; (800cc24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d004      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a2d      	ldr	r2, [pc, #180]	; (800cc28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d108      	bne.n	800cb8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a1e      	ldr	r2, [pc, #120]	; (800cc24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d01d      	beq.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb6:	d018      	beq.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a1b      	ldr	r2, [pc, #108]	; (800cc2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d013      	beq.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a1a      	ldr	r2, [pc, #104]	; (800cc30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d00e      	beq.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a18      	ldr	r2, [pc, #96]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d009      	beq.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a13      	ldr	r2, [pc, #76]	; (800cc28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d004      	beq.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a14      	ldr	r2, [pc, #80]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d10c      	bne.n	800cc04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	68ba      	ldr	r2, [r7, #8]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	40010000 	.word	0x40010000
 800cc28:	40010400 	.word	0x40010400
 800cc2c:	40000400 	.word	0x40000400
 800cc30:	40000800 	.word	0x40000800
 800cc34:	40000c00 	.word	0x40000c00
 800cc38:	40001800 	.word	0x40001800

0800cc3c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6819      	ldr	r1, [r3, #0]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	fb03 f203 	mul.w	r2, r3, r3
 800cc52:	4613      	mov	r3, r2
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4413      	add	r3, r2
 800cc58:	43db      	mvns	r3, r3
 800cc5a:	ea01 0203 	and.w	r2, r1, r3
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	fb03 f303 	mul.w	r3, r3, r3
 800cc64:	6879      	ldr	r1, [r7, #4]
 800cc66:	fb01 f303 	mul.w	r3, r1, r3
 800cc6a:	431a      	orrs	r2, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	601a      	str	r2, [r3, #0]
}
 800cc70:	bf00      	nop
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	43db      	mvns	r3, r3
 800cc90:	401a      	ands	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	fb01 f303 	mul.w	r3, r1, r3
 800cc9a:	431a      	orrs	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	605a      	str	r2, [r3, #4]
}
 800cca0:	bf00      	nop
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6899      	ldr	r1, [r3, #8]
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	fb03 f203 	mul.w	r2, r3, r3
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	4413      	add	r3, r2
 800ccc8:	43db      	mvns	r3, r3
 800ccca:	ea01 0203 	and.w	r2, r1, r3
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	fb03 f303 	mul.w	r3, r3, r3
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	fb01 f303 	mul.w	r3, r1, r3
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	609a      	str	r2, [r3, #8]
}
 800cce0:	bf00      	nop
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	68d9      	ldr	r1, [r3, #12]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	fb03 f203 	mul.w	r2, r3, r3
 800cd02:	4613      	mov	r3, r2
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	4413      	add	r3, r2
 800cd08:	43db      	mvns	r3, r3
 800cd0a:	ea01 0203 	and.w	r2, r1, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	fb03 f303 	mul.w	r3, r3, r3
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	fb01 f303 	mul.w	r3, r1, r3
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	60da      	str	r2, [r3, #12]
}
 800cd20:	bf00      	nop
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6a19      	ldr	r1, [r3, #32]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	fb03 f303 	mul.w	r3, r3, r3
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	fb02 f303 	mul.w	r3, r2, r3
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	fb02 f203 	mul.w	r2, r2, r3
 800cd4e:	4613      	mov	r3, r2
 800cd50:	011b      	lsls	r3, r3, #4
 800cd52:	1a9b      	subs	r3, r3, r2
 800cd54:	43db      	mvns	r3, r3
 800cd56:	ea01 0203 	and.w	r2, r1, r3
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	fb03 f303 	mul.w	r3, r3, r3
 800cd60:	68b9      	ldr	r1, [r7, #8]
 800cd62:	fb01 f303 	mul.w	r3, r1, r3
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	fb01 f303 	mul.w	r3, r1, r3
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	fb01 f303 	mul.w	r3, r1, r3
 800cd72:	431a      	orrs	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800cd78:	bf00      	nop
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	0a1b      	lsrs	r3, r3, #8
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	0a12      	lsrs	r2, r2, #8
 800cd9c:	fb02 f303 	mul.w	r3, r2, r3
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	0a12      	lsrs	r2, r2, #8
 800cda4:	fb02 f303 	mul.w	r3, r2, r3
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	0a12      	lsrs	r2, r2, #8
 800cdac:	fb02 f203 	mul.w	r2, r2, r3
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	43db      	mvns	r3, r3
 800cdb8:	ea01 0203 	and.w	r2, r1, r3
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	0a1b      	lsrs	r3, r3, #8
 800cdc0:	68b9      	ldr	r1, [r7, #8]
 800cdc2:	0a09      	lsrs	r1, r1, #8
 800cdc4:	fb01 f303 	mul.w	r3, r1, r3
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	0a09      	lsrs	r1, r1, #8
 800cdcc:	fb01 f303 	mul.w	r3, r1, r3
 800cdd0:	68b9      	ldr	r1, [r7, #8]
 800cdd2:	0a09      	lsrs	r1, r1, #8
 800cdd4:	fb01 f303 	mul.w	r3, r1, r3
 800cdd8:	6879      	ldr	r1, [r7, #4]
 800cdda:	fb01 f303 	mul.w	r3, r1, r3
 800cdde:	431a      	orrs	r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800cde4:	bf00      	nop
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b088      	sub	sp, #32
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	fa93 f3a3 	rbit	r3, r3
 800ce06:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <LL_GPIO_Init+0x26>
  {
    return 32U;
 800ce12:	2320      	movs	r3, #32
 800ce14:	e003      	b.n	800ce1e <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	fab3 f383 	clz	r3, r3
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ce20:	e048      	b.n	800ceb4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	2101      	movs	r1, #1
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce2e:	4013      	ands	r3, r2
 800ce30:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d03a      	beq.n	800ceae <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d003      	beq.n	800ce48 <LL_GPIO_Init+0x58>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d10e      	bne.n	800ce66 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	69b9      	ldr	r1, [r7, #24]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff ff2b 	bl	800ccac <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	6819      	ldr	r1, [r3, #0]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff ff0b 	bl	800cc7c <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	69b9      	ldr	r1, [r7, #24]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff ff3c 	bl	800ccec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d111      	bne.n	800cea0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	2bff      	cmp	r3, #255	; 0xff
 800ce80:	d807      	bhi.n	800ce92 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	695b      	ldr	r3, [r3, #20]
 800ce86:	461a      	mov	r2, r3
 800ce88:	69b9      	ldr	r1, [r7, #24]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff ff4e 	bl	800cd2c <LL_GPIO_SetAFPin_0_7>
 800ce90:	e006      	b.n	800cea0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	695b      	ldr	r3, [r3, #20]
 800ce96:	461a      	mov	r2, r3
 800ce98:	69b9      	ldr	r1, [r7, #24]
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff ff72 	bl	800cd84 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	461a      	mov	r2, r3
 800cea6:	69b9      	ldr	r1, [r7, #24]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff fec7 	bl	800cc3c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	fa22 f303 	lsr.w	r3, r2, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1af      	bne.n	800ce22 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3720      	adds	r7, #32
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800cecc:	b480      	push	{r7}
 800cece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 800ced0:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <LL_RCC_HSE_IsReady+0x24>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ced8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cedc:	d101      	bne.n	800cee2 <LL_RCC_HSE_IsReady+0x16>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <LL_RCC_HSE_IsReady+0x18>
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	58024400 	.word	0x58024400

0800cef4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800cef4:	b480      	push	{r7}
 800cef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <LL_RCC_HSI_IsReady+0x20>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 0304 	and.w	r3, r3, #4
 800cf00:	2b04      	cmp	r3, #4
 800cf02:	d101      	bne.n	800cf08 <LL_RCC_HSI_IsReady+0x14>
 800cf04:	2301      	movs	r3, #1
 800cf06:	e000      	b.n	800cf0a <LL_RCC_HSI_IsReady+0x16>
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	58024400 	.word	0x58024400

0800cf18 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800cf1c:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <LL_RCC_HSI_GetDivider+0x18>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0318 	and.w	r3, r3, #24
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	58024400 	.word	0x58024400

0800cf34 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 800cf38:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <LL_RCC_CSI_IsReady+0x24>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf44:	d101      	bne.n	800cf4a <LL_RCC_CSI_IsReady+0x16>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e000      	b.n	800cf4c <LL_RCC_CSI_IsReady+0x18>
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	58024400 	.word	0x58024400

0800cf5c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY))?1UL:0UL);
 800cf60:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <LL_RCC_LSE_IsReady+0x20>)
 800cf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf64:	f003 0302 	and.w	r3, r3, #2
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d101      	bne.n	800cf70 <LL_RCC_LSE_IsReady+0x14>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e000      	b.n	800cf72 <LL_RCC_LSE_IsReady+0x16>
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	58024400 	.word	0x58024400

0800cf80 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <LL_RCC_GetSysClkSource+0x18>)
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	58024400 	.word	0x58024400

0800cf9c <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800cfa0:	4b04      	ldr	r3, [pc, #16]	; (800cfb4 <LL_RCC_GetSysPrescaler+0x18>)
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	58024400 	.word	0x58024400

0800cfb8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800cfbc:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <LL_RCC_GetAHBPrescaler+0x18>)
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	58024400 	.word	0x58024400

0800cfd4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <LL_RCC_GetAPB1Prescaler+0x18>)
 800cfda:	69db      	ldr	r3, [r3, #28]
 800cfdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	58024400 	.word	0x58024400

0800cff0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800cff0:	b480      	push	{r7}
 800cff2:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800cff4:	4b04      	ldr	r3, [pc, #16]	; (800d008 <LL_RCC_GetAPB2Prescaler+0x18>)
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	58024400 	.word	0x58024400

0800d00c <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	b2da      	uxtb	r2, r3
 800d018:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <LL_RCC_GetClockSource+0x48>)
 800d01a:	4413      	add	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t) (Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT) );
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	0e19      	lsrs	r1, r3, #24
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	0a1b      	lsrs	r3, r3, #8
 800d02a:	f003 031f 	and.w	r3, r3, #31
 800d02e:	fa01 f303 	lsl.w	r3, r1, r3
 800d032:	401a      	ands	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	0a1b      	lsrs	r3, r3, #8
 800d038:	f003 031f 	and.w	r3, r3, #31
 800d03c:	fa22 f303 	lsr.w	r3, r2, r3
 800d040:	041a      	lsls	r2, r3, #16
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4313      	orrs	r3, r2
}
 800d046:	4618      	mov	r0, r3
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	5802444c 	.word	0x5802444c

0800d058 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff ffd3 	bl	800d00c <LL_RCC_GetClockSource>
 800d066:	4603      	mov	r3, r0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800d074:	4b04      	ldr	r3, [pc, #16]	; (800d088 <LL_RCC_PLL_GetSource+0x18>)
 800d076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d078:	f003 0303 	and.w	r3, r3, #3
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	58024400 	.word	0x58024400

0800d08c <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800d08c:	b480      	push	{r7}
 800d08e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d09c:	d101      	bne.n	800d0a2 <LL_RCC_PLL1P_IsEnabled+0x16>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e000      	b.n	800d0a4 <LL_RCC_PLL1P_IsEnabled+0x18>
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	58024400 	.word	0x58024400

0800d0b4 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 800d0b8:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0c4:	d101      	bne.n	800d0ca <LL_RCC_PLL1Q_IsEnabled+0x16>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e000      	b.n	800d0cc <LL_RCC_PLL1Q_IsEnabled+0x18>
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	58024400 	.word	0x58024400

0800d0dc <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 800d0e0:	4b07      	ldr	r3, [pc, #28]	; (800d100 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800d0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0ec:	d101      	bne.n	800d0f2 <LL_RCC_PLL1R_IsEnabled+0x16>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <LL_RCC_PLL1R_IsEnabled+0x18>
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	58024400 	.word	0x58024400

0800d104 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b01      	cmp	r3, #1
 800d112:	d101      	bne.n	800d118 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800d114:	2301      	movs	r3, #1
 800d116:	e000      	b.n	800d11a <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	58024400 	.word	0x58024400

0800d128 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800d128:	b480      	push	{r7}
 800d12a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800d12c:	4b04      	ldr	r3, [pc, #16]	; (800d140 <LL_RCC_PLL1_GetN+0x18>)
 800d12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d134:	3301      	adds	r3, #1
}
 800d136:	4618      	mov	r0, r3
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	58024400 	.word	0x58024400

0800d144 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800d144:	b480      	push	{r7}
 800d146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800d148:	4b04      	ldr	r3, [pc, #16]	; (800d15c <LL_RCC_PLL1_GetM+0x18>)
 800d14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d14c:	091b      	lsrs	r3, r3, #4
 800d14e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d152:	4618      	mov	r0, r3
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	58024400 	.word	0x58024400

0800d160 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800d160:	b480      	push	{r7}
 800d162:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <LL_RCC_PLL1_GetP+0x1c>)
 800d166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d168:	0a5b      	lsrs	r3, r3, #9
 800d16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16e:	3301      	adds	r3, #1
}
 800d170:	4618      	mov	r0, r3
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	58024400 	.word	0x58024400

0800d180 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800d180:	b480      	push	{r7}
 800d182:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800d184:	4b05      	ldr	r3, [pc, #20]	; (800d19c <LL_RCC_PLL1_GetQ+0x1c>)
 800d186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d188:	0c1b      	lsrs	r3, r3, #16
 800d18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d18e:	3301      	adds	r3, #1
}
 800d190:	4618      	mov	r0, r3
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	58024400 	.word	0x58024400

0800d1a0 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800d1a4:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <LL_RCC_PLL1_GetR+0x1c>)
 800d1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a8:	0e1b      	lsrs	r3, r3, #24
 800d1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ae:	3301      	adds	r3, #1
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	58024400 	.word	0x58024400

0800d1c0 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800d1c4:	4b04      	ldr	r3, [pc, #16]	; (800d1d8 <LL_RCC_PLL1_GetFRACN+0x18>)
 800d1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c8:	08db      	lsrs	r3, r3, #3
 800d1ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	58024400 	.word	0x58024400

0800d1dc <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <LL_RCC_PLL2_IsReady+0x24>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1ec:	d101      	bne.n	800d1f2 <LL_RCC_PLL2_IsReady+0x16>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <LL_RCC_PLL2_IsReady+0x18>
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	58024400 	.word	0x58024400

0800d204 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800d204:	b480      	push	{r7}
 800d206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN)?1UL:0UL);
 800d208:	4b07      	ldr	r3, [pc, #28]	; (800d228 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d210:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d214:	d101      	bne.n	800d21a <LL_RCC_PLL2P_IsEnabled+0x16>
 800d216:	2301      	movs	r3, #1
 800d218:	e000      	b.n	800d21c <LL_RCC_PLL2P_IsEnabled+0x18>
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	58024400 	.word	0x58024400

0800d22c <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800d22c:	b480      	push	{r7}
 800d22e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN)?1UL:0UL);
 800d230:	4b07      	ldr	r3, [pc, #28]	; (800d250 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800d232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d23c:	d101      	bne.n	800d242 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800d23e:	2301      	movs	r3, #1
 800d240:	e000      	b.n	800d244 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	58024400 	.word	0x58024400

0800d254 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800d254:	b480      	push	{r7}
 800d256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN)?1UL:0UL);
 800d258:	4b07      	ldr	r3, [pc, #28]	; (800d278 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d264:	d101      	bne.n	800d26a <LL_RCC_PLL2R_IsEnabled+0x16>
 800d266:	2301      	movs	r3, #1
 800d268:	e000      	b.n	800d26c <LL_RCC_PLL2R_IsEnabled+0x18>
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	58024400 	.word	0x58024400

0800d27c <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800d27c:	b480      	push	{r7}
 800d27e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 800d280:	4b06      	ldr	r3, [pc, #24]	; (800d29c <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	f003 0310 	and.w	r3, r3, #16
 800d288:	2b10      	cmp	r3, #16
 800d28a:	d101      	bne.n	800d290 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	58024400 	.word	0x58024400

0800d2a0 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800d2a4:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <LL_RCC_PLL2_GetN+0x18>)
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ac:	3301      	adds	r3, #1
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	58024400 	.word	0x58024400

0800d2bc <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800d2c0:	4b04      	ldr	r3, [pc, #16]	; (800d2d4 <LL_RCC_PLL2_GetM+0x18>)
 800d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c4:	0b1b      	lsrs	r3, r3, #12
 800d2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	58024400 	.word	0x58024400

0800d2d8 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800d2dc:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <LL_RCC_PLL2_GetP+0x1c>)
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	0a5b      	lsrs	r3, r3, #9
 800d2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e6:	3301      	adds	r3, #1
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	58024400 	.word	0x58024400

0800d2f8 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800d2fc:	4b05      	ldr	r3, [pc, #20]	; (800d314 <LL_RCC_PLL2_GetQ+0x1c>)
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	0c1b      	lsrs	r3, r3, #16
 800d302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d306:	3301      	adds	r3, #1
}
 800d308:	4618      	mov	r0, r3
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	58024400 	.word	0x58024400

0800d318 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800d318:	b480      	push	{r7}
 800d31a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800d31c:	4b05      	ldr	r3, [pc, #20]	; (800d334 <LL_RCC_PLL2_GetR+0x1c>)
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	0e1b      	lsrs	r3, r3, #24
 800d322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d326:	3301      	adds	r3, #1
}
 800d328:	4618      	mov	r0, r3
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	58024400 	.word	0x58024400

0800d338 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800d338:	b480      	push	{r7}
 800d33a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800d33c:	4b04      	ldr	r3, [pc, #16]	; (800d350 <LL_RCC_PLL2_GetFRACN+0x18>)
 800d33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d340:	08db      	lsrs	r3, r3, #3
 800d342:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800d346:	4618      	mov	r0, r3
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	58024400 	.word	0x58024400

0800d354 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800d354:	b480      	push	{r7}
 800d356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 800d358:	4b07      	ldr	r3, [pc, #28]	; (800d378 <LL_RCC_PLL3_IsReady+0x24>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d364:	d101      	bne.n	800d36a <LL_RCC_PLL3_IsReady+0x16>
 800d366:	2301      	movs	r3, #1
 800d368:	e000      	b.n	800d36c <LL_RCC_PLL3_IsReady+0x18>
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	58024400 	.word	0x58024400

0800d37c <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800d37c:	b480      	push	{r7}
 800d37e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 800d380:	4b07      	ldr	r3, [pc, #28]	; (800d3a0 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800d382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d38c:	d101      	bne.n	800d392 <LL_RCC_PLL3P_IsEnabled+0x16>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <LL_RCC_PLL3P_IsEnabled+0x18>
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	58024400 	.word	0x58024400

0800d3a4 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN)?1UL:0UL);
 800d3a8:	4b07      	ldr	r3, [pc, #28]	; (800d3c8 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800d3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3b4:	d101      	bne.n	800d3ba <LL_RCC_PLL3Q_IsEnabled+0x16>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <LL_RCC_PLL3Q_IsEnabled+0x18>
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	58024400 	.word	0x58024400

0800d3cc <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN)?1UL:0UL);
 800d3d0:	4b07      	ldr	r3, [pc, #28]	; (800d3f0 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800d3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d3dc:	d101      	bne.n	800d3e2 <LL_RCC_PLL3R_IsEnabled+0x16>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <LL_RCC_PLL3R_IsEnabled+0x18>
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	58024400 	.word	0x58024400

0800d3f4 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 800d3f8:	4b07      	ldr	r3, [pc, #28]	; (800d418 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d404:	d101      	bne.n	800d40a <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800d406:	2301      	movs	r3, #1
 800d408:	e000      	b.n	800d40c <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	58024400 	.word	0x58024400

0800d41c <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800d41c:	b480      	push	{r7}
 800d41e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800d420:	4b04      	ldr	r3, [pc, #16]	; (800d434 <LL_RCC_PLL3_GetN+0x18>)
 800d422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d428:	3301      	adds	r3, #1
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	58024400 	.word	0x58024400

0800d438 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800d43c:	4b04      	ldr	r3, [pc, #16]	; (800d450 <LL_RCC_PLL3_GetM+0x18>)
 800d43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d440:	0d1b      	lsrs	r3, r3, #20
 800d442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d446:	4618      	mov	r0, r3
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	58024400 	.word	0x58024400

0800d454 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800d454:	b480      	push	{r7}
 800d456:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <LL_RCC_PLL3_GetP+0x1c>)
 800d45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45c:	0a5b      	lsrs	r3, r3, #9
 800d45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d462:	3301      	adds	r3, #1
}
 800d464:	4618      	mov	r0, r3
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	58024400 	.word	0x58024400

0800d474 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800d474:	b480      	push	{r7}
 800d476:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800d478:	4b05      	ldr	r3, [pc, #20]	; (800d490 <LL_RCC_PLL3_GetQ+0x1c>)
 800d47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47c:	0c1b      	lsrs	r3, r3, #16
 800d47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d482:	3301      	adds	r3, #1
}
 800d484:	4618      	mov	r0, r3
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	58024400 	.word	0x58024400

0800d494 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800d494:	b480      	push	{r7}
 800d496:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800d498:	4b05      	ldr	r3, [pc, #20]	; (800d4b0 <LL_RCC_PLL3_GetR+0x1c>)
 800d49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49c:	0e1b      	lsrs	r3, r3, #24
 800d49e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a2:	3301      	adds	r3, #1
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	58024400 	.word	0x58024400

0800d4b4 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800d4b8:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <LL_RCC_PLL3_GetFRACN+0x18>)
 800d4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4bc:	08db      	lsrs	r3, r3, #3
 800d4be:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	58024400 	.word	0x58024400

0800d4d0 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	; 0x28
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800d4e0:	f7ff fdc6 	bl	800d070 <LL_RCC_PLL_GetSource>
 800d4e4:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d01f      	beq.n	800d52c <LL_RCC_GetPLL1ClockFreq+0x5c>
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d824      	bhi.n	800d53c <LL_RCC_GetPLL1ClockFreq+0x6c>
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <LL_RCC_GetPLL1ClockFreq+0x30>
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d00e      	beq.n	800d51c <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800d4fe:	e01d      	b.n	800d53c <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800d500:	f7ff fcf8 	bl	800cef4 <LL_RCC_HSI_IsReady>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d01a      	beq.n	800d540 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800d50a:	f7ff fd05 	bl	800cf18 <LL_RCC_HSI_GetDivider>
 800d50e:	4603      	mov	r3, r0
 800d510:	08db      	lsrs	r3, r3, #3
 800d512:	4a38      	ldr	r2, [pc, #224]	; (800d5f4 <LL_RCC_GetPLL1ClockFreq+0x124>)
 800d514:	fa22 f303 	lsr.w	r3, r2, r3
 800d518:	61fb      	str	r3, [r7, #28]
      break;
 800d51a:	e011      	b.n	800d540 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800d51c:	f7ff fd0a 	bl	800cf34 <LL_RCC_CSI_IsReady>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00e      	beq.n	800d544 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800d526:	4b34      	ldr	r3, [pc, #208]	; (800d5f8 <LL_RCC_GetPLL1ClockFreq+0x128>)
 800d528:	61fb      	str	r3, [r7, #28]
      break;
 800d52a:	e00b      	b.n	800d544 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800d52c:	f7ff fcce 	bl	800cecc <LL_RCC_HSE_IsReady>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800d536:	4b31      	ldr	r3, [pc, #196]	; (800d5fc <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800d538:	61fb      	str	r3, [r7, #28]
      break;
 800d53a:	e005      	b.n	800d548 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800d53c:	bf00      	nop
 800d53e:	e004      	b.n	800d54a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800d540:	bf00      	nop
 800d542:	e002      	b.n	800d54a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800d544:	bf00      	nop
 800d546:	e000      	b.n	800d54a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800d548:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800d55c:	f7ff fdf2 	bl	800d144 <LL_RCC_PLL1_GetM>
 800d560:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800d562:	f7ff fde1 	bl	800d128 <LL_RCC_PLL1_GetN>
 800d566:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800d568:	f7ff fdcc 	bl	800d104 <LL_RCC_PLL1FRACN_IsEnabled>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800d572:	f7ff fe25 	bl	800d1c0 <LL_RCC_PLL1_GetFRACN>
 800d576:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d035      	beq.n	800d5ea <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800d57e:	f7ff fd85 	bl	800d08c <LL_RCC_PLL1P_IsEnabled>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00c      	beq.n	800d5a2 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800d588:	f7ff fdea 	bl	800d160 <LL_RCC_PLL1_GetP>
 800d58c:	4603      	mov	r3, r0
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	6939      	ldr	r1, [r7, #16]
 800d596:	69f8      	ldr	r0, [r7, #28]
 800d598:	f000 f964 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d59c:	4602      	mov	r2, r0
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800d5a2:	f7ff fd87 	bl	800d0b4 <LL_RCC_PLL1Q_IsEnabled>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00c      	beq.n	800d5c6 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800d5ac:	f7ff fde8 	bl	800d180 <LL_RCC_PLL1_GetQ>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	6939      	ldr	r1, [r7, #16]
 800d5ba:	69f8      	ldr	r0, [r7, #28]
 800d5bc:	f000 f952 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800d5c6:	f7ff fd89 	bl	800d0dc <LL_RCC_PLL1R_IsEnabled>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00c      	beq.n	800d5ea <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800d5d0:	f7ff fde6 	bl	800d1a0 <LL_RCC_PLL1_GetR>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	6939      	ldr	r1, [r7, #16]
 800d5de:	69f8      	ldr	r0, [r7, #28]
 800d5e0:	f000 f940 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	609a      	str	r2, [r3, #8]
    }
  }
}
 800d5ea:	bf00      	nop
 800d5ec:	3720      	adds	r7, #32
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	03d09000 	.word	0x03d09000
 800d5f8:	003d0900 	.word	0x003d0900
 800d5fc:	007a1200 	.word	0x007a1200

0800d600 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b08a      	sub	sp, #40	; 0x28
 800d604:	af02      	add	r7, sp, #8
 800d606:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800d608:	2300      	movs	r3, #0
 800d60a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800d610:	f7ff fd2e 	bl	800d070 <LL_RCC_PLL_GetSource>
 800d614:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d01f      	beq.n	800d65c <LL_RCC_GetPLL2ClockFreq+0x5c>
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d824      	bhi.n	800d66c <LL_RCC_GetPLL2ClockFreq+0x6c>
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <LL_RCC_GetPLL2ClockFreq+0x30>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d00e      	beq.n	800d64c <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800d62e:	e01d      	b.n	800d66c <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800d630:	f7ff fc60 	bl	800cef4 <LL_RCC_HSI_IsReady>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d01a      	beq.n	800d670 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800d63a:	f7ff fc6d 	bl	800cf18 <LL_RCC_HSI_GetDivider>
 800d63e:	4603      	mov	r3, r0
 800d640:	08db      	lsrs	r3, r3, #3
 800d642:	4a38      	ldr	r2, [pc, #224]	; (800d724 <LL_RCC_GetPLL2ClockFreq+0x124>)
 800d644:	fa22 f303 	lsr.w	r3, r2, r3
 800d648:	61fb      	str	r3, [r7, #28]
      break;
 800d64a:	e011      	b.n	800d670 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800d64c:	f7ff fc72 	bl	800cf34 <LL_RCC_CSI_IsReady>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00e      	beq.n	800d674 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800d656:	4b34      	ldr	r3, [pc, #208]	; (800d728 <LL_RCC_GetPLL2ClockFreq+0x128>)
 800d658:	61fb      	str	r3, [r7, #28]
      break;
 800d65a:	e00b      	b.n	800d674 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800d65c:	f7ff fc36 	bl	800cecc <LL_RCC_HSE_IsReady>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d008      	beq.n	800d678 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800d666:	4b31      	ldr	r3, [pc, #196]	; (800d72c <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800d668:	61fb      	str	r3, [r7, #28]
      break;
 800d66a:	e005      	b.n	800d678 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800d66c:	bf00      	nop
 800d66e:	e004      	b.n	800d67a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800d670:	bf00      	nop
 800d672:	e002      	b.n	800d67a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800d674:	bf00      	nop
 800d676:	e000      	b.n	800d67a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800d678:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800d68c:	f7ff fe16 	bl	800d2bc <LL_RCC_PLL2_GetM>
 800d690:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800d692:	f7ff fe05 	bl	800d2a0 <LL_RCC_PLL2_GetN>
 800d696:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800d698:	f7ff fdf0 	bl	800d27c <LL_RCC_PLL2FRACN_IsEnabled>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d002      	beq.n	800d6a8 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800d6a2:	f7ff fe49 	bl	800d338 <LL_RCC_PLL2_GetFRACN>
 800d6a6:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d035      	beq.n	800d71a <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800d6ae:	f7ff fda9 	bl	800d204 <LL_RCC_PLL2P_IsEnabled>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00c      	beq.n	800d6d2 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800d6b8:	f7ff fe0e 	bl	800d2d8 <LL_RCC_PLL2_GetP>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	6939      	ldr	r1, [r7, #16]
 800d6c6:	69f8      	ldr	r0, [r7, #28]
 800d6c8:	f000 f8cc 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d6d2:	f7ff fdab 	bl	800d22c <LL_RCC_PLL2Q_IsEnabled>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00c      	beq.n	800d6f6 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800d6dc:	f7ff fe0c 	bl	800d2f8 <LL_RCC_PLL2_GetQ>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	6939      	ldr	r1, [r7, #16]
 800d6ea:	69f8      	ldr	r0, [r7, #28]
 800d6ec:	f000 f8ba 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800d6f6:	f7ff fdad 	bl	800d254 <LL_RCC_PLL2R_IsEnabled>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00c      	beq.n	800d71a <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800d700:	f7ff fe0a 	bl	800d318 <LL_RCC_PLL2_GetR>
 800d704:	4603      	mov	r3, r0
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	6939      	ldr	r1, [r7, #16]
 800d70e:	69f8      	ldr	r0, [r7, #28]
 800d710:	f000 f8a8 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d714:	4602      	mov	r2, r0
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	609a      	str	r2, [r3, #8]
    }
  }
}
 800d71a:	bf00      	nop
 800d71c:	3720      	adds	r7, #32
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	03d09000 	.word	0x03d09000
 800d728:	003d0900 	.word	0x003d0900
 800d72c:	007a1200 	.word	0x007a1200

0800d730 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08a      	sub	sp, #40	; 0x28
 800d734:	af02      	add	r7, sp, #8
 800d736:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800d738:	2300      	movs	r3, #0
 800d73a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800d73c:	2300      	movs	r3, #0
 800d73e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800d740:	f7ff fc96 	bl	800d070 <LL_RCC_PLL_GetSource>
 800d744:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d01f      	beq.n	800d78c <LL_RCC_GetPLL3ClockFreq+0x5c>
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d824      	bhi.n	800d79c <LL_RCC_GetPLL3ClockFreq+0x6c>
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <LL_RCC_GetPLL3ClockFreq+0x30>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d00e      	beq.n	800d77c <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800d75e:	e01d      	b.n	800d79c <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800d760:	f7ff fbc8 	bl	800cef4 <LL_RCC_HSI_IsReady>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d01a      	beq.n	800d7a0 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800d76a:	f7ff fbd5 	bl	800cf18 <LL_RCC_HSI_GetDivider>
 800d76e:	4603      	mov	r3, r0
 800d770:	08db      	lsrs	r3, r3, #3
 800d772:	4a39      	ldr	r2, [pc, #228]	; (800d858 <LL_RCC_GetPLL3ClockFreq+0x128>)
 800d774:	fa22 f303 	lsr.w	r3, r2, r3
 800d778:	61fb      	str	r3, [r7, #28]
      break;
 800d77a:	e011      	b.n	800d7a0 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800d77c:	f7ff fbda 	bl	800cf34 <LL_RCC_CSI_IsReady>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00e      	beq.n	800d7a4 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800d786:	4b35      	ldr	r3, [pc, #212]	; (800d85c <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800d788:	61fb      	str	r3, [r7, #28]
      break;
 800d78a:	e00b      	b.n	800d7a4 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800d78c:	f7ff fb9e 	bl	800cecc <LL_RCC_HSE_IsReady>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d008      	beq.n	800d7a8 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800d796:	4b32      	ldr	r3, [pc, #200]	; (800d860 <LL_RCC_GetPLL3ClockFreq+0x130>)
 800d798:	61fb      	str	r3, [r7, #28]
      break;
 800d79a:	e005      	b.n	800d7a8 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800d79c:	bf00      	nop
 800d79e:	e004      	b.n	800d7aa <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800d7a0:	bf00      	nop
 800d7a2:	e002      	b.n	800d7aa <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800d7a4:	bf00      	nop
 800d7a6:	e000      	b.n	800d7aa <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800d7a8:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800d7bc:	f7ff fe3c 	bl	800d438 <LL_RCC_PLL3_GetM>
 800d7c0:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800d7c2:	f7ff fe2b 	bl	800d41c <LL_RCC_PLL3_GetN>
 800d7c6:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800d7c8:	f7ff fe14 	bl	800d3f4 <LL_RCC_PLL3FRACN_IsEnabled>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800d7d2:	f7ff fe6f 	bl	800d4b4 <LL_RCC_PLL3_GetFRACN>
 800d7d6:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d038      	beq.n	800d850 <LL_RCC_GetPLL3ClockFreq+0x120>
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d035      	beq.n	800d850 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800d7e4:	f7ff fdca 	bl	800d37c <LL_RCC_PLL3P_IsEnabled>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00c      	beq.n	800d808 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800d7ee:	f7ff fe31 	bl	800d454 <LL_RCC_PLL3_GetP>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	6939      	ldr	r1, [r7, #16]
 800d7fc:	69f8      	ldr	r0, [r7, #28]
 800d7fe:	f000 f831 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d802:	4602      	mov	r2, r0
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d808:	f7ff fdcc 	bl	800d3a4 <LL_RCC_PLL3Q_IsEnabled>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00c      	beq.n	800d82c <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800d812:	f7ff fe2f 	bl	800d474 <LL_RCC_PLL3_GetQ>
 800d816:	4603      	mov	r3, r0
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	6939      	ldr	r1, [r7, #16]
 800d820:	69f8      	ldr	r0, [r7, #28]
 800d822:	f000 f81f 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d826:	4602      	mov	r2, r0
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800d82c:	f7ff fdce 	bl	800d3cc <LL_RCC_PLL3R_IsEnabled>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00c      	beq.n	800d850 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800d836:	f7ff fe2d 	bl	800d494 <LL_RCC_PLL3_GetR>
 800d83a:	4603      	mov	r3, r0
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	6939      	ldr	r1, [r7, #16]
 800d844:	69f8      	ldr	r0, [r7, #28]
 800d846:	f000 f80d 	bl	800d864 <LL_RCC_CalcPLLClockFreq>
 800d84a:	4602      	mov	r2, r0
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	609a      	str	r2, [r3, #8]
    }
  }
}
 800d850:	bf00      	nop
 800d852:	3720      	adds	r7, #32
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	03d09000 	.word	0x03d09000
 800d85c:	003d0900 	.word	0x003d0900
 800d860:	007a1200 	.word	0x007a1200

0800d864 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800d864:	b480      	push	{r7}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	ee07 3a90 	vmov	s15, r3
 800d878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	ee07 3a90 	vmov	s15, r3
 800d890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800d89e:	eddf 5a10 	vldr	s11, [pc, #64]	; 800d8e0 <LL_RCC_CalcPLLClockFreq+0x7c>
 800d8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ae:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq/(float_t)PQR;
 800d8b2:	6a3b      	ldr	r3, [r7, #32]
 800d8b4:	ee07 3a90 	vmov	s15, r3
 800d8b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8bc:	edd7 6a05 	vldr	s13, [r7, #20]
 800d8c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8c4:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800d8c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8d0:	ee17 3a90 	vmov	r3, s15
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	371c      	adds	r7, #28
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	46000000 	.word	0x46000000

0800d8e4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff fbb1 	bl	800d058 <LL_RCC_GetUSARTClockSource>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	4a62      	ldr	r2, [pc, #392]	; (800da84 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	f000 80a9 	beq.w	800da52 <LL_RCC_GetUSARTClockFreq+0x16e>
 800d900:	4a60      	ldr	r2, [pc, #384]	; (800da84 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800d902:	4293      	cmp	r3, r2
 800d904:	f200 80ae 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d908:	4a5f      	ldr	r2, [pc, #380]	; (800da88 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	f000 80a1 	beq.w	800da52 <LL_RCC_GetUSARTClockFreq+0x16e>
 800d910:	4a5d      	ldr	r2, [pc, #372]	; (800da88 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800d912:	4293      	cmp	r3, r2
 800d914:	f200 80a6 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d918:	4a5c      	ldr	r2, [pc, #368]	; (800da8c <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	f000 8091 	beq.w	800da42 <LL_RCC_GetUSARTClockFreq+0x15e>
 800d920:	4a5a      	ldr	r2, [pc, #360]	; (800da8c <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800d922:	4293      	cmp	r3, r2
 800d924:	f200 809e 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d928:	4a59      	ldr	r2, [pc, #356]	; (800da90 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	f000 8089 	beq.w	800da42 <LL_RCC_GetUSARTClockFreq+0x15e>
 800d930:	4a57      	ldr	r2, [pc, #348]	; (800da90 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800d932:	4293      	cmp	r3, r2
 800d934:	f200 8096 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d938:	4a56      	ldr	r2, [pc, #344]	; (800da94 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d073      	beq.n	800da26 <LL_RCC_GetUSARTClockFreq+0x142>
 800d93e:	4a55      	ldr	r2, [pc, #340]	; (800da94 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800d940:	4293      	cmp	r3, r2
 800d942:	f200 808f 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d946:	4a54      	ldr	r2, [pc, #336]	; (800da98 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d06c      	beq.n	800da26 <LL_RCC_GetUSARTClockFreq+0x142>
 800d94c:	4a52      	ldr	r2, [pc, #328]	; (800da98 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	f200 8088 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d954:	4a51      	ldr	r2, [pc, #324]	; (800da9c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d058      	beq.n	800da0c <LL_RCC_GetUSARTClockFreq+0x128>
 800d95a:	4a50      	ldr	r2, [pc, #320]	; (800da9c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	f200 8081 	bhi.w	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d962:	4a4f      	ldr	r2, [pc, #316]	; (800daa0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d051      	beq.n	800da0c <LL_RCC_GetUSARTClockFreq+0x128>
 800d968:	4a4d      	ldr	r2, [pc, #308]	; (800daa0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d87a      	bhi.n	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d96e:	4a4d      	ldr	r2, [pc, #308]	; (800daa4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d03e      	beq.n	800d9f2 <LL_RCC_GetUSARTClockFreq+0x10e>
 800d974:	4a4b      	ldr	r2, [pc, #300]	; (800daa4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d874      	bhi.n	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d97a:	4a4b      	ldr	r2, [pc, #300]	; (800daa8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d038      	beq.n	800d9f2 <LL_RCC_GetUSARTClockFreq+0x10e>
 800d980:	4a49      	ldr	r2, [pc, #292]	; (800daa8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d86e      	bhi.n	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
 800d986:	4a49      	ldr	r2, [pc, #292]	; (800daac <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d01a      	beq.n	800d9c2 <LL_RCC_GetUSARTClockFreq+0xde>
 800d98c:	4a48      	ldr	r2, [pc, #288]	; (800dab0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d168      	bne.n	800da64 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 800d992:	f000 f895 	bl	800dac0 <RCC_GetSystemClockFreq>
 800d996:	4604      	mov	r4, r0
 800d998:	f7ff fb00 	bl	800cf9c <LL_RCC_GetSysPrescaler>
 800d99c:	4603      	mov	r3, r0
 800d99e:	0a1b      	lsrs	r3, r3, #8
 800d9a0:	f003 030f 	and.w	r3, r3, #15
 800d9a4:	4a43      	ldr	r2, [pc, #268]	; (800dab4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800d9a6:	5cd3      	ldrb	r3, [r2, r3]
 800d9a8:	f003 031f 	and.w	r3, r3, #31
 800d9ac:	fa24 f303 	lsr.w	r3, r4, r3
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 f8e7 	bl	800db84 <RCC_GetHCLKClockFreq>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 f911 	bl	800dbe0 <RCC_GetPCLK2ClockFreq>
 800d9be:	6178      	str	r0, [r7, #20]
      break;
 800d9c0:	e05b      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 800d9c2:	f000 f87d 	bl	800dac0 <RCC_GetSystemClockFreq>
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	f7ff fae8 	bl	800cf9c <LL_RCC_GetSysPrescaler>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	0a1b      	lsrs	r3, r3, #8
 800d9d0:	f003 030f 	and.w	r3, r3, #15
 800d9d4:	4a37      	ldr	r2, [pc, #220]	; (800dab4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800d9d6:	5cd3      	ldrb	r3, [r2, r3]
 800d9d8:	f003 031f 	and.w	r3, r3, #31
 800d9dc:	fa24 f303 	lsr.w	r3, r4, r3
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 f8cf 	bl	800db84 <RCC_GetHCLKClockFreq>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f8e1 	bl	800dbb0 <RCC_GetPCLK1ClockFreq>
 800d9ee:	6178      	str	r0, [r7, #20]
      break;
 800d9f0:	e043      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800d9f2:	f7ff fbf3 	bl	800d1dc <LL_RCC_PLL2_IsReady>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d035      	beq.n	800da68 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d9fc:	f107 0308 	add.w	r3, r7, #8
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fdfd 	bl	800d600 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	617b      	str	r3, [r7, #20]
      }
      break;
 800da0a:	e02d      	b.n	800da68 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800da0c:	f7ff fca2 	bl	800d354 <LL_RCC_PLL3_IsReady>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d02a      	beq.n	800da6c <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff fe88 	bl	800d730 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	617b      	str	r3, [r7, #20]
      }
      break;
 800da24:	e022      	b.n	800da6c <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800da26:	f7ff fa65 	bl	800cef4 <LL_RCC_HSI_IsReady>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d01f      	beq.n	800da70 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800da30:	f7ff fa72 	bl	800cf18 <LL_RCC_HSI_GetDivider>
 800da34:	4603      	mov	r3, r0
 800da36:	08db      	lsrs	r3, r3, #3
 800da38:	4a1f      	ldr	r2, [pc, #124]	; (800dab8 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800da3a:	fa22 f303 	lsr.w	r3, r2, r3
 800da3e:	617b      	str	r3, [r7, #20]
      }
      break;
 800da40:	e016      	b.n	800da70 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800da42:	f7ff fa77 	bl	800cf34 <LL_RCC_CSI_IsReady>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d013      	beq.n	800da74 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800da4c:	4b1b      	ldr	r3, [pc, #108]	; (800dabc <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800da4e:	617b      	str	r3, [r7, #20]
      }
      break;
 800da50:	e010      	b.n	800da74 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800da52:	f7ff fa83 	bl	800cf5c <LL_RCC_LSE_IsReady>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00d      	beq.n	800da78 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800da5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da60:	617b      	str	r3, [r7, #20]
      }
      break;
 800da62:	e009      	b.n	800da78 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800da64:	bf00      	nop
 800da66:	e008      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800da68:	bf00      	nop
 800da6a:	e006      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800da6c:	bf00      	nop
 800da6e:	e004      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800da70:	bf00      	nop
 800da72:	e002      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800da74:	bf00      	nop
 800da76:	e000      	b.n	800da7a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800da78:	bf00      	nop
  }

  return usart_frequency;
 800da7a:	697b      	ldr	r3, [r7, #20]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	371c      	adds	r7, #28
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}
 800da84:	07050308 	.word	0x07050308
 800da88:	07050008 	.word	0x07050008
 800da8c:	07040308 	.word	0x07040308
 800da90:	07040008 	.word	0x07040008
 800da94:	07030308 	.word	0x07030308
 800da98:	07030008 	.word	0x07030008
 800da9c:	07020308 	.word	0x07020308
 800daa0:	07020008 	.word	0x07020008
 800daa4:	07010308 	.word	0x07010308
 800daa8:	07010008 	.word	0x07010008
 800daac:	07000008 	.word	0x07000008
 800dab0:	07000308 	.word	0x07000308
 800dab4:	0800ea28 	.word	0x0800ea28
 800dab8:	03d09000 	.word	0x03d09000
 800dabc:	003d0900 	.word	0x003d0900

0800dac0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800daca:	f7ff fa59 	bl	800cf80 <LL_RCC_GetSysClkSource>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b18      	cmp	r3, #24
 800dad2:	d84b      	bhi.n	800db6c <RCC_GetSystemClockFreq+0xac>
 800dad4:	a201      	add	r2, pc, #4	; (adr r2, 800dadc <RCC_GetSystemClockFreq+0x1c>)
 800dad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dada:	bf00      	nop
 800dadc:	0800db41 	.word	0x0800db41
 800dae0:	0800db6d 	.word	0x0800db6d
 800dae4:	0800db6d 	.word	0x0800db6d
 800dae8:	0800db6d 	.word	0x0800db6d
 800daec:	0800db6d 	.word	0x0800db6d
 800daf0:	0800db6d 	.word	0x0800db6d
 800daf4:	0800db6d 	.word	0x0800db6d
 800daf8:	0800db6d 	.word	0x0800db6d
 800dafc:	0800db53 	.word	0x0800db53
 800db00:	0800db6d 	.word	0x0800db6d
 800db04:	0800db6d 	.word	0x0800db6d
 800db08:	0800db6d 	.word	0x0800db6d
 800db0c:	0800db6d 	.word	0x0800db6d
 800db10:	0800db6d 	.word	0x0800db6d
 800db14:	0800db6d 	.word	0x0800db6d
 800db18:	0800db6d 	.word	0x0800db6d
 800db1c:	0800db59 	.word	0x0800db59
 800db20:	0800db6d 	.word	0x0800db6d
 800db24:	0800db6d 	.word	0x0800db6d
 800db28:	0800db6d 	.word	0x0800db6d
 800db2c:	0800db6d 	.word	0x0800db6d
 800db30:	0800db6d 	.word	0x0800db6d
 800db34:	0800db6d 	.word	0x0800db6d
 800db38:	0800db6d 	.word	0x0800db6d
 800db3c:	0800db5f 	.word	0x0800db5f
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800db40:	f7ff f9ea 	bl	800cf18 <LL_RCC_HSI_GetDivider>
 800db44:	4603      	mov	r3, r0
 800db46:	08db      	lsrs	r3, r3, #3
 800db48:	4a0b      	ldr	r2, [pc, #44]	; (800db78 <RCC_GetSystemClockFreq+0xb8>)
 800db4a:	fa22 f303 	lsr.w	r3, r2, r3
 800db4e:	60fb      	str	r3, [r7, #12]
      break;
 800db50:	e00d      	b.n	800db6e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800db52:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <RCC_GetSystemClockFreq+0xbc>)
 800db54:	60fb      	str	r3, [r7, #12]
      break;
 800db56:	e00a      	b.n	800db6e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800db58:	4b09      	ldr	r3, [pc, #36]	; (800db80 <RCC_GetSystemClockFreq+0xc0>)
 800db5a:	60fb      	str	r3, [r7, #12]
      break;
 800db5c:	e007      	b.n	800db6e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800db5e:	463b      	mov	r3, r7
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff fcb5 	bl	800d4d0 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	60fb      	str	r3, [r7, #12]
      break;
 800db6a:	e000      	b.n	800db6e <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800db6c:	bf00      	nop
  }

  return frequency;
 800db6e:	68fb      	ldr	r3, [r7, #12]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	03d09000 	.word	0x03d09000
 800db7c:	003d0900 	.word	0x003d0900
 800db80:	007a1200 	.word	0x007a1200

0800db84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800db8c:	f7ff fa14 	bl	800cfb8 <LL_RCC_GetAHBPrescaler>
 800db90:	4603      	mov	r3, r0
 800db92:	f003 030f 	and.w	r3, r3, #15
 800db96:	4a05      	ldr	r2, [pc, #20]	; (800dbac <RCC_GetHCLKClockFreq+0x28>)
 800db98:	5cd3      	ldrb	r3, [r2, r3]
 800db9a:	f003 031f 	and.w	r3, r3, #31
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	0800ea28 	.word	0x0800ea28

0800dbb0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800dbb8:	f7ff fa0c 	bl	800cfd4 <LL_RCC_GetAPB1Prescaler>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	091b      	lsrs	r3, r3, #4
 800dbc0:	f003 0307 	and.w	r3, r3, #7
 800dbc4:	4a05      	ldr	r2, [pc, #20]	; (800dbdc <RCC_GetPCLK1ClockFreq+0x2c>)
 800dbc6:	5cd3      	ldrb	r3, [r2, r3]
 800dbc8:	f003 031f 	and.w	r3, r3, #31
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	0800ea28 	.word	0x0800ea28

0800dbe0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800dbe8:	f7ff fa02 	bl	800cff0 <LL_RCC_GetAPB2Prescaler>
 800dbec:	4603      	mov	r3, r0
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	f003 0307 	and.w	r3, r3, #7
 800dbf4:	4a05      	ldr	r2, [pc, #20]	; (800dc0c <RCC_GetPCLK2ClockFreq+0x2c>)
 800dbf6:	5cd3      	ldrb	r3, [r2, r3]
 800dbf8:	f003 031f 	and.w	r3, r3, #31
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0800ea28 	.word	0x0800ea28

0800dc10 <LL_TIM_SetPrescaler>:
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <LL_TIM_SetAutoReload>:
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <LL_TIM_SetRepetitionCounter>:
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	f043 0201 	orr.w	r2, r3, #1
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	615a      	str	r2, [r3, #20]
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a3d      	ldr	r2, [pc, #244]	; (800dd8c <LL_TIM_Init+0x108>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d013      	beq.n	800dcc4 <LL_TIM_Init+0x40>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dca2:	d00f      	beq.n	800dcc4 <LL_TIM_Init+0x40>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4a3a      	ldr	r2, [pc, #232]	; (800dd90 <LL_TIM_Init+0x10c>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d00b      	beq.n	800dcc4 <LL_TIM_Init+0x40>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4a39      	ldr	r2, [pc, #228]	; (800dd94 <LL_TIM_Init+0x110>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d007      	beq.n	800dcc4 <LL_TIM_Init+0x40>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4a38      	ldr	r2, [pc, #224]	; (800dd98 <LL_TIM_Init+0x114>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d003      	beq.n	800dcc4 <LL_TIM_Init+0x40>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	4a37      	ldr	r2, [pc, #220]	; (800dd9c <LL_TIM_Init+0x118>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d106      	bne.n	800dcd2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a2d      	ldr	r2, [pc, #180]	; (800dd8c <LL_TIM_Init+0x108>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d01f      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dce0:	d01b      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a2a      	ldr	r2, [pc, #168]	; (800dd90 <LL_TIM_Init+0x10c>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d017      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a29      	ldr	r2, [pc, #164]	; (800dd94 <LL_TIM_Init+0x110>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d013      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a28      	ldr	r2, [pc, #160]	; (800dd98 <LL_TIM_Init+0x114>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d00f      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a27      	ldr	r2, [pc, #156]	; (800dd9c <LL_TIM_Init+0x118>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d00b      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a26      	ldr	r2, [pc, #152]	; (800dda0 <LL_TIM_Init+0x11c>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d007      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a25      	ldr	r2, [pc, #148]	; (800dda4 <LL_TIM_Init+0x120>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d003      	beq.n	800dd1a <LL_TIM_Init+0x96>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a24      	ldr	r2, [pc, #144]	; (800dda8 <LL_TIM_Init+0x124>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d106      	bne.n	800dd28 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	4619      	mov	r1, r3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7ff ff79 	bl	800dc2c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff ff65 	bl	800dc10 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a10      	ldr	r2, [pc, #64]	; (800dd8c <LL_TIM_Init+0x108>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d00f      	beq.n	800dd6e <LL_TIM_Init+0xea>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a12      	ldr	r2, [pc, #72]	; (800dd9c <LL_TIM_Init+0x118>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d00b      	beq.n	800dd6e <LL_TIM_Init+0xea>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a11      	ldr	r2, [pc, #68]	; (800dda0 <LL_TIM_Init+0x11c>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d007      	beq.n	800dd6e <LL_TIM_Init+0xea>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a10      	ldr	r2, [pc, #64]	; (800dda4 <LL_TIM_Init+0x120>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d003      	beq.n	800dd6e <LL_TIM_Init+0xea>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a0f      	ldr	r2, [pc, #60]	; (800dda8 <LL_TIM_Init+0x124>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d105      	bne.n	800dd7a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f7ff ff67 	bl	800dc48 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ff72 	bl	800dc64 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	40010000 	.word	0x40010000
 800dd90:	40000400 	.word	0x40000400
 800dd94:	40000800 	.word	0x40000800
 800dd98:	40000c00 	.word	0x40000c00
 800dd9c:	40010400 	.word	0x40010400
 800dda0:	40014000 	.word	0x40014000
 800dda4:	40014400 	.word	0x40014400
 800dda8:	40014800 	.word	0x40014800

0800ddac <LL_USART_IsEnabled>:
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f003 0301 	and.w	r3, r3, #1
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <LL_USART_IsEnabled+0x18>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e000      	b.n	800ddc6 <LL_USART_IsEnabled+0x1a>
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <LL_USART_SetPrescaler>:
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde0:	f023 030f 	bic.w	r3, r3, #15
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	b292      	uxth	r2, r2
 800dde8:	431a      	orrs	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ddee:	bf00      	nop
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <LL_USART_SetStopBitsLength>:
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	431a      	orrs	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	605a      	str	r2, [r3, #4]
}
 800de14:	bf00      	nop
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <LL_USART_SetHWFlowCtrl>:
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	431a      	orrs	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	609a      	str	r2, [r3, #8]
}
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
	...

0800de48 <LL_USART_SetBaudRate>:
{
 800de48:	b480      	push	{r7}
 800de4a:	b087      	sub	sp, #28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b0b      	cmp	r3, #11
 800de5a:	d83c      	bhi.n	800ded6 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d039      	beq.n	800ded6 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de68:	d122      	bne.n	800deb0 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	461a      	mov	r2, r3
 800de70:	4b1c      	ldr	r3, [pc, #112]	; (800dee4 <LL_USART_SetBaudRate+0x9c>)
 800de72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	fbb2 f3f3 	udiv	r3, r2, r3
 800de7c:	005a      	lsls	r2, r3, #1
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	085b      	lsrs	r3, r3, #1
 800de82:	441a      	add	r2, r3
 800de84:	6a3b      	ldr	r3, [r7, #32]
 800de86:	fbb2 f3f3 	udiv	r3, r2, r3
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800de8e:	697a      	ldr	r2, [r7, #20]
 800de90:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800de94:	4013      	ands	r3, r2
 800de96:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	085b      	lsrs	r3, r3, #1
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	f003 0307 	and.w	r3, r3, #7
 800dea2:	693a      	ldr	r2, [r7, #16]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	60da      	str	r2, [r3, #12]
}
 800deae:	e012      	b.n	800ded6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	461a      	mov	r2, r3
 800deb6:	4b0b      	ldr	r3, [pc, #44]	; (800dee4 <LL_USART_SetBaudRate+0x9c>)
 800deb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	fbb2 f2f3 	udiv	r2, r2, r3
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	085b      	lsrs	r3, r3, #1
 800dec6:	441a      	add	r2, r3
 800dec8:	6a3b      	ldr	r3, [r7, #32]
 800deca:	fbb2 f3f3 	udiv	r3, r2, r3
 800dece:	b29b      	uxth	r3, r3
 800ded0:	461a      	mov	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	60da      	str	r2, [r3, #12]
}
 800ded6:	bf00      	nop
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	0800ea38 	.word	0x0800ea38

0800dee8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af02      	add	r7, sp, #8
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800def6:	2300      	movs	r3, #0
 800def8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff ff56 	bl	800ddac <LL_USART_IsEnabled>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d17f      	bne.n	800e006 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	4b41      	ldr	r3, [pc, #260]	; (800e010 <LL_USART_Init+0x128>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	683a      	ldr	r2, [r7, #0]
 800df10:	6891      	ldr	r1, [r2, #8]
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	6912      	ldr	r2, [r2, #16]
 800df16:	4311      	orrs	r1, r2
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	6952      	ldr	r2, [r2, #20]
 800df1c:	4311      	orrs	r1, r2
 800df1e:	683a      	ldr	r2, [r7, #0]
 800df20:	69d2      	ldr	r2, [r2, #28]
 800df22:	430a      	orrs	r2, r1
 800df24:	431a      	orrs	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff ff62 	bl	800ddfa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff ff6f 	bl	800de20 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a33      	ldr	r2, [pc, #204]	; (800e014 <LL_USART_Init+0x12c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d104      	bne.n	800df54 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800df4a:	4833      	ldr	r0, [pc, #204]	; (800e018 <LL_USART_Init+0x130>)
 800df4c:	f7ff fcca 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800df50:	60b8      	str	r0, [r7, #8]
 800df52:	e03d      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a31      	ldr	r2, [pc, #196]	; (800e01c <LL_USART_Init+0x134>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d104      	bne.n	800df66 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800df5c:	4830      	ldr	r0, [pc, #192]	; (800e020 <LL_USART_Init+0x138>)
 800df5e:	f7ff fcc1 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800df62:	60b8      	str	r0, [r7, #8]
 800df64:	e034      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a2e      	ldr	r2, [pc, #184]	; (800e024 <LL_USART_Init+0x13c>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d104      	bne.n	800df78 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800df6e:	482c      	ldr	r0, [pc, #176]	; (800e020 <LL_USART_Init+0x138>)
 800df70:	f7ff fcb8 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800df74:	60b8      	str	r0, [r7, #8]
 800df76:	e02b      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4a2b      	ldr	r2, [pc, #172]	; (800e028 <LL_USART_Init+0x140>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d104      	bne.n	800df8a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800df80:	4827      	ldr	r0, [pc, #156]	; (800e020 <LL_USART_Init+0x138>)
 800df82:	f7ff fcaf 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800df86:	60b8      	str	r0, [r7, #8]
 800df88:	e022      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4a27      	ldr	r2, [pc, #156]	; (800e02c <LL_USART_Init+0x144>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d104      	bne.n	800df9c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800df92:	4823      	ldr	r0, [pc, #140]	; (800e020 <LL_USART_Init+0x138>)
 800df94:	f7ff fca6 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800df98:	60b8      	str	r0, [r7, #8]
 800df9a:	e019      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a24      	ldr	r2, [pc, #144]	; (800e030 <LL_USART_Init+0x148>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d104      	bne.n	800dfae <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800dfa4:	481c      	ldr	r0, [pc, #112]	; (800e018 <LL_USART_Init+0x130>)
 800dfa6:	f7ff fc9d 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800dfaa:	60b8      	str	r0, [r7, #8]
 800dfac:	e010      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4a20      	ldr	r2, [pc, #128]	; (800e034 <LL_USART_Init+0x14c>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d104      	bne.n	800dfc0 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800dfb6:	481a      	ldr	r0, [pc, #104]	; (800e020 <LL_USART_Init+0x138>)
 800dfb8:	f7ff fc94 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800dfbc:	60b8      	str	r0, [r7, #8]
 800dfbe:	e007      	b.n	800dfd0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a1d      	ldr	r2, [pc, #116]	; (800e038 <LL_USART_Init+0x150>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d103      	bne.n	800dfd0 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800dfc8:	4815      	ldr	r0, [pc, #84]	; (800e020 <LL_USART_Init+0x138>)
 800dfca:	f7ff fc8b 	bl	800d8e4 <LL_RCC_GetUSARTClockFreq>
 800dfce:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d011      	beq.n	800dffa <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00d      	beq.n	800dffa <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	69d9      	ldr	r1, [r3, #28]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	460b      	mov	r3, r1
 800dff2:	68b9      	ldr	r1, [r7, #8]
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff ff27 	bl	800de48 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4619      	mov	r1, r3
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7ff fee6 	bl	800ddd2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800e006:	7bfb      	ldrb	r3, [r7, #15]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	efff69f3 	.word	0xefff69f3
 800e014:	40011000 	.word	0x40011000
 800e018:	07000308 	.word	0x07000308
 800e01c:	40004400 	.word	0x40004400
 800e020:	07000008 	.word	0x07000008
 800e024:	40004800 	.word	0x40004800
 800e028:	40004c00 	.word	0x40004c00
 800e02c:	40005000 	.word	0x40005000
 800e030:	40011400 	.word	0x40011400
 800e034:	40007800 	.word	0x40007800
 800e038:	40007c00 	.word	0x40007c00

0800e03c <__errno>:
 800e03c:	4b01      	ldr	r3, [pc, #4]	; (800e044 <__errno+0x8>)
 800e03e:	6818      	ldr	r0, [r3, #0]
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	24009158 	.word	0x24009158

0800e048 <__libc_init_array>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	4d0d      	ldr	r5, [pc, #52]	; (800e080 <__libc_init_array+0x38>)
 800e04c:	4c0d      	ldr	r4, [pc, #52]	; (800e084 <__libc_init_array+0x3c>)
 800e04e:	1b64      	subs	r4, r4, r5
 800e050:	10a4      	asrs	r4, r4, #2
 800e052:	2600      	movs	r6, #0
 800e054:	42a6      	cmp	r6, r4
 800e056:	d109      	bne.n	800e06c <__libc_init_array+0x24>
 800e058:	4d0b      	ldr	r5, [pc, #44]	; (800e088 <__libc_init_array+0x40>)
 800e05a:	4c0c      	ldr	r4, [pc, #48]	; (800e08c <__libc_init_array+0x44>)
 800e05c:	f000 fc4e 	bl	800e8fc <_init>
 800e060:	1b64      	subs	r4, r4, r5
 800e062:	10a4      	asrs	r4, r4, #2
 800e064:	2600      	movs	r6, #0
 800e066:	42a6      	cmp	r6, r4
 800e068:	d105      	bne.n	800e076 <__libc_init_array+0x2e>
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e070:	4798      	blx	r3
 800e072:	3601      	adds	r6, #1
 800e074:	e7ee      	b.n	800e054 <__libc_init_array+0xc>
 800e076:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07a:	4798      	blx	r3
 800e07c:	3601      	adds	r6, #1
 800e07e:	e7f2      	b.n	800e066 <__libc_init_array+0x1e>
 800e080:	0800ea9c 	.word	0x0800ea9c
 800e084:	0800ea9c 	.word	0x0800ea9c
 800e088:	0800ea9c 	.word	0x0800ea9c
 800e08c:	0800eaa0 	.word	0x0800eaa0

0800e090 <memset>:
 800e090:	4402      	add	r2, r0
 800e092:	4603      	mov	r3, r0
 800e094:	4293      	cmp	r3, r2
 800e096:	d100      	bne.n	800e09a <memset+0xa>
 800e098:	4770      	bx	lr
 800e09a:	f803 1b01 	strb.w	r1, [r3], #1
 800e09e:	e7f9      	b.n	800e094 <memset+0x4>

0800e0a0 <siprintf>:
 800e0a0:	b40e      	push	{r1, r2, r3}
 800e0a2:	b500      	push	{lr}
 800e0a4:	b09c      	sub	sp, #112	; 0x70
 800e0a6:	ab1d      	add	r3, sp, #116	; 0x74
 800e0a8:	9002      	str	r0, [sp, #8]
 800e0aa:	9006      	str	r0, [sp, #24]
 800e0ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0b0:	4809      	ldr	r0, [pc, #36]	; (800e0d8 <siprintf+0x38>)
 800e0b2:	9107      	str	r1, [sp, #28]
 800e0b4:	9104      	str	r1, [sp, #16]
 800e0b6:	4909      	ldr	r1, [pc, #36]	; (800e0dc <siprintf+0x3c>)
 800e0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0bc:	9105      	str	r1, [sp, #20]
 800e0be:	6800      	ldr	r0, [r0, #0]
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	a902      	add	r1, sp, #8
 800e0c4:	f000 f868 	bl	800e198 <_svfiprintf_r>
 800e0c8:	9b02      	ldr	r3, [sp, #8]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	b01c      	add	sp, #112	; 0x70
 800e0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0d4:	b003      	add	sp, #12
 800e0d6:	4770      	bx	lr
 800e0d8:	24009158 	.word	0x24009158
 800e0dc:	ffff0208 	.word	0xffff0208

0800e0e0 <__ssputs_r>:
 800e0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e4:	688e      	ldr	r6, [r1, #8]
 800e0e6:	429e      	cmp	r6, r3
 800e0e8:	4682      	mov	sl, r0
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	4690      	mov	r8, r2
 800e0ee:	461f      	mov	r7, r3
 800e0f0:	d838      	bhi.n	800e164 <__ssputs_r+0x84>
 800e0f2:	898a      	ldrh	r2, [r1, #12]
 800e0f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0f8:	d032      	beq.n	800e160 <__ssputs_r+0x80>
 800e0fa:	6825      	ldr	r5, [r4, #0]
 800e0fc:	6909      	ldr	r1, [r1, #16]
 800e0fe:	eba5 0901 	sub.w	r9, r5, r1
 800e102:	6965      	ldr	r5, [r4, #20]
 800e104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e10c:	3301      	adds	r3, #1
 800e10e:	444b      	add	r3, r9
 800e110:	106d      	asrs	r5, r5, #1
 800e112:	429d      	cmp	r5, r3
 800e114:	bf38      	it	cc
 800e116:	461d      	movcc	r5, r3
 800e118:	0553      	lsls	r3, r2, #21
 800e11a:	d531      	bpl.n	800e180 <__ssputs_r+0xa0>
 800e11c:	4629      	mov	r1, r5
 800e11e:	f000 fb47 	bl	800e7b0 <_malloc_r>
 800e122:	4606      	mov	r6, r0
 800e124:	b950      	cbnz	r0, 800e13c <__ssputs_r+0x5c>
 800e126:	230c      	movs	r3, #12
 800e128:	f8ca 3000 	str.w	r3, [sl]
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e132:	81a3      	strh	r3, [r4, #12]
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e13c:	6921      	ldr	r1, [r4, #16]
 800e13e:	464a      	mov	r2, r9
 800e140:	f000 fabe 	bl	800e6c0 <memcpy>
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e14e:	81a3      	strh	r3, [r4, #12]
 800e150:	6126      	str	r6, [r4, #16]
 800e152:	6165      	str	r5, [r4, #20]
 800e154:	444e      	add	r6, r9
 800e156:	eba5 0509 	sub.w	r5, r5, r9
 800e15a:	6026      	str	r6, [r4, #0]
 800e15c:	60a5      	str	r5, [r4, #8]
 800e15e:	463e      	mov	r6, r7
 800e160:	42be      	cmp	r6, r7
 800e162:	d900      	bls.n	800e166 <__ssputs_r+0x86>
 800e164:	463e      	mov	r6, r7
 800e166:	4632      	mov	r2, r6
 800e168:	6820      	ldr	r0, [r4, #0]
 800e16a:	4641      	mov	r1, r8
 800e16c:	f000 fab6 	bl	800e6dc <memmove>
 800e170:	68a3      	ldr	r3, [r4, #8]
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	1b9b      	subs	r3, r3, r6
 800e176:	4432      	add	r2, r6
 800e178:	60a3      	str	r3, [r4, #8]
 800e17a:	6022      	str	r2, [r4, #0]
 800e17c:	2000      	movs	r0, #0
 800e17e:	e7db      	b.n	800e138 <__ssputs_r+0x58>
 800e180:	462a      	mov	r2, r5
 800e182:	f000 fb6f 	bl	800e864 <_realloc_r>
 800e186:	4606      	mov	r6, r0
 800e188:	2800      	cmp	r0, #0
 800e18a:	d1e1      	bne.n	800e150 <__ssputs_r+0x70>
 800e18c:	6921      	ldr	r1, [r4, #16]
 800e18e:	4650      	mov	r0, sl
 800e190:	f000 fabe 	bl	800e710 <_free_r>
 800e194:	e7c7      	b.n	800e126 <__ssputs_r+0x46>
	...

0800e198 <_svfiprintf_r>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	4698      	mov	r8, r3
 800e19e:	898b      	ldrh	r3, [r1, #12]
 800e1a0:	061b      	lsls	r3, r3, #24
 800e1a2:	b09d      	sub	sp, #116	; 0x74
 800e1a4:	4607      	mov	r7, r0
 800e1a6:	460d      	mov	r5, r1
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	d50e      	bpl.n	800e1ca <_svfiprintf_r+0x32>
 800e1ac:	690b      	ldr	r3, [r1, #16]
 800e1ae:	b963      	cbnz	r3, 800e1ca <_svfiprintf_r+0x32>
 800e1b0:	2140      	movs	r1, #64	; 0x40
 800e1b2:	f000 fafd 	bl	800e7b0 <_malloc_r>
 800e1b6:	6028      	str	r0, [r5, #0]
 800e1b8:	6128      	str	r0, [r5, #16]
 800e1ba:	b920      	cbnz	r0, 800e1c6 <_svfiprintf_r+0x2e>
 800e1bc:	230c      	movs	r3, #12
 800e1be:	603b      	str	r3, [r7, #0]
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c4:	e0d1      	b.n	800e36a <_svfiprintf_r+0x1d2>
 800e1c6:	2340      	movs	r3, #64	; 0x40
 800e1c8:	616b      	str	r3, [r5, #20]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ce:	2320      	movs	r3, #32
 800e1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1d8:	2330      	movs	r3, #48	; 0x30
 800e1da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e384 <_svfiprintf_r+0x1ec>
 800e1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1e2:	f04f 0901 	mov.w	r9, #1
 800e1e6:	4623      	mov	r3, r4
 800e1e8:	469a      	mov	sl, r3
 800e1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ee:	b10a      	cbz	r2, 800e1f4 <_svfiprintf_r+0x5c>
 800e1f0:	2a25      	cmp	r2, #37	; 0x25
 800e1f2:	d1f9      	bne.n	800e1e8 <_svfiprintf_r+0x50>
 800e1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1f8:	d00b      	beq.n	800e212 <_svfiprintf_r+0x7a>
 800e1fa:	465b      	mov	r3, fp
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4629      	mov	r1, r5
 800e200:	4638      	mov	r0, r7
 800e202:	f7ff ff6d 	bl	800e0e0 <__ssputs_r>
 800e206:	3001      	adds	r0, #1
 800e208:	f000 80aa 	beq.w	800e360 <_svfiprintf_r+0x1c8>
 800e20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e20e:	445a      	add	r2, fp
 800e210:	9209      	str	r2, [sp, #36]	; 0x24
 800e212:	f89a 3000 	ldrb.w	r3, [sl]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 80a2 	beq.w	800e360 <_svfiprintf_r+0x1c8>
 800e21c:	2300      	movs	r3, #0
 800e21e:	f04f 32ff 	mov.w	r2, #4294967295
 800e222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e226:	f10a 0a01 	add.w	sl, sl, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	9307      	str	r3, [sp, #28]
 800e22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e232:	931a      	str	r3, [sp, #104]	; 0x68
 800e234:	4654      	mov	r4, sl
 800e236:	2205      	movs	r2, #5
 800e238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23c:	4851      	ldr	r0, [pc, #324]	; (800e384 <_svfiprintf_r+0x1ec>)
 800e23e:	f7f2 f84f 	bl	80002e0 <memchr>
 800e242:	9a04      	ldr	r2, [sp, #16]
 800e244:	b9d8      	cbnz	r0, 800e27e <_svfiprintf_r+0xe6>
 800e246:	06d0      	lsls	r0, r2, #27
 800e248:	bf44      	itt	mi
 800e24a:	2320      	movmi	r3, #32
 800e24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e250:	0711      	lsls	r1, r2, #28
 800e252:	bf44      	itt	mi
 800e254:	232b      	movmi	r3, #43	; 0x2b
 800e256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e25a:	f89a 3000 	ldrb.w	r3, [sl]
 800e25e:	2b2a      	cmp	r3, #42	; 0x2a
 800e260:	d015      	beq.n	800e28e <_svfiprintf_r+0xf6>
 800e262:	9a07      	ldr	r2, [sp, #28]
 800e264:	4654      	mov	r4, sl
 800e266:	2000      	movs	r0, #0
 800e268:	f04f 0c0a 	mov.w	ip, #10
 800e26c:	4621      	mov	r1, r4
 800e26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e272:	3b30      	subs	r3, #48	; 0x30
 800e274:	2b09      	cmp	r3, #9
 800e276:	d94e      	bls.n	800e316 <_svfiprintf_r+0x17e>
 800e278:	b1b0      	cbz	r0, 800e2a8 <_svfiprintf_r+0x110>
 800e27a:	9207      	str	r2, [sp, #28]
 800e27c:	e014      	b.n	800e2a8 <_svfiprintf_r+0x110>
 800e27e:	eba0 0308 	sub.w	r3, r0, r8
 800e282:	fa09 f303 	lsl.w	r3, r9, r3
 800e286:	4313      	orrs	r3, r2
 800e288:	9304      	str	r3, [sp, #16]
 800e28a:	46a2      	mov	sl, r4
 800e28c:	e7d2      	b.n	800e234 <_svfiprintf_r+0x9c>
 800e28e:	9b03      	ldr	r3, [sp, #12]
 800e290:	1d19      	adds	r1, r3, #4
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	9103      	str	r1, [sp, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	bfbb      	ittet	lt
 800e29a:	425b      	neglt	r3, r3
 800e29c:	f042 0202 	orrlt.w	r2, r2, #2
 800e2a0:	9307      	strge	r3, [sp, #28]
 800e2a2:	9307      	strlt	r3, [sp, #28]
 800e2a4:	bfb8      	it	lt
 800e2a6:	9204      	strlt	r2, [sp, #16]
 800e2a8:	7823      	ldrb	r3, [r4, #0]
 800e2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800e2ac:	d10c      	bne.n	800e2c8 <_svfiprintf_r+0x130>
 800e2ae:	7863      	ldrb	r3, [r4, #1]
 800e2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2b2:	d135      	bne.n	800e320 <_svfiprintf_r+0x188>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	1d1a      	adds	r2, r3, #4
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	9203      	str	r2, [sp, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	bfb8      	it	lt
 800e2c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2c4:	3402      	adds	r4, #2
 800e2c6:	9305      	str	r3, [sp, #20]
 800e2c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e394 <_svfiprintf_r+0x1fc>
 800e2cc:	7821      	ldrb	r1, [r4, #0]
 800e2ce:	2203      	movs	r2, #3
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	f7f2 f805 	bl	80002e0 <memchr>
 800e2d6:	b140      	cbz	r0, 800e2ea <_svfiprintf_r+0x152>
 800e2d8:	2340      	movs	r3, #64	; 0x40
 800e2da:	eba0 000a 	sub.w	r0, r0, sl
 800e2de:	fa03 f000 	lsl.w	r0, r3, r0
 800e2e2:	9b04      	ldr	r3, [sp, #16]
 800e2e4:	4303      	orrs	r3, r0
 800e2e6:	3401      	adds	r4, #1
 800e2e8:	9304      	str	r3, [sp, #16]
 800e2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ee:	4826      	ldr	r0, [pc, #152]	; (800e388 <_svfiprintf_r+0x1f0>)
 800e2f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2f4:	2206      	movs	r2, #6
 800e2f6:	f7f1 fff3 	bl	80002e0 <memchr>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d038      	beq.n	800e370 <_svfiprintf_r+0x1d8>
 800e2fe:	4b23      	ldr	r3, [pc, #140]	; (800e38c <_svfiprintf_r+0x1f4>)
 800e300:	bb1b      	cbnz	r3, 800e34a <_svfiprintf_r+0x1b2>
 800e302:	9b03      	ldr	r3, [sp, #12]
 800e304:	3307      	adds	r3, #7
 800e306:	f023 0307 	bic.w	r3, r3, #7
 800e30a:	3308      	adds	r3, #8
 800e30c:	9303      	str	r3, [sp, #12]
 800e30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e310:	4433      	add	r3, r6
 800e312:	9309      	str	r3, [sp, #36]	; 0x24
 800e314:	e767      	b.n	800e1e6 <_svfiprintf_r+0x4e>
 800e316:	fb0c 3202 	mla	r2, ip, r2, r3
 800e31a:	460c      	mov	r4, r1
 800e31c:	2001      	movs	r0, #1
 800e31e:	e7a5      	b.n	800e26c <_svfiprintf_r+0xd4>
 800e320:	2300      	movs	r3, #0
 800e322:	3401      	adds	r4, #1
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	4619      	mov	r1, r3
 800e328:	f04f 0c0a 	mov.w	ip, #10
 800e32c:	4620      	mov	r0, r4
 800e32e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e332:	3a30      	subs	r2, #48	; 0x30
 800e334:	2a09      	cmp	r2, #9
 800e336:	d903      	bls.n	800e340 <_svfiprintf_r+0x1a8>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d0c5      	beq.n	800e2c8 <_svfiprintf_r+0x130>
 800e33c:	9105      	str	r1, [sp, #20]
 800e33e:	e7c3      	b.n	800e2c8 <_svfiprintf_r+0x130>
 800e340:	fb0c 2101 	mla	r1, ip, r1, r2
 800e344:	4604      	mov	r4, r0
 800e346:	2301      	movs	r3, #1
 800e348:	e7f0      	b.n	800e32c <_svfiprintf_r+0x194>
 800e34a:	ab03      	add	r3, sp, #12
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	462a      	mov	r2, r5
 800e350:	4b0f      	ldr	r3, [pc, #60]	; (800e390 <_svfiprintf_r+0x1f8>)
 800e352:	a904      	add	r1, sp, #16
 800e354:	4638      	mov	r0, r7
 800e356:	f3af 8000 	nop.w
 800e35a:	1c42      	adds	r2, r0, #1
 800e35c:	4606      	mov	r6, r0
 800e35e:	d1d6      	bne.n	800e30e <_svfiprintf_r+0x176>
 800e360:	89ab      	ldrh	r3, [r5, #12]
 800e362:	065b      	lsls	r3, r3, #25
 800e364:	f53f af2c 	bmi.w	800e1c0 <_svfiprintf_r+0x28>
 800e368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e36a:	b01d      	add	sp, #116	; 0x74
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	ab03      	add	r3, sp, #12
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	462a      	mov	r2, r5
 800e376:	4b06      	ldr	r3, [pc, #24]	; (800e390 <_svfiprintf_r+0x1f8>)
 800e378:	a904      	add	r1, sp, #16
 800e37a:	4638      	mov	r0, r7
 800e37c:	f000 f87a 	bl	800e474 <_printf_i>
 800e380:	e7eb      	b.n	800e35a <_svfiprintf_r+0x1c2>
 800e382:	bf00      	nop
 800e384:	0800ea68 	.word	0x0800ea68
 800e388:	0800ea72 	.word	0x0800ea72
 800e38c:	00000000 	.word	0x00000000
 800e390:	0800e0e1 	.word	0x0800e0e1
 800e394:	0800ea6e 	.word	0x0800ea6e

0800e398 <_printf_common>:
 800e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e39c:	4616      	mov	r6, r2
 800e39e:	4699      	mov	r9, r3
 800e3a0:	688a      	ldr	r2, [r1, #8]
 800e3a2:	690b      	ldr	r3, [r1, #16]
 800e3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	bfb8      	it	lt
 800e3ac:	4613      	movlt	r3, r2
 800e3ae:	6033      	str	r3, [r6, #0]
 800e3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	460c      	mov	r4, r1
 800e3b8:	b10a      	cbz	r2, 800e3be <_printf_common+0x26>
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	6033      	str	r3, [r6, #0]
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	0699      	lsls	r1, r3, #26
 800e3c2:	bf42      	ittt	mi
 800e3c4:	6833      	ldrmi	r3, [r6, #0]
 800e3c6:	3302      	addmi	r3, #2
 800e3c8:	6033      	strmi	r3, [r6, #0]
 800e3ca:	6825      	ldr	r5, [r4, #0]
 800e3cc:	f015 0506 	ands.w	r5, r5, #6
 800e3d0:	d106      	bne.n	800e3e0 <_printf_common+0x48>
 800e3d2:	f104 0a19 	add.w	sl, r4, #25
 800e3d6:	68e3      	ldr	r3, [r4, #12]
 800e3d8:	6832      	ldr	r2, [r6, #0]
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	42ab      	cmp	r3, r5
 800e3de:	dc26      	bgt.n	800e42e <_printf_common+0x96>
 800e3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3e4:	1e13      	subs	r3, r2, #0
 800e3e6:	6822      	ldr	r2, [r4, #0]
 800e3e8:	bf18      	it	ne
 800e3ea:	2301      	movne	r3, #1
 800e3ec:	0692      	lsls	r2, r2, #26
 800e3ee:	d42b      	bmi.n	800e448 <_printf_common+0xb0>
 800e3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	47c0      	blx	r8
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	d01e      	beq.n	800e43c <_printf_common+0xa4>
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	68e5      	ldr	r5, [r4, #12]
 800e402:	6832      	ldr	r2, [r6, #0]
 800e404:	f003 0306 	and.w	r3, r3, #6
 800e408:	2b04      	cmp	r3, #4
 800e40a:	bf08      	it	eq
 800e40c:	1aad      	subeq	r5, r5, r2
 800e40e:	68a3      	ldr	r3, [r4, #8]
 800e410:	6922      	ldr	r2, [r4, #16]
 800e412:	bf0c      	ite	eq
 800e414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e418:	2500      	movne	r5, #0
 800e41a:	4293      	cmp	r3, r2
 800e41c:	bfc4      	itt	gt
 800e41e:	1a9b      	subgt	r3, r3, r2
 800e420:	18ed      	addgt	r5, r5, r3
 800e422:	2600      	movs	r6, #0
 800e424:	341a      	adds	r4, #26
 800e426:	42b5      	cmp	r5, r6
 800e428:	d11a      	bne.n	800e460 <_printf_common+0xc8>
 800e42a:	2000      	movs	r0, #0
 800e42c:	e008      	b.n	800e440 <_printf_common+0xa8>
 800e42e:	2301      	movs	r3, #1
 800e430:	4652      	mov	r2, sl
 800e432:	4649      	mov	r1, r9
 800e434:	4638      	mov	r0, r7
 800e436:	47c0      	blx	r8
 800e438:	3001      	adds	r0, #1
 800e43a:	d103      	bne.n	800e444 <_printf_common+0xac>
 800e43c:	f04f 30ff 	mov.w	r0, #4294967295
 800e440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e444:	3501      	adds	r5, #1
 800e446:	e7c6      	b.n	800e3d6 <_printf_common+0x3e>
 800e448:	18e1      	adds	r1, r4, r3
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	2030      	movs	r0, #48	; 0x30
 800e44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e452:	4422      	add	r2, r4
 800e454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e45c:	3302      	adds	r3, #2
 800e45e:	e7c7      	b.n	800e3f0 <_printf_common+0x58>
 800e460:	2301      	movs	r3, #1
 800e462:	4622      	mov	r2, r4
 800e464:	4649      	mov	r1, r9
 800e466:	4638      	mov	r0, r7
 800e468:	47c0      	blx	r8
 800e46a:	3001      	adds	r0, #1
 800e46c:	d0e6      	beq.n	800e43c <_printf_common+0xa4>
 800e46e:	3601      	adds	r6, #1
 800e470:	e7d9      	b.n	800e426 <_printf_common+0x8e>
	...

0800e474 <_printf_i>:
 800e474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e478:	460c      	mov	r4, r1
 800e47a:	4691      	mov	r9, r2
 800e47c:	7e27      	ldrb	r7, [r4, #24]
 800e47e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e480:	2f78      	cmp	r7, #120	; 0x78
 800e482:	4680      	mov	r8, r0
 800e484:	469a      	mov	sl, r3
 800e486:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e48a:	d807      	bhi.n	800e49c <_printf_i+0x28>
 800e48c:	2f62      	cmp	r7, #98	; 0x62
 800e48e:	d80a      	bhi.n	800e4a6 <_printf_i+0x32>
 800e490:	2f00      	cmp	r7, #0
 800e492:	f000 80d8 	beq.w	800e646 <_printf_i+0x1d2>
 800e496:	2f58      	cmp	r7, #88	; 0x58
 800e498:	f000 80a3 	beq.w	800e5e2 <_printf_i+0x16e>
 800e49c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4a4:	e03a      	b.n	800e51c <_printf_i+0xa8>
 800e4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4aa:	2b15      	cmp	r3, #21
 800e4ac:	d8f6      	bhi.n	800e49c <_printf_i+0x28>
 800e4ae:	a001      	add	r0, pc, #4	; (adr r0, 800e4b4 <_printf_i+0x40>)
 800e4b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e4b4:	0800e50d 	.word	0x0800e50d
 800e4b8:	0800e521 	.word	0x0800e521
 800e4bc:	0800e49d 	.word	0x0800e49d
 800e4c0:	0800e49d 	.word	0x0800e49d
 800e4c4:	0800e49d 	.word	0x0800e49d
 800e4c8:	0800e49d 	.word	0x0800e49d
 800e4cc:	0800e521 	.word	0x0800e521
 800e4d0:	0800e49d 	.word	0x0800e49d
 800e4d4:	0800e49d 	.word	0x0800e49d
 800e4d8:	0800e49d 	.word	0x0800e49d
 800e4dc:	0800e49d 	.word	0x0800e49d
 800e4e0:	0800e62d 	.word	0x0800e62d
 800e4e4:	0800e551 	.word	0x0800e551
 800e4e8:	0800e60f 	.word	0x0800e60f
 800e4ec:	0800e49d 	.word	0x0800e49d
 800e4f0:	0800e49d 	.word	0x0800e49d
 800e4f4:	0800e64f 	.word	0x0800e64f
 800e4f8:	0800e49d 	.word	0x0800e49d
 800e4fc:	0800e551 	.word	0x0800e551
 800e500:	0800e49d 	.word	0x0800e49d
 800e504:	0800e49d 	.word	0x0800e49d
 800e508:	0800e617 	.word	0x0800e617
 800e50c:	680b      	ldr	r3, [r1, #0]
 800e50e:	1d1a      	adds	r2, r3, #4
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	600a      	str	r2, [r1, #0]
 800e514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e51c:	2301      	movs	r3, #1
 800e51e:	e0a3      	b.n	800e668 <_printf_i+0x1f4>
 800e520:	6825      	ldr	r5, [r4, #0]
 800e522:	6808      	ldr	r0, [r1, #0]
 800e524:	062e      	lsls	r6, r5, #24
 800e526:	f100 0304 	add.w	r3, r0, #4
 800e52a:	d50a      	bpl.n	800e542 <_printf_i+0xce>
 800e52c:	6805      	ldr	r5, [r0, #0]
 800e52e:	600b      	str	r3, [r1, #0]
 800e530:	2d00      	cmp	r5, #0
 800e532:	da03      	bge.n	800e53c <_printf_i+0xc8>
 800e534:	232d      	movs	r3, #45	; 0x2d
 800e536:	426d      	negs	r5, r5
 800e538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e53c:	485e      	ldr	r0, [pc, #376]	; (800e6b8 <_printf_i+0x244>)
 800e53e:	230a      	movs	r3, #10
 800e540:	e019      	b.n	800e576 <_printf_i+0x102>
 800e542:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e546:	6805      	ldr	r5, [r0, #0]
 800e548:	600b      	str	r3, [r1, #0]
 800e54a:	bf18      	it	ne
 800e54c:	b22d      	sxthne	r5, r5
 800e54e:	e7ef      	b.n	800e530 <_printf_i+0xbc>
 800e550:	680b      	ldr	r3, [r1, #0]
 800e552:	6825      	ldr	r5, [r4, #0]
 800e554:	1d18      	adds	r0, r3, #4
 800e556:	6008      	str	r0, [r1, #0]
 800e558:	0628      	lsls	r0, r5, #24
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0xec>
 800e55c:	681d      	ldr	r5, [r3, #0]
 800e55e:	e002      	b.n	800e566 <_printf_i+0xf2>
 800e560:	0669      	lsls	r1, r5, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0xe8>
 800e564:	881d      	ldrh	r5, [r3, #0]
 800e566:	4854      	ldr	r0, [pc, #336]	; (800e6b8 <_printf_i+0x244>)
 800e568:	2f6f      	cmp	r7, #111	; 0x6f
 800e56a:	bf0c      	ite	eq
 800e56c:	2308      	moveq	r3, #8
 800e56e:	230a      	movne	r3, #10
 800e570:	2100      	movs	r1, #0
 800e572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e576:	6866      	ldr	r6, [r4, #4]
 800e578:	60a6      	str	r6, [r4, #8]
 800e57a:	2e00      	cmp	r6, #0
 800e57c:	bfa2      	ittt	ge
 800e57e:	6821      	ldrge	r1, [r4, #0]
 800e580:	f021 0104 	bicge.w	r1, r1, #4
 800e584:	6021      	strge	r1, [r4, #0]
 800e586:	b90d      	cbnz	r5, 800e58c <_printf_i+0x118>
 800e588:	2e00      	cmp	r6, #0
 800e58a:	d04d      	beq.n	800e628 <_printf_i+0x1b4>
 800e58c:	4616      	mov	r6, r2
 800e58e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e592:	fb03 5711 	mls	r7, r3, r1, r5
 800e596:	5dc7      	ldrb	r7, [r0, r7]
 800e598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e59c:	462f      	mov	r7, r5
 800e59e:	42bb      	cmp	r3, r7
 800e5a0:	460d      	mov	r5, r1
 800e5a2:	d9f4      	bls.n	800e58e <_printf_i+0x11a>
 800e5a4:	2b08      	cmp	r3, #8
 800e5a6:	d10b      	bne.n	800e5c0 <_printf_i+0x14c>
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	07df      	lsls	r7, r3, #31
 800e5ac:	d508      	bpl.n	800e5c0 <_printf_i+0x14c>
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	6861      	ldr	r1, [r4, #4]
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	bfde      	ittt	le
 800e5b6:	2330      	movle	r3, #48	; 0x30
 800e5b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e5c0:	1b92      	subs	r2, r2, r6
 800e5c2:	6122      	str	r2, [r4, #16]
 800e5c4:	f8cd a000 	str.w	sl, [sp]
 800e5c8:	464b      	mov	r3, r9
 800e5ca:	aa03      	add	r2, sp, #12
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	f7ff fee2 	bl	800e398 <_printf_common>
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	d14c      	bne.n	800e672 <_printf_i+0x1fe>
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5dc:	b004      	add	sp, #16
 800e5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e2:	4835      	ldr	r0, [pc, #212]	; (800e6b8 <_printf_i+0x244>)
 800e5e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	680e      	ldr	r6, [r1, #0]
 800e5ec:	061f      	lsls	r7, r3, #24
 800e5ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800e5f2:	600e      	str	r6, [r1, #0]
 800e5f4:	d514      	bpl.n	800e620 <_printf_i+0x1ac>
 800e5f6:	07d9      	lsls	r1, r3, #31
 800e5f8:	bf44      	itt	mi
 800e5fa:	f043 0320 	orrmi.w	r3, r3, #32
 800e5fe:	6023      	strmi	r3, [r4, #0]
 800e600:	b91d      	cbnz	r5, 800e60a <_printf_i+0x196>
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	f023 0320 	bic.w	r3, r3, #32
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	2310      	movs	r3, #16
 800e60c:	e7b0      	b.n	800e570 <_printf_i+0xfc>
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	f043 0320 	orr.w	r3, r3, #32
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	2378      	movs	r3, #120	; 0x78
 800e618:	4828      	ldr	r0, [pc, #160]	; (800e6bc <_printf_i+0x248>)
 800e61a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e61e:	e7e3      	b.n	800e5e8 <_printf_i+0x174>
 800e620:	065e      	lsls	r6, r3, #25
 800e622:	bf48      	it	mi
 800e624:	b2ad      	uxthmi	r5, r5
 800e626:	e7e6      	b.n	800e5f6 <_printf_i+0x182>
 800e628:	4616      	mov	r6, r2
 800e62a:	e7bb      	b.n	800e5a4 <_printf_i+0x130>
 800e62c:	680b      	ldr	r3, [r1, #0]
 800e62e:	6826      	ldr	r6, [r4, #0]
 800e630:	6960      	ldr	r0, [r4, #20]
 800e632:	1d1d      	adds	r5, r3, #4
 800e634:	600d      	str	r5, [r1, #0]
 800e636:	0635      	lsls	r5, r6, #24
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	d501      	bpl.n	800e640 <_printf_i+0x1cc>
 800e63c:	6018      	str	r0, [r3, #0]
 800e63e:	e002      	b.n	800e646 <_printf_i+0x1d2>
 800e640:	0671      	lsls	r1, r6, #25
 800e642:	d5fb      	bpl.n	800e63c <_printf_i+0x1c8>
 800e644:	8018      	strh	r0, [r3, #0]
 800e646:	2300      	movs	r3, #0
 800e648:	6123      	str	r3, [r4, #16]
 800e64a:	4616      	mov	r6, r2
 800e64c:	e7ba      	b.n	800e5c4 <_printf_i+0x150>
 800e64e:	680b      	ldr	r3, [r1, #0]
 800e650:	1d1a      	adds	r2, r3, #4
 800e652:	600a      	str	r2, [r1, #0]
 800e654:	681e      	ldr	r6, [r3, #0]
 800e656:	6862      	ldr	r2, [r4, #4]
 800e658:	2100      	movs	r1, #0
 800e65a:	4630      	mov	r0, r6
 800e65c:	f7f1 fe40 	bl	80002e0 <memchr>
 800e660:	b108      	cbz	r0, 800e666 <_printf_i+0x1f2>
 800e662:	1b80      	subs	r0, r0, r6
 800e664:	6060      	str	r0, [r4, #4]
 800e666:	6863      	ldr	r3, [r4, #4]
 800e668:	6123      	str	r3, [r4, #16]
 800e66a:	2300      	movs	r3, #0
 800e66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e670:	e7a8      	b.n	800e5c4 <_printf_i+0x150>
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	4632      	mov	r2, r6
 800e676:	4649      	mov	r1, r9
 800e678:	4640      	mov	r0, r8
 800e67a:	47d0      	blx	sl
 800e67c:	3001      	adds	r0, #1
 800e67e:	d0ab      	beq.n	800e5d8 <_printf_i+0x164>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	079b      	lsls	r3, r3, #30
 800e684:	d413      	bmi.n	800e6ae <_printf_i+0x23a>
 800e686:	68e0      	ldr	r0, [r4, #12]
 800e688:	9b03      	ldr	r3, [sp, #12]
 800e68a:	4298      	cmp	r0, r3
 800e68c:	bfb8      	it	lt
 800e68e:	4618      	movlt	r0, r3
 800e690:	e7a4      	b.n	800e5dc <_printf_i+0x168>
 800e692:	2301      	movs	r3, #1
 800e694:	4632      	mov	r2, r6
 800e696:	4649      	mov	r1, r9
 800e698:	4640      	mov	r0, r8
 800e69a:	47d0      	blx	sl
 800e69c:	3001      	adds	r0, #1
 800e69e:	d09b      	beq.n	800e5d8 <_printf_i+0x164>
 800e6a0:	3501      	adds	r5, #1
 800e6a2:	68e3      	ldr	r3, [r4, #12]
 800e6a4:	9903      	ldr	r1, [sp, #12]
 800e6a6:	1a5b      	subs	r3, r3, r1
 800e6a8:	42ab      	cmp	r3, r5
 800e6aa:	dcf2      	bgt.n	800e692 <_printf_i+0x21e>
 800e6ac:	e7eb      	b.n	800e686 <_printf_i+0x212>
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	f104 0619 	add.w	r6, r4, #25
 800e6b4:	e7f5      	b.n	800e6a2 <_printf_i+0x22e>
 800e6b6:	bf00      	nop
 800e6b8:	0800ea79 	.word	0x0800ea79
 800e6bc:	0800ea8a 	.word	0x0800ea8a

0800e6c0 <memcpy>:
 800e6c0:	440a      	add	r2, r1
 800e6c2:	4291      	cmp	r1, r2
 800e6c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6c8:	d100      	bne.n	800e6cc <memcpy+0xc>
 800e6ca:	4770      	bx	lr
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6d6:	4291      	cmp	r1, r2
 800e6d8:	d1f9      	bne.n	800e6ce <memcpy+0xe>
 800e6da:	bd10      	pop	{r4, pc}

0800e6dc <memmove>:
 800e6dc:	4288      	cmp	r0, r1
 800e6de:	b510      	push	{r4, lr}
 800e6e0:	eb01 0402 	add.w	r4, r1, r2
 800e6e4:	d902      	bls.n	800e6ec <memmove+0x10>
 800e6e6:	4284      	cmp	r4, r0
 800e6e8:	4623      	mov	r3, r4
 800e6ea:	d807      	bhi.n	800e6fc <memmove+0x20>
 800e6ec:	1e43      	subs	r3, r0, #1
 800e6ee:	42a1      	cmp	r1, r4
 800e6f0:	d008      	beq.n	800e704 <memmove+0x28>
 800e6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6fa:	e7f8      	b.n	800e6ee <memmove+0x12>
 800e6fc:	4402      	add	r2, r0
 800e6fe:	4601      	mov	r1, r0
 800e700:	428a      	cmp	r2, r1
 800e702:	d100      	bne.n	800e706 <memmove+0x2a>
 800e704:	bd10      	pop	{r4, pc}
 800e706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e70e:	e7f7      	b.n	800e700 <memmove+0x24>

0800e710 <_free_r>:
 800e710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e712:	2900      	cmp	r1, #0
 800e714:	d048      	beq.n	800e7a8 <_free_r+0x98>
 800e716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e71a:	9001      	str	r0, [sp, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f1a1 0404 	sub.w	r4, r1, #4
 800e722:	bfb8      	it	lt
 800e724:	18e4      	addlt	r4, r4, r3
 800e726:	f000 f8d3 	bl	800e8d0 <__malloc_lock>
 800e72a:	4a20      	ldr	r2, [pc, #128]	; (800e7ac <_free_r+0x9c>)
 800e72c:	9801      	ldr	r0, [sp, #4]
 800e72e:	6813      	ldr	r3, [r2, #0]
 800e730:	4615      	mov	r5, r2
 800e732:	b933      	cbnz	r3, 800e742 <_free_r+0x32>
 800e734:	6063      	str	r3, [r4, #4]
 800e736:	6014      	str	r4, [r2, #0]
 800e738:	b003      	add	sp, #12
 800e73a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e73e:	f000 b8cd 	b.w	800e8dc <__malloc_unlock>
 800e742:	42a3      	cmp	r3, r4
 800e744:	d90b      	bls.n	800e75e <_free_r+0x4e>
 800e746:	6821      	ldr	r1, [r4, #0]
 800e748:	1862      	adds	r2, r4, r1
 800e74a:	4293      	cmp	r3, r2
 800e74c:	bf04      	itt	eq
 800e74e:	681a      	ldreq	r2, [r3, #0]
 800e750:	685b      	ldreq	r3, [r3, #4]
 800e752:	6063      	str	r3, [r4, #4]
 800e754:	bf04      	itt	eq
 800e756:	1852      	addeq	r2, r2, r1
 800e758:	6022      	streq	r2, [r4, #0]
 800e75a:	602c      	str	r4, [r5, #0]
 800e75c:	e7ec      	b.n	800e738 <_free_r+0x28>
 800e75e:	461a      	mov	r2, r3
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	b10b      	cbz	r3, 800e768 <_free_r+0x58>
 800e764:	42a3      	cmp	r3, r4
 800e766:	d9fa      	bls.n	800e75e <_free_r+0x4e>
 800e768:	6811      	ldr	r1, [r2, #0]
 800e76a:	1855      	adds	r5, r2, r1
 800e76c:	42a5      	cmp	r5, r4
 800e76e:	d10b      	bne.n	800e788 <_free_r+0x78>
 800e770:	6824      	ldr	r4, [r4, #0]
 800e772:	4421      	add	r1, r4
 800e774:	1854      	adds	r4, r2, r1
 800e776:	42a3      	cmp	r3, r4
 800e778:	6011      	str	r1, [r2, #0]
 800e77a:	d1dd      	bne.n	800e738 <_free_r+0x28>
 800e77c:	681c      	ldr	r4, [r3, #0]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	6053      	str	r3, [r2, #4]
 800e782:	4421      	add	r1, r4
 800e784:	6011      	str	r1, [r2, #0]
 800e786:	e7d7      	b.n	800e738 <_free_r+0x28>
 800e788:	d902      	bls.n	800e790 <_free_r+0x80>
 800e78a:	230c      	movs	r3, #12
 800e78c:	6003      	str	r3, [r0, #0]
 800e78e:	e7d3      	b.n	800e738 <_free_r+0x28>
 800e790:	6825      	ldr	r5, [r4, #0]
 800e792:	1961      	adds	r1, r4, r5
 800e794:	428b      	cmp	r3, r1
 800e796:	bf04      	itt	eq
 800e798:	6819      	ldreq	r1, [r3, #0]
 800e79a:	685b      	ldreq	r3, [r3, #4]
 800e79c:	6063      	str	r3, [r4, #4]
 800e79e:	bf04      	itt	eq
 800e7a0:	1949      	addeq	r1, r1, r5
 800e7a2:	6021      	streq	r1, [r4, #0]
 800e7a4:	6054      	str	r4, [r2, #4]
 800e7a6:	e7c7      	b.n	800e738 <_free_r+0x28>
 800e7a8:	b003      	add	sp, #12
 800e7aa:	bd30      	pop	{r4, r5, pc}
 800e7ac:	2400f420 	.word	0x2400f420

0800e7b0 <_malloc_r>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	1ccd      	adds	r5, r1, #3
 800e7b4:	f025 0503 	bic.w	r5, r5, #3
 800e7b8:	3508      	adds	r5, #8
 800e7ba:	2d0c      	cmp	r5, #12
 800e7bc:	bf38      	it	cc
 800e7be:	250c      	movcc	r5, #12
 800e7c0:	2d00      	cmp	r5, #0
 800e7c2:	4606      	mov	r6, r0
 800e7c4:	db01      	blt.n	800e7ca <_malloc_r+0x1a>
 800e7c6:	42a9      	cmp	r1, r5
 800e7c8:	d903      	bls.n	800e7d2 <_malloc_r+0x22>
 800e7ca:	230c      	movs	r3, #12
 800e7cc:	6033      	str	r3, [r6, #0]
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d2:	f000 f87d 	bl	800e8d0 <__malloc_lock>
 800e7d6:	4921      	ldr	r1, [pc, #132]	; (800e85c <_malloc_r+0xac>)
 800e7d8:	680a      	ldr	r2, [r1, #0]
 800e7da:	4614      	mov	r4, r2
 800e7dc:	b99c      	cbnz	r4, 800e806 <_malloc_r+0x56>
 800e7de:	4f20      	ldr	r7, [pc, #128]	; (800e860 <_malloc_r+0xb0>)
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	b923      	cbnz	r3, 800e7ee <_malloc_r+0x3e>
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f000 f862 	bl	800e8b0 <_sbrk_r>
 800e7ec:	6038      	str	r0, [r7, #0]
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f000 f85d 	bl	800e8b0 <_sbrk_r>
 800e7f6:	1c43      	adds	r3, r0, #1
 800e7f8:	d123      	bne.n	800e842 <_malloc_r+0x92>
 800e7fa:	230c      	movs	r3, #12
 800e7fc:	6033      	str	r3, [r6, #0]
 800e7fe:	4630      	mov	r0, r6
 800e800:	f000 f86c 	bl	800e8dc <__malloc_unlock>
 800e804:	e7e3      	b.n	800e7ce <_malloc_r+0x1e>
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	1b5b      	subs	r3, r3, r5
 800e80a:	d417      	bmi.n	800e83c <_malloc_r+0x8c>
 800e80c:	2b0b      	cmp	r3, #11
 800e80e:	d903      	bls.n	800e818 <_malloc_r+0x68>
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	441c      	add	r4, r3
 800e814:	6025      	str	r5, [r4, #0]
 800e816:	e004      	b.n	800e822 <_malloc_r+0x72>
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	42a2      	cmp	r2, r4
 800e81c:	bf0c      	ite	eq
 800e81e:	600b      	streq	r3, [r1, #0]
 800e820:	6053      	strne	r3, [r2, #4]
 800e822:	4630      	mov	r0, r6
 800e824:	f000 f85a 	bl	800e8dc <__malloc_unlock>
 800e828:	f104 000b 	add.w	r0, r4, #11
 800e82c:	1d23      	adds	r3, r4, #4
 800e82e:	f020 0007 	bic.w	r0, r0, #7
 800e832:	1ac2      	subs	r2, r0, r3
 800e834:	d0cc      	beq.n	800e7d0 <_malloc_r+0x20>
 800e836:	1a1b      	subs	r3, r3, r0
 800e838:	50a3      	str	r3, [r4, r2]
 800e83a:	e7c9      	b.n	800e7d0 <_malloc_r+0x20>
 800e83c:	4622      	mov	r2, r4
 800e83e:	6864      	ldr	r4, [r4, #4]
 800e840:	e7cc      	b.n	800e7dc <_malloc_r+0x2c>
 800e842:	1cc4      	adds	r4, r0, #3
 800e844:	f024 0403 	bic.w	r4, r4, #3
 800e848:	42a0      	cmp	r0, r4
 800e84a:	d0e3      	beq.n	800e814 <_malloc_r+0x64>
 800e84c:	1a21      	subs	r1, r4, r0
 800e84e:	4630      	mov	r0, r6
 800e850:	f000 f82e 	bl	800e8b0 <_sbrk_r>
 800e854:	3001      	adds	r0, #1
 800e856:	d1dd      	bne.n	800e814 <_malloc_r+0x64>
 800e858:	e7cf      	b.n	800e7fa <_malloc_r+0x4a>
 800e85a:	bf00      	nop
 800e85c:	2400f420 	.word	0x2400f420
 800e860:	2400f424 	.word	0x2400f424

0800e864 <_realloc_r>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	4607      	mov	r7, r0
 800e868:	4614      	mov	r4, r2
 800e86a:	460e      	mov	r6, r1
 800e86c:	b921      	cbnz	r1, 800e878 <_realloc_r+0x14>
 800e86e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e872:	4611      	mov	r1, r2
 800e874:	f7ff bf9c 	b.w	800e7b0 <_malloc_r>
 800e878:	b922      	cbnz	r2, 800e884 <_realloc_r+0x20>
 800e87a:	f7ff ff49 	bl	800e710 <_free_r>
 800e87e:	4625      	mov	r5, r4
 800e880:	4628      	mov	r0, r5
 800e882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e884:	f000 f830 	bl	800e8e8 <_malloc_usable_size_r>
 800e888:	42a0      	cmp	r0, r4
 800e88a:	d20f      	bcs.n	800e8ac <_realloc_r+0x48>
 800e88c:	4621      	mov	r1, r4
 800e88e:	4638      	mov	r0, r7
 800e890:	f7ff ff8e 	bl	800e7b0 <_malloc_r>
 800e894:	4605      	mov	r5, r0
 800e896:	2800      	cmp	r0, #0
 800e898:	d0f2      	beq.n	800e880 <_realloc_r+0x1c>
 800e89a:	4631      	mov	r1, r6
 800e89c:	4622      	mov	r2, r4
 800e89e:	f7ff ff0f 	bl	800e6c0 <memcpy>
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	f7ff ff33 	bl	800e710 <_free_r>
 800e8aa:	e7e9      	b.n	800e880 <_realloc_r+0x1c>
 800e8ac:	4635      	mov	r5, r6
 800e8ae:	e7e7      	b.n	800e880 <_realloc_r+0x1c>

0800e8b0 <_sbrk_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4d06      	ldr	r5, [pc, #24]	; (800e8cc <_sbrk_r+0x1c>)
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	4608      	mov	r0, r1
 800e8ba:	602b      	str	r3, [r5, #0]
 800e8bc:	f7f8 fcfc 	bl	80072b8 <_sbrk>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d102      	bne.n	800e8ca <_sbrk_r+0x1a>
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	b103      	cbz	r3, 800e8ca <_sbrk_r+0x1a>
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	bd38      	pop	{r3, r4, r5, pc}
 800e8cc:	24014838 	.word	0x24014838

0800e8d0 <__malloc_lock>:
 800e8d0:	4801      	ldr	r0, [pc, #4]	; (800e8d8 <__malloc_lock+0x8>)
 800e8d2:	f000 b811 	b.w	800e8f8 <__retarget_lock_acquire_recursive>
 800e8d6:	bf00      	nop
 800e8d8:	24014840 	.word	0x24014840

0800e8dc <__malloc_unlock>:
 800e8dc:	4801      	ldr	r0, [pc, #4]	; (800e8e4 <__malloc_unlock+0x8>)
 800e8de:	f000 b80c 	b.w	800e8fa <__retarget_lock_release_recursive>
 800e8e2:	bf00      	nop
 800e8e4:	24014840 	.word	0x24014840

0800e8e8 <_malloc_usable_size_r>:
 800e8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ec:	1f18      	subs	r0, r3, #4
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	bfbc      	itt	lt
 800e8f2:	580b      	ldrlt	r3, [r1, r0]
 800e8f4:	18c0      	addlt	r0, r0, r3
 800e8f6:	4770      	bx	lr

0800e8f8 <__retarget_lock_acquire_recursive>:
 800e8f8:	4770      	bx	lr

0800e8fa <__retarget_lock_release_recursive>:
 800e8fa:	4770      	bx	lr

0800e8fc <_init>:
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	bf00      	nop
 800e900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e902:	bc08      	pop	{r3}
 800e904:	469e      	mov	lr, r3
 800e906:	4770      	bx	lr

0800e908 <_fini>:
 800e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90a:	bf00      	nop
 800e90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90e:	bc08      	pop	{r3}
 800e910:	469e      	mov	lr, r3
 800e912:	4770      	bx	lr
